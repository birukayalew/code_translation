   Compiling proc-macro2 v1.0.95
   Compiling thiserror v2.0.12
   Compiling rustix v1.0.1
   Compiling libc v0.2.172
   Compiling nix v0.30.1
warning: `clippy::restriction` is not meant to be enabled as a group
  |
  = note: because of the command line `--warn clippy::restriction`
  = help: enable the restriction lints you need individually
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#blanket_clippy_restriction_lints
  = note: `-W clippy::blanket-clippy-restriction-lints` implied by `-W clippy::all`
  = help: to override `-W clippy::all` add `#[allow(clippy::blanket_clippy_restriction_lints)]`

warning: package `uucore` is missing `package.readme` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata
  = note: `-W clippy::cargo-common-metadata` implied by `-W clippy::cargo`
  = help: to override `-W clippy::cargo` add `#[allow(clippy::cargo_common_metadata)]`

warning: package `uucore_procs` is missing `package.readme` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `uucore_procs` is missing `package.categories` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `uuhelp_parser` is missing `package.readme` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `uuhelp_parser` is missing `package.keywords` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `uuhelp_parser` is missing `package.categories` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `uu_stdbuf_libstdbuf` is missing `package.readme` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `uutests` is missing `package.readme` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: missing documentation for a constant
  --> src/uuhelp_parser/src/lib.rs:27:1
   |
27 | const MARKDOWN_CODE_FENCES: &str = "```";
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items
   = note: `-W clippy::missing-docs-in-private-items` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_docs_in_private_items)]`

warning: this function could have a `#[must_use]` attribute
  --> src/uuhelp_parser/src/lib.rs:31:1
   |
31 | pub fn parse_about(content: &str) -> String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn parse_about(content: &str) -> String`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
   = note: `-W clippy::must-use-candidate` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::must_use_candidate)]`

warning: missing `#[inline]` for a function
  --> src/uuhelp_parser/src/lib.rs:31:1
   |
31 | / pub fn parse_about(content: &str) -> String {
32 | |     content
33 | |         .lines()
34 | |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
...  |
42 | |         .to_string()
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items
   = note: `-W clippy::missing-inline-in-public-items` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_inline_in_public_items)]`

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:32:5
   |
32 | /     content
33 | |         .lines()
34 | |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
35 | |         .skip(1)
...  |
41 | |         .trim()
42 | |         .to_string()
   | |____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
   = note: `-W clippy::implicit-return` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::implicit_return)]`
help: add `return` as shown
   |
32 |     return content
   |     ++++++

warning: `to_string()` called on a `&str`
  --> src/uuhelp_parser/src/lib.rs:32:5
   |
32 | /     content
33 | |         .lines()
34 | |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
35 | |         .skip(1)
...  |
41 | |         .trim()
42 | |         .to_string()
   | |____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string
   = note: `-W clippy::str-to-string` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::str_to_string)]`
help: try
   |
32 ~     content
33 +         .lines()
34 +         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
35 +         .skip(1)
36 +         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
37 +         .skip(1)
38 +         .take_while(|l| !l.starts_with('#'))
39 +         .collect::<Vec<_>>()
40 +         .join("\n")
41 +         .trim().to_owned()
   |

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:34:25
   |
34 |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
34 |         .skip_while(|l| return !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:34:22
   |
34 |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                      ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars
   = note: `-W clippy::min-ident-chars` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::min_ident_chars)]`

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:36:25
   |
36 |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
36 |         .skip_while(|l| return !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:36:22
   |
36 |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                      ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:38:25
   |
38 |         .take_while(|l| !l.starts_with('#'))
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
38 |         .take_while(|l| return !l.starts_with('#'))
   |                         ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:38:22
   |
38 |         .take_while(|l| !l.starts_with('#'))
   |                      ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this function could have a `#[must_use]` attribute
  --> src/uuhelp_parser/src/lib.rs:50:1
   |
50 | pub fn parse_usage(content: &str) -> String {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn parse_usage(content: &str) -> String`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
  --> src/uuhelp_parser/src/lib.rs:50:1
   |
50 | / pub fn parse_usage(content: &str) -> String {
51 | |     content
52 | |         .lines()
53 | |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
...  |
67 | |         .to_string()
68 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:51:5
   |
51 | /     content
52 | |         .lines()
53 | |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
54 | |         .skip(1)
...  |
66 | |         .trim()
67 | |         .to_string()
   | |____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
51 |     return content
   |     ++++++

warning: `to_string()` called on a `&str`
  --> src/uuhelp_parser/src/lib.rs:51:5
   |
51 | /     content
52 | |         .lines()
53 | |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
54 | |         .skip(1)
...  |
66 | |         .trim()
67 | |         .to_string()
   | |____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string
help: try
   |
51 ~     content
52 +         .lines()
53 +         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
54 +         .skip(1)
55 +         .take_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
56 +         .map(|l| {
57 +             // Replace the util name (assumed to be the first word) with "{}"
58 +             // to be replaced with the runtime value later.
59 +             if let Some((_util, args)) = l.split_once(' ') {
60 +                 format!("{{}} {args}\n")
61 +             } else {
62 +                 "{}\n".to_string()
63 +             }
64 +         })
65 +         .collect::<String>()
66 +         .trim().to_owned()
   |

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:53:25
   |
53 |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
53 |         .skip_while(|l| return !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:53:22
   |
53 |         .skip_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                      ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:55:25
   |
55 |         .take_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
55 |         .take_while(|l| return !l.starts_with(MARKDOWN_CODE_FENCES))
   |                         ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:55:22
   |
55 |         .take_while(|l| !l.starts_with(MARKDOWN_CODE_FENCES))
   |                      ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:60:17
   |
60 |                 format!("{{}} {args}\n")
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
60 |                 return format!("{{}} {args}\n")
   |                 ++++++

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:62:17
   |
62 |                 "{}\n".to_string()
   |                 ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
62 |                 return "{}\n".to_string()
   |                 ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:56:15
   |
56 |         .map(|l| {
   |               ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: `to_string()` called on a `&str`
  --> src/uuhelp_parser/src/lib.rs:62:17
   |
62 |                 "{}\n".to_string()
   |                 ^^^^^^^^^^^^^^^^^^ help: try: `"{}\n".to_owned()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string

warning: this function could have a `#[must_use]` attribute
  --> src/uuhelp_parser/src/lib.rs:73:1
   |
73 | pub fn parse_section(section: &str, content: &str) -> Option<String> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn parse_section(section: &str, content: &str) -> Option<String>`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uuhelp_parser/src/lib.rs:73:1
    |
73  | / pub fn parse_section(section: &str, content: &str) -> Option<String> {
74  | |     fn is_section_header(line: &str, section: &str) -> bool {
75  | |         line.strip_prefix("##")
76  | |             .is_some_and(|l| l.trim().to_lowercase() == section)
...   |
101 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uuhelp_parser/src/lib.rs:90:5
    |
90  | /     Some(
91  | |         content
92  | |             .lines()
93  | |             .skip_while(|&l| !is_section_header(l, section))
...   |
99  | |             .to_string(),
100 | |     )
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
90  |     return Some(
    |     ++++++

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:75:9
   |
75 | /         line.strip_prefix("##")
76 | |             .is_some_and(|l| l.trim().to_lowercase() == section)
   | |________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
75 |         return line.strip_prefix("##")
   |         ++++++

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:76:30
   |
76 |             .is_some_and(|l| l.trim().to_lowercase() == section)
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
76 |             .is_some_and(|l| return l.trim().to_lowercase() == section)
   |                              ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:76:27
   |
76 |             .is_some_and(|l| l.trim().to_lowercase() == section)
   |                           ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: `section` is shadowed
  --> src/uuhelp_parser/src/lib.rs:79:9
   |
79 |     let section = &section.to_lowercase();
   |         ^^^^^^^
   |
note: previous binding is here
  --> src/uuhelp_parser/src/lib.rs:73:22
   |
73 | pub fn parse_section(section: &str, content: &str) -> Option<String> {
   |                      ^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse
   = note: `-W clippy::shadow-reuse` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::shadow_reuse)]`

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:83:32
   |
83 |     if content.lines().all(|l| !is_section_header(l, section)) {
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
83 |     if content.lines().all(|l| return !is_section_header(l, section)) {
   |                                ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:83:29
   |
83 |     if content.lines().all(|l| !is_section_header(l, section)) {
   |                             ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: `to_string()` called on a `&str`
  --> src/uuhelp_parser/src/lib.rs:91:9
   |
91 | /         content
92 | |             .lines()
93 | |             .skip_while(|&l| !is_section_header(l, section))
94 | |             .skip(1)
...  |
98 | |             .trim()
99 | |             .to_string(),
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string
help: try
   |
91 ~         content
92 +             .lines()
93 +             .skip_while(|&l| !is_section_header(l, section))
94 +             .skip(1)
95 +             .take_while(|l| !l.starts_with(section_header_prefix))
96 +             .collect::<Vec<_>>()
97 +             .join("\n")
98 ~             .trim().to_owned(),
   |

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:93:30
   |
93 |             .skip_while(|&l| !is_section_header(l, section))
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
93 |             .skip_while(|&l| return !is_section_header(l, section))
   |                              ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:93:27
   |
93 |             .skip_while(|&l| !is_section_header(l, section))
   |                           ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
  --> src/uuhelp_parser/src/lib.rs:95:29
   |
95 |             .take_while(|l| !l.starts_with(section_header_prefix))
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
95 |             .take_while(|l| return !l.starts_with(section_header_prefix))
   |                             ++++++

warning: this ident consists of a single char
  --> src/uuhelp_parser/src/lib.rs:95:26
   |
95 |             .take_while(|l| !l.starts_with(section_header_prefix))
   |                          ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: `uuhelp_parser` (lib) generated 46 warnings (run `cargo clippy --fix --lib -p uuhelp_parser` to apply 22 suggestions)
   Compiling quote v1.0.40
    Checking terminal_size v0.4.2
   Compiling syn v2.0.99
   Compiling uucore_procs v0.1.0 (/mnt/c/Users/sebir/Documents/summer/Research/coreutils/src/uucore_procs)
    Checking clap_builder v4.5.39
    Checking clap v4.5.39
   Compiling displaydoc v0.2.5
   Compiling thiserror-impl v2.0.12
warning: importing trait that is only used anonymously
  --> src/uucore_procs/src/lib.rs:11:25
   |
11 | use std::{fs::File, io::Read, path::PathBuf};
   |                         ^^^^ help: use: `Read as _`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names
   = note: `-W clippy::unused-trait-names` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::unused_trait_names)]`

warning: missing `return` statement
  --> src/uucore_procs/src/lib.rs:49:5
   |
49 |     TokenStream::from(new)
   |     ^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
   = note: `-W clippy::implicit-return` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::implicit_return)]`
help: add `return` as shown
   |
49 |     return TokenStream::from(new)
   |     ++++++

warning: `stream` is shadowed
  --> src/uucore_procs/src/lib.rs:23:9
   |
23 |     let stream = proc_macro2::TokenStream::from(stream);
   |         ^^^^^^
   |
note: previous binding is here
  --> src/uucore_procs/src/lib.rs:22:33
   |
22 | pub fn main(_args: TokenStream, stream: TokenStream) -> TokenStream {
   |                                 ^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse
   = note: `-W clippy::shadow-reuse` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::shadow_reuse)]`

warning: missing `return` statement
  --> src/uucore_procs/src/lib.rs:62:5
   |
62 |     s.replace('`', "")
   |     ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
62 |     return s.replace('`', "")
   |     ++++++

warning: this ident consists of a single char
  --> src/uucore_procs/src/lib.rs:61:20
   |
61 | fn render_markdown(s: &str) -> String {
   |                    ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars
   = note: `-W clippy::min-ident-chars` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::min_ident_chars)]`

warning: docs for function which may panic missing `# Panics` section
  --> src/uucore_procs/src/lib.rs:70:1
   |
70 | pub fn help_about(input: TokenStream) -> TokenStream {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/uucore_procs/src/lib.rs:74:5
   |
74 | /     assert!(
75 | |         !text.is_empty(),
76 | |         "About text not found! Make sure the markdown format is correct"
77 | |     );
   | |_____^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
   = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`

warning: missing `return` statement
  --> src/uucore_procs/src/lib.rs:78:5
   |
78 |     TokenTree::Literal(Literal::string(&text)).into()
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
78 |     return TokenTree::Literal(Literal::string(&text)).into()
   |     ++++++

warning: `input` is shadowed
  --> src/uucore_procs/src/lib.rs:71:9
   |
71 |     let input: Vec<TokenTree> = input.into_iter().collect();
   |         ^^^^^
   |
note: previous binding is here
  --> src/uucore_procs/src/lib.rs:70:19
   |
70 | pub fn help_about(input: TokenStream) -> TokenStream {
   |                   ^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: redundant type annotation
  --> src/uucore_procs/src/lib.rs:73:5
   |
73 |     let text: String = uuhelp_parser::parse_about(&read_help(&filename));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_type_annotations
   = note: `-W clippy::redundant-type-annotations` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::redundant_type_annotations)]`

warning: docs for function which may panic missing `# Panics` section
  --> src/uucore_procs/src/lib.rs:88:1
   |
88 | pub fn help_usage(input: TokenStream) -> TokenStream {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/uucore_procs/src/lib.rs:92:5
   |
92 | /     assert!(
93 | |         !text.is_empty(),
94 | |         "Usage text not found! Make sure the markdown format is correct"
95 | |     );
   | |_____^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `return` statement
  --> src/uucore_procs/src/lib.rs:96:5
   |
96 |     TokenTree::Literal(Literal::string(&text)).into()
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
96 |     return TokenTree::Literal(Literal::string(&text)).into()
   |     ++++++

warning: `input` is shadowed
  --> src/uucore_procs/src/lib.rs:89:9
   |
89 |     let input: Vec<TokenTree> = input.into_iter().collect();
   |         ^^^^^
   |
note: previous binding is here
  --> src/uucore_procs/src/lib.rs:88:19
   |
88 | pub fn help_usage(input: TokenStream) -> TokenStream {
   |                   ^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: redundant type annotation
  --> src/uucore_procs/src/lib.rs:91:5
   |
91 |     let text: String = uuhelp_parser::parse_usage(&read_help(&filename));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_type_annotations

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore_procs/src/lib.rs:124:1
    |
124 | pub fn help_section(input: TokenStream) -> TokenStream {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uucore_procs/src/lib.rs:133:9
    |
133 | /         panic!(
134 | |             "The section '{section}' could not be found in the help file. Maybe it is spelled wrong?"
135 | |         )
    | |_________^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `return` statement
   --> src/uucore_procs/src/lib.rs:131:9
    |
131 |         TokenTree::Literal(Literal::string(&rendered)).into()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
131 |         return TokenTree::Literal(Literal::string(&rendered)).into()
    |         ++++++

warning: `input` is shadowed
   --> src/uucore_procs/src/lib.rs:125:9
    |
125 |     let input: Vec<TokenTree> = input.into_iter().collect();
    |         ^^^^^
    |
note: previous binding is here
   --> src/uucore_procs/src/lib.rs:124:21
    |
124 | pub fn help_section(input: TokenStream) -> TokenStream {
    |                     ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: use Option::map_or_else instead of an if let/else
   --> src/uucore_procs/src/lib.rs:129:5
    |
129 | /     if let Some(text) = uuhelp_parser::parse_section(&section, &read_help(&filename)) {
130 | |         let rendered = render_markdown(&text);
131 | |         TokenTree::Literal(Literal::string(&rendered)).into()
132 | |     } else {
...   |
136 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
    = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`
help: try
    |
129 ~     uuhelp_parser::parse_section(&section, &read_help(&filename)).map_or_else(|| panic!(
130 +             "The section '{section}' could not be found in the help file. Maybe it is spelled wrong?"
131 +         ), |text| {
132 +         let rendered = render_markdown(&text);
133 +         TokenTree::Literal(Literal::string(&rendered)).into()
134 +     })
    |

warning: `panic` should not be present in production code
   --> src/uucore_procs/src/lib.rs:133:9
    |
133 | /         panic!(
134 | |             "The section '{section}' could not be found in the help file. Maybe it is spelled wrong?"
135 | |         )
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#panic
    = note: `-W clippy::panic` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::panic)]`

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore_procs/src/lib.rs:143:1
    |
143 | fn get_argument(input: &[TokenTree], index: usize, name: &str) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uucore_procs/src/lib.rs:147:20
    |
147 |         Some(_) => panic!("Argument {index} should be a string literal."),
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `return` statement
   --> src/uucore_procs/src/lib.rs:151:5
    |
151 | /     string
152 | |         .parse::<String>()
153 | |         .unwrap()
154 | |         .strip_prefix('"')
...   |
157 | |         .unwrap()
158 | |         .to_string()
    | |____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
151 |     return string
    |     ++++++

warning: type of pattern does not match the expression type
   --> src/uucore_procs/src/lib.rs:146:9
    |
146 |         Some(TokenTree::Literal(lit)) => lit.to_string(),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch
    = note: `-W clippy::pattern-type-mismatch` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::pattern_type_mismatch)]`

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uucore_procs/src/lib.rs:145:35
    |
145 |     let string = match &input.get(index * 2) {
    |                                   ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects
    = note: `-W clippy::arithmetic-side-effects` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::arithmetic_side_effects)]`

warning: `panic` should not be present in production code
   --> src/uucore_procs/src/lib.rs:147:20
    |
147 |         Some(_) => panic!("Argument {index} should be a string literal."),
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#panic

warning: `panic` should not be present in production code
   --> src/uucore_procs/src/lib.rs:148:17
    |
148 |         None => panic!("Missing argument at index {index} for {name}"),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#panic

warning: `to_string()` called on a `&str`
   --> src/uucore_procs/src/lib.rs:151:5
    |
151 | /     string
152 | |         .parse::<String>()
153 | |         .unwrap()
154 | |         .strip_prefix('"')
...   |
157 | |         .unwrap()
158 | |         .to_string()
    | |____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string
    = note: `-W clippy::str-to-string` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::str_to_string)]`
help: try
    |
151 ~     string
152 +         .parse::<String>()
153 +         .unwrap()
154 +         .strip_prefix('"')
155 +         .unwrap()
156 +         .strip_suffix('"')
157 +         .unwrap().to_owned()
    |

warning: used `unwrap()` on an `Option` value
   --> src/uucore_procs/src/lib.rs:151:5
    |
151 | /     string
152 | |         .parse::<String>()
153 | |         .unwrap()
154 | |         .strip_prefix('"')
155 | |         .unwrap()
156 | |         .strip_suffix('"')
157 | |         .unwrap()
    | |_________________^
    |
    = note: if this value is `None`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used
    = note: `-W clippy::unwrap-used` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::unwrap_used)]`

warning: used `unwrap()` on an `Option` value
   --> src/uucore_procs/src/lib.rs:151:5
    |
151 | /     string
152 | |         .parse::<String>()
153 | |         .unwrap()
154 | |         .strip_prefix('"')
155 | |         .unwrap()
    | |_________________^
    |
    = note: if this value is `None`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore_procs/src/lib.rs:162:1
    |
162 | fn read_help(filename: &str) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uucore_procs/src/lib.rs:165:34
    |
165 |     let mut path = PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap());
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `return` statement
   --> src/uucore_procs/src/lib.rs:173:5
    |
173 |     content
    |     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
173 |     return content
    |     ++++++

warning: used `unwrap()` on a `Result` value
   --> src/uucore_procs/src/lib.rs:165:34
    |
165 |     let mut path = PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap());
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore_procs/src/lib.rs:165:34
    |
165 |     let mut path = PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap());
    |                                  ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths
    = note: `-W clippy::absolute-paths` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::absolute_paths)]`

warning: calls to `push` immediately after creation
   --> src/uucore_procs/src/lib.rs:165:5
    |
165 | /     let mut path = PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap());
166 | |     path.push(filename);
    | |________________________^ help: consider using the `.join()`: `let mut path = PathBuf::from(std::env::var("CARGO_MANIFEST_DIR").unwrap()).join(filename);`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pathbuf_init_then_push
    = note: `-W clippy::pathbuf-init-then-push` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::pathbuf_init_then_push)]`

warning: used `unwrap()` on a `Result` value
   --> src/uucore_procs/src/lib.rs:168:5
    |
168 | /     File::open(path)
169 | |         .unwrap()
170 | |         .read_to_string(&mut content)
171 | |         .unwrap();
    | |_________________^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: used `unwrap()` on a `Result` value
   --> src/uucore_procs/src/lib.rs:168:5
    |
168 | /     File::open(path)
169 | |         .unwrap()
    | |_________________^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: this function is only used once
   --> src/uucore_procs/src/lib.rs:61:1
    |
61  | / fn render_markdown(s: &str) -> String {
62  | |     s.replace('`', "")
63  | | }
    | |_^
    |
note: used here
   --> src/uucore_procs/src/lib.rs:130:24
    |
130 |         let rendered = render_markdown(&text);
    |                        ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn
    = note: `-W clippy::single-call-fn` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::single_call_fn)]`

warning: this function is only used once
  --> src/uucore_procs/src/lib.rs:22:1
   |
22 | / pub fn main(_args: TokenStream, stream: TokenStream) -> TokenStream {
23 | |     let stream = proc_macro2::TokenStream::from(stream);
24 | |
25 | |     let new = quote!(
...  |
49 | |     TokenStream::from(new)
50 | | }
   | |_^
   |
note: used here
  --> src/uucore_procs/src/lib.rs:22:1
   |
22 | / pub fn main(_args: TokenStream, stream: TokenStream) -> TokenStream {
23 | |     let stream = proc_macro2::TokenStream::from(stream);
24 | |
25 | |     let new = quote!(
...  |
49 | |     TokenStream::from(new)
50 | | }
   | |_^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
  --> src/uucore_procs/src/lib.rs:70:1
   |
70 | / pub fn help_about(input: TokenStream) -> TokenStream {
71 | |     let input: Vec<TokenTree> = input.into_iter().collect();
72 | |     let filename = get_argument(&input, 0, "filename");
73 | |     let text: String = uuhelp_parser::parse_about(&read_help(&filename));
...  |
78 | |     TokenTree::Literal(Literal::string(&text)).into()
79 | | }
   | |_^
   |
note: used here
  --> src/uucore_procs/src/lib.rs:70:1
   |
70 | / pub fn help_about(input: TokenStream) -> TokenStream {
71 | |     let input: Vec<TokenTree> = input.into_iter().collect();
72 | |     let filename = get_argument(&input, 0, "filename");
73 | |     let text: String = uuhelp_parser::parse_about(&read_help(&filename));
...  |
78 | |     TokenTree::Literal(Literal::string(&text)).into()
79 | | }
   | |_^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
  --> src/uucore_procs/src/lib.rs:88:1
   |
88 | / pub fn help_usage(input: TokenStream) -> TokenStream {
89 | |     let input: Vec<TokenTree> = input.into_iter().collect();
90 | |     let filename = get_argument(&input, 0, "filename");
91 | |     let text: String = uuhelp_parser::parse_usage(&read_help(&filename));
...  |
96 | |     TokenTree::Literal(Literal::string(&text)).into()
97 | | }
   | |_^
   |
note: used here
  --> src/uucore_procs/src/lib.rs:88:1
   |
88 | / pub fn help_usage(input: TokenStream) -> TokenStream {
89 | |     let input: Vec<TokenTree> = input.into_iter().collect();
90 | |     let filename = get_argument(&input, 0, "filename");
91 | |     let text: String = uuhelp_parser::parse_usage(&read_help(&filename));
...  |
96 | |     TokenTree::Literal(Literal::string(&text)).into()
97 | | }
   | |_^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore_procs/src/lib.rs:124:1
    |
124 | / pub fn help_section(input: TokenStream) -> TokenStream {
125 | |     let input: Vec<TokenTree> = input.into_iter().collect();
126 | |     let section = get_argument(&input, 0, "section");
127 | |     let filename = get_argument(&input, 1, "filename");
...   |
137 | | }
    | |_^
    |
note: used here
   --> src/uucore_procs/src/lib.rs:124:1
    |
124 | / pub fn help_section(input: TokenStream) -> TokenStream {
125 | |     let input: Vec<TokenTree> = input.into_iter().collect();
126 | |     let section = get_argument(&input, 0, "section");
127 | |     let filename = get_argument(&input, 1, "filename");
...   |
137 | | }
    | |_^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: `uucore_procs` (lib) generated 48 warnings (9 duplicates) (run `cargo clippy --fix --lib -p uucore_procs` to apply 9 suggestions)
    Checking tinystr v0.8.1
    Checking unic-langid-impl v0.9.6
    Checking unic-langid v0.9.6
    Checking intl_pluralrules v7.0.2
    Checking intl-memoizer v0.5.3
    Checking fluent-langneg v0.13.0
    Checking fluent-syntax v0.12.0
    Checking fluent-bundle v0.16.0
    Checking fluent v0.17.0
    Checking uucore v0.1.0 (/mnt/c/Users/sebir/Documents/summer/Research/coreutils/src/uucore)
warning: `mod.rs` files are required, found `src/uucore/src/lib/lib.rs`
 --> src/uucore/src/lib/lib.rs:1:1
  |
1 | // This file is part of the uutils coreutils package.
  | ^
  |
  = help: move `src/uucore/src/lib/lib.rs` to `src/uucore/src/lib/lib/mod.rs`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files
  = note: `-W clippy::self-named-module-files` implied by `-W clippy::restriction`
  = help: to override `-W clippy::restriction` add `#[allow(clippy::self_named_module_files)]`

warning: `mod.rs` files are required, found `src/uucore/src/lib/features.rs`
 --> src/uucore/src/lib/features.rs:1:1
  |
1 | // This file is part of the uutils coreutils package.
  | ^
  |
  = help: move `src/uucore/src/lib/features.rs` to `src/uucore/src/lib/features/mod.rs`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files

warning: `mod.rs` files are required, found `src/uucore/src/lib/mods.rs`
 --> src/uucore/src/lib/mods.rs:1:1
  |
1 | // This file is part of the uutils coreutils package.
  | ^
  |
  = help: move `src/uucore/src/lib/mods.rs` to `src/uucore/src/lib/mods/mod.rs`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files

warning: integer type suffix should be separated by an underscore
  --> src/uucore/src/lib/features/fast_inc.rs:34:21
   |
34 |     let mut carry = 0u8;
   |                     ^^^ help: add an underscore: `0_u8`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix
   = note: `-W clippy::unseparated-literal-suffix` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::unseparated_literal_suffix)]`

warning: single-character lifetime names are likely uninformative
   --> src/uucore/src/lib/features/fs.rs:293:6
    |
293 | impl<'a> From<Component<'a>> for OwningComponent {
    |      ^^
    |
    = help: use a more informative name
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_char_lifetime_names
    = note: `-W clippy::single-char-lifetime-names` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::single_char_lifetime_names)]`

warning: #[allow] attribute found
   --> src/uucore/src/lib/features/fs.rs:331:3
    |
331 | #[allow(clippy::cognitive_complexity)]
    |   ^^^^^ help: replace it with: `expect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes
    = note: `-W clippy::allow-attributes` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::allow_attributes)]`

warning: `allow` attribute without specifying a reason
   --> src/uucore/src/lib/features/fs.rs:331:1
    |
331 | #[allow(clippy::cognitive_complexity)]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try adding a reason at the end with `, reason = ".."`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason
    = note: `-W clippy::allow-attributes-without-reason` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::allow_attributes_without_reason)]`

warning: `if` expression with an `else if`, but without a final `else`
   --> src/uucore/src/lib/features/fs.rs:421:20
    |
421 |               } else if let Some(parent) = result.parent() {
    |  ____________________^
422 | |                 read_dir(parent)?;
423 | |             }
    | |_____________^
    |
    = help: add an `else` block here
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#else_if_without_else
    = note: `-W clippy::else-if-without-else` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::else_if_without_else)]`

warning: #[allow] attribute found
   --> src/uucore/src/lib/features/fs.rs:491:3
    |
491 | #[allow(clippy::if_not_else)]
    |   ^^^^^ help: replace it with: `expect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes

warning: `allow` attribute without specifying a reason
   --> src/uucore/src/lib/features/fs.rs:491:1
    |
491 | #[allow(clippy::if_not_else)]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try adding a reason at the end with `, reason = ".."`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason

warning: #[allow] attribute found
   --> src/uucore/src/lib/features/fs.rs:492:3
    |
492 | #[allow(clippy::cognitive_complexity)]
    |   ^^^^^ help: replace it with: `expect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes

warning: `allow` attribute without specifying a reason
   --> src/uucore/src/lib/features/fs.rs:492:1
    |
492 | #[allow(clippy::cognitive_complexity)]
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try adding a reason at the end with `, reason = ".."`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason

warning: using `pub use`
  --> src/uucore/src/lib/features/pipes.rs:17:1
   |
17 | pub use nix::{Error, Result};
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use
   = note: `-W clippy::pub-use` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::pub_use)]`

warning: using `pub use`
  --> src/uucore/src/lib/mods/display.rs:37:1
   |
37 | pub use os_display::{Quotable, Quoted};
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: #[allow] attribute found
   --> src/uucore/src/lib/mods/error.rs:297:7
    |
297 |     #[allow(clippy::new_ret_no_self)]
    |       ^^^^^ help: replace it with: `expect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes

warning: `allow` attribute without specifying a reason
   --> src/uucore/src/lib/mods/error.rs:297:5
    |
297 |     #[allow(clippy::new_ret_no_self)]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try adding a reason at the end with `, reason = ".."`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason

warning: #[allow] attribute found
   --> src/uucore/src/lib/mods/error.rs:331:7
    |
331 |     #[allow(clippy::new_ret_no_self)]
    |       ^^^^^ help: replace it with: `expect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes

warning: `allow` attribute without specifying a reason
   --> src/uucore/src/lib/mods/error.rs:331:5
    |
331 |     #[allow(clippy::new_ret_no_self)]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try adding a reason at the end with `, reason = ".."`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason

warning: #[allow] attribute found
   --> src/uucore/src/lib/mods/error.rs:392:7
    |
392 |     #[allow(clippy::new_ret_no_self)]
    |       ^^^^^ help: replace it with: `expect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes

warning: `allow` attribute without specifying a reason
   --> src/uucore/src/lib/mods/error.rs:392:5
    |
392 |     #[allow(clippy::new_ret_no_self)]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try adding a reason at the end with `, reason = ".."`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason

warning: #[allow] attribute found
   --> src/uucore/src/lib/mods/error.rs:653:7
    |
653 |     #[allow(clippy::new_ret_no_self)]
    |       ^^^^^ help: replace it with: `expect`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes

warning: `allow` attribute without specifying a reason
   --> src/uucore/src/lib/mods/error.rs:653:5
    |
653 |     #[allow(clippy::new_ret_no_self)]
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try adding a reason at the end with `, reason = ".."`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#allow_attributes_without_reason

warning: usage of ref pattern
  --> src/uucore/src/lib/mods/locale.rs:82:21
   |
82 |         if let Some(ref fallback) = self.fallback_bundle {
   |                     ^^^^^^^^^^^^
   |
   = help: consider using `&` for clarity instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ref_patterns
   = note: `-W clippy::ref-patterns` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::ref_patterns)]`

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:22:1
   |
22 | pub use uucore_procs::*;
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:25:1
   |
25 | pub use crate::mods::display;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:26:1
   |
26 | pub use crate::mods::error;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:28:1
   |
28 | pub use crate::mods::io;
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:29:1
   |
29 | pub use crate::mods::line_ending;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:30:1
   |
30 | pub use crate::mods::locale;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:31:1
   |
31 | pub use crate::mods::os;
   | ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:32:1
   |
32 | pub use crate::mods::panic;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:33:1
   |
33 | pub use crate::mods::posix;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:51:1
   |
51 | pub use crate::features::fast_inc;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:55:1
   |
55 | pub use crate::features::fs;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: using `pub use`
  --> src/uucore/src/lib/lib.rs:85:1
   |
85 | pub use crate::features::pipes;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: move the exported item to a public module instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_use

warning: multiple versions for dependency `thiserror`: 1.0.69, 2.0.12
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions
  = note: `-W clippy::multiple-crate-versions` implied by `-W clippy::cargo`
  = help: to override `-W clippy::cargo` add `#[allow(clippy::multiple_crate_versions)]`

warning: multiple versions for dependency `thiserror-impl`: 1.0.69, 2.0.12
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows-sys`: 0.48.0, 0.52.0, 0.59.0
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows-targets`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows_aarch64_gnullvm`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows_aarch64_msvc`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows_i686_gnu`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows_i686_msvc`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows_x86_64_gnu`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows_x86_64_gnullvm`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: multiple versions for dependency `windows_x86_64_msvc`: 0.48.5, 0.52.6
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#multiple_crate_versions

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/lib.rs:153:14
    |
153 | macro_rules! bin {
    |              ^^^
    |
note: should be placed before `disable_rust_signal_handlers`
   --> src/uucore/src/lib/lib.rs:132:8
    |
132 | pub fn disable_rust_signal_handlers() -> Result<(), Errno> {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering
    = note: `-W clippy::arbitrary-source-item-ordering` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::arbitrary_source_item_ordering)]`

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/lib.rs:216:8
    |
216 | static ARGV: LazyLock<Vec<OsString>> = LazyLock::new(|| wild::args_os().collect());
    |        ^^^^
    |
note: should be placed before `set_utility_is_second_arg`
   --> src/uucore/src/lib/lib.rs:210:8
    |
210 | pub fn set_utility_is_second_arg() {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/lib.rs:231:8
    |
231 | static EXECUTION_PHRASE: LazyLock<String> = LazyLock::new(|| {
    |        ^^^^^^^^^^^^^^^^
    |
note: should be placed before `util_name`
   --> src/uucore/src/lib/lib.rs:227:8
    |
227 | pub fn util_name() -> &'static str {
    |        ^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/lib.rs:252:11
    |
252 | pub trait Args: Iterator<Item = OsString> + Sized {
    |           ^^^^
    |
note: should be placed before `execution_phrase`
   --> src/uucore/src/lib/lib.rs:244:8
    |
244 | pub fn execution_phrase() -> &'static str {
    |        ^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/lib.rs:400:14
    |
400 | macro_rules! prompt_yes(
    |              ^^^^^^^^^^
    |
note: should be placed before `read_os_string_lines`
   --> src/uucore/src/lib/lib.rs:376:8
    |
376 | pub fn read_os_string_lines<R: std::io::Read>(
    |        ^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for a module
  --> src/uucore/src/lib/lib.rs:18:1
   |
18 | mod features; // feature-gated code modules
   | ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items
   = note: `-W clippy::missing-docs-in-private-items` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_docs_in_private_items)]`

warning: consider adding a `;` to the last statement for consistent formatting
  --> src/uucore/src/lib/features/fast_inc.rs:65:5
   |
65 |     fast_inc_one(val, start, pos)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `fast_inc_one(val, start, pos);`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
   = note: `-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::semicolon_if_nothing_returned)]`

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uucore/src/lib/features/fast_inc.rs:43:9
   |
43 |         pos -= 1;
   |         ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects
   = note: `-W clippy::arithmetic-side-effects` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::arithmetic_side_effects)]`

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uucore/src/lib/features/fast_inc.rs:45:27
   |
45 |         let mut new_val = inc[inc_pos] + carry;
   |                           ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: indexing may panic
  --> src/uucore/src/lib/features/fast_inc.rs:45:27
   |
45 |         let mut new_val = inc[inc_pos] + carry;
   |                           ^^^^^^^^^^^^
   |
   = help: consider using `.get(n)` or `.get_mut(n)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing
   = note: `-W clippy::indexing-slicing` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::indexing_slicing)]`

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uucore/src/lib/features/fast_inc.rs:48:13
   |
48 |             new_val += val[pos] - b'0';
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: indexing may panic
  --> src/uucore/src/lib/features/fast_inc.rs:48:24
   |
48 |             new_val += val[pos] - b'0';
   |                        ^^^^^^^^
   |
   = help: consider using `.get(n)` or `.get_mut(n)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uucore/src/lib/features/fast_inc.rs:52:13
   |
52 |             new_val -= 10;
   |             ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: indexing may panic
  --> src/uucore/src/lib/features/fast_inc.rs:56:9
   |
56 |         val[pos] = new_val;
   |         ^^^^^^^^
   |
   = help: consider using `.get(n)` or `.get_mut(n)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: item name starts with its containing module's name
  --> src/uucore/src/lib/features/fast_inc.rs:91:8
   |
91 | pub fn fast_inc_one(val: &mut [u8], start: &mut usize, end: usize) {
   |        ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::module_name_repetitions)]`

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uucore/src/lib/features/fast_inc.rs:95:9
   |
95 |         pos -= 1;
   |         ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: indexing may panic
  --> src/uucore/src/lib/features/fast_inc.rs:97:12
   |
97 |         if val[pos] == b'9' {
   |            ^^^^^^^^
   |
   = help: consider using `.get(n)` or `.get_mut(n)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: indexing may panic
  --> src/uucore/src/lib/features/fast_inc.rs:99:13
   |
99 |             val[pos] = b'0';
   |             ^^^^^^^^
   |
   = help: consider using `.get(n)` or `.get_mut(n)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uucore/src/lib/features/fast_inc.rs:102:13
    |
102 |             val[pos] += 1;
    |             ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: indexing may panic
   --> src/uucore/src/lib/features/fast_inc.rs:102:13
    |
102 |             val[pos] += 1;
    |             ^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: indexing may panic
   --> src/uucore/src/lib/features/fast_inc.rs:113:5
    |
113 |     val[*start - 1] = b'1';
    |     ^^^^^^^^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uucore/src/lib/features/fast_inc.rs:113:9
    |
113 |     val[*start - 1] = b'1';
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uucore/src/lib/features/fast_inc.rs:114:5
    |
114 |     *start -= 1;
    |     ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/features/fs.rs:273:6
    |
273 | enum OwningComponent {
    |      ^^^^^^^^^^^^^^^
    |
note: should be placed before `resolve_symlink`
   --> src/uucore/src/lib/features/fs.rs:264:4
    |
264 | fn resolve_symlink<P: AsRef<Path>>(path: P) -> IOResult<Option<PathBuf>> {
    |    ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/features/fs.rs:737:9
    |
737 | pub mod sane_blksize {
    |         ^^^^^^^^^^^^
    |
note: should be placed before `is_stdin_directory`
   --> src/uucore/src/lib/features/fs.rs:718:8
    |
718 | pub fn is_stdin_directory(stdin: &Stdin) -> bool {
    |        ^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: used import from `std` instead of `alloc`
  --> src/uucore/src/lib/features/fs.rs:17:5
   |
17 | use std::collections::VecDeque;
   |     ^^^ help: consider importing the item from `alloc`: `alloc`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc
   = note: `-W clippy::std-instead-of-alloc` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::std_instead_of_alloc)]`

warning: used import from `std` instead of `alloc`
  --> src/uucore/src/lib/features/fs.rs:20:5
   |
20 | use std::ffi::CString;
   |     ^^^ help: consider importing the item from `alloc`: `alloc`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/features/fs.rs:24:5
   |
24 | use std::hash::Hash;
   |     ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core
   = note: `-W clippy::std-instead-of-core` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::std_instead_of_core)]`

warning: importing trait that is only used anonymously
  --> src/uucore/src/lib/features/fs.rs:30:24
   |
30 | use std::os::unix::fs::MetadataExt;
   |                        ^^^^^^^^^^^ help: use: `MetadataExt as _`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names
   = note: `-W clippy::unused-trait-names` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::unused_trait_names)]`

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/features/fs.rs:48:18
   |
48 |     #[cfg(unix)] nix::sys::stat::FileStat,
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths
   = note: `-W clippy::absolute-paths` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::absolute_paths)]`

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uucore/src/lib/features/fs.rs:98:12
   |
98 |     pub fn file_size(&self) -> u64 {
   |            ^^^^^^^^^
   |
note: should be placed before `from_path`
  --> src/uucore/src/lib/features/fs.rs:71:12
   |
71 |     pub fn from_path(path: impl AsRef<Path>, dereference: bool) -> IOResult<Self> {
   |            ^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uucore/src/lib/features/fs.rs:158:12
    |
158 |     pub fn inode(&self) -> u64 {
    |            ^^^^^
    |
note: should be placed before `number_of_links`
   --> src/uucore/src/lib/features/fs.rs:115:12
    |
115 |     pub fn number_of_links(&self) -> u64 {
    |            ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/features/fs.rs:55:5
   |
55 |     pub fn from_file(file: &impl AsFd) -> IOResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
   = note: `-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_errors_doc)]`

warning: `impl Trait` used as a function parameter
  --> src/uucore/src/lib/features/fs.rs:55:29
   |
55 |     pub fn from_file(file: &impl AsFd) -> IOResult<Self> {
   |                             ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
   = note: `-W clippy::impl-trait-in-params` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::impl_trait_in_params)]`
help: add a type parameter
   |
55 |     pub fn from_file<{ /* Generic name */ }: AsFd>(file: &impl AsFd) -> IOResult<Self> {
   |                     ++++++++++++++++++++++++++++++

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/features/fs.rs:55:5
   |
55 | /     pub fn from_file(file: &impl AsFd) -> IOResult<Self> {
56 | |         let stat = nix::sys::stat::fstat(file)?;
57 | |         Ok(Self(stat))
58 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items
   = note: `-W clippy::missing-inline-in-public-items` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_inline_in_public_items)]`

warning: missing `return` statement
  --> src/uucore/src/lib/features/fs.rs:57:9
   |
57 |         Ok(Self(stat))
   |         ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
   = note: `-W clippy::implicit-return` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::implicit_return)]`
help: add `return` as shown
   |
57 |         return Ok(Self(stat))
   |         ++++++

warning: question mark operator was used
  --> src/uucore/src/lib/features/fs.rs:56:20
   |
56 |         let stat = nix::sys::stat::fstat(file)?;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used
   = note: `-W clippy::question-mark-used` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::question_mark_used)]`

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/features/fs.rs:56:20
   |
56 |         let stat = nix::sys::stat::fstat(file)?;
   |                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/features/fs.rs:71:5
   |
71 |     pub fn from_path(path: impl AsRef<Path>, dereference: bool) -> IOResult<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: `impl Trait` used as a function parameter
  --> src/uucore/src/lib/features/fs.rs:71:28
   |
71 |     pub fn from_path(path: impl AsRef<Path>, dereference: bool) -> IOResult<Self> {
   |                            ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
   |
71 |     pub fn from_path<{ /* Generic name */ }: AsRef<Path>>(path: impl AsRef<Path>, dereference: bool) -> IOResult<Self> {
   |                     +++++++++++++++++++++++++++++++++++++

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/features/fs.rs:71:5
   |
71 | /     pub fn from_path(path: impl AsRef<Path>, dereference: bool) -> IOResult<Self> {
72 | |         #[cfg(unix)]
73 | |         {
74 | |             let stat = if dereference {
...  |
96 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/features/fs.rs:79:13
   |
79 |             Ok(Self(stat?))
   |             ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
79 |             return Ok(Self(stat?))
   |             ++++++

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/features/fs.rs:75:17
   |
75 |                 nix::sys::stat::stat(path.as_ref())
   |                 ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/features/fs.rs:77:17
   |
77 |                 nix::sys::stat::lstat(path.as_ref())
   |                 ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: question mark operator was used
  --> src/uucore/src/lib/features/fs.rs:79:21
   |
79 |             Ok(Self(stat?))
   |                     ^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore/src/lib/features/fs.rs:98:5
    |
98  |     pub fn file_size(&self) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uucore/src/lib/features/fs.rs:101:13
    |
101 |             assert!(self.0.st_size >= 0, "File size is negative");
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
    = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`

warning: this method could have a `#[must_use]` attribute
  --> src/uucore/src/lib/features/fs.rs:98:5
   |
98 |     pub fn file_size(&self) -> u64 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn file_size(&self) -> u64`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
   = note: `-W clippy::must-use-candidate` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::must_use_candidate)]`

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/features/fs.rs:98:5
    |
98  | /     pub fn file_size(&self) -> u64 {
99  | |         #[cfg(unix)]
100 | |         {
101 | |             assert!(self.0.st_size >= 0, "File size is negative");
...   |
108 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:102:13
    |
102 |             self.0.st_size.try_into().unwrap()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
102 |             return self.0.st_size.try_into().unwrap()
    |             ++++++

warning: used `unwrap()` on a `Result` value
   --> src/uucore/src/lib/features/fs.rs:102:13
    |
102 |             self.0.st_size.try_into().unwrap()
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used
    = note: `-W clippy::unwrap-used` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::unwrap_used)]`

warning: this method could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:115:5
    |
115 |     pub fn number_of_links(&self) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn number_of_links(&self) -> u64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/features/fs.rs:115:5
    |
115 | /     pub fn number_of_links(&self) -> u64 {
116 | |         #[cfg(all(
117 | |             unix,
118 | |             not(target_vendor = "apple"),
...   |
154 | |         return self.0.number_of_links();
155 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: this could be a `const fn`
   --> src/uucore/src/lib/features/fs.rs:115:5
    |
115 | /     pub fn number_of_links(&self) -> u64 {
116 | |         #[cfg(all(
117 | |             unix,
118 | |             not(target_vendor = "apple"),
...   |
154 | |         return self.0.number_of_links();
155 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`
help: make the function `const`
    |
115 |     pub const fn number_of_links(&self) -> u64 {
    |         +++++

warning: this method could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:158:5
    |
158 |     pub fn inode(&self) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn inode(&self) -> u64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/features/fs.rs:158:5
    |
158 | /     pub fn inode(&self) -> u64 {
159 | |         #[cfg(all(
160 | |             not(any(target_os = "freebsd", target_os = "netbsd")),
161 | |             target_pointer_width = "64"
...   |
169 | |         return self.0.st_ino.into();
170 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: this could be a `const fn`
   --> src/uucore/src/lib/features/fs.rs:158:5
    |
158 | /     pub fn inode(&self) -> u64 {
159 | |         #[cfg(all(
160 | |             not(any(target_os = "freebsd", target_os = "netbsd")),
161 | |             target_pointer_width = "64"
...   |
169 | |         return self.0.st_ino.into();
170 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
158 |     pub const fn inode(&self) -> u64 {
    |         +++++

warning: missing trait method provided by default: `ne`
   --> src/uucore/src/lib/features/fs.rs:174:1
    |
174 | impl PartialEq for FileInformation {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/cmp.rs:262:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods
    = note: `-W clippy::missing-trait-methods` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_trait_methods)]`

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/features/fs.rs:175:5
    |
175 | /     fn eq(&self, other: &Self) -> bool {
176 | |         self.0.st_dev == other.0.st_dev && self.0.st_ino == other.0.st_ino
177 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:176:9
    |
176 |         self.0.st_dev == other.0.st_dev && self.0.st_ino == other.0.st_ino
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
176 |         return self.0.st_dev == other.0.st_dev && self.0.st_ino == other.0.st_ino
    |         ++++++

warning: missing trait method provided by default: `assert_receiver_is_total_eq`
   --> src/uucore/src/lib/features/fs.rs:188:1
    |
188 | impl Eq for FileInformation {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/cmp.rs:345:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `hash_slice`
   --> src/uucore/src/lib/features/fs.rs:190:1
    |
190 | impl Hash for FileInformation {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/hash/mod.rs:235:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/features/fs.rs:191:5
    |
191 | /     fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
192 | |         #[cfg(unix)]
193 | |         {
194 | |             self.0.st_dev.hash(state);
...   |
202 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/features/fs.rs:191:16
    |
191 |     fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
    |                ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/features/fs.rs:191:16
    |
191 |     fn hash<H: std::hash::Hasher>(&self, state: &mut H) {
    |                ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: exported enums should not be exhaustive
   --> src/uucore/src/lib/features/fs.rs:207:1
    |
207 | / pub enum MissingHandling {
208 | |     /// Return an error if any part of the path is missing.
209 | |     Normal,
...   |
215 | |     Missing,
216 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums
    = note: `-W clippy::exhaustive-enums` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::exhaustive_enums)]`
help: try adding #[non_exhaustive]
    |
207 + #[non_exhaustive]
208 | pub enum MissingHandling {
    |

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uucore/src/lib/features/fs.rs:212:5
    |
212 |     Existing,
    |     ^^^^^^^^
    |
note: should be placed before `Normal`
   --> src/uucore/src/lib/features/fs.rs:209:5
    |
209 |     Normal,
    |     ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: exported enums should not be exhaustive
   --> src/uucore/src/lib/features/fs.rs:220:1
    |
220 | / pub enum ResolveMode {
221 | |     /// Do not resolve any symbolic links.
222 | |     None,
...   |
228 | |     Logical,
229 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums
help: try adding #[non_exhaustive]
    |
220 + #[non_exhaustive]
221 | pub enum ResolveMode {
    |

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uucore/src/lib/features/fs.rs:228:5
    |
228 |     Logical,
    |     ^^^^^^^
    |
note: should be placed before `Physical`
   --> src/uucore/src/lib/features/fs.rs:225:5
    |
225 |     Physical,
    |     ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: first doc comment paragraph is too long
   --> src/uucore/src/lib/features/fs.rs:231:1
    |
231 | / /// Normalize a path by removing relative information
232 | | /// For example, convert 'bar/../foo/bar.txt' => 'foo/bar.txt'
233 | | /// copied from `<https://github.com/rust-lang/cargo/blob/2e4cfc2b7d43328b207879228a2ca7d427d188bb/src/cargo/util/paths.rs#L65-L90>`
234 | | /// both projects are MIT `<https://github.com/rust-lang/cargo/blob/master/LICENSE-MIT>`
235 | | /// for std impl progress see rfc `<https://github.com/rust-lang/rfcs/issues/2208>`
236 | | /// replace this once that lands
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph
    = note: `-W clippy::too-long-first-doc-paragraph` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::too_long_first_doc_paragraph)]`

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:237:1
    |
237 | pub fn normalize_path(path: &Path) -> PathBuf {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn normalize_path(path: &Path) -> PathBuf`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:237:1
    |
237 | / pub fn normalize_path(path: &Path) -> PathBuf {
238 | |     let mut components = path.components().peekable();
239 | |     let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().copied() {
240 | |         components.next();
...   |
261 | |     ret
262 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:261:5
    |
261 |     ret
    |     ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
261 |     return ret
    |        +++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/features/fs.rs:239:31
    |
239 |     let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().copied() {
    |                               ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars
    = note: `-W clippy::min-ident-chars` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::min_ident_chars)]`

warning: usage of the `unreachable!` macro
   --> src/uucore/src/lib/features/fs.rs:248:38
    |
248 |             Component::Prefix(..) => unreachable!(),
    |                                      ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreachable
    = note: `-W clippy::unreachable` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::unreachable)]`

warning: this ident consists of a single char
   --> src/uucore/src/lib/features/fs.rs:256:31
    |
256 |             Component::Normal(c) => {
    |                               ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/features/fs.rs:264:1
    |
264 | fn resolve_symlink<P: AsRef<Path>>(path: P) -> IOResult<Option<PathBuf>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:270:5
    |
270 |     Ok(result)
    |     ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
270 |     return Ok(result)
    |     ++++++

warning: this could be simplified with `bool::then`
   --> src/uucore/src/lib/features/fs.rs:265:18
    |
265 |       let result = if fs::symlink_metadata(&path)?.file_type().is_symlink() {
    |  __________________^
266 | |         Some(fs::read_link(&path)?)
267 | |     } else {
268 | |         None
269 | |     };
    | |_____^ help: try: `fs::symlink_metadata(&path)?.file_type().is_symlink().then(|| fs::read_link(&path)?)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_then_some_else_none
    = note: `-W clippy::if-then-some-else-none` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::if_then_some_else_none)]`

warning: question mark operator was used
   --> src/uucore/src/lib/features/fs.rs:265:21
    |
265 |     let result = if fs::symlink_metadata(&path)?.file_type().is_symlink() {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uucore/src/lib/features/fs.rs:266:14
    |
266 |         Some(fs::read_link(&path)?)
    |              ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uucore/src/lib/features/fs.rs:276:5
    |
276 |     CurDir,
    |     ^^^^^^
    |
note: should be placed before `RootDir`
   --> src/uucore/src/lib/features/fs.rs:275:5
    |
275 |     RootDir,
    |     ^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uucore/src/lib/features/fs.rs:278:5
    |
278 |     Normal(OsString),
    |     ^^^^^^
    |
note: should be placed before `ParentDir`
   --> src/uucore/src/lib/features/fs.rs:277:5
    |
277 |     ParentDir,
    |     ^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:284:32
    |
284 |             Self::Prefix(s) => s.as_os_str(),
    |                                ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
284 |             Self::Prefix(s) => return s.as_os_str(),
    |                                ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:285:30
    |
285 |             Self::RootDir => Component::RootDir.as_os_str(),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
285 |             Self::RootDir => return Component::RootDir.as_os_str(),
    |                              ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:286:29
    |
286 |             Self::CurDir => Component::CurDir.as_os_str(),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
286 |             Self::CurDir => return Component::CurDir.as_os_str(),
    |                             ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:287:32
    |
287 |             Self::ParentDir => Component::ParentDir.as_os_str(),
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
287 |             Self::ParentDir => return Component::ParentDir.as_os_str(),
    |                                ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:288:32
    |
288 |             Self::Normal(s) => s.as_os_str(),
    |                                ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
288 |             Self::Normal(s) => return s.as_os_str(),
    |                                ++++++

warning: this match arm has an identical body to another arm
   --> src/uucore/src/lib/features/fs.rs:288:13
    |
288 |             Self::Normal(s) => s.as_os_str(),
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: try changing either arm body
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
    = note: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::match_same_arms)]`
help: or try merging the arm patterns and removing the obsolete arm
    |
284 ~             Self::RootDir => Component::RootDir.as_os_str(),
285 |             Self::CurDir => Component::CurDir.as_os_str(),
286 |             Self::ParentDir => Component::ParentDir.as_os_str(),
287 ~             Self::Normal(s) | Self::Prefix(s) => s.as_os_str(),
    |

warning: type of pattern does not match the expression type
   --> src/uucore/src/lib/features/fs.rs:284:13
    |
284 |             Self::Prefix(s) => s.as_os_str(),
    |             ^^^^^^^^^^^^^^^
    |
    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch
    = note: `-W clippy::pattern-type-mismatch` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::pattern_type_mismatch)]`

warning: this ident consists of a single char
   --> src/uucore/src/lib/features/fs.rs:284:26
    |
284 |             Self::Prefix(s) => s.as_os_str(),
    |                          ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this ident consists of a single char
   --> src/uucore/src/lib/features/fs.rs:288:26
    |
288 |             Self::Normal(s) => s.as_os_str(),
    |                          ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:296:37
    |
296 |             Component::Prefix(_) => Self::Prefix(comp.as_os_str().to_os_string()),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
296 |             Component::Prefix(_) => return Self::Prefix(comp.as_os_str().to_os_string()),
    |                                     ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:297:35
    |
297 |             Component::RootDir => Self::RootDir,
    |                                   ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
297 |             Component::RootDir => return Self::RootDir,
    |                                   ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:298:34
    |
298 |             Component::CurDir => Self::CurDir,
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
298 |             Component::CurDir => return Self::CurDir,
    |                                  ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:299:37
    |
299 |             Component::ParentDir => Self::ParentDir,
    |                                     ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
299 |             Component::ParentDir => return Self::ParentDir,
    |                                     ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:300:37
    |
300 |             Component::Normal(s) => Self::Normal(s.to_os_string()),
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
300 |             Component::Normal(s) => return Self::Normal(s.to_os_string()),
    |                                     ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/features/fs.rs:300:31
    |
300 |             Component::Normal(s) => Self::Normal(s.to_os_string()),
    |                               ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore/src/lib/features/fs.rs:332:1
    |
332 | / pub fn canonicalize<P: AsRef<Path>>(
333 | |     original: P,
334 | |     miss_mode: MissingHandling,
335 | |     res_mode: ResolveMode,
336 | | ) -> IOResult<PathBuf> {
    | |______________________^
    |
note: first possible panic found here
   --> src/uucore/src/lib/features/fs.rs:385:25
    |
385 |                         FileInformation::from_path(result.parent().unwrap(), false).unwrap();
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/features/fs.rs:332:1
    |
332 | / pub fn canonicalize<P: AsRef<Path>>(
333 | |     original: P,
334 | |     miss_mode: MissingHandling,
335 | |     res_mode: ResolveMode,
336 | | ) -> IOResult<PathBuf> {
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:332:1
    |
332 | / pub fn canonicalize<P: AsRef<Path>>(
333 | |     original: P,
334 | |     miss_mode: MissingHandling,
335 | |     res_mode: ResolveMode,
...   |
427 | |     Ok(result)
428 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:427:5
    |
427 |     Ok(result)
    |     ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
427 |     return Ok(result)
    |     ++++++

warning: default numeric fallback might occur
   --> src/uucore/src/lib/features/fs.rs:357:33
    |
357 |     let mut followed_symlinks = 0;
    |                                 ^ help: consider adding suffix: `0_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback
    = note: `-W clippy::default-numeric-fallback` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::default_numeric_fallback)]`

warning: default numeric fallback might occur
   --> src/uucore/src/lib/features/fs.rs:382:42
    |
382 |                     followed_symlinks += 1;
    |                                          ^ help: consider adding suffix: `1_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback

warning: `original` is shadowed
   --> src/uucore/src/lib/features/fs.rs:338:9
    |
338 |     let original = original.as_ref();
    |         ^^^^^^^^
    |
note: previous binding is here
   --> src/uucore/src/lib/features/fs.rs:333:5
    |
333 |     original: P,
    |     ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse
    = note: `-W clippy::shadow-reuse` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::shadow_reuse)]`

warning: question mark operator was used
   --> src/uucore/src/lib/features/fs.rs:347:27
    |
347 |         let current_dir = env::current_dir()?;
    |                           ^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uucore/src/lib/features/fs.rs:348:9
    |
348 |         dunce::canonicalize(current_dir)?.join(original)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: `original` is shadowed
   --> src/uucore/src/lib/features/fs.rs:344:9
    |
344 |     let original = if original.is_absolute() {
    |         ^^^^^^^^
    |
note: previous binding is here
   --> src/uucore/src/lib/features/fs.rs:338:9
    |
338 |     let original = original.as_ref();
    |         ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: redundant closure
   --> src/uucore/src/lib/features/fs.rs:355:70
    |
355 |     let mut parts: VecDeque<OwningComponent> = path.components().map(|part| part.into()).collect();
    |                                                                      ^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::convert::Into::into`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls
    = note: `-W clippy::redundant-closure-for-method-calls` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::redundant_closure_for_method_calls)]`

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:355:77
    |
355 |     let mut parts: VecDeque<OwningComponent> = path.components().map(|part| part.into()).collect();
    |                                                                             ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
355 |     let mut parts: VecDeque<OwningComponent> = path.components().map(|part| return part.into()).collect();
    |                                                                             ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/features/fs.rs:361:37
    |
361 |             OwningComponent::Prefix(s) => {
    |                                     ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uucore/src/lib/features/fs.rs:382:21
    |
382 |                     followed_symlinks += 1;
    |                     ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: used `unwrap()` on a `Result` value
   --> src/uucore/src/lib/features/fs.rs:385:25
    |
385 |                         FileInformation::from_path(result.parent().unwrap(), false).unwrap();
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: used `unwrap()` on an `Option` value
   --> src/uucore/src/lib/features/fs.rs:385:52
    |
385 |                         FileInformation::from_path(result.parent().unwrap(), false).unwrap();
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is `None`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: `part` shadows a previous, unrelated binding
   --> src/uucore/src/lib/features/fs.rs:387:25
    |
387 |                     for part in &parts {
    |                         ^^^^
    |
note: previous binding is here
   --> src/uucore/src/lib/features/fs.rs:359:20
    |
359 |     while let Some(part) = parts.pop_front() {
    |                    ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_unrelated
    = note: `-W clippy::shadow-unrelated` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::shadow_unrelated)]`

warning: this ident consists of a single char
   --> src/uucore/src/lib/features/fs.rs:399:17
    |
399 |             Err(e) => {
    |                 ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: question mark operator was used
   --> src/uucore/src/lib/features/fs.rs:413:17
    |
413 |                 read_dir(&result)?;
    |                 ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uucore/src/lib/features/fs.rs:419:21
    |
419 |                     read_dir(&result)?;
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uucore/src/lib/features/fs.rs:422:17
    |
422 |                 read_dir(parent)?;
    |                 ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:456:1
    |
456 | pub fn display_permissions(metadata: &fs::Metadata, display_file_type: bool) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn display_permissions(metadata: &fs::Metadata, display_file_type: bool) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:456:1
    |
456 | / pub fn display_permissions(metadata: &fs::Metadata, display_file_type: bool) -> String {
457 | |     let mode: mode_t = metadata.mode() as mode_t;
458 | |     display_permissions_unix(mode, display_file_type)
459 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:458:5
    |
458 |     display_permissions_unix(mode, display_file_type)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
458 |     return display_permissions_unix(mode, display_file_type)
    |     ++++++

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/features/fs.rs:457:24
    |
457 |     let mode: mode_t = metadata.mode() as mode_t;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions
    = note: `-W clippy::as-conversions` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::as_conversions)]`

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:478:20
    |
478 |         S_IFDIR => 'd',
    |                    ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
478 |         S_IFDIR => return 'd',
    |                    ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:479:20
    |
479 |         S_IFCHR => 'c',
    |                    ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
479 |         S_IFCHR => return 'c',
    |                    ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:480:20
    |
480 |         S_IFBLK => 'b',
    |                    ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
480 |         S_IFBLK => return 'b',
    |                    ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:481:20
    |
481 |         S_IFREG => '-',
    |                    ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
481 |         S_IFREG => return '-',
    |                    ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:482:20
    |
482 |         S_IFIFO => 'p',
    |                    ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
482 |         S_IFIFO => return 'p',
    |                    ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:483:20
    |
483 |         S_IFLNK => 'l',
    |                    ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
483 |         S_IFLNK => return 'l',
    |                    ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:484:21
    |
484 |         S_IFSOCK => 's',
    |                     ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
484 |         S_IFSOCK => return 's',
    |                     ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:486:14
    |
486 |         _ => '?',
    |              ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
486 |         _ => return '?',
    |              ++++++

warning: this could be a `const fn`
   --> src/uucore/src/lib/features/fs.rs:476:1
    |
476 | / fn get_file_display(mode: mode_t) -> char {
477 | |     match mode & S_IFMT {
478 | |         S_IFDIR => 'd',
479 | |         S_IFCHR => 'c',
...   |
488 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
476 | const fn get_file_display(mode: mode_t) -> char {
    | +++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:495:1
    |
495 | pub fn display_permissions_unix(mode: mode_t, display_file_type: bool) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn display_permissions_unix(mode: mode_t, display_file_type: bool) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:495:1
    |
495 | / pub fn display_permissions_unix(mode: mode_t, display_file_type: bool) -> String {
496 | |     let mut result;
497 | |     if display_file_type {
498 | |         result = String::with_capacity(10);
...   |
534 | |     result
535 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:534:5
    |
534 |     result
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
534 |     return result
    |       +++++++

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/features/fs.rs:506:31
    |
506 |     result.push(if has!(mode, S_ISUID as mode_t) {
    |                               ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/features/fs.rs:516:31
    |
516 |     result.push(if has!(mode, S_ISGID as mode_t) {
    |                               ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/features/fs.rs:526:31
    |
526 |     result.push(if has!(mode, S_ISVTX as mode_t) {
    |                               ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: item in documentation is missing backticks
   --> src/uucore/src/lib/features/fs.rs:540:5
    |
540 | /// std::fs::create_dir("foo/."); fails in pure Rust
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
    = note: `-W clippy::doc-markdown` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::doc_markdown)]`
help: try
    |
540 - /// std::fs::create_dir("foo/."); fails in pure Rust
540 + /// `std::fs::create_dir("foo`/."); fails in pure Rust
    |

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:541:1
    |
541 | pub fn dir_strip_dot_for_creation(path: &Path) -> PathBuf {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn dir_strip_dot_for_creation(path: &Path) -> PathBuf`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:541:1
    |
541 | / pub fn dir_strip_dot_for_creation(path: &Path) -> PathBuf {
542 | |     if path.to_string_lossy().ends_with("/.") {
543 | |         // Do a simple dance to strip the "/."
544 | |         Path::new(&path).components().collect::<PathBuf>()
...   |
548 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:544:9
    |
544 |         Path::new(&path).components().collect::<PathBuf>()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
544 |         return Path::new(&path).components().collect::<PathBuf>()
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:546:9
    |
546 |         path.to_path_buf()
    |         ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
546 |         return path.to_path_buf()
    |         ++++++

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:552:1
    |
552 | / pub fn paths_refer_to_same_file<P: AsRef<Path>>(p1: P, p2: P, dereference: bool) -> bool {
553 | |     infos_refer_to_same_file(
554 | |         FileInformation::from_path(p1, dereference),
555 | |         FileInformation::from_path(p2, dereference),
556 | |     )
557 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:553:5
    |
553 | /     infos_refer_to_same_file(
554 | |         FileInformation::from_path(p1, dereference),
555 | |         FileInformation::from_path(p2, dereference),
556 | |     )
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
553 |     return infos_refer_to_same_file(
    |     ++++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:561:1
    |
561 | / pub fn infos_refer_to_same_file(
562 | |     info1: IOResult<FileInformation>,
563 | |     info2: IOResult<FileInformation>,
564 | | ) -> bool {
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
    |
561 | #[must_use] pub fn infos_refer_to_same_file(
    | +++++++++++

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:561:1
    |
561 | / pub fn infos_refer_to_same_file(
562 | |     info1: IOResult<FileInformation>,
563 | |     info2: IOResult<FileInformation>,
564 | | ) -> bool {
...   |
570 | |     false
571 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:570:5
    |
570 |     false
    |     ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
570 |     return false
    |     ++++++

warning: `info1` is shadowed
   --> src/uucore/src/lib/features/fs.rs:565:15
    |
565 |     if let Ok(info1) = info1 {
    |               ^^^^^
    |
note: previous binding is here
   --> src/uucore/src/lib/features/fs.rs:562:5
    |
562 |     info1: IOResult<FileInformation>,
    |     ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: `info2` is shadowed
   --> src/uucore/src/lib/features/fs.rs:566:19
    |
566 |         if let Ok(info2) = info2 {
    |                   ^^^^^
    |
note: previous binding is here
   --> src/uucore/src/lib/features/fs.rs:563:5
    |
563 |     info2: IOResult<FileInformation>,
    |     ^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:574:1
    |
574 | / pub fn make_path_relative_to<P1: AsRef<Path>, P2: AsRef<Path>>(path: P1, to: P2) -> PathBuf {
575 | |     let path = path.as_ref();
576 | |     let to = to.as_ref();
577 | |     let common_prefix_size = path
...   |
595 | |     components.iter().collect()
596 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:595:5
    |
595 |     components.iter().collect()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
595 |     return components.iter().collect()
    |     ++++++

warning: `path` is shadowed
   --> src/uucore/src/lib/features/fs.rs:575:9
    |
575 |     let path = path.as_ref();
    |         ^^^^
    |
note: previous binding is here
   --> src/uucore/src/lib/features/fs.rs:574:64
    |
574 | pub fn make_path_relative_to<P1: AsRef<Path>, P2: AsRef<Path>>(path: P1, to: P2) -> PathBuf {
    |                                                                ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: `to` is shadowed
   --> src/uucore/src/lib/features/fs.rs:576:9
    |
576 |     let to = to.as_ref();
    |         ^^
    |
note: previous binding is here
   --> src/uucore/src/lib/features/fs.rs:574:74
    |
574 | pub fn make_path_relative_to<P1: AsRef<Path>, P2: AsRef<Path>>(path: P1, to: P2) -> PathBuf {
    |                                                                          ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:580:39
    |
580 |         .take_while(|(first, second)| first == second)
    |                                       ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
580 |         .take_while(|(first, second)| return first == second)
    |                                       ++++++

warning: type of pattern does not match the expression type
   --> src/uucore/src/lib/features/fs.rs:580:22
    |
580 |         .take_while(|(first, second)| first == second)
    |                      ^^^^^^^^^^^^^^^
    |
    = help: explicitly match against a `&_` pattern and adjust the enclosed variable bindings
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch

warning: redundant closure
   --> src/uucore/src/lib/features/fs.rs:585:14
    |
585 |         .map(|x| x.as_os_str());
    |              ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::path::Component::as_os_str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:585:18
    |
585 |         .map(|x| x.as_os_str());
    |                  ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
585 |         .map(|x| return x.as_os_str());
    |                  ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:589:18
    |
589 |         .map(|_| Component::ParentDir.as_os_str())
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
589 |         .map(|_| return Component::ParentDir.as_os_str())
    |                  ++++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:609:1
    |
609 | pub fn is_symlink_loop(path: &Path) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_symlink_loop(path: &Path) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:609:1
    |
609 | / pub fn is_symlink_loop(path: &Path) -> bool {
610 | |     let mut visited_symlinks = HashSet::new();
611 | |     let mut current_path = path.to_path_buf();
...   |
626 | |     false
627 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:626:5
    |
626 |     false
    |     ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
626 |     return false
    |     ++++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:646:1
    |
646 | pub fn are_hardlinks_to_same_file(source: &Path, target: &Path) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn are_hardlinks_to_same_file(source: &Path, target: &Path) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:646:1
    |
646 | / pub fn are_hardlinks_to_same_file(source: &Path, target: &Path) -> bool {
647 | |     let (Ok(source_metadata), Ok(target_metadata)) =
648 | |         (fs::symlink_metadata(source), fs::symlink_metadata(target))
649 | |     else {
...   |
653 | |     source_metadata.ino() == target_metadata.ino() && source_metadata.dev() == target_metadata.dev()
654 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:653:5
    |
653 |     source_metadata.ino() == target_metadata.ino() && source_metadata.dev() == target_metadata.dev()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
653 |     return source_metadata.ino() == target_metadata.ino() && source_metadata.dev() == target_metadata.dev()
    |     ++++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:672:1
    |
672 | pub fn are_hardlinks_or_one_way_symlink_to_same_file(source: &Path, target: &Path) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn are_hardlinks_or_one_way_symlink_to_same_file(source: &Path, target: &Path) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:672:1
    |
672 | / pub fn are_hardlinks_or_one_way_symlink_to_same_file(source: &Path, target: &Path) -> bool {
673 | |     let (Ok(source_metadata), Ok(target_metadata)) =
674 | |         (fs::metadata(source), fs::symlink_metadata(target))
675 | |     else {
...   |
679 | |     source_metadata.ino() == target_metadata.ino() && source_metadata.dev() == target_metadata.dev()
680 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:679:5
    |
679 |     source_metadata.ino() == target_metadata.ino() && source_metadata.dev() == target_metadata.dev()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
679 |     return source_metadata.ino() == target_metadata.ino() && source_metadata.dev() == target_metadata.dev()
    |     ++++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:692:1
    |
692 | pub fn path_ends_with_terminator(path: &Path) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn path_ends_with_terminator(path: &Path) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:692:1
    |
692 | / pub fn path_ends_with_terminator(path: &Path) -> bool {
693 | |     use std::os::unix::prelude::OsStrExt;
694 | |     path.as_os_str()
695 | |         .as_bytes()
696 | |         .last()
697 | |         .is_some_and(|&byte| byte == b'/' || byte == b'\\')
698 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:694:5
    |
694 | /     path.as_os_str()
695 | |         .as_bytes()
696 | |         .last()
697 | |         .is_some_and(|&byte| byte == b'/' || byte == b'\\')
    | |___________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
694 |     return path.as_os_str()
    |     ++++++

warning: importing trait that is only used anonymously
   --> src/uucore/src/lib/features/fs.rs:693:33
    |
693 |     use std::os::unix::prelude::OsStrExt;
    |                                 ^^^^^^^^ help: use: `OsStrExt as _`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:697:30
    |
697 |         .is_some_and(|&byte| byte == b'/' || byte == b'\\')
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
697 |         .is_some_and(|&byte| return byte == b'/' || byte == b'\\')
    |                              ++++++

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore/src/lib/features/fs.rs:718:1
    |
718 | pub fn is_stdin_directory(stdin: &Stdin) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uucore/src/lib/features/fs.rs:722:20
    |
722 |         let mode = fstat(stdin.as_fd()).unwrap().st_mode as mode_t;
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:718:1
    |
718 | pub fn is_stdin_directory(stdin: &Stdin) -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_stdin_directory(stdin: &Stdin) -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:718:1
    |
718 | / pub fn is_stdin_directory(stdin: &Stdin) -> bool {
719 | |     #[cfg(unix)]
720 | |     {
721 | |         use nix::sys::stat::fstat;
...   |
735 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:723:9
    |
723 |         has!(mode, S_IFDIR)
    |         ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
723 |         return has!(mode, S_IFDIR)
    |         ++++++

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/features/fs.rs:722:20
    |
722 |         let mode = fstat(stdin.as_fd()).unwrap().st_mode as mode_t;
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: used `unwrap()` on a `Result` value
   --> src/uucore/src/lib/features/fs.rs:722:20
    |
722 |         let mode = fstat(stdin.as_fd()).unwrap().st_mode as mode_t;
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: importing trait that is only used anonymously
   --> src/uucore/src/lib/features/fs.rs:740:28
    |
740 |     use std::os::unix::fs::MetadataExt;
    |                            ^^^^^^^^^^^ help: use: `MetadataExt as _`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/features/fs.rs:744:26
    |
744 |     pub const MAX: u64 = (u32::MAX / 8 + 1) as u64;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: integer division
   --> src/uucore/src/lib/features/fs.rs:744:27
    |
744 |     pub const MAX: u64 = (u32::MAX / 8 + 1) as u64;
    |                           ^^^^^^^^^^^^
    |
    = help: division of integers may cause loss of precision. consider using floats
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#integer_division
    = note: `-W clippy::integer-division` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::integer_division)]`

warning: use of / has been disallowed in this context
   --> src/uucore/src/lib/features/fs.rs:744:27
    |
744 |     pub const MAX: u64 = (u32::MAX / 8 + 1) as u64;
    |                           ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#integer_division_remainder_used
    = note: `-W clippy::integer-division-remainder-used` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::integer_division_remainder_used)]`

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:750:5
    |
750 |     pub fn sane_blksize(st_blksize: u64) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn sane_blksize(st_blksize: u64) -> u64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:750:5
    |
750 | /     pub fn sane_blksize(st_blksize: u64) -> u64 {
751 | |         match st_blksize {
752 | |             0 => DEFAULT,
753 | |             1..=MAX => st_blksize,
...   |
756 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:752:18
    |
752 |             0 => DEFAULT,
    |                  ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
752 |             0 => return DEFAULT,
    |                  ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:753:24
    |
753 |             1..=MAX => st_blksize,
    |                        ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
753 |             1..=MAX => return st_blksize,
    |                        ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:754:18
    |
754 |             _ => DEFAULT,
    |                  ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
754 |             _ => return DEFAULT,
    |                  ++++++

warning: this could be a `const fn`
   --> src/uucore/src/lib/features/fs.rs:750:5
    |
750 | /     pub fn sane_blksize(st_blksize: u64) -> u64 {
751 | |         match st_blksize {
752 | |             0 => DEFAULT,
753 | |             1..=MAX => st_blksize,
...   |
756 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
750 |     pub const fn sane_blksize(st_blksize: u64) -> u64 {
    |         +++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:762:5
    |
762 |     pub fn sane_blksize_from_metadata(_metadata: &std::fs::Metadata) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn sane_blksize_from_metadata(_metadata: &std::fs::Metadata) -> u64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:762:5
    |
762 | /     pub fn sane_blksize_from_metadata(_metadata: &std::fs::Metadata) -> u64 {
763 | |         #[cfg(not(target_os = "windows"))]
764 | |         {
765 | |             sane_blksize(_metadata.blksize())
...   |
772 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: item name starts with its containing module's name
   --> src/uucore/src/lib/features/fs.rs:762:12
    |
762 |     pub fn sane_blksize_from_metadata(_metadata: &std::fs::Metadata) -> u64 {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:765:13
    |
765 |             sane_blksize(_metadata.blksize())
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
765 |             return sane_blksize(_metadata.blksize())
    |             ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/features/fs.rs:762:51
    |
762 |     pub fn sane_blksize_from_metadata(_metadata: &std::fs::Metadata) -> u64 {
    |                                                   ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: used underscore-prefixed binding
   --> src/uucore/src/lib/features/fs.rs:765:26
    |
765 |             sane_blksize(_metadata.blksize())
    |                          ^^^^^^^^^
    |
note: binding is defined here
   --> src/uucore/src/lib/features/fs.rs:762:39
    |
762 |     pub fn sane_blksize_from_metadata(_metadata: &std::fs::Metadata) -> u64 {
    |                                       ^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding
    = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::used_underscore_binding)]`

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:778:5
    |
778 |     pub fn sane_blksize_from_path(path: &Path) -> u64 {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn sane_blksize_from_path(path: &Path) -> u64`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:778:5
    |
778 | /     pub fn sane_blksize_from_path(path: &Path) -> u64 {
779 | |         match metadata(path) {
780 | |             Ok(metadata) => sane_blksize_from_metadata(&metadata),
781 | |             Err(_) => DEFAULT,
782 | |         }
783 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: item name starts with its containing module's name
   --> src/uucore/src/lib/features/fs.rs:778:12
    |
778 |     pub fn sane_blksize_from_path(path: &Path) -> u64 {
    |            ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:780:29
    |
780 |             Ok(metadata) => sane_blksize_from_metadata(&metadata),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
780 |             Ok(metadata) => return sane_blksize_from_metadata(&metadata),
    |                             ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:781:23
    |
781 |             Err(_) => DEFAULT,
    |                       ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
781 |             Err(_) => return DEFAULT,
    |                       ++++++

warning: use Option::map_or instead of an if let/else
   --> src/uucore/src/lib/features/fs.rs:779:9
    |
779 | /         match metadata(path) {
780 | |             Ok(metadata) => sane_blksize_from_metadata(&metadata),
781 | |             Err(_) => DEFAULT,
782 | |         }
    | |_________^ help: try: `metadata(path).map_or(DEFAULT, |metadata| sane_blksize_from_metadata(&metadata))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
    = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/features/fs.rs:801:1
    |
801 | pub fn get_filename(file: &Path) -> Option<&str> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_filename(file: &Path) -> Option<&str>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:801:1
    |
801 | / pub fn get_filename(file: &Path) -> Option<&str> {
802 | |     file.file_name().and_then(|filename| filename.to_str())
803 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:802:5
    |
802 |     file.file_name().and_then(|filename| filename.to_str())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
802 |     return file.file_name().and_then(|filename| filename.to_str())
    |     ++++++

warning: use the question mark operator instead of an `and_then` call
   --> src/uucore/src/lib/features/fs.rs:802:5
    |
802 |     file.file_name().and_then(|filename| filename.to_str())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_and_then
    = note: `-W clippy::return-and-then` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::return_and_then)]`
help: try
    |
802 ~     let filename = file.file_name()?;
803 +     filename.to_str()
    |

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:802:42
    |
802 |     file.file_name().and_then(|filename| filename.to_str())
    |                                          ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
802 |     file.file_name().and_then(|filename| return filename.to_str())
    |                                          ++++++

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore/src/lib/features/fs.rs:826:1
    |
826 | pub fn make_fifo(path: &Path) -> std::io::Result<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uucore/src/lib/features/fs.rs:827:16
    |
827 |     let name = CString::new(path.to_str().unwrap()).unwrap();
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/features/fs.rs:826:1
    |
826 | / pub fn make_fifo(path: &Path) -> std::io::Result<()> {
827 | |     let name = CString::new(path.to_str().unwrap()).unwrap();
828 | |     let err = unsafe { mkfifo(name.as_ptr(), 0o666) };
829 | |     if err == -1 {
...   |
834 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:830:9
    |
830 |         Err(std::io::Error::from_raw_os_error(err))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
830 |         return Err(std::io::Error::from_raw_os_error(err))
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/features/fs.rs:832:9
    |
832 |         Ok(())
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
832 |         return Ok(())
    |         ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/features/fs.rs:826:34
    |
826 | pub fn make_fifo(path: &Path) -> std::io::Result<()> {
    |                                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: used `unwrap()` on a `Result` value
   --> src/uucore/src/lib/features/fs.rs:827:16
    |
827 |     let name = CString::new(path.to_str().unwrap()).unwrap();
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: used `unwrap()` on an `Option` value
   --> src/uucore/src/lib/features/fs.rs:827:29
    |
827 |     let name = CString::new(path.to_str().unwrap()).unwrap();
    |                             ^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is `None`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: unsafe block missing a safety comment
   --> src/uucore/src/lib/features/fs.rs:828:15
    |
828 |     let err = unsafe { mkfifo(name.as_ptr(), 0o666) };
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider adding a safety comment on the preceding line
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks
    = note: `-W clippy::undocumented-unsafe-blocks` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::undocumented_unsafe_blocks)]`

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/features/fs.rs:830:13
    |
830 |         Err(std::io::Error::from_raw_os_error(err))
    |             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/features/pipes.rs:23:1
   |
23 | pub fn pipe() -> Result<(File, File)> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/features/pipes.rs:23:1
   |
23 | / pub fn pipe() -> Result<(File, File)> {
24 | |     let (read, write) = nix::unistd::pipe()?;
25 | |     Ok((File::from(read), File::from(write)))
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/features/pipes.rs:25:5
   |
25 |     Ok((File::from(read), File::from(write)))
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
25 |     return Ok((File::from(read), File::from(write)))
   |     ++++++

warning: question mark operator was used
  --> src/uucore/src/lib/features/pipes.rs:24:25
   |
24 |     let (read, write) = nix::unistd::pipe()?;
   |                         ^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/features/pipes.rs:24:25
   |
24 |     let (read, write) = nix::unistd::pipe()?;
   |                         ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/features/pipes.rs:38:1
   |
38 | pub fn splice(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<usize> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/features/pipes.rs:38:1
   |
38 | / pub fn splice(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<usize> {
39 | |     nix::fcntl::splice(source, None, target, None, len, SpliceFFlags::empty())
40 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/features/pipes.rs:39:5
   |
39 |     nix::fcntl::splice(source, None, target, None, len, SpliceFFlags::empty())
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
39 |     return nix::fcntl::splice(source, None, target, None, len, SpliceFFlags::empty())
   |     ++++++

warning: `impl Trait` used as a function parameter
  --> src/uucore/src/lib/features/pipes.rs:38:24
   |
38 | pub fn splice(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<usize> {
   |                        ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
   |
38 | pub fn splice<{ /* Generic name */ }: AsFd>(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<usize> {
   |              ++++++++++++++++++++++++++++++

warning: `impl Trait` used as a function parameter
  --> src/uucore/src/lib/features/pipes.rs:38:44
   |
38 | pub fn splice(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<usize> {
   |                                            ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
   |
38 | pub fn splice<{ /* Generic name */ }: AsFd>(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<usize> {
   |              ++++++++++++++++++++++++++++++

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/features/pipes.rs:39:5
   |
39 |     nix::fcntl::splice(source, None, target, None, len, SpliceFFlags::empty())
   |     ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: docs for function which may panic missing `# Panics` section
  --> src/uucore/src/lib/features/pipes.rs:48:1
   |
48 | pub fn splice_exact(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/uucore/src/lib/features/pipes.rs:52:9
   |
52 |         assert_ne!(written, 0, "unexpected end of data");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/features/pipes.rs:48:1
   |
48 | pub fn splice_exact(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/features/pipes.rs:48:1
   |
48 | / pub fn splice_exact(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
49 | |     let mut left = len;
50 | |     while left != 0 {
51 | |         let written = splice(source, target, left)?;
...  |
55 | |     Ok(())
56 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/features/pipes.rs:55:5
   |
55 |     Ok(())
   |     ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
55 |     return Ok(())
   |     ++++++

warning: `impl Trait` used as a function parameter
  --> src/uucore/src/lib/features/pipes.rs:48:30
   |
48 | pub fn splice_exact(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
   |                              ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
   |
48 | pub fn splice_exact<{ /* Generic name */ }: AsFd>(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
   |                    ++++++++++++++++++++++++++++++

warning: `impl Trait` used as a function parameter
  --> src/uucore/src/lib/features/pipes.rs:48:50
   |
48 | pub fn splice_exact(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
   |                                                  ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
   |
48 | pub fn splice_exact<{ /* Generic name */ }: AsFd>(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
   |                    ++++++++++++++++++++++++++++++

warning: used `panic!()` or assertion in a function that returns `Result`
  --> src/uucore/src/lib/features/pipes.rs:48:1
   |
48 | / pub fn splice_exact(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<()> {
49 | |     let mut left = len;
50 | |     while left != 0 {
51 | |         let written = splice(source, target, left)?;
...  |
55 | |     Ok(())
56 | | }
   | |_^
   |
   = help: `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
  --> src/uucore/src/lib/features/pipes.rs:52:9
   |
52 |         assert_ne!(written, 0, "unexpected end of data");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn
   = note: `-W clippy::panic-in-result-fn` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::panic_in_result_fn)]`

warning: question mark operator was used
  --> src/uucore/src/lib/features/pipes.rs:51:23
   |
51 |         let written = splice(source, target, left)?;
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uucore/src/lib/features/pipes.rs:53:9
   |
53 |         left -= written;
   |         ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/features/pipes.rs:62:1
   |
62 | pub fn vmsplice(target: &impl AsFd, bytes: &[u8]) -> Result<usize> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/features/pipes.rs:62:1
   |
62 | / pub fn vmsplice(target: &impl AsFd, bytes: &[u8]) -> Result<usize> {
63 | |     nix::fcntl::vmsplice(target, &[IoSlice::new(bytes)], SpliceFFlags::empty())
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/features/pipes.rs:63:5
   |
63 |     nix::fcntl::vmsplice(target, &[IoSlice::new(bytes)], SpliceFFlags::empty())
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
63 |     return nix::fcntl::vmsplice(target, &[IoSlice::new(bytes)], SpliceFFlags::empty())
   |     ++++++

warning: `impl Trait` used as a function parameter
  --> src/uucore/src/lib/features/pipes.rs:62:26
   |
62 | pub fn vmsplice(target: &impl AsFd, bytes: &[u8]) -> Result<usize> {
   |                          ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
   |
62 | pub fn vmsplice<{ /* Generic name */ }: AsFd>(target: &impl AsFd, bytes: &[u8]) -> Result<usize> {
   |                ++++++++++++++++++++++++++++++

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/features/pipes.rs:63:5
   |
63 |     nix::fcntl::vmsplice(target, &[IoSlice::new(bytes)], SpliceFFlags::empty())
   |     ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: incorrect ordering of items (module item groupings specify another order)
  --> src/uucore/src/lib/macros.rs:88:14
   |
88 | macro_rules! show(
   |              ^^^^
   |
note: should be placed before `UTILITY_IS_SECOND_ARG`
  --> src/uucore/src/lib/macros.rs:44:12
   |
44 | pub static UTILITY_IS_SECOND_ARG: AtomicBool = AtomicBool::new(false);
   |            ^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/macros.rs:36:5
   |
36 | use std::sync::atomic::AtomicBool;
   |     ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: missing documentation for a module
  --> src/uucore/src/lib/lib.rs:20:1
   |
20 | mod mods; // core cross-platform modules
   | ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: incorrect ordering of items (module item groupings specify another order)
  --> src/uucore/src/lib/mods/display.rs:67:11
   |
67 | pub trait OsWrite: io::Write {
   |           ^^^^^^^
   |
note: should be placed before `print_verbatim`
  --> src/uucore/src/lib/mods/display.rs:57:8
   |
57 | pub fn print_verbatim<S: AsRef<OsStr>>(text: S) -> io::Result<()> {
   |        ^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: importing trait that is only used anonymously
  --> src/uucore/src/lib/mods/display.rs:29:52
   |
29 | use std::io::{self, BufWriter, Stdout, StdoutLock, Write as IoWrite};
   |                                                    ^^^^^^^^^^^^^^^^ help: use: `Write as _`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: importing trait that is only used anonymously
  --> src/uucore/src/lib/mods/display.rs:32:25
   |
32 | use std::os::unix::ffi::OsStrExt;
   |                         ^^^^^^^^ help: use: `OsStrExt as _`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/mods/display.rs:49:1
   |
49 | pub fn println_verbatim<S: AsRef<OsStr>>(text: S) -> io::Result<()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/display.rs:49:1
   |
49 | / pub fn println_verbatim<S: AsRef<OsStr>>(text: S) -> io::Result<()> {
50 | |     let mut stdout = io::stdout().lock();
51 | |     stdout.write_all_os(text.as_ref())?;
52 | |     stdout.write_all(b"\n")?;
53 | |     Ok(())
54 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/display.rs:53:5
   |
53 |     Ok(())
   |     ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
53 |     return Ok(())
   |     ++++++

warning: question mark operator was used
  --> src/uucore/src/lib/mods/display.rs:51:5
   |
51 |     stdout.write_all_os(text.as_ref())?;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
  --> src/uucore/src/lib/mods/display.rs:52:5
   |
52 |     stdout.write_all(b"\n")?;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/mods/display.rs:57:1
   |
57 | pub fn print_verbatim<S: AsRef<OsStr>>(text: S) -> io::Result<()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/display.rs:57:1
   |
57 | / pub fn print_verbatim<S: AsRef<OsStr>>(text: S) -> io::Result<()> {
58 | |     io::stdout().write_all_os(text.as_ref())
59 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/display.rs:58:5
   |
58 |     io::stdout().write_all_os(text.as_ref())
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
58 |     return io::stdout().write_all_os(text.as_ref())
   |     ++++++

warning: missing `#[inline]` for a default trait method
   --> src/uucore/src/lib/mods/display.rs:76:5
    |
76  | /     fn write_all_os(&mut self, buf: &OsStr) -> io::Result<()> {
77  | |         #[cfg(any(unix, target_os = "wasi"))]
78  | |         {
79  | |             self.write_all(buf.as_bytes())
...   |
102 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/display.rs:79:13
   |
79 |             self.write_all(buf.as_bytes())
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
79 |             return self.write_all(buf.as_bytes())
   |             ++++++

warning: missing trait method provided by default: `write_all_os`
   --> src/uucore/src/lib/mods/display.rs:107:1
    |
107 | impl OsWrite for File {}
    | ^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/display.rs:76:5
    |
76  |     fn write_all_os(&mut self, buf: &OsStr) -> io::Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `write_all_os`
   --> src/uucore/src/lib/mods/display.rs:108:1
    |
108 | impl OsWrite for Stdout {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/display.rs:76:5
    |
76  |     fn write_all_os(&mut self, buf: &OsStr) -> io::Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `write_all_os`
   --> src/uucore/src/lib/mods/display.rs:109:1
    |
109 | impl OsWrite for StdoutLock<'_> {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/display.rs:76:5
    |
76  |     fn write_all_os(&mut self, buf: &OsStr) -> io::Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `write_all_os`
   --> src/uucore/src/lib/mods/display.rs:112:1
    |
112 | impl<W: OsWrite> OsWrite for BufWriter<W> {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/display.rs:76:5
    |
76  |     fn write_all_os(&mut self, buf: &OsStr) -> io::Result<()> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/display.rs:115:5
    |
115 | /     fn write_all_os(&mut self, buf: &OsStr) -> io::Result<()> {
116 | |         let this: &mut dyn OsWrite = self;
117 | |         this.write_all_os(buf)
118 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/display.rs:117:9
    |
117 |         this.write_all_os(buf)
    |         ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
117 |         return this.write_all_os(buf)
    |         ++++++

warning: incorrect ordering of items (module item groupings specify another order)
  --> src/uucore/src/lib/mods/error.rs:95:10
   |
95 | pub type UResult<T> = Result<T, Box<dyn UError>>;
   |          ^^^^^^^
   |
note: should be placed before `set_exit_code`
  --> src/uucore/src/lib/mods/error.rs:90:8
   |
90 | pub fn set_exit_code(code: i32) {
   |        ^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/mods/error.rs:469:11
    |
469 | pub trait FromIo<T> {
    |           ^^^^^^
    |
note: should be placed before `strip_errno`
   --> src/uucore/src/lib/mods/error.rs:459:8
    |
459 | pub fn strip_errno(err: &std::io::Error) -> String {
    |        ^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uucore/src/lib/mods/error.rs:626:14
    |
626 | macro_rules! uio_error(
    |              ^^^^^^^^^
    |
note: should be placed before the following item
   --> src/uucore/src/lib/mods/error.rs:561:1
    |
561 | / impl From<nix::Error> for Box<dyn UError> {
562 | |     fn from(f: nix::Error) -> Self {
563 | |         let u_error: UIoError = f.into();
564 | |         Box::new(u_error) as Self
565 | |     }
566 | | }
    | |_^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/mods/error.rs:57:5
   |
57 | use std::{
   |     ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/error.rs:67:1
   |
67 | / pub fn get_exit_code() -> i32 {
68 | |     EXIT_CODE.load(Ordering::SeqCst)
69 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/error.rs:68:5
   |
68 |     EXIT_CODE.load(Ordering::SeqCst)
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
68 |     return EXIT_CODE.load(Ordering::SeqCst)
   |     ++++++

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/error.rs:90:1
   |
90 | / pub fn set_exit_code(code: i32) {
91 | |     EXIT_CODE.store(code, Ordering::SeqCst);
92 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `#[inline]` for a default trait method
   --> src/uucore/src/lib/mods/error.rs:209:5
    |
209 | /     fn code(&self) -> i32 {
210 | |         1
211 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `#[inline]` for a default trait method
   --> src/uucore/src/lib/mods/error.rs:263:5
    |
263 | /     fn usage(&self) -> bool {
264 | |         false
265 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: item name ends with its containing module's name
   --> src/uucore/src/lib/mods/error.rs:158:11
    |
158 | pub trait UError: Error + Send {
    |           ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:210:9
    |
210 |         1
    |         ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
210 |         return 1
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:264:9
    |
264 |         false
    |         ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
264 |         return false
    |         ++++++

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:272:5
    |
272 | /     fn from(t: T) -> Self {
273 | |         Box::new(t)
274 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:273:9
    |
273 |         Box::new(t)
    |         ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
273 |         return Box::new(t)
    |         ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:272:13
    |
272 |     fn from(t: T) -> Self {
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: exported structs should not be exhaustive
   --> src/uucore/src/lib/mods/error.rs:287:1
    |
287 | / pub struct USimpleError {
288 | |     /// Exit code of the error.
289 | |     pub code: i32,
...   |
292 | |     pub message: String,
293 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs
    = note: `-W clippy::exhaustive-structs` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::exhaustive_structs)]`
help: try adding #[non_exhaustive]
    |
287 + #[non_exhaustive]
288 | pub struct USimpleError {
    |

warning: item name ends with its containing module's name
   --> src/uucore/src/lib/mods/error.rs:287:12
    |
287 | pub struct USimpleError {
    |            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:298:5
    |
298 | /     pub fn new<S: Into<String>>(code: i32, message: S) -> Box<dyn UError> {
299 | |         Box::new(Self {
300 | |             code,
301 | |             message: message.into(),
302 | |         })
303 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:299:9
    |
299 | /         Box::new(Self {
300 | |             code,
301 | |             message: message.into(),
302 | |         })
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
299 |         return Box::new(Self {
    |         ++++++

warning: missing trait method provided by default: `source`
   --> src/uucore/src/lib/mods/error.rs:306:1
    |
306 | impl Error for USimpleError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:105:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `type_id`
   --> src/uucore/src/lib/mods/error.rs:306:1
    |
306 | impl Error for USimpleError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:116:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `description`
   --> src/uucore/src/lib/mods/error.rs:306:1
    |
306 | impl Error for USimpleError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:131:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `cause`
   --> src/uucore/src/lib/mods/error.rs:306:1
    |
306 | impl Error for USimpleError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:141:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `provide`
   --> src/uucore/src/lib/mods/error.rs:306:1
    |
306 | impl Error for USimpleError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:204:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:309:5
    |
309 | /     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
310 | |         self.message.fmt(f)
311 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:310:9
    |
310 |         self.message.fmt(f)
    |         ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
310 |         return self.message.fmt(f)
    |         ++++++

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/mods/error.rs:309:56
    |
309 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:309:56
    |
309 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:309:19
    |
309 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                   ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing trait method provided by default: `usage`
   --> src/uucore/src/lib/mods/error.rs:314:1
    |
314 | impl UError for USimpleError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/error.rs:263:5
    |
263 |     fn usage(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:315:5
    |
315 | /     fn code(&self) -> i32 {
316 | |         self.code
317 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:316:9
    |
316 |         self.code
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
316 |         return self.code
    |         ++++++

warning: exported structs should not be exhaustive
   --> src/uucore/src/lib/mods/error.rs:322:1
    |
322 | / pub struct UUsageError {
323 | |     /// Exit code of the error.
324 | |     pub code: i32,
...   |
327 | |     pub message: String,
328 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs
help: try adding #[non_exhaustive]
    |
322 + #[non_exhaustive]
323 | pub struct UUsageError {
    |

warning: item name ends with its containing module's name
   --> src/uucore/src/lib/mods/error.rs:322:12
    |
322 | pub struct UUsageError {
    |            ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:333:5
    |
333 | /     pub fn new<S: Into<String>>(code: i32, message: S) -> Box<dyn UError> {
334 | |         Box::new(Self {
335 | |             code,
336 | |             message: message.into(),
337 | |         })
338 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:334:9
    |
334 | /         Box::new(Self {
335 | |             code,
336 | |             message: message.into(),
337 | |         })
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
334 |         return Box::new(Self {
    |         ++++++

warning: missing trait method provided by default: `source`
   --> src/uucore/src/lib/mods/error.rs:341:1
    |
341 | impl Error for UUsageError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:105:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `type_id`
   --> src/uucore/src/lib/mods/error.rs:341:1
    |
341 | impl Error for UUsageError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:116:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `description`
   --> src/uucore/src/lib/mods/error.rs:341:1
    |
341 | impl Error for UUsageError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:131:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `cause`
   --> src/uucore/src/lib/mods/error.rs:341:1
    |
341 | impl Error for UUsageError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:141:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `provide`
   --> src/uucore/src/lib/mods/error.rs:341:1
    |
341 | impl Error for UUsageError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:204:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:344:5
    |
344 | /     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
345 | |         self.message.fmt(f)
346 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:345:9
    |
345 |         self.message.fmt(f)
    |         ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
345 |         return self.message.fmt(f)
    |         ++++++

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/mods/error.rs:344:56
    |
344 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:344:56
    |
344 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:344:19
    |
344 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                   ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:350:5
    |
350 | /     fn code(&self) -> i32 {
351 | |         self.code
352 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:351:9
    |
351 |         self.code
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
351 |         return self.code
    |         ++++++

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:354:5
    |
354 | /     fn usage(&self) -> bool {
355 | |         true
356 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:355:9
    |
355 |         true
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
355 |         return true
    |         ++++++

warning: item name ends with its containing module's name
   --> src/uucore/src/lib/mods/error.rs:386:12
    |
386 | pub struct UIoError {
    |            ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:388:12
    |
388 |     inner: std::io::Error,
    |            ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:394:5
    |
394 | /     pub fn new<S: Into<String>>(kind: std::io::ErrorKind, context: S) -> Box<dyn UError> {
395 | |         Box::new(Self {
396 | |             context: Some(context.into()),
397 | |             inner: kind.into(),
398 | |         })
399 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:395:9
    |
395 | /         Box::new(Self {
396 | |             context: Some(context.into()),
397 | |             inner: kind.into(),
398 | |         })
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
395 |         return Box::new(Self {
    |         ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:394:39
    |
394 |     pub fn new<S: Into<String>>(kind: std::io::ErrorKind, context: S) -> Box<dyn UError> {
    |                                       ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing trait method provided by default: `code`
   --> src/uucore/src/lib/mods/error.rs:402:1
    |
402 | impl UError for UIoError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/error.rs:209:5
    |
209 |     fn code(&self) -> i32 {
    |     ^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `usage`
   --> src/uucore/src/lib/mods/error.rs:402:1
    |
402 | impl UError for UIoError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/error.rs:263:5
    |
263 |     fn usage(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `source`
   --> src/uucore/src/lib/mods/error.rs:404:1
    |
404 | impl Error for UIoError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:105:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `type_id`
   --> src/uucore/src/lib/mods/error.rs:404:1
    |
404 | impl Error for UIoError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:116:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `description`
   --> src/uucore/src/lib/mods/error.rs:404:1
    |
404 | impl Error for UIoError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:131:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `cause`
   --> src/uucore/src/lib/mods/error.rs:404:1
    |
404 | impl Error for UIoError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:141:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `provide`
   --> src/uucore/src/lib/mods/error.rs:404:1
    |
404 | impl Error for UIoError {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:204:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:407:5
    |
407 | /     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
408 | |         use std::io::ErrorKind::*;
409 | |
410 | |         let message;
...   |
455 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:451:13
    |
451 |             write!(f, "{ctx}: {message}")
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
451 |             return write!(f, "{ctx}: {message}")
    |             ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:453:13
    |
453 |             write!(f, "{message}")
    |             ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
453 |             return write!(f, "{message}")
    |             ++++++

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/mods/error.rs:407:56
    |
407 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:407:56
    |
407 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:407:19
    |
407 |     fn fmt(&self, f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                   ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: usage of wildcard import for enum variants
   --> src/uucore/src/lib/mods/error.rs:408:13
    |
408 |         use std::io::ErrorKind::*;
    |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::io::ErrorKind::{AddrInUse, AddrNotAvailable, AlreadyExists, BrokenPipe, ConnectionAborted, ConnectionRefused, ConnectionReset, Interrupted, InvalidData, InvalidInput, NotConnected, NotFound, PermissionDenied, TimedOut, UnexpectedEof, WouldBlock, WriteZero}`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#enum_glob_use
    = note: `-W clippy::enum-glob-use` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::enum_glob_use)]`

warning: wildcard matches known variants and will also match future added variants
   --> src/uucore/src/lib/mods/error.rs:433:17
    |
433 |                 _ => {
    |                 ^ help: try: `HostUnreachable | NetworkUnreachable | NetworkDown | NotADirectory | IsADirectory | DirectoryNotEmpty | ReadOnlyFilesystem | FilesystemLoop | StaleNetworkFileHandle | StorageFull | NotSeekable | QuotaExceeded | FileTooLarge | ResourceBusy | ExecutableFileBusy | Deadlock | CrossesDevices | TooManyLinks | InvalidFilename | ArgumentListTooLong | Unsupported | OutOfMemory | InProgress | Other | _`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#wildcard_enum_match_arm
    = note: `-W clippy::wildcard-enum-match-arm` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::wildcard_enum_match_arm)]`

warning: `message` is shadowed
   --> src/uucore/src/lib/mods/error.rs:411:13
    |
411 |         let message = if self.inner.raw_os_error().is_some() {
    |             ^^^^^^^
    |
note: previous binding is here
   --> src/uucore/src/lib/mods/error.rs:410:13
    |
410 |         let message;
    |             ^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: type of pattern does not match the expression type
   --> src/uucore/src/lib/mods/error.rs:450:16
    |
450 |         if let Some(ctx) = &self.context {
    |                ^^^^^^^^^
    |
    = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/mods/error.rs:459:1
    |
459 | pub fn strip_errno(err: &std::io::Error) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn strip_errno(err: &std::io::Error) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/mods/error.rs:459:1
    |
459 | / pub fn strip_errno(err: &std::io::Error) -> String {
460 | |     let mut msg = err.to_string();
461 | |     if let Some(pos) = msg.find(" (os error ") {
462 | |         msg.truncate(pos);
463 | |     }
464 | |     msg
465 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:464:5
    |
464 |     msg
    |     ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
464 |     return msg
    |     ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:459:26
    |
459 | pub fn strip_errno(err: &std::io::Error) -> String {
    |                          ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: `impl Trait` used as a function parameter
   --> src/uucore/src/lib/mods/error.rs:471:39
    |
471 |     fn map_err_context(self, context: impl FnOnce() -> String) -> T;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
    |
471 |     fn map_err_context<{ /* Generic name */ }: FnOnce() -> String>(self, context: impl FnOnce() -> String) -> T;
    |                       ++++++++++++++++++++++++++++++++++++++++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:474:32
    |
474 | impl FromIo<Box<UIoError>> for std::io::Error {
    |                                ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:475:5
    |
475 | /     fn map_err_context(self, context: impl FnOnce() -> String) -> Box<UIoError> {
476 | |         Box::new(UIoError {
477 | |             context: Some(context()),
478 | |             inner: self,
479 | |         })
480 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:476:9
    |
476 | /         Box::new(UIoError {
477 | |             context: Some(context()),
478 | |             inner: self,
479 | |         })
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
476 |         return Box::new(UIoError {
    |         ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:483:32
    |
483 | impl<T> FromIo<UResult<T>> for std::io::Result<T> {
    |                                ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:484:5
    |
484 | /     fn map_err_context(self, context: impl FnOnce() -> String) -> UResult<T> {
485 | |         self.map_err(|e| e.map_err_context(context) as Box<dyn UError>)
486 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:485:9
    |
485 |         self.map_err(|e| e.map_err_context(context) as Box<dyn UError>)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
485 |         return self.map_err(|e| e.map_err_context(context) as Box<dyn UError>)
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:485:26
    |
485 |         self.map_err(|e| e.map_err_context(context) as Box<dyn UError>)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
485 |         self.map_err(|e| return e.map_err_context(context) as Box<dyn UError>)
    |                          ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:485:23
    |
485 |         self.map_err(|e| e.map_err_context(context) as Box<dyn UError>)
    |                       ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:485:26
    |
485 |         self.map_err(|e| e.map_err_context(context) as Box<dyn UError>)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:489:32
    |
489 | impl FromIo<Box<UIoError>> for std::io::ErrorKind {
    |                                ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:490:5
    |
490 | /     fn map_err_context(self, context: impl FnOnce() -> String) -> Box<UIoError> {
491 | |         Box::new(UIoError {
492 | |             context: Some(context()),
493 | |             inner: std::io::Error::new(self, ""),
494 | |         })
495 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:491:9
    |
491 | /         Box::new(UIoError {
492 | |             context: Some(context()),
493 | |             inner: std::io::Error::new(self, ""),
494 | |         })
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
491 |         return Box::new(UIoError {
    |         ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:493:20
    |
493 |             inner: std::io::Error::new(self, ""),
    |                    ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:498:11
    |
498 | impl From<std::io::Error> for UIoError {
    |           ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:499:5
    |
499 | /     fn from(f: std::io::Error) -> Self {
500 | |         Self {
501 | |             context: None,
502 | |             inner: f,
503 | |         }
504 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:500:9
    |
500 | /         Self {
501 | |             context: None,
502 | |             inner: f,
503 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
500 |         return Self {
    |         ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:499:16
    |
499 |     fn from(f: std::io::Error) -> Self {
    |                ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:499:13
    |
499 |     fn from(f: std::io::Error) -> Self {
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:507:11
    |
507 | impl From<std::io::Error> for Box<dyn UError> {
    |           ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:508:5
    |
508 | /     fn from(f: std::io::Error) -> Self {
509 | |         let u_error: UIoError = f.into();
510 | |         Box::new(u_error) as Self
511 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:510:9
    |
510 |         Box::new(u_error) as Self
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
510 |         return Box::new(u_error) as Self
    |         ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:508:16
    |
508 |     fn from(f: std::io::Error) -> Self {
    |                ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:508:13
    |
508 |     fn from(f: std::io::Error) -> Self {
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:510:9
    |
510 |         Box::new(u_error) as Self
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:530:5
    |
530 | /     fn map_err_context(self, context: impl FnOnce() -> String) -> UResult<T> {
531 | |         self.map_err(|e| {
532 | |             Box::new(UIoError {
533 | |                 context: Some(context()),
...   |
536 | |         })
537 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:531:9
    |
531 | /         self.map_err(|e| {
532 | |             Box::new(UIoError {
533 | |                 context: Some(context()),
534 | |                 inner: std::io::Error::from_raw_os_error(e as i32),
535 | |             }) as Box<dyn UError>
536 | |         })
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
531 |         return self.map_err(|e| {
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:532:13
    |
532 | /             Box::new(UIoError {
533 | |                 context: Some(context()),
534 | |                 inner: std::io::Error::from_raw_os_error(e as i32),
535 | |             }) as Box<dyn UError>
    | |_________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
532 |             return Box::new(UIoError {
    |             ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:531:23
    |
531 |         self.map_err(|e| {
    |                       ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:532:13
    |
532 | /             Box::new(UIoError {
533 | |                 context: Some(context()),
534 | |                 inner: std::io::Error::from_raw_os_error(e as i32),
535 | |             }) as Box<dyn UError>
    | |_________________________________^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:534:24
    |
534 |                 inner: std::io::Error::from_raw_os_error(e as i32),
    |                        ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:534:58
    |
534 |                 inner: std::io::Error::from_raw_os_error(e as i32),
    |                                                          ^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:542:5
    |
542 | /     fn map_err_context(self, context: impl FnOnce() -> String) -> UResult<T> {
543 | |         Err(Box::new(UIoError {
544 | |             context: Some(context()),
545 | |             inner: std::io::Error::from_raw_os_error(self as i32),
546 | |         }) as Box<dyn UError>)
547 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:543:9
    |
543 | /         Err(Box::new(UIoError {
544 | |             context: Some(context()),
545 | |             inner: std::io::Error::from_raw_os_error(self as i32),
546 | |         }) as Box<dyn UError>)
    | |______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
543 |         return Err(Box::new(UIoError {
    |         ++++++

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:543:13
    |
543 |           Err(Box::new(UIoError {
    |  _____________^
544 | |             context: Some(context()),
545 | |             inner: std::io::Error::from_raw_os_error(self as i32),
546 | |         }) as Box<dyn UError>)
    | |_____________________________^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:545:20
    |
545 |             inner: std::io::Error::from_raw_os_error(self as i32),
    |                    ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:545:54
    |
545 |             inner: std::io::Error::from_raw_os_error(self as i32),
    |                                                      ^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:552:5
    |
552 | /     fn from(f: nix::Error) -> Self {
553 | |         Self {
554 | |             context: None,
555 | |             inner: std::io::Error::from_raw_os_error(f as i32),
556 | |         }
557 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:553:9
    |
553 | /         Self {
554 | |             context: None,
555 | |             inner: std::io::Error::from_raw_os_error(f as i32),
556 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
553 |         return Self {
    |         ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:552:13
    |
552 |     fn from(f: nix::Error) -> Self {
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:555:20
    |
555 |             inner: std::io::Error::from_raw_os_error(f as i32),
    |                    ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:555:54
    |
555 |             inner: std::io::Error::from_raw_os_error(f as i32),
    |                                                      ^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:562:5
    |
562 | /     fn from(f: nix::Error) -> Self {
563 | |         let u_error: UIoError = f.into();
564 | |         Box::new(u_error) as Self
565 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:564:9
    |
564 |         Box::new(u_error) as Self
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
564 |         return Box::new(u_error) as Self
    |         ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:562:13
    |
562 |     fn from(f: nix::Error) -> Self {
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: using a potentially dangerous silent `as` conversion
   --> src/uucore/src/lib/mods/error.rs:564:9
    |
564 |         Box::new(u_error) as Self
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: item name ends with its containing module's name
   --> src/uucore/src/lib/mods/error.rs:626:14
    |
626 | macro_rules! uio_error(
    |              ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: exported structs should not be exhaustive
   --> src/uucore/src/lib/mods/error.rs:650:1
    |
650 | pub struct ExitCode(pub i32);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_structs
help: try adding #[non_exhaustive]
    |
650 + #[non_exhaustive]
651 | pub struct ExitCode(pub i32);
    |

warning: this method could have a `#[must_use]` attribute
   --> src/uucore/src/lib/mods/error.rs:655:5
    |
655 |     pub fn new(code: i32) -> Box<dyn UError> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(code: i32) -> Box<dyn UError>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:655:5
    |
655 | /     pub fn new(code: i32) -> Box<dyn UError> {
656 | |         Box::new(Self(code))
657 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:656:9
    |
656 |         Box::new(Self(code))
    |         ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
656 |         return Box::new(Self(code))
    |         ++++++

warning: missing trait method provided by default: `source`
   --> src/uucore/src/lib/mods/error.rs:660:1
    |
660 | impl Error for ExitCode {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:105:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `type_id`
   --> src/uucore/src/lib/mods/error.rs:660:1
    |
660 | impl Error for ExitCode {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:116:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `description`
   --> src/uucore/src/lib/mods/error.rs:660:1
    |
660 | impl Error for ExitCode {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:131:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `cause`
   --> src/uucore/src/lib/mods/error.rs:660:1
    |
660 | impl Error for ExitCode {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:141:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `provide`
   --> src/uucore/src/lib/mods/error.rs:660:1
    |
660 | impl Error for ExitCode {}
    | ^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:204:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:663:5
    |
663 | /     fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
664 | |         Ok(())
665 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:664:9
    |
664 |         Ok(())
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
664 |         return Ok(())
    |         ++++++

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/mods/error.rs:663:56
    |
663 |     fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:663:56
    |
663 |     fn fmt(&self, _: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                        ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing trait method provided by default: `usage`
   --> src/uucore/src/lib/mods/error.rs:668:1
    |
668 | impl UError for ExitCode {
    | ^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/error.rs:263:5
    |
263 |     fn usage(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:669:5
    |
669 | /     fn code(&self) -> i32 {
670 | |         self.0
671 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:670:9
    |
670 |         self.0
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
670 |         return self.0
    |         ++++++

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:675:5
    |
675 | /     fn from(i: i32) -> Self {
676 | |         ExitCode::new(i)
677 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:676:9
    |
676 |         ExitCode::new(i)
    |         ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
676 |         return ExitCode::new(i)
    |         ++++++

warning: item name ends with its containing module's name
   --> src/uucore/src/lib/mods/error.rs:706:11
    |
706 | pub trait UClapError<T> {
    |           ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:712:5
    |
712 | /     fn from(e: clap::Error) -> Self {
713 | |         Box::new(ClapErrorWrapper { code: 1, error: e })
714 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:713:9
    |
713 |         Box::new(ClapErrorWrapper { code: 1, error: e })
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
713 |         return Box::new(ClapErrorWrapper { code: 1, error: e })
    |         ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:712:13
    |
712 |     fn from(e: clap::Error) -> Self {
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:718:5
    |
718 | /     fn with_exit_code(self, code: i32) -> ClapErrorWrapper {
719 | |         ClapErrorWrapper { code, error: self }
720 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:719:9
    |
719 |         ClapErrorWrapper { code, error: self }
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
719 |         return ClapErrorWrapper { code, error: self }
    |         ++++++

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:726:5
    |
726 | /     fn with_exit_code(self, code: i32) -> Result<clap::ArgMatches, ClapErrorWrapper> {
727 | |         self.map_err(|e| e.with_exit_code(code))
728 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:727:9
    |
727 |         self.map_err(|e| e.with_exit_code(code))
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
727 |         return self.map_err(|e| e.with_exit_code(code))
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:727:26
    |
727 |         self.map_err(|e| e.with_exit_code(code))
    |                          ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
727 |         self.map_err(|e| return e.with_exit_code(code))
    |                          ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/error.rs:727:23
    |
727 |         self.map_err(|e| e.with_exit_code(code))
    |                       ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing trait method provided by default: `usage`
   --> src/uucore/src/lib/mods/error.rs:731:1
    |
731 | impl UError for ClapErrorWrapper {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/error.rs:263:5
    |
263 |     fn usage(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:732:5
    |
732 | /     fn code(&self) -> i32 {
...   |
743 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:739:13
    |
739 |             0
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
739 |             return 0
    |             ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:741:13
    |
741 |             self.code
    |             ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
741 |             return self.code
    |             ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:736:16
    |
736 |         if let clap::error::ErrorKind::DisplayHelp | clap::error::ErrorKind::DisplayVersion =
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:736:54
    |
736 |         if let clap::error::ErrorKind::DisplayHelp | clap::error::ErrorKind::DisplayVersion =
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing trait method provided by default: `source`
   --> src/uucore/src/lib/mods/error.rs:746:1
    |
746 | impl Error for ClapErrorWrapper {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:105:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `type_id`
   --> src/uucore/src/lib/mods/error.rs:746:1
    |
746 | impl Error for ClapErrorWrapper {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:116:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `description`
   --> src/uucore/src/lib/mods/error.rs:746:1
    |
746 | impl Error for ClapErrorWrapper {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:131:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `cause`
   --> src/uucore/src/lib/mods/error.rs:746:1
    |
746 | impl Error for ClapErrorWrapper {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:141:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `provide`
   --> src/uucore/src/lib/mods/error.rs:746:1
    |
746 | impl Error for ClapErrorWrapper {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> /rustc/17067e9ac6d7ecb70e50f92c1944e545188d2359/library/core/src/error.rs:204:5
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
   --> src/uucore/src/lib/mods/error.rs:750:5
    |
750 | /     fn fmt(&self, _f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
751 | |         self.error.print().unwrap();
752 | |         Ok(())
753 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: used unwrap or expect in a function that returns result or option
   --> src/uucore/src/lib/mods/error.rs:750:5
    |
750 | /     fn fmt(&self, _f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
751 | |         self.error.print().unwrap();
752 | |         Ok(())
753 | |     }
    | |_____^
    |
    = help: unwrap and expect should not be used in a function that returns result or option
note: potential non-recoverable error(s)
   --> src/uucore/src/lib/mods/error.rs:751:9
    |
751 |         self.error.print().unwrap();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_in_result
    = note: `-W clippy::unwrap-in-result` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::unwrap_in_result)]`

warning: missing `return` statement
   --> src/uucore/src/lib/mods/error.rs:752:9
    |
752 |         Ok(())
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
752 |         return Ok(())
    |         ++++++

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/mods/error.rs:750:57
    |
750 |     fn fmt(&self, _f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                         ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/error.rs:750:57
    |
750 |     fn fmt(&self, _f: &mut Formatter<'_>) -> Result<(), std::fmt::Error> {
    |                                                         ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: used `unwrap()` on a `Result` value
   --> src/uucore/src/lib/mods/error.rs:751:9
    |
751 |         self.error.print().unwrap();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uucore/src/lib/mods/io.rs:64:12
   |
64 |     pub fn from<T: AsFd>(t: T) -> io::Result<Self> {
   |            ^^^^
   |
note: should be placed before `open_file`
  --> src/uucore/src/lib/mods/io.rs:45:12
   |
45 |     pub fn open_file(options: &OpenOptions, path: &Path) -> io::Result<Self> {
   |            ^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uucore/src/lib/mods/io.rs:88:12
   |
88 |     pub fn as_raw(&self) -> &NativeType {
   |            ^^^^^^
   |
note: should be placed before `try_clone`
  --> src/uucore/src/lib/mods/io.rs:82:12
   |
82 |     pub fn try_clone(&self) -> io::Result<Self> {
   |            ^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: this method could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/io.rs:40:5
   |
40 |     pub fn new(x: NativeType) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new(x: NativeType) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:40:5
   |
40 | /     pub fn new(x: NativeType) -> Self {
41 | |         Self { fx: x }
42 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:41:9
   |
41 |         Self { fx: x }
   |         ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
41 |         return Self { fx: x }
   |         ++++++

warning: this could be a `const fn`
  --> src/uucore/src/lib/mods/io.rs:40:5
   |
40 | /     pub fn new(x: NativeType) -> Self {
41 | |         Self { fx: x }
42 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
40 |     pub const fn new(x: NativeType) -> Self {
   |         +++++

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/mods/io.rs:45:5
   |
45 |     pub fn open_file(options: &OpenOptions, path: &Path) -> io::Result<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:45:5
   |
45 | /     pub fn open_file(options: &OpenOptions, path: &Path) -> io::Result<Self> {
46 | |         let f = options.open(path)?;
47 | |         Self::from(f)
48 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:47:9
   |
47 |         Self::from(f)
   |         ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
47 |         return Self::from(f)
   |         ++++++

warning: question mark operator was used
  --> src/uucore/src/lib/mods/io.rs:46:17
   |
46 |         let f = options.open(path)?;
   |                 ^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/io.rs:46:13
   |
46 |         let f = options.open(path)?;
   |             ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/mods/io.rs:64:5
   |
64 |     pub fn from<T: AsFd>(t: T) -> io::Result<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:64:5
   |
64 | /     pub fn from<T: AsFd>(t: T) -> io::Result<Self> {
65 | |         Ok(Self {
66 | |             fx: t.as_fd().try_clone_to_owned()?,
67 | |         })
68 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:65:9
   |
65 | /         Ok(Self {
66 | |             fx: t.as_fd().try_clone_to_owned()?,
67 | |         })
   | |__________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
65 |         return Ok(Self {
   |         ++++++

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/io.rs:64:26
   |
64 |     pub fn from<T: AsFd>(t: T) -> io::Result<Self> {
   |                          ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: question mark operator was used
  --> src/uucore/src/lib/mods/io.rs:66:17
   |
66 |             fx: t.as_fd().try_clone_to_owned()?,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: this method could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/io.rs:71:5
   |
71 |     pub fn into_file(self) -> File {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn into_file(self) -> File`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:71:5
   |
71 | /     pub fn into_file(self) -> File {
72 | |         File::from(self.fx)
73 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:72:9
   |
72 |         File::from(self.fx)
   |         ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
72 |         return File::from(self.fx)
   |         ++++++

warning: this method could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/io.rs:76:5
   |
76 |     pub fn into_stdio(self) -> Stdio {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn into_stdio(self) -> Stdio`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:76:5
   |
76 | /     pub fn into_stdio(self) -> Stdio {
77 | |         Stdio::from(self.fx)
78 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:77:9
   |
77 |         Stdio::from(self.fx)
   |         ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
77 |         return Stdio::from(self.fx)
   |         ++++++

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uucore/src/lib/mods/io.rs:82:5
   |
82 |     pub fn try_clone(&self) -> io::Result<Self> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:82:5
   |
82 | /     pub fn try_clone(&self) -> io::Result<Self> {
83 | |         self.fx.try_clone().map(Self::new)
84 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:83:9
   |
83 |         self.fx.try_clone().map(Self::new)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
83 |         return self.fx.try_clone().map(Self::new)
   |         ++++++

warning: this method could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/io.rs:88:5
   |
88 |     pub fn as_raw(&self) -> &NativeType {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn as_raw(&self) -> &NativeType`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:88:5
   |
88 | /     pub fn as_raw(&self) -> &NativeType {
89 | |         &self.fx
90 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:89:9
   |
89 |         &self.fx
   |         ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
89 |         return &self.fx
   |         ++++++

warning: this could be a `const fn`
  --> src/uucore/src/lib/mods/io.rs:88:5
   |
88 | /     pub fn as_raw(&self) -> &NativeType {
89 | |         &self.fx
90 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
88 |     pub const fn as_raw(&self) -> &NativeType {
   |         +++++

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/io.rs:95:5
   |
95 | /     fn from(value: OwnedFileDescriptorOrHandle) -> Self {
96 | |         value.into_stdio()
97 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/io.rs:96:9
   |
96 |         value.into_stdio()
   |         ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
96 |         return value.into_stdio()
   |         ++++++

warning: used import from `std` instead of `core`
 --> src/uucore/src/lib/mods/line_ending.rs:8:5
  |
8 | use std::fmt::Display;
  |     ^^^ help: consider importing the item from `core`: `core`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: exported enums should not be exhaustive
  --> src/uucore/src/lib/mods/line_ending.rs:20:1
   |
20 | / pub enum LineEnding {
21 | |     #[default]
22 | |     /// Newline character (`\n`)
23 | |     Newline = b'\n',
...  |
26 | |     Nul = 0,
27 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums
help: try adding #[non_exhaustive]
   |
20 + #[non_exhaustive]
21 | pub enum LineEnding {
   |

warning: you are deriving `PartialEq` and can implement `Eq`
  --> src/uucore/src/lib/mods/line_ending.rs:19:39
   |
19 | #[derive(Clone, Copy, Debug, Default, PartialEq)]
   |                                       ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq
   = note: `-W clippy::derive-partial-eq-without-eq` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::derive_partial_eq_without_eq)]`

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/line_ending.rs:30:5
   |
30 | /     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
31 | |         match self {
32 | |             Self::Newline => writeln!(f),
33 | |             Self::Nul => write!(f, "\0"),
34 | |         }
35 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/line_ending.rs:32:30
   |
32 |             Self::Newline => writeln!(f),
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
32 |             Self::Newline => return writeln!(f),
   |                              ++++++

warning: missing `return` statement
  --> src/uucore/src/lib/mods/line_ending.rs:33:26
   |
33 |             Self::Nul => write!(f, "\0"),
   |                          ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
33 |             Self::Nul => return write!(f, "\0"),
   |                          ++++++

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/mods/line_ending.rs:30:27
   |
30 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                           ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/line_ending.rs:30:27
   |
30 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                           ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/mods/line_ending.rs:30:55
   |
30 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                                                       ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/line_ending.rs:30:55
   |
30 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                                                       ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/line_ending.rs:30:19
   |
30 |     fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
   |                   ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: type of pattern does not match the expression type
  --> src/uucore/src/lib/mods/line_ending.rs:32:13
   |
32 |             Self::Newline => writeln!(f),
   |             ^^^^^^^^^^^^^
   |
   = help: use `*` to dereference the match expression or explicitly match against a `&_` pattern and adjust the enclosed variable bindings
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pattern_type_mismatch

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/line_ending.rs:39:5
   |
39 | /     fn from(line_ending: LineEnding) -> Self {
40 | |         line_ending as Self
41 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/line_ending.rs:40:9
   |
40 |         line_ending as Self
   |         ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
40 |         return line_ending as Self
   |         ++++++

warning: using a potentially dangerous silent `as` conversion
  --> src/uucore/src/lib/mods/line_ending.rs:40:9
   |
40 |         line_ending as Self
   |         ^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a safe wrapper for this conversion
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions

warning: this method could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/line_ending.rs:49:5
   |
49 |     pub fn from_zero_flag(is_zero_terminated: bool) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn from_zero_flag(is_zero_terminated: bool) -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/line_ending.rs:49:5
   |
49 | /     pub fn from_zero_flag(is_zero_terminated: bool) -> Self {
50 | |         if is_zero_terminated {
51 | |             Self::Nul
52 | |         } else {
...  |
55 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/line_ending.rs:51:13
   |
51 |             Self::Nul
   |             ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
51 |             return Self::Nul
   |             ++++++

warning: missing `return` statement
  --> src/uucore/src/lib/mods/line_ending.rs:53:13
   |
53 |             Self::Newline
   |             ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
53 |             return Self::Newline
   |             ++++++

warning: this could be a `const fn`
  --> src/uucore/src/lib/mods/line_ending.rs:49:5
   |
49 | /     pub fn from_zero_flag(is_zero_terminated: bool) -> Self {
50 | |         if is_zero_terminated {
51 | |             Self::Nul
52 | |         } else {
...  |
55 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
49 |     pub const fn from_zero_flag(is_zero_terminated: bool) -> Self {
   |         +++++

warning: incorrect ordering of items (module item groupings specify another order)
  --> src/uucore/src/lib/mods/locale.rs:50:11
   |
50 | pub const DEFAULT_LOCALE: &str = "en-US";
   |           ^^^^^^^^^^^^^^
   |
note: should be placed before the following item
  --> src/uucore/src/lib/mods/locale.rs:44:1
   |
44 | / impl UError for LocalizationError {
45 | |     fn code(&self) -> i32 {
46 | |         1
47 | |     }
48 | | }
   | |_^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: importing trait that is only used anonymously
  --> src/uucore/src/lib/mods/locale.rs:12:15
   |
12 | use std::str::FromStr;
   |               ^^^^^^^ help: use: `FromStr as _`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/mods/locale.rs:12:5
   |
12 | use std::str::FromStr;
   |     ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: exported enums should not be exhaustive
  --> src/uucore/src/lib/mods/locale.rs:18:1
   |
18 | / pub enum LocalizationError {
19 | |     #[error("I/O error loading '{path}': {source}")]
20 | |     Io {
21 | |         source: std::io::Error,
...  |
31 | |     PathResolution(String),
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exhaustive_enums
help: try adding #[non_exhaustive]
   |
18 + #[non_exhaustive]
19 | pub enum LocalizationError {
   |

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uucore/src/lib/mods/locale.rs:27:5
   |
27 |     Bundle(String),
   |     ^^^^^^
   |
note: should be placed before `Parse`
  --> src/uucore/src/lib/mods/locale.rs:25:5
   |
25 |     Parse(String),
   |     ^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/locale.rs:21:17
   |
21 |         source: std::io::Error,
   |                 ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/locale.rs:34:11
   |
34 | impl From<std::io::Error> for LocalizationError {
   |           ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/locale.rs:35:5
   |
35 | /     fn from(error: std::io::Error) -> Self {
36 | |         LocalizationError::Io {
37 | |             source: error,
38 | |             path: PathBuf::from("<unknown>"),
39 | |         }
40 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/locale.rs:36:9
   |
36 | /         LocalizationError::Io {
37 | |             source: error,
38 | |             path: PathBuf::from("<unknown>"),
39 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
36 |         return LocalizationError::Io {
   |         ++++++

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/locale.rs:35:20
   |
35 |     fn from(error: std::io::Error) -> Self {
   |                    ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: unnecessary structure name repetition
  --> src/uucore/src/lib/mods/locale.rs:36:9
   |
36 |         LocalizationError::Io {
   |         ^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::use_self)]`

warning: missing trait method provided by default: `usage`
   --> src/uucore/src/lib/mods/locale.rs:44:1
    |
44  | impl UError for LocalizationError {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/mods/error.rs:263:5
    |
263 |     fn usage(&self) -> bool {
    |     ^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing `#[inline]` for a method
  --> src/uucore/src/lib/mods/locale.rs:45:5
   |
45 | /     fn code(&self) -> i32 {
46 | |         1
47 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/locale.rs:46:9
   |
46 |         1
   |         ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
46 |         return 1
   |         ++++++

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uucore/src/lib/mods/locale.rs:55:5
   |
55 |     fallback_bundle: Option<FluentBundle<FluentResource>>,
   |     ^^^^^^^^^^^^^^^
   |
note: should be placed before `primary_bundle`
  --> src/uucore/src/lib/mods/locale.rs:54:5
   |
54 |     primary_bundle: FluentBundle<FluentResource>,
   |     ^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uucore/src/lib/mods/locale.rs:71:8
   |
71 |     fn format(&self, id: &str, args: Option<&FluentArgs>) -> String {
   |        ^^^^^^
   |
note: should be placed before `with_fallback`
  --> src/uucore/src/lib/mods/locale.rs:66:8
   |
66 |     fn with_fallback(mut self, fallback_bundle: FluentBundle<FluentResource>) -> Self {
   |        ^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing `return` statement
  --> src/uucore/src/lib/mods/locale.rs:60:9
   |
60 | /         Self {
61 | |             primary_bundle,
62 | |             fallback_bundle: None,
63 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
60 |         return Self {
   |         ++++++

warning: this could be a `const fn`
  --> src/uucore/src/lib/mods/locale.rs:59:5
   |
59 | /     fn new(primary_bundle: FluentBundle<FluentResource>) -> Self {
60 | |         Self {
61 | |             primary_bundle,
62 | |             fallback_bundle: None,
63 | |         }
64 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
59 |     const fn new(primary_bundle: FluentBundle<FluentResource>) -> Self {
   |     +++++

warning: missing `return` statement
  --> src/uucore/src/lib/mods/locale.rs:68:9
   |
68 |         self
   |         ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
68 |         return self
   |         ++++++

warning: missing `return` statement
  --> src/uucore/src/lib/mods/locale.rs:92:9
   |
92 |         id.to_string()
   |         ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
92 |         return id.to_string()
   |         ++++++

warning: missing `return` statement
  --> src/uucore/src/lib/mods/locale.rs:73:81
   |
73 |         if let Some(message) = self.primary_bundle.get_message(id).and_then(|m| m.value()) {
   |                                                                                 ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
73 |         if let Some(message) = self.primary_bundle.get_message(id).and_then(|m| return m.value()) {
   |                                                                                 ++++++

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/locale.rs:73:78
   |
73 |         if let Some(message) = self.primary_bundle.get_message(id).and_then(|m| m.value()) {
   |                                                                              ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
  --> src/uucore/src/lib/mods/locale.rs:83:74
   |
83 |             if let Some(message) = fallback.get_message(id).and_then(|m| m.value()) {
   |                                                                          ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
83 |             if let Some(message) = fallback.get_message(id).and_then(|m| return m.value()) {
   |                                                                          ++++++

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/locale.rs:83:71
   |
83 |             if let Some(message) = fallback.get_message(id).and_then(|m| m.value()) {
   |                                                                       ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: `to_string()` called on a `&str`
  --> src/uucore/src/lib/mods/locale.rs:92:9
   |
92 |         id.to_string()
   |         ^^^^^^^^^^^^^^ help: try: `id.to_owned()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string
   = note: `-W clippy::str-to-string` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::str_to_string)]`

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore/src/lib/mods/locale.rs:102:1
    |
102 | / fn init_localization(
103 | |     locale: &LanguageIdentifier,
104 | |     locales_dir: &Path,
105 | | ) -> Result<(), LocalizationError> {
    | |__________________________________^
    |
note: first possible panic found here
   --> src/uucore/src/lib/mods/locale.rs:106:21
    |
106 |       let en_locale = LanguageIdentifier::from_str(DEFAULT_LOCALE)
    |  _____________________^
107 | |         .expect("Default locale should always be valid");
    | |________________________________________________________^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/mods/locale.rs:102:1
    |
102 | / fn init_localization(
103 | |     locale: &LanguageIdentifier,
104 | |     locales_dir: &Path,
105 | | ) -> Result<(), LocalizationError> {
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:128:5
    |
128 |     Ok(())
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
128 |     return Ok(())
    |     ++++++

warning: used `expect()` on a `Result` value
   --> src/uucore/src/lib/mods/locale.rs:106:21
    |
106 |       let en_locale = LanguageIdentifier::from_str(DEFAULT_LOCALE)
    |  _____________________^
107 | |         .expect("Default locale should always be valid");
    | |________________________________________________________^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used
    = note: `-W clippy::expect-used` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::expect_used)]`

warning: question mark operator was used
   --> src/uucore/src/lib/mods/locale.rs:109:26
    |
109 |     let english_bundle = create_bundle(&en_locale, locales_dir)?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uucore/src/lib/mods/locale.rs:124:5
    |
124 | /     LOCALIZER.with(|lock| {
125 | |         lock.set(loc)
126 | |             .map_err(|_| LocalizationError::Bundle("Localizer already initialized".into()))
127 | |     })?;
    | |_______^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:125:9
    |
125 | /         lock.set(loc)
126 | |             .map_err(|_| LocalizationError::Bundle("Localizer already initialized".into()))
    | |___________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
125 |         return lock.set(loc)
    |         ++++++

warning: `map_err(|_|...` wildcard pattern discards the original error
   --> src/uucore/src/lib/mods/locale.rs:126:22
    |
126 |             .map_err(|_| LocalizationError::Bundle("Localizer already initialized".into()))
    |                      ^^^
    |
    = help: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore
    = note: `-W clippy::map-err-ignore` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::map_err_ignore)]`

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:126:26
    |
126 |             .map_err(|_| LocalizationError::Bundle("Localizer already initialized".into()))
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
126 |             .map_err(|_| return LocalizationError::Bundle("Localizer already initialized".into()))
    |                          ++++++

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/mods/locale.rs:132:1
    |
132 | / fn create_bundle(
133 | |     locale: &LanguageIdentifier,
134 | |     locales_dir: &Path,
135 | | ) -> Result<FluentBundle<FluentResource>, LocalizationError> {
    | |____________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:160:5
    |
160 |     Ok(bundle)
    |     ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
160 |     return Ok(bundle)
    |     ++++++

warning: question mark operator was used
   --> src/uucore/src/lib/mods/locale.rs:138:20
    |
138 |       let ftl_file = fs::read_to_string(&locale_path).map_err(|e| LocalizationError::Io {
    |  ____________________^
139 | |         source: e,
140 | |         path: locale_path.clone(),
141 | |     })?;
    | |_______^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:138:65
    |
138 |       let ftl_file = fs::read_to_string(&locale_path).map_err(|e| LocalizationError::Io {
    |  _________________________________________________________________^
139 | |         source: e,
140 | |         path: locale_path.clone(),
141 | |     })?;
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
138 |     let ftl_file = fs::read_to_string(&locale_path).map_err(|e| return LocalizationError::Io {
    |                                                                 ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/locale.rs:138:62
    |
138 |     let ftl_file = fs::read_to_string(&locale_path).map_err(|e| LocalizationError::Io {
    |                                                              ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: question mark operator was used
   --> src/uucore/src/lib/mods/locale.rs:143:20
    |
143 |       let resource = FluentResource::try_new(ftl_file).map_err(|_| {
    |  ____________________^
144 | |         LocalizationError::Parse(format!(
145 | |             "Failed to parse localization resource for {}: {}",
146 | |             locale,
147 | |             locale_path.display()
148 | |         ))
149 | |     })?;
    | |_______^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: `map_err(|_|...` wildcard pattern discards the original error
   --> src/uucore/src/lib/mods/locale.rs:143:62
    |
143 |     let resource = FluentResource::try_new(ftl_file).map_err(|_| {
    |                                                              ^^^
    |
    = help: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:144:9
    |
144 | /         LocalizationError::Parse(format!(
145 | |             "Failed to parse localization resource for {}: {}",
146 | |             locale,
147 | |             locale_path.display()
148 | |         ))
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
144 |         return LocalizationError::Parse(format!(
    |         ++++++

warning: question mark operator was used
   --> src/uucore/src/lib/mods/locale.rs:153:5
    |
153 | /     bundle.add_resource(resource).map_err(|errs| {
154 | |         LocalizationError::Bundle(format!(
155 | |             "Failed to add resource to bundle for {}: {:?}",
156 | |             locale, errs
157 | |         ))
158 | |     })?;
    | |_______^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:154:9
    |
154 | /         LocalizationError::Bundle(format!(
155 | |             "Failed to add resource to bundle for {}: {:?}",
156 | |             locale, errs
157 | |         ))
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
154 |         return LocalizationError::Bundle(format!(
    |         ++++++

warning: variables can be used directly in the `format!` string
   --> src/uucore/src/lib/mods/locale.rs:154:35
    |
154 |           LocalizationError::Bundle(format!(
    |  ___________________________________^
155 | |             "Failed to add resource to bundle for {}: {:?}",
156 | |             locale, errs
157 | |         ))
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
    = note: `-W clippy::uninlined-format-args` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::uninlined_format_args)]`

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:164:5
    |
164 | /     LOCALIZER.with(|lock| {
165 | |         lock.get()
166 | |             .map(|loc| loc.format(id, args.as_ref()))
167 | |             .unwrap_or_else(|| id.to_string()) // Return the key ID if localizer not initialized
168 | |     })
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
164 |     return LOCALIZER.with(|lock| {
    |     ++++++

warning: this argument is passed by value, but not consumed in the function body
   --> src/uucore/src/lib/mods/locale.rs:163:41
    |
163 | fn get_message_internal(id: &str, args: Option<FluentArgs>) -> String {
    |                                         ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
    = note: `-W clippy::needless-pass-by-value` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::needless_pass_by_value)]`
help: consider taking a reference instead
    |
163 | fn get_message_internal(id: &str, args: Option<&FluentArgs>) -> String {
    |                                                +

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:165:9
    |
165 | /         lock.get()
166 | |             .map(|loc| loc.format(id, args.as_ref()))
167 | |             .unwrap_or_else(|| id.to_string()) // Return the key ID if localizer not initialized
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
165 |         return lock.get()
    |         ++++++

warning: called `map(<f>).unwrap_or_else(<g>)` on an `Option` value
   --> src/uucore/src/lib/mods/locale.rs:165:9
    |
165 | /         lock.get()
166 | |             .map(|loc| loc.format(id, args.as_ref()))
167 | |             .unwrap_or_else(|| id.to_string()) // Return the key ID if localizer not initialized
    | |______________________________________________^ help: try: `lock.get().map_or_else(|| id.to_string(), |loc| loc.format(id, args.as_ref()))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or
    = note: `-W clippy::map-unwrap-or` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::map_unwrap_or)]`

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:166:24
    |
166 |             .map(|loc| loc.format(id, args.as_ref()))
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
166 |             .map(|loc| return loc.format(id, args.as_ref()))
    |                        ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:167:32
    |
167 |             .unwrap_or_else(|| id.to_string()) // Return the key ID if localizer not initialized
    |                                ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
167 |             .unwrap_or_else(|| return id.to_string()) // Return the key ID if localizer not initialized
    |                                ++++++

warning: `to_string()` called on a `&str`
   --> src/uucore/src/lib/mods/locale.rs:167:32
    |
167 |             .unwrap_or_else(|| id.to_string()) // Return the key ID if localizer not initialized
    |                                ^^^^^^^^^^^^^^ help: try: `id.to_owned()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/mods/locale.rs:195:1
    |
195 | pub fn get_message(id: &str) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_message(id: &str) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/mods/locale.rs:195:1
    |
195 | / pub fn get_message(id: &str) -> String {
196 | |     get_message_internal(id, None)
197 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:196:5
    |
196 |     get_message_internal(id, None)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
196 |     return get_message_internal(id, None)
    |     ++++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/mods/locale.rs:230:1
    |
230 | pub fn get_message_with_args(id: &str, ftl_args: HashMap<String, String>) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get_message_with_args(id: &str, ftl_args: HashMap<String, String>) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/mods/locale.rs:230:1
    |
230 | / pub fn get_message_with_args(id: &str, ftl_args: HashMap<String, String>) -> String {
231 | |     let mut args = FluentArgs::new();
232 | |
233 | |     for (key, value) in ftl_args {
...   |
245 | |     get_message_internal(id, Some(args))
246 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: parameter of type `HashMap` should be generalized over different hashers
   --> src/uucore/src/lib/mods/locale.rs:230:50
    |
230 | pub fn get_message_with_args(id: &str, ftl_args: HashMap<String, String>) -> String {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_hasher
    = note: `-W clippy::implicit-hasher` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::implicit_hasher)]`
help: add a type parameter for `BuildHasher`
    |
230 | pub fn get_message_with_args<S: ::std::hash::BuildHasher>(id: &str, ftl_args: HashMap<String, String, S>) -> String {
    |                             +++++++++++++++++++++++++++++                                           +++

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:245:5
    |
245 |     get_message_internal(id, Some(args))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
245 |     return get_message_internal(id, Some(args))
    |     ++++++

warning: iteration over unordered hash-based type
   --> src/uucore/src/lib/mods/locale.rs:233:5
    |
233 | /     for (key, value) in ftl_args {
234 | |         // Try to parse as number first for proper pluralization support
235 | |         if let Ok(num_val) = value.parse::<i64>() {
236 | |             args.set(key, num_val);
...   |
243 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#iter_over_hash_type
    = note: `-W clippy::iter-over-hash-type` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::iter_over_hash_type)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/mods/locale.rs:249:1
    |
249 | fn detect_system_locale() -> Result<LanguageIdentifier, LocalizationError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:257:5
    |
257 | /     LanguageIdentifier::from_str(&locale_str)
258 | |         .map_err(|_| LocalizationError::Parse(format!("Failed to parse locale: {}", locale_str)))
    | |_________________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
257 |     return LanguageIdentifier::from_str(&locale_str)
    |     ++++++

warning: `to_string()` called on a `&str`
   --> src/uucore/src/lib/mods/locale.rs:250:22
    |
250 |       let locale_str = std::env::var("LANG")
    |  ______________________^
251 | |         .unwrap_or_else(|_| DEFAULT_LOCALE.to_string())
252 | |         .split('.')
253 | |         .next()
254 | |         .unwrap_or(DEFAULT_LOCALE)
255 | |         .to_string();
    | |____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string
help: try
    |
250 ~     let locale_str = std::env::var("LANG")
251 +         .unwrap_or_else(|_| DEFAULT_LOCALE.to_string())
252 +         .split('.')
253 +         .next()
254 ~         .unwrap_or(DEFAULT_LOCALE).to_owned();
    |

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/mods/locale.rs:250:22
    |
250 |     let locale_str = std::env::var("LANG")
    |                      ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:251:29
    |
251 |         .unwrap_or_else(|_| DEFAULT_LOCALE.to_string())
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
251 |         .unwrap_or_else(|_| return DEFAULT_LOCALE.to_string())
    |                             ++++++

warning: `to_string()` called on a `&str`
   --> src/uucore/src/lib/mods/locale.rs:251:29
    |
251 |         .unwrap_or_else(|_| DEFAULT_LOCALE.to_string())
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `DEFAULT_LOCALE.to_owned()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#str_to_string

warning: `map_err(|_|...` wildcard pattern discards the original error
   --> src/uucore/src/lib/mods/locale.rs:258:18
    |
258 |         .map_err(|_| LocalizationError::Parse(format!("Failed to parse locale: {}", locale_str)))
    |                  ^^^
    |
    = help: consider storing the original error as a source in the new error, or silence this warning using an ignored identifier (`.map_err(|_foo| ...`)
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_err_ignore

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:258:22
    |
258 |         .map_err(|_| LocalizationError::Parse(format!("Failed to parse locale: {}", locale_str)))
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
258 |         .map_err(|_| return LocalizationError::Parse(format!("Failed to parse locale: {}", locale_str)))
    |                      ++++++

warning: variables can be used directly in the `format!` string
   --> src/uucore/src/lib/mods/locale.rs:258:47
    |
258 |         .map_err(|_| LocalizationError::Parse(format!("Failed to parse locale: {}", locale_str)))
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
258 -         .map_err(|_| LocalizationError::Parse(format!("Failed to parse locale: {}", locale_str)))
258 +         .map_err(|_| LocalizationError::Parse(format!("Failed to parse locale: {locale_str}")))
    |

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore/src/lib/mods/locale.rs:297:1
    |
297 | pub fn setup_localization(p: &str) -> Result<(), LocalizationError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uucore/src/lib/mods/locale.rs:299:9
    |
299 |         LanguageIdentifier::from_str(DEFAULT_LOCALE).expect("Default locale should always be valid")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/mods/locale.rs:297:1
    |
297 | / pub fn setup_localization(p: &str) -> Result<(), LocalizationError> {
298 | |     let locale = detect_system_locale().unwrap_or_else(|_| {
299 | |         LanguageIdentifier::from_str(DEFAULT_LOCALE).expect("Default locale should always be valid")
300 | |     });
...   |
303 | |     init_localization(&locale, &locales_dir)
304 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:303:5
    |
303 |     init_localization(&locale, &locales_dir)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
303 |     return init_localization(&locale, &locales_dir)
    |     ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/locale.rs:297:27
    |
297 | pub fn setup_localization(p: &str) -> Result<(), LocalizationError> {
    |                           ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:299:9
    |
299 |         LanguageIdentifier::from_str(DEFAULT_LOCALE).expect("Default locale should always be valid")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
299 |         return LanguageIdentifier::from_str(DEFAULT_LOCALE).expect("Default locale should always be valid")
    |         ++++++

warning: used `expect()` on a `Result` value
   --> src/uucore/src/lib/mods/locale.rs:299:9
    |
299 |         LanguageIdentifier::from_str(DEFAULT_LOCALE).expect("Default locale should always be valid")
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used

warning: question mark operator was used
   --> src/uucore/src/lib/mods/locale.rs:302:23
    |
302 |     let locales_dir = get_locales_dir(p)?;
    |                       ^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/mods/locale.rs:307:1
    |
307 | fn get_locales_dir(p: &str) -> Result<PathBuf, LocalizationError> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uucore/src/lib/mods/locale.rs:328:9
    |
328 | /         Err(LocalizationError::LocalesDirNotFound(format!(
329 | |             "Development locales directory not found at {} or {}",
330 | |             dev_path.display(),
331 | |             fallback_dev_path.display()
332 | |         )))
    | |___________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
328 |         return Err(LocalizationError::LocalesDirNotFound(format!(
    |         ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/mods/locale.rs:307:20
    |
307 | fn get_locales_dir(p: &str) -> Result<PathBuf, LocalizationError> {
    |                    ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this function could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/os.rs:11:1
   |
11 | pub fn is_wsl_1() -> bool {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_wsl_1() -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/os.rs:11:1
   |
11 | / pub fn is_wsl_1() -> bool {
12 | |     #[cfg(target_os = "linux")]
13 | |     {
14 | |         if is_wsl_2() {
...  |
24 | |     false
25 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/os.rs:24:5
   |
24 |     false
   |     ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
24 |     return false
   |     ++++++

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/os.rs:17:24
   |
17 |         if let Ok(b) = std::fs::read("/proc/sys/kernel/osrelease") {
   |                        ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/os.rs:17:19
   |
17 |         if let Ok(b) = std::fs::read("/proc/sys/kernel/osrelease") {
   |                   ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/mods/os.rs:18:28
   |
18 |             if let Ok(s) = std::str::from_utf8(&b) {
   |                            ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/os.rs:18:28
   |
18 |             if let Ok(s) = std::str::from_utf8(&b) {
   |                            ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/os.rs:18:23
   |
18 |             if let Ok(s) = std::str::from_utf8(&b) {
   |                       ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/os.rs:19:21
   |
19 |                 let a = s.to_ascii_lowercase();
   |                     ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this function could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/os.rs:28:1
   |
28 | pub fn is_wsl_2() -> bool {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn is_wsl_2() -> bool`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/os.rs:28:1
   |
28 | / pub fn is_wsl_2() -> bool {
29 | |     #[cfg(target_os = "linux")]
30 | |     {
31 | |         if let Ok(b) = std::fs::read("/proc/sys/kernel/osrelease") {
...  |
38 | |     false
39 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
  --> src/uucore/src/lib/mods/os.rs:38:5
   |
38 |     false
   |     ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
38 |     return false
   |     ++++++

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/os.rs:31:24
   |
31 |         if let Ok(b) = std::fs::read("/proc/sys/kernel/osrelease") {
   |                        ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/os.rs:31:19
   |
31 |         if let Ok(b) = std::fs::read("/proc/sys/kernel/osrelease") {
   |                   ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: used import from `std` instead of `core`
  --> src/uucore/src/lib/mods/os.rs:32:28
   |
32 |             if let Ok(s) = std::str::from_utf8(&b) {
   |                            ^^^ help: consider importing the item from `core`: `core`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: consider bringing this path into scope with the `use` keyword
  --> src/uucore/src/lib/mods/os.rs:32:28
   |
32 |             if let Ok(s) = std::str::from_utf8(&b) {
   |                            ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/os.rs:32:23
   |
32 |             if let Ok(s) = std::str::from_utf8(&b) {
   |                       ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/os.rs:33:21
   |
33 |                 let a = s.to_ascii_lowercase();
   |                     ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
  --> src/uucore/src/lib/mods/panic.rs:25:5
   |
25 |     false
   |     ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
25 |     return false
   |     ++++++

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/panic.rs:38:1
   |
38 | / pub fn mute_sigpipe_panic() {
39 | |     let hook = panic::take_hook();
40 | |     panic::set_hook(Box::new(move |info| {
41 | |         if !is_broken_pipe(info) {
...  |
44 | |     }));
45 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: item name ends with its containing module's name
  --> src/uucore/src/lib/mods/panic.rs:38:8
   |
38 | pub fn mute_sigpipe_panic() {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function could have a `#[must_use]` attribute
  --> src/uucore/src/lib/mods/posix.rs:33:1
   |
33 | pub fn posix_version() -> Option<usize> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn posix_version() -> Option<usize>`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
  --> src/uucore/src/lib/mods/posix.rs:33:1
   |
33 | / pub fn posix_version() -> Option<usize> {
34 | |     env::var("_POSIX2_VERSION")
35 | |         .ok()
36 | |         .and_then(|v| v.parse::<usize>().ok())
37 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: item name starts with its containing module's name
  --> src/uucore/src/lib/mods/posix.rs:33:8
   |
33 | pub fn posix_version() -> Option<usize> {
   |        ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: missing `return` statement
  --> src/uucore/src/lib/mods/posix.rs:34:5
   |
34 | /     env::var("_POSIX2_VERSION")
35 | |         .ok()
36 | |         .and_then(|v| v.parse::<usize>().ok())
   | |______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
34 |     return env::var("_POSIX2_VERSION")
   |     ++++++

warning: use the question mark operator instead of an `and_then` call
  --> src/uucore/src/lib/mods/posix.rs:34:5
   |
34 | /     env::var("_POSIX2_VERSION")
35 | |         .ok()
36 | |         .and_then(|v| v.parse::<usize>().ok())
   | |______________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#return_and_then
help: try
   |
34 ~     let v = env::var("_POSIX2_VERSION")
35 +         .ok()?;
36 +     v.parse::<usize>().ok()
   |

warning: missing `return` statement
  --> src/uucore/src/lib/mods/posix.rs:36:23
   |
36 |         .and_then(|v| v.parse::<usize>().ok())
   |                       ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
36 |         .and_then(|v| return v.parse::<usize>().ok())
   |                       ++++++

warning: this ident consists of a single char
  --> src/uucore/src/lib/mods/posix.rs:36:20
   |
36 |         .and_then(|v| v.parse::<usize>().ok())
   |                    ^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: used import from `std` instead of `alloc`
   --> src/uucore/src/lib/lib.rs:120:5
    |
120 | use std::borrow::Cow;
    |     ^^^ help: consider importing the item from `alloc`: `alloc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc

warning: importing trait that is only used anonymously
   --> src/uucore/src/lib/lib.rs:122:15
    |
122 | use std::io::{BufRead, BufReader};
    |               ^^^^^^^ help: use: `BufRead as _`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/lib.rs:123:5
    |
123 | use std::iter;
    |     ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: importing trait that is only used anonymously
   --> src/uucore/src/lib/lib.rs:125:26
    |
125 | use std::os::unix::ffi::{OsStrExt, OsStringExt};
    |                          ^^^^^^^^ help: use: `OsStrExt as _`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: importing trait that is only used anonymously
   --> src/uucore/src/lib/lib.rs:125:36
    |
125 | use std::os::unix::ffi::{OsStrExt, OsStringExt};
    |                                    ^^^^^^^^^^^ help: use: `OsStringExt as _`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: used import from `std` instead of `alloc`
   --> src/uucore/src/lib/lib.rs:126:5
    |
126 | use std::str;
    |     ^^^ help: consider importing the item from `alloc`: `alloc`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_alloc

warning: used import from `std` instead of `core`
   --> src/uucore/src/lib/lib.rs:127:5
    |
127 | use std::sync::{LazyLock, atomic::Ordering};
    |     ^^^ help: consider importing the item from `core`: `core`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#std_instead_of_core

warning: first doc comment paragraph is too long
   --> src/uucore/src/lib/lib.rs:129:1
    |
129 | / /// Disables the custom signal handlers installed by Rust for stack-overflow handling. With those custom signal handlers processes ignore...
130 | | /// See <https://github.com/rust-lang/rust/blob/8ac1525e091d3db28e67adcbbd6db1e1deaa37fb/src/libstd/sys/unix/stack_overflow.rs#L71-L92> f...
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph
help: add an empty line
    |
130 | /// Disables the custom signal handlers installed by Rust for stack-overflow handling. With those custom signal handlers processes ignore the first SIGBUS and SIGSEGV signal they receive.
131 + ///
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/lib.rs:132:1
    |
132 | pub fn disable_rust_signal_handlers() -> Result<(), Errno> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:132:1
    |
132 | / pub fn disable_rust_signal_handlers() -> Result<(), Errno> {
133 | |     unsafe {
134 | |         sigaction(
135 | |             SIGSEGV,
...   |
145 | |     Ok(())
146 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:145:5
    |
145 |     Ok(())
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
145 |     return Ok(())
    |     ++++++

warning: question mark operator was used
   --> src/uucore/src/lib/lib.rs:133:5
    |
133 | /     unsafe {
134 | |         sigaction(
135 | |             SIGSEGV,
136 | |             &SigAction::new(SigDfl, SaFlags::empty(), SigSet::all()),
137 | |         )
138 | |     }?;
    | |______^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: unsafe block missing a safety comment
   --> src/uucore/src/lib/lib.rs:133:5
    |
133 |     unsafe {
    |     ^^^^^^^^
    |
    = help: consider adding a safety comment on the preceding line
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks

warning: question mark operator was used
   --> src/uucore/src/lib/lib.rs:139:5
    |
139 | /     unsafe {
140 | |         sigaction(
141 | |             SIGBUS,
142 | |             &SigAction::new(SigDfl, SaFlags::empty(), SigSet::all()),
143 | |         )
144 | |     }?;
    | |______^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: unsafe block missing a safety comment
   --> src/uucore/src/lib/lib.rs:139:5
    |
139 |     unsafe {
    |     ^^^^^^^^
    |
    = help: consider adding a safety comment on the preceding line
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#undocumented_unsafe_blocks

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/lib.rs:197:1
    |
197 | pub fn format_usage(s: &str) -> String {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn format_usage(s: &str) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:197:1
    |
197 | / pub fn format_usage(s: &str) -> String {
198 | |     let s = s.replace('\n', &format!("\n{}", " ".repeat(7)));
199 | |     s.replace("{}", crate::execution_phrase())
200 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:199:5
    |
199 |     s.replace("{}", crate::execution_phrase())
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
199 |     return s.replace("{}", crate::execution_phrase())
    |     ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/lib.rs:197:21
    |
197 | pub fn format_usage(s: &str) -> String {
    |                     ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: `s` is shadowed
   --> src/uucore/src/lib/lib.rs:198:9
    |
198 |     let s = s.replace('\n', &format!("\n{}", " ".repeat(7)));
    |         ^
    |
note: previous binding is here
   --> src/uucore/src/lib/lib.rs:197:21
    |
197 | pub fn format_usage(s: &str) -> String {
    |                     ^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: this ident consists of a single char
   --> src/uucore/src/lib/lib.rs:198:9
    |
198 |     let s = s.replace('\n', &format!("\n{}", " ".repeat(7)));
    |         ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:204:1
    |
204 | / pub fn get_utility_is_second_arg() -> bool {
205 | |     crate::macros::UTILITY_IS_SECOND_ARG.load(Ordering::SeqCst)
206 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:205:5
    |
205 |     crate::macros::UTILITY_IS_SECOND_ARG.load(Ordering::SeqCst)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
205 |     return crate::macros::UTILITY_IS_SECOND_ARG.load(Ordering::SeqCst)
    |     ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/lib.rs:205:5
    |
205 |     crate::macros::UTILITY_IS_SECOND_ARG.load(Ordering::SeqCst)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:210:1
    |
210 | / pub fn set_utility_is_second_arg() {
211 | |     crate::macros::UTILITY_IS_SECOND_ARG.store(true, Ordering::SeqCst);
212 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/lib.rs:211:5
    |
211 |     crate::macros::UTILITY_IS_SECOND_ARG.store(true, Ordering::SeqCst);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing documentation for a static
   --> src/uucore/src/lib/lib.rs:216:1
    |
216 | static ARGV: LazyLock<Vec<OsString>> = LazyLock::new(|| wild::args_os().collect());
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:216:57
    |
216 | static ARGV: LazyLock<Vec<OsString>> = LazyLock::new(|| wild::args_os().collect());
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
216 | static ARGV: LazyLock<Vec<OsString>> = LazyLock::new(|| return wild::args_os().collect());
    |                                                         ++++++

warning: missing documentation for a static
   --> src/uucore/src/lib/lib.rs:218:1
    |
218 | / static UTIL_NAME: LazyLock<String> = LazyLock::new(|| {
219 | |     let base_index = usize::from(get_utility_is_second_arg());
220 | |     let is_man = usize::from(ARGV[base_index].eq("manpage"));
221 | |     let argv_index = base_index + is_man;
222 | |
223 | |     ARGV[argv_index].to_string_lossy().into_owned()
224 | | });
    | |___^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:223:5
    |
223 |     ARGV[argv_index].to_string_lossy().into_owned()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
223 |     return ARGV[argv_index].to_string_lossy().into_owned()
    |     ++++++

warning: indexing may panic
   --> src/uucore/src/lib/lib.rs:220:30
    |
220 |     let is_man = usize::from(ARGV[base_index].eq("manpage"));
    |                              ^^^^^^^^^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: indexing may panic
   --> src/uucore/src/lib/lib.rs:223:5
    |
223 |     ARGV[argv_index].to_string_lossy().into_owned()
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/lib.rs:227:1
    |
227 | pub fn util_name() -> &'static str {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn util_name() -> &'static str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:227:1
    |
227 | / pub fn util_name() -> &'static str {
228 | |     &UTIL_NAME
229 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:228:5
    |
228 |     &UTIL_NAME
    |     ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
228 |     return &UTIL_NAME
    |     ++++++

warning: missing documentation for a static
   --> src/uucore/src/lib/lib.rs:231:1
    |
231 | / static EXECUTION_PHRASE: LazyLock<String> = LazyLock::new(|| {
232 | |     if get_utility_is_second_arg() {
233 | |         ARGV.iter()
234 | |             .take(2)
...   |
241 | | });
    | |___^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:233:9
    |
233 | /         ARGV.iter()
234 | |             .take(2)
235 | |             .map(|os_str| os_str.to_string_lossy().into_owned())
236 | |             .collect::<Vec<_>>()
237 | |             .join(" ")
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
233 |         return ARGV.iter()
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:239:9
    |
239 |         ARGV[0].to_string_lossy().into_owned()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
239 |         return ARGV[0].to_string_lossy().into_owned()
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:235:27
    |
235 |             .map(|os_str| os_str.to_string_lossy().into_owned())
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
235 |             .map(|os_str| return os_str.to_string_lossy().into_owned())
    |                           ++++++

warning: indexing may panic
   --> src/uucore/src/lib/lib.rs:239:9
    |
239 |         ARGV[0].to_string_lossy().into_owned()
    |         ^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/lib.rs:244:1
    |
244 | pub fn execution_phrase() -> &'static str {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn execution_phrase() -> &'static str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:244:1
    |
244 | / pub fn execution_phrase() -> &'static str {
245 | |     &EXECUTION_PHRASE
246 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:245:5
    |
245 |     &EXECUTION_PHRASE
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
245 |     return &EXECUTION_PHRASE
    |     ++++++

warning: first doc comment paragraph is too long
   --> src/uucore/src/lib/lib.rs:248:1
    |
248 | / /// Args contains arguments passed to the utility.
249 | | /// It is a trait that extends `Iterator<Item = OsString>`.
250 | | /// It provides utility functions to collect the arguments into a `Vec<String>`.
251 | | /// The collected `Vec<String>` can be lossy or ignore invalid encoding.
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph
help: add an empty line
    |
249 | /// Args contains arguments passed to the utility.
250 + ///
    |

warning: missing `#[inline]` for a default trait method
   --> src/uucore/src/lib/lib.rs:254:5
    |
254 | /     fn collect_lossy(self) -> Vec<String> {
255 | |         self.map(|s| s.to_string_lossy().into_owned()).collect()
256 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `#[inline]` for a default trait method
   --> src/uucore/src/lib/lib.rs:259:5
    |
259 | /     fn collect_ignore(self) -> Vec<String> {
260 | |         self.filter_map(|s| s.into_string().ok()).collect()
261 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uucore/src/lib/lib.rs:259:8
    |
259 |     fn collect_ignore(self) -> Vec<String> {
    |        ^^^^^^^^^^^^^^
    |
note: should be placed before `collect_lossy`
   --> src/uucore/src/lib/lib.rs:254:8
    |
254 |     fn collect_lossy(self) -> Vec<String> {
    |        ^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:255:9
    |
255 |         self.map(|s| s.to_string_lossy().into_owned()).collect()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
255 |         return self.map(|s| s.to_string_lossy().into_owned()).collect()
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:255:22
    |
255 |         self.map(|s| s.to_string_lossy().into_owned()).collect()
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
255 |         self.map(|s| return s.to_string_lossy().into_owned()).collect()
    |                      ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/lib.rs:255:19
    |
255 |         self.map(|s| s.to_string_lossy().into_owned()).collect()
    |                   ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:260:9
    |
260 |         self.filter_map(|s| s.into_string().ok()).collect()
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
260 |         return self.filter_map(|s| s.into_string().ok()).collect()
    |         ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:260:29
    |
260 |         self.filter_map(|s| s.into_string().ok()).collect()
    |                             ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
260 |         self.filter_map(|s| return s.into_string().ok()).collect()
    |                             ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/lib.rs:260:26
    |
260 |         self.filter_map(|s| s.into_string().ok()).collect()
    |                          ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing trait method provided by default: `collect_lossy`
   --> src/uucore/src/lib/lib.rs:264:1
    |
264 | impl<T: Iterator<Item = OsString> + Sized> Args for T {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/lib.rs:254:5
    |
254 |     fn collect_lossy(self) -> Vec<String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: missing trait method provided by default: `collect_ignore`
   --> src/uucore/src/lib/lib.rs:264:1
    |
264 | impl<T: Iterator<Item = OsString> + Sized> Args for T {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
help: implement the method
   --> src/uucore/src/lib/lib.rs:259:5
    |
259 |     fn collect_ignore(self) -> Vec<String> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_trait_methods

warning: item in documentation is missing backticks
   --> src/uucore/src/lib/lib.rs:267:5
    |
267 | /// args_os() can be expensive to call
    |     ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
267 - /// args_os() can be expensive to call
267 + /// `args_os()` can be expensive to call
    |

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:268:1
    |
268 | / pub fn args_os() -> impl Iterator<Item = OsString> {
269 | |     ARGV.iter().cloned()
270 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:269:5
    |
269 |     ARGV.iter().cloned()
    |     ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
269 |     return ARGV.iter().cloned()
    |     ++++++

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/lib.rs:273:1
    |
273 | pub fn read_yes() -> bool {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn read_yes() -> bool`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:273:1
    |
273 | / pub fn read_yes() -> bool {
274 | |     let mut s = String::new();
275 | |     match std::io::stdin().read_line(&mut s) {
276 | |         Ok(_) => matches!(s.chars().next(), Some('y' | 'Y')),
...   |
279 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:276:18
    |
276 |         Ok(_) => matches!(s.chars().next(), Some('y' | 'Y')),
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
276 |         Ok(_) => return matches!(s.chars().next(), Some('y' | 'Y')),
    |                  ++++++

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:277:14
    |
277 |         _ => false,
    |              ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
277 |         _ => return false,
    |              ++++++

warning: this ident consists of a single char
   --> src/uucore/src/lib/lib.rs:274:13
    |
274 |     let mut s = String::new();
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/lib.rs:275:11
    |
275 |     match std::io::stdin().read_line(&mut s) {
    |           ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/lib.rs:285:1
    |
285 | pub fn os_str_as_bytes(os_string: &OsStr) -> mods::error::UResult<&[u8]> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:285:1
    |
285 | / pub fn os_str_as_bytes(os_string: &OsStr) -> mods::error::UResult<&[u8]> {
286 | |     #[cfg(unix)]
287 | |     let bytes = os_string.as_bytes();
...   |
297 | |     Ok(bytes)
298 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:297:5
    |
297 |     Ok(bytes)
    |     ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
297 |     return Ok(bytes)
    |     ++++++

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src/uucore/src/lib/lib.rs:285:1
    |
285 | / pub fn os_str_as_bytes(os_string: &OsStr) -> mods::error::UResult<&[u8]> {
286 | |     #[cfg(unix)]
287 | |     let bytes = os_string.as_bytes();
...   |
297 | |     Ok(bytes)
298 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
    = note: `-W clippy::unnecessary-wraps` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::unnecessary_wraps)]`
help: remove `Result` from the return type...
    |
285 - pub fn os_str_as_bytes(os_string: &OsStr) -> mods::error::UResult<&[u8]> {
285 + pub fn os_str_as_bytes(os_string: &OsStr) -> &[u8] {
    |
help: ...and then change returning expressions
    |
297 -     Ok(bytes)
297 +     bytes
    |

warning: this function could have a `#[must_use]` attribute
   --> src/uucore/src/lib/lib.rs:304:1
    |
304 | pub fn os_str_as_bytes_lossy(os_string: &OsStr) -> Cow<[u8]> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn os_str_as_bytes_lossy(os_string: &OsStr) -> Cow<[u8]>`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:304:1
    |
304 | / pub fn os_str_as_bytes_lossy(os_string: &OsStr) -> Cow<[u8]> {
305 | |     #[cfg(unix)]
306 | |     let bytes = Cow::from(os_string.as_bytes());
...   |
314 | |     bytes
315 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:314:5
    |
314 |     bytes
    |     ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
314 |     return bytes
    |     ++++++

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/lib.rs:322:1
    |
322 | pub fn os_str_from_bytes(bytes: &[u8]) -> mods::error::UResult<Cow<'_, OsStr>> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:322:1
    |
322 | / pub fn os_str_from_bytes(bytes: &[u8]) -> mods::error::UResult<Cow<'_, OsStr>> {
323 | |     #[cfg(unix)]
324 | |     let os_str = Cow::Borrowed(OsStr::from_bytes(bytes));
325 | |     #[cfg(not(unix))]
...   |
330 | |     Ok(os_str)
331 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:330:5
    |
330 |     Ok(os_str)
    |     ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
330 |     return Ok(os_str)
    |     ++++++

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src/uucore/src/lib/lib.rs:322:1
    |
322 | / pub fn os_str_from_bytes(bytes: &[u8]) -> mods::error::UResult<Cow<'_, OsStr>> {
323 | |     #[cfg(unix)]
324 | |     let os_str = Cow::Borrowed(OsStr::from_bytes(bytes));
325 | |     #[cfg(not(unix))]
...   |
330 | |     Ok(os_str)
331 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
322 - pub fn os_str_from_bytes(bytes: &[u8]) -> mods::error::UResult<Cow<'_, OsStr>> {
322 + pub fn os_str_from_bytes(bytes: &[u8]) -> std::borrow::Cow<'_, std::ffi::OsStr> {
    |
help: ...and then change returning expressions
    |
330 -     Ok(os_str)
330 +     os_str
    |

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uucore/src/lib/lib.rs:337:1
    |
337 | pub fn os_string_from_vec(vec: Vec<u8>) -> mods::error::UResult<OsString> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:337:1
    |
337 | / pub fn os_string_from_vec(vec: Vec<u8>) -> mods::error::UResult<OsString> {
338 | |     #[cfg(unix)]
339 | |     let s = OsString::from_vec(vec);
340 | |     #[cfg(not(unix))]
...   |
345 | |     Ok(s)
346 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:345:5
    |
345 |     Ok(s)
    |     ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
345 |     return Ok(s)
    |     ++++++

warning: this function's return value is unnecessarily wrapped by `Result`
   --> src/uucore/src/lib/lib.rs:337:1
    |
337 | / pub fn os_string_from_vec(vec: Vec<u8>) -> mods::error::UResult<OsString> {
338 | |     #[cfg(unix)]
339 | |     let s = OsString::from_vec(vec);
340 | |     #[cfg(not(unix))]
...   |
345 | |     Ok(s)
346 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
help: remove `Result` from the return type...
    |
337 - pub fn os_string_from_vec(vec: Vec<u8>) -> mods::error::UResult<OsString> {
337 + pub fn os_string_from_vec(vec: Vec<u8>) -> std::ffi::OsString {
    |
help: ...and then change returning expressions
    |
345 -     Ok(s)
345 +     s
    |

warning: this ident consists of a single char
   --> src/uucore/src/lib/lib.rs:339:9
    |
339 |     let s = OsString::from_vec(vec);
    |         ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:350:1
    |
350 | / pub fn read_byte_lines<R: std::io::Read>(
351 | |     mut buf_reader: BufReader<R>,
352 | | ) -> impl Iterator<Item = Vec<u8>> {
353 | |     iter::from_fn(move || {
...   |
370 | |     })
371 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:353:5
    |
353 | /     iter::from_fn(move || {
354 | |         let mut buf = Vec::with_capacity(256);
355 | |         let size = buf_reader.read_until(b'\n', &mut buf).ok()?;
...   |
369 | |         Some(buf)
370 | |     })
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
353 |     return iter::from_fn(move || {
    |     ++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/lib.rs:350:27
    |
350 | pub fn read_byte_lines<R: std::io::Read>(
    |                           ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:369:9
    |
369 |         Some(buf)
    |         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
369 |         return Some(buf)
    |         ++++++

warning: question mark operator was used
   --> src/uucore/src/lib/lib.rs:355:20
    |
355 |         let size = buf_reader.read_until(b'\n', &mut buf).ok()?;
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function which may panic missing `# Panics` section
   --> src/uucore/src/lib/lib.rs:376:1
    |
376 | / pub fn read_os_string_lines<R: std::io::Read>(
377 | |     buf_reader: BufReader<R>,
378 | | ) -> impl Iterator<Item = OsString> {
    | |___________________________________^
    |
note: first possible panic found here
   --> src/uucore/src/lib/lib.rs:379:49
    |
379 |     read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `#[inline]` for a function
   --> src/uucore/src/lib/lib.rs:376:1
    |
376 | / pub fn read_os_string_lines<R: std::io::Read>(
377 | |     buf_reader: BufReader<R>,
378 | | ) -> impl Iterator<Item = OsString> {
379 | |     read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
380 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:379:5
    |
379 |     read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
379 |     return read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
    |       +++++++

warning: consider bringing this path into scope with the `use` keyword
   --> src/uucore/src/lib/lib.rs:376:32
    |
376 | pub fn read_os_string_lines<R: std::io::Read>(
    |                                ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths

warning: missing `return` statement
   --> src/uucore/src/lib/lib.rs:379:49
    |
379 |     read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
379 |     read_byte_lines(buf_reader).map(|byte_line| return os_string_from_vec(byte_line).expect("UTF-8 error"))
    |                                                 ++++++

warning: used `expect()` on a `Result` value
   --> src/uucore/src/lib/lib.rs:379:49
    |
379 |     read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#expect_used

warning: this function is only used once
   --> src/uucore/src/lib/features/fast_inc.rs:91:1
    |
91  | / pub fn fast_inc_one(val: &mut [u8], start: &mut usize, end: usize) {
92  | |     let mut pos = end;
93  | |
94  | |     while pos > *start {
...   |
114 | |     *start -= 1;
115 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/features/fast_inc.rs:65:5
    |
65  |     fast_inc_one(val, start, pos)
    |     ^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn
    = note: `-W clippy::single-call-fn` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::single_call_fn)]`

warning: this function is only used once
   --> src/uucore/src/lib/features/fs.rs:237:1
    |
237 | / pub fn normalize_path(path: &Path) -> PathBuf {
238 | |     let mut components = path.components().peekable();
239 | |     let mut ret = if let Some(c @ Component::Prefix(..)) = components.peek().copied() {
240 | |         components.next();
...   |
261 | |     ret
262 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/features/fs.rs:351:9
    |
351 |         normalize_path(&original)
    |         ^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/features/fs.rs:264:1
    |
264 | / fn resolve_symlink<P: AsRef<Path>>(path: P) -> IOResult<Option<PathBuf>> {
265 | |     let result = if fs::symlink_metadata(&path)?.file_type().is_symlink() {
266 | |         Some(fs::read_link(&path)?)
267 | |     } else {
...   |
270 | |     Ok(result)
271 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/features/fs.rs:376:15
    |
376 |         match resolve_symlink(&result) {
    |               ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/features/fs.rs:495:1
    |
495 | / pub fn display_permissions_unix(mode: mode_t, display_file_type: bool) -> String {
496 | |     let mut result;
497 | |     if display_file_type {
498 | |         result = String::with_capacity(10);
...   |
534 | |     result
535 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/features/fs.rs:458:5
    |
458 |     display_permissions_unix(mode, display_file_type)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/features/fs.rs:476:1
    |
476 | / fn get_file_display(mode: mode_t) -> char {
477 | |     match mode & S_IFMT {
478 | |         S_IFDIR => 'd',
479 | |         S_IFCHR => 'c',
...   |
488 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/features/fs.rs:499:21
    |
499 |         result.push(get_file_display(mode));
    |                     ^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/features/fs.rs:561:1
    |
561 | / pub fn infos_refer_to_same_file(
562 | |     info1: IOResult<FileInformation>,
563 | |     info2: IOResult<FileInformation>,
564 | | ) -> bool {
...   |
570 | |     false
571 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/features/fs.rs:553:5
    |
553 |     infos_refer_to_same_file(
    |     ^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/features/fs.rs:750:5
    |
750 | /     pub fn sane_blksize(st_blksize: u64) -> u64 {
751 | |         match st_blksize {
752 | |             0 => DEFAULT,
753 | |             1..=MAX => st_blksize,
...   |
756 | |     }
    | |_____^
    |
note: used here
   --> src/uucore/src/lib/features/fs.rs:765:13
    |
765 |             sane_blksize(_metadata.blksize())
    |             ^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/features/fs.rs:762:5
    |
762 | /     pub fn sane_blksize_from_metadata(_metadata: &std::fs::Metadata) -> u64 {
763 | |         #[cfg(not(target_os = "windows"))]
764 | |         {
765 | |             sane_blksize(_metadata.blksize())
...   |
772 | |     }
    | |_____^
    |
note: used here
   --> src/uucore/src/lib/features/fs.rs:780:29
    |
780 |             Ok(metadata) => sane_blksize_from_metadata(&metadata),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
  --> src/uucore/src/lib/features/pipes.rs:38:1
   |
38 | / pub fn splice(source: &impl AsFd, target: &impl AsFd, len: usize) -> Result<usize> {
39 | |     nix::fcntl::splice(source, None, target, None, len, SpliceFFlags::empty())
40 | | }
   | |_^
   |
note: used here
  --> src/uucore/src/lib/features/pipes.rs:51:23
   |
51 |         let written = splice(source, target, left)?;
   |                       ^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/mods/error.rs:459:1
    |
459 | / pub fn strip_errno(err: &std::io::Error) -> String {
460 | |     let mut msg = err.to_string();
461 | |     if let Some(pos) = msg.find(" (os error ") {
462 | |         msg.truncate(pos);
463 | |     }
464 | |     msg
465 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/mods/error.rs:437:31
    |
437 |                     message = strip_errno(&self.inner);
    |                               ^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/mods/error.rs:655:5
    |
655 | /     pub fn new(code: i32) -> Box<dyn UError> {
656 | |         Box::new(Self(code))
657 | |     }
    | |_____^
    |
note: used here
   --> src/uucore/src/lib/mods/error.rs:676:9
    |
676 |         ExitCode::new(i)
    |         ^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
  --> src/uucore/src/lib/mods/io.rs:64:5
   |
64 | /     pub fn from<T: AsFd>(t: T) -> io::Result<Self> {
65 | |         Ok(Self {
66 | |             fx: t.as_fd().try_clone_to_owned()?,
67 | |         })
68 | |     }
   | |_____^
   |
note: used here
  --> src/uucore/src/lib/mods/io.rs:47:9
   |
47 |         Self::from(f)
   |         ^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
  --> src/uucore/src/lib/mods/io.rs:40:5
   |
40 | /     pub fn new(x: NativeType) -> Self {
41 | |         Self { fx: x }
42 | |     }
   | |_____^
   |
note: used here
  --> src/uucore/src/lib/mods/io.rs:83:33
   |
83 |         self.fx.try_clone().map(Self::new)
   |                                 ^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/mods/locale.rs:249:1
    |
249 | / fn detect_system_locale() -> Result<LanguageIdentifier, LocalizationError> {
250 | |     let locale_str = std::env::var("LANG")
251 | |         .unwrap_or_else(|_| DEFAULT_LOCALE.to_string())
252 | |         .split('.')
...   |
258 | |         .map_err(|_| LocalizationError::Parse(format!("Failed to parse locale: {}", locale_str)))
259 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/mods/locale.rs:298:18
    |
298 |     let locale = detect_system_locale().unwrap_or_else(|_| {
    |                  ^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/mods/locale.rs:307:1
    |
307 | / fn get_locales_dir(p: &str) -> Result<PathBuf, LocalizationError> {
308 | |     #[cfg(debug_assertions)]
...   |
365 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/mods/locale.rs:302:23
    |
302 |     let locales_dir = get_locales_dir(p)?;
    |                       ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/mods/locale.rs:102:1
    |
102 | / fn init_localization(
103 | |     locale: &LanguageIdentifier,
104 | |     locales_dir: &Path,
105 | | ) -> Result<(), LocalizationError> {
...   |
128 | |     Ok(())
129 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/mods/locale.rs:303:5
    |
303 |     init_localization(&locale, &locales_dir)
    |     ^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
  --> src/uucore/src/lib/mods/os.rs:28:1
   |
28 | / pub fn is_wsl_2() -> bool {
29 | |     #[cfg(target_os = "linux")]
30 | |     {
31 | |         if let Ok(b) = std::fs::read("/proc/sys/kernel/osrelease") {
...  |
38 | |     false
39 | | }
   | |_^
   |
note: used here
  --> src/uucore/src/lib/mods/os.rs:14:12
   |
14 |         if is_wsl_2() {
   |            ^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
  --> src/uucore/src/lib/mods/panic.rs:19:1
   |
19 | / fn is_broken_pipe(info: &PanicHookInfo) -> bool {
20 | |     if let Some(res) = info.payload().downcast_ref::<String>() {
21 | |         if res.contains("BrokenPipe") || res.contains("Broken pipe") {
22 | |             return true;
...  |
25 | |     false
26 | | }
   | |_^
   |
note: used here
  --> src/uucore/src/lib/mods/panic.rs:41:13
   |
41 |         if !is_broken_pipe(info) {
   |             ^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/lib.rs:244:1
    |
244 | / pub fn execution_phrase() -> &'static str {
245 | |     &EXECUTION_PHRASE
246 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/lib.rs:199:21
    |
199 |     s.replace("{}", crate::execution_phrase())
    |                     ^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/lib.rs:350:1
    |
350 | / pub fn read_byte_lines<R: std::io::Read>(
351 | |     mut buf_reader: BufReader<R>,
352 | | ) -> impl Iterator<Item = Vec<u8>> {
353 | |     iter::from_fn(move || {
...   |
370 | |     })
371 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/lib.rs:379:5
    |
379 |     read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
    |     ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uucore/src/lib/lib.rs:337:1
    |
337 | / pub fn os_string_from_vec(vec: Vec<u8>) -> mods::error::UResult<OsString> {
338 | |     #[cfg(unix)]
339 | |     let s = OsString::from_vec(vec);
340 | |     #[cfg(not(unix))]
...   |
345 | |     Ok(s)
346 | | }
    | |_^
    |
note: used here
   --> src/uucore/src/lib/lib.rs:379:49
    |
379 |     read_byte_lines(buf_reader).map(|byte_line| os_string_from_vec(byte_line).expect("UTF-8 error"))
    |                                                 ^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: `uucore` (lib) generated 758 warnings (13 duplicates) (run `cargo clippy --fix --lib -p uucore` to apply 266 suggestions)
    Checking uu_cat v0.1.0 (/mnt/c/Users/sebir/Documents/summer/Research/coreutils/src/uu/cat)
warning: `mod.rs` files are required, found `src/uu/cat/src/cat.rs`
 --> src/uu/cat/src/cat.rs:1:1
  |
1 | // This file is part of the uutils coreutils package.
  | ^
  |
  = help: move `src/uu/cat/src/cat.rs` to `src/uu/cat/src/cat/mod.rs`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#self_named_module_files
  = note: `-W clippy::self-named-module-files` implied by `-W clippy::restriction`
  = help: to override `-W clippy::restriction` add `#[allow(clippy::self_named_module_files)]`

warning: usage of `pub` without `in`
  --> src/uu/cat/src/splice.rs:23:1
   |
23 | pub(super) fn write_fast_using_splice<R: FdReadable, S: AsRawFd + AsFd>(
   | ^^^^^^^^^^ help: add it: `pub(in super)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_with_shorthand
   = note: `-W clippy::pub-with-shorthand` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::pub_with_shorthand)]`

warning: integer type suffix should be separated by an underscore
   --> src/uu/cat/src/cat.rs:770:24
    |
770 |         let in_buf = &[9u8];
    |                        ^^^ help: add an underscore: `9_u8`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix
    = note: `-W clippy::unseparated-literal-suffix` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::unseparated_literal_suffix)]`

warning: integer type suffix should be separated by an underscore
   --> src/uu/cat/src/cat.rs:778:21
    |
778 |         for byte in 0u8..=8u8 {
    |                     ^^^ help: add an underscore: `0_u8`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix

warning: integer type suffix should be separated by an underscore
   --> src/uu/cat/src/cat.rs:778:27
    |
778 |         for byte in 0u8..=8u8 {
    |                           ^^^ help: add an underscore: `8_u8`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix

warning: integer type suffix should be separated by an underscore
   --> src/uu/cat/src/cat.rs:789:21
    |
789 |         for byte in 11u8..=31u8 {
    |                     ^^^^ help: add an underscore: `11_u8`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix

warning: integer type suffix should be separated by an underscore
   --> src/uu/cat/src/cat.rs:789:28
    |
789 |         for byte in 11u8..=31u8 {
    |                            ^^^^ help: add an underscore: `31_u8`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unseparated_literal_suffix

warning: missing documentation for the crate
   --> src/uu/cat/src/cat.rs:7:1
    |
7   | / use std::fs::{File, metadata};
8   | | use std::io::{self, BufWriter, IsTerminal, Read, Write};
9   | | /// Unix domain socket support
10  | | #[cfg(unix)]
...   |
818 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items
    = note: `-W clippy::missing-docs-in-private-items` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_docs_in_private_items)]`

warning: incorrect ordering of items (module item groupings specify another order)
  --> src/uu/cat/src/cat.rs:31:5
   |
31 | mod splice;
   |     ^^^^^^
   |
note: should be placed before `help_usage`
  --> src/uu/cat/src/cat.rs:27:64
   |
27 | use uucore::{fast_inc::fast_inc_one, format_usage, help_about, help_usage};
   |                                                                ^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering
   = note: `-W clippy::arbitrary-source-item-ordering` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::arbitrary_source_item_ordering)]`

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uu/cat/src/cat.rs:208:5
    |
208 | mod options {
    |     ^^^^^^^
    |
note: should be placed before `InputType`
   --> src/uu/cat/src/cat.rs:193:6
    |
193 | enum InputType {
    |      ^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: importing trait that is only used anonymously
 --> src/uu/cat/src/cat.rs:8:32
  |
8 | use std::io::{self, BufWriter, IsTerminal, Read, Write};
  |                                ^^^^^^^^^^ help: use: `IsTerminal as _`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names
  = note: `-W clippy::unused-trait-names` implied by `-W clippy::restriction`
  = help: to override `-W clippy::restriction` add `#[allow(clippy::unused_trait_names)]`

warning: importing trait that is only used anonymously
  --> src/uu/cat/src/cat.rs:15:24
   |
15 | use std::os::unix::fs::FileTypeExt;
   |                        ^^^^^^^^^^^ help: use: `FileTypeExt as _`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: importing trait that is only used anonymously
  --> src/uu/cat/src/cat.rs:24:22
   |
24 | use uucore::display::Quotable;
   |                      ^^^^^^^^ help: use: `Quotable as _`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unused_trait_names

warning: first doc comment paragraph is too long
  --> src/uu/cat/src/splice.rs:15:1
   |
15 | / /// This function is called from `write_fast()` on Linux and Android. The
16 | | /// function `splice()` is used to move data between two file descriptors
17 | | /// without copying between kernel and user spaces. This results in a large
18 | | /// speedup.
19 | | ///
20 | | /// The `bool` in the result value indicates if we need to fall back to normal
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_long_first_doc_paragraph
   = note: `-W clippy::too-long-first-doc-paragraph` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::too_long_first_doc_paragraph)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uu/cat/src/splice.rs:23:1
   |
23 | / pub(super) fn write_fast_using_splice<R: FdReadable, S: AsRawFd + AsFd>(
24 | |     handle: &InputHandle<R>,
25 | |     write_fd: &S,
26 | | ) -> CatResult<bool> {
   | |____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
   = note: `-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_errors_doc)]`

warning: pub(crate) function inside private module
  --> src/uu/cat/src/splice.rs:23:1
   |
23 | pub(super) fn write_fast_using_splice<R: FdReadable, S: AsRawFd + AsFd>(
   | ----------^^^^^^^^^^^^^^^^^^^^^^^^^^^
   | |
   | help: consider using: `pub`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pub_crate
   = note: `-W clippy::redundant-pub-crate` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::redundant_pub_crate)]`

warning: incorrect ordering of items (module item groupings specify another order)
   --> src/uu/cat/src/cat.rs:741:5
    |
741 | mod tests {
    |     ^^^^^
    |
note: should be placed before `write_end_of_line`
   --> src/uu/cat/src/cat.rs:728:4
    |
728 | fn write_end_of_line<W: Write>(
    |    ^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: question mark operator was used
  --> src/uu/cat/src/splice.rs:27:30
   |
27 |     let (pipe_rd, pipe_wr) = pipe()?;
   |                              ^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used
   = note: `-W clippy::question-mark-used` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::question_mark_used)]`

warning: question mark operator was used
  --> src/uu/cat/src/splice.rs:41:21
   |
41 |                     copy_exact(&pipe_rd, write_fd, n)?;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function which may panic missing `# Panics` section
  --> src/uu/cat/src/splice.rs:55:1
   |
55 | fn copy_exact(read_fd: &impl AsFd, write_fd: &impl AsFd, num_bytes: usize) -> nix::Result<()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/uu/cat/src/splice.rs:60:9
   |
60 |         assert_ne!(read, 0, "unexpected end of pipe");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
   = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uu/cat/src/splice.rs:55:1
   |
55 | fn copy_exact(read_fd: &impl AsFd, write_fd: &impl AsFd, num_bytes: usize) -> nix::Result<()> {
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
  --> src/uu/cat/src/splice.rs:70:5
   |
70 |     Ok(())
   |     ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
   = note: `-W clippy::implicit-return` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::implicit_return)]`
help: add `return` as shown
   |
70 |     return Ok(())
   |     ++++++

warning: used `panic!()` or assertion in a function that returns `Result`
  --> src/uu/cat/src/splice.rs:55:1
   |
55 | / fn copy_exact(read_fd: &impl AsFd, write_fd: &impl AsFd, num_bytes: usize) -> nix::Result<()> {
56 | |     let mut left = num_bytes;
57 | |     let mut buf = [0; BUF_SIZE];
58 | |     while left > 0 {
...  |
70 | |     Ok(())
71 | | }
   | |_^
   |
   = help: `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
  --> src/uu/cat/src/splice.rs:60:9
   |
60 |         assert_ne!(read, 0, "unexpected end of pipe");
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
64 |                 0 => panic!(),
   |                      ^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn
   = note: `-W clippy::panic-in-result-fn` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::panic_in_result_fn)]`

warning: question mark operator was used
  --> src/uu/cat/src/splice.rs:59:20
   |
59 |         let read = unistd::read(read_fd, &mut buf)?;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
  --> src/uu/cat/src/splice.rs:63:19
   |
63 |             match unistd::write(write_fd, &buf[written..read])? {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using a custom macro or match expression
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: slicing may panic
  --> src/uu/cat/src/splice.rs:63:44
   |
63 |             match unistd::write(write_fd, &buf[written..read])? {
   |                                            ^^^^^^^^^^^^^^^^^^
   |
   = help: consider using `.get(n..m)` or `.get_mut(n..m)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing
   = note: `-W clippy::indexing-slicing` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::indexing_slicing)]`

warning: `panic` should not be present in production code
  --> src/uu/cat/src/splice.rs:64:22
   |
64 |                 0 => panic!(),
   |                      ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#panic
   = note: `-W clippy::panic` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::panic)]`

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uu/cat/src/splice.rs:65:22
   |
65 |                 n => written += n,
   |                      ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects
   = note: `-W clippy::arithmetic-side-effects` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::arithmetic_side_effects)]`

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uu/cat/src/splice.rs:68:9
   |
68 |         left -= read;
   |         ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uu/cat/src/cat.rs:44:5
   |
44 |     num_start: usize,
   |     ^^^^^^^^^
   |
note: should be placed before `print_start`
  --> src/uu/cat/src/cat.rs:43:5
   |
43 |     print_start: usize,
   |     ^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uu/cat/src/cat.rs:45:5
   |
45 |     num_end: usize,
   |     ^^^^^^^
   |
note: should be placed before `num_start`
  --> src/uu/cat/src/cat.rs:44:5
   |
44 |     num_start: usize,
   |     ^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
  --> src/uu/cat/src/cat.rs:73:8
   |
73 |     fn increment(&mut self) {
   |        ^^^^^^^^^
   |
note: should be placed before `new`
  --> src/uu/cat/src/cat.rs:55:8
   |
55 |     fn new() -> Self {
   |        ^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing `return` statement
  --> src/uu/cat/src/cat.rs:65:9
   |
65 | /         LineNumber {
66 | |             buf,
67 | |             print_start,
68 | |             num_start,
69 | |             num_end,
70 | |         }
   | |_________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
65 |         return LineNumber {
   |         ++++++

warning: missing documentation for a constant
  --> src/uu/cat/src/cat.rs:33:1
   |
33 | const USAGE: &str = help_usage!("cat.md");
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a constant
  --> src/uu/cat/src/cat.rs:34:1
   |
34 | const ABOUT: &str = help_about!("cat.md");
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a constant
  --> src/uu/cat/src/cat.rs:39:1
   |
39 | const LINE_NUMBER_BUF_SIZE: usize = 32;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a struct
  --> src/uu/cat/src/cat.rs:41:1
   |
41 | / struct LineNumber {
42 | |     buf: [u8; LINE_NUMBER_BUF_SIZE],
43 | |     print_start: usize,
44 | |     num_start: usize,
45 | |     num_end: usize,
46 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a struct field
  --> src/uu/cat/src/cat.rs:42:5
   |
42 |     buf: [u8; LINE_NUMBER_BUF_SIZE],
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a struct field
  --> src/uu/cat/src/cat.rs:43:5
   |
43 |     print_start: usize,
   |     ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a struct field
  --> src/uu/cat/src/cat.rs:44:5
   |
44 |     num_start: usize,
   |     ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a struct field
  --> src/uu/cat/src/cat.rs:45:5
   |
45 |     num_end: usize,
   |     ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for an associated function
  --> src/uu/cat/src/cat.rs:55:5
   |
55 | /     fn new() -> Self {
56 | |         let mut buf = [b'0'; LINE_NUMBER_BUF_SIZE];
57 | |
58 | |         let init_str = "     1\t";
...  |
71 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uu/cat/src/cat.rs:59:27
   |
59 |         let print_start = buf.len() - init_str.len();
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uu/cat/src/cat.rs:60:25
   |
60 |         let num_start = buf.len() - 2;
   |                         ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
  --> src/uu/cat/src/cat.rs:61:23
   |
61 |         let num_end = buf.len() - 1;
   |                       ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: slicing may panic
  --> src/uu/cat/src/cat.rs:63:9
   |
63 |         buf[print_start..].copy_from_slice(init_str.as_bytes());
   |         ^^^^^^^^^^^^^^^^^^
   |
   = help: consider using `.get(n..)` or .get_mut(n..)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: unnecessary structure name repetition
  --> src/uu/cat/src/cat.rs:65:9
   |
65 |         LineNumber {
   |         ^^^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::use_self)]`

warning: missing documentation for a method
  --> src/uu/cat/src/cat.rs:73:5
   |
73 | /     fn increment(&mut self) {
74 | |         fast_inc_one(&mut self.buf, &mut self.num_start, self.num_end);
75 | |         self.print_start = self.print_start.min(self.num_start);
76 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a method
  --> src/uu/cat/src/cat.rs:79:5
   |
79 | /     fn to_str(&self) -> &[u8] {
80 | |         &self.buf[self.print_start..]
81 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
  --> src/uu/cat/src/cat.rs:80:9
   |
80 |         &self.buf[self.print_start..]
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
80 |         return &self.buf[self.print_start..]
   |         ++++++

warning: slicing may panic
  --> src/uu/cat/src/cat.rs:80:10
   |
80 |         &self.buf[self.print_start..]
   |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: consider using `.get(n..)` or .get_mut(n..)` instead
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: docs for function returning `Result` missing `# Errors` section
  --> src/uu/cat/src/cat.rs:83:5
   |
83 |     fn write(&self, writer: &mut impl Write) -> io::Result<()> {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing documentation for a method
  --> src/uu/cat/src/cat.rs:83:5
   |
83 | /     fn write(&self, writer: &mut impl Write) -> io::Result<()> {
84 | |         writer.write_all(self.to_str())
85 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
  --> src/uu/cat/src/cat.rs:84:9
   |
84 |         writer.write_all(self.to_str())
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
   |
84 |         return writer.write_all(self.to_str())
   |         ++++++

warning: missing documentation for an enum
   --> src/uu/cat/src/cat.rs:89:1
    |
89  | / enum CatError {
90  | |     /// Wrapper around `io::Error`
91  | |     #[error("{0}")]
92  | |     Io(#[from] io::Error),
...   |
108 | |     TooManySymlinks,
109 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:104:5
    |
104 |     IsDirectory,
    |     ^^^^^^^^^^^
    |
note: should be placed before `UnknownFiletype`
   --> src/uu/cat/src/cat.rs:99:5
    |
99  |     UnknownFiletype {
    |     ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:104:5
    |
104 |     IsDirectory,
    |     ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:106:5
    |
106 |     OutputIsInput,
    |     ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:108:5
    |
108 |     TooManySymlinks,
    |     ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:116:5
    |
116 |     NonEmpty,
    |     ^^^^^^^^
    |
note: should be placed before `None`
   --> src/uu/cat/src/cat.rs:115:5
    |
115 |     None,
    |     ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for an enum
   --> src/uu/cat/src/cat.rs:114:1
    |
114 | / enum NumberingMode {
115 | |     None,
116 | |     NonEmpty,
117 | |     All,
118 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:117:5
    |
117 |     All,
    |     ^^^
    |
note: should be placed before `NonEmpty`
   --> src/uu/cat/src/cat.rs:116:5
    |
116 |     NonEmpty,
    |     ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:115:5
    |
115 |     None,
    |     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:116:5
    |
116 |     NonEmpty,
    |     ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:117:5
    |
117 |     All,
    |     ^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a struct
   --> src/uu/cat/src/cat.rs:120:1
    |
120 | / struct OutputOptions {
121 | |     /// Line numbering mode
122 | |     number: NumberingMode,
...   |
134 | |     show_nonprint: bool,
135 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: more than 3 bools in a struct
   --> src/uu/cat/src/cat.rs:120:1
    |
120 | / struct OutputOptions {
121 | |     /// Line numbering mode
122 | |     number: NumberingMode,
...   |
134 | |     show_nonprint: bool,
135 | | }
    | |_^
    |
    = help: consider using a state machine or refactoring bools into two-variant enums
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#struct_excessive_bools
    = note: `-W clippy::struct-excessive-bools` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::struct_excessive_bools)]`

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:128:5
    |
128 |     show_tabs: bool,
    |     ^^^^^^^^^
    |
note: should be placed before `squeeze_blank`
   --> src/uu/cat/src/cat.rs:125:5
    |
125 |     squeeze_blank: bool,
    |     ^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:131:5
    |
131 |     show_ends: bool,
    |     ^^^^^^^^^
    |
note: should be placed before `show_tabs`
   --> src/uu/cat/src/cat.rs:128:5
    |
128 |     show_tabs: bool,
    |     ^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:142:8
    |
142 |     fn end_of_line(&self) -> &'static str {
    |        ^^^^^^^^^^^
    |
note: should be placed before `tab`
   --> src/uu/cat/src/cat.rs:138:8
    |
138 |     fn tab(&self) -> &'static str {
    |        ^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:148:8
    |
148 |     fn can_write_fast(&self) -> bool {
    |        ^^^^^^^^^^^^^^
    |
note: should be placed before `end_of_line`
   --> src/uu/cat/src/cat.rs:142:8
    |
142 |     fn end_of_line(&self) -> &'static str {
    |        ^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for a method
   --> src/uu/cat/src/cat.rs:138:5
    |
138 | /     fn tab(&self) -> &'static str {
139 | |         if self.show_tabs { "^I" } else { "\t" }
140 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:139:29
    |
139 |         if self.show_tabs { "^I" } else { "\t" }
    |                             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
139 |         if self.show_tabs { return "^I" } else { "\t" }
    |                             ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:139:43
    |
139 |         if self.show_tabs { "^I" } else { "\t" }
    |                                           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
139 |         if self.show_tabs { "^I" } else { return "\t" }
    |                                           ++++++

warning: this could be a `const fn`
   --> src/uu/cat/src/cat.rs:138:5
    |
138 | /     fn tab(&self) -> &'static str {
139 | |         if self.show_tabs { "^I" } else { "\t" }
140 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`
help: make the function `const`
    |
138 |     const fn tab(&self) -> &'static str {
    |     +++++

warning: missing documentation for a method
   --> src/uu/cat/src/cat.rs:142:5
    |
142 | /     fn end_of_line(&self) -> &'static str {
143 | |         if self.show_ends { "$\n" } else { "\n" }
144 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:143:29
    |
143 |         if self.show_ends { "$\n" } else { "\n" }
    |                             ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
143 |         if self.show_ends { return "$\n" } else { "\n" }
    |                             ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:143:44
    |
143 |         if self.show_ends { "$\n" } else { "\n" }
    |                                            ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
143 |         if self.show_ends { "$\n" } else { return "\n" }
    |                                            ++++++

warning: this could be a `const fn`
   --> src/uu/cat/src/cat.rs:142:5
    |
142 | /     fn end_of_line(&self) -> &'static str {
143 | |         if self.show_ends { "$\n" } else { "\n" }
144 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
142 |     const fn end_of_line(&self) -> &'static str {
    |     +++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:149:9
    |
149 | /         !(self.show_tabs
150 | |             || self.show_nonprint
151 | |             || self.show_ends
152 | |             || self.squeeze_blank
153 | |             || self.number != NumberingMode::None)
    | |__________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
149 |         return !(self.show_tabs
    |         ++++++

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:164:5
    |
164 |     at_line_start: bool,
    |     ^^^^^^^^^^^^^
    |
note: should be placed before `line_number`
   --> src/uu/cat/src/cat.rs:161:5
    |
161 |     line_number: LineNumber,
    |     ^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:170:5
    |
170 |     one_blank_kept: bool,
    |     ^^^^^^^^^^^^^^
    |
note: should be placed before `skipped_carriage_return`
   --> src/uu/cat/src/cat.rs:167:5
    |
167 |     skipped_carriage_return: bool,
    |     ^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for a trait
   --> src/uu/cat/src/cat.rs:174:1
    |
174 | trait FdReadable: Read + AsFd {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:186:5
    |
186 |     is_interactive: bool,
    |     ^^^^^^^^^^^^^^
    |
note: should be placed before `reader`
   --> src/uu/cat/src/cat.rs:185:5
    |
185 |     reader: R,
    |     ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for a struct field
   --> src/uu/cat/src/cat.rs:185:5
    |
185 |     reader: R,
    |     ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a struct field
   --> src/uu/cat/src/cat.rs:186:5
    |
186 |     is_interactive: bool,
    |     ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: item in documentation is missing backticks
   --> src/uu/cat/src/cat.rs:192:5
    |
192 | /// CatError::IsDirectory
    |     ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
    = note: `-W clippy::doc-markdown` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::doc_markdown)]`
help: try
    |
192 - /// CatError::IsDirectory
192 + /// `CatError::IsDirectory`
    |

warning: incorrect ordering of items (must be alphabetically ordered)
   --> src/uu/cat/src/cat.rs:199:5
    |
199 |     BlockDevice,
    |     ^^^^^^^^^^^
    |
note: should be placed before `SymLink`
   --> src/uu/cat/src/cat.rs:197:5
    |
197 |     SymLink,
    |     ^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arbitrary_source_item_ordering

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:194:5
    |
194 |     Directory,
    |     ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:195:5
    |
195 |     File,
    |     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:196:5
    |
196 |     StdIn,
    |     ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:197:5
    |
197 |     SymLink,
    |     ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:199:5
    |
199 |     BlockDevice,
    |     ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:201:5
    |
201 |     CharacterDevice,
    |     ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:203:5
    |
203 |     Fifo,
    |     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a variant
   --> src/uu/cat/src/cat.rs:205:5
    |
205 |     Socket,
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing documentation for a module
   --> src/uu/cat/src/cat.rs:208:1
    |
208 | / mod options {
209 | |     pub static FILE: &str = "file";
210 | |     pub static SHOW_ALL: &str = "show-all";
211 | |     pub static NUMBER_NONBLANK: &str = "number-nonblank";
...   |
219 | |     pub static IGNORED_U: &str = "ignored-u";
220 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: `impl Trait` used as a function parameter
   --> src/uu/cat/src/cat.rs:222:1
    |
222 | #[uucore::main]
    | ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
    = note: `-W clippy::impl-trait-in-params` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::impl_trait_in_params)]`
    = note: this warning originates in the attribute macro `uucore::main` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:223:1
    |
223 | pub fn uumain(args: impl uucore::Args) -> UResult<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:272:5
    |
272 |     cat_files(&files, &options)
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
272 |     return cat_files(&files, &options)
    |     ++++++

warning: `impl Trait` used as a function parameter
   --> src/uu/cat/src/cat.rs:223:21
    |
223 | pub fn uumain(args: impl uucore::Args) -> UResult<()> {
    |                     ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#impl_trait_in_params
help: add a type parameter
    |
223 | pub fn uumain<{ /* Generic name */ }: uucore::Args>(args: impl uucore::Args) -> UResult<()> {
    |              ++++++++++++++++++++++++++++++++++++++

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:224:19
    |
224 |     let matches = uu_app().try_get_matches_from(args)?;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:241:14
    |
241 |     .any(|v| matches.get_flag(v));
    |              ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
241 |     .any(|v| return matches.get_flag(v));
    |              ++++++

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:241:11
    |
241 |     .any(|v| matches.get_flag(v));
    |           ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars
    = note: `-W clippy::min-ident-chars` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::min_ident_chars)]`

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:249:14
    |
249 |     .any(|v| matches.get_flag(v));
    |              ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
249 |     .any(|v| return matches.get_flag(v));
    |              ++++++

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:249:11
    |
249 |     .any(|v| matches.get_flag(v));
    |           ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:257:14
    |
257 |     .any(|v| matches.get_flag(v));
    |              ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
257 |     .any(|v| return matches.get_flag(v));
    |              ++++++

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:257:11
    |
257 |     .any(|v| matches.get_flag(v));
    |           ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: use Option::map_or_else instead of an if let/else
   --> src/uu/cat/src/cat.rs:260:30
    |
260 |       let files: Vec<String> = match matches.get_many::<String>(options::FILE) {
    |  ______________________________^
261 | |         Some(v) => v.cloned().collect(),
262 | |         None => vec!["-".to_owned()],
263 | |     };
    | |_____^ help: try: `matches.get_many::<String>(options::FILE).map_or_else(|| vec!["-".to_owned()], |v| v.cloned().collect())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
    = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:261:14
    |
261 |         Some(v) => v.cloned().collect(),
    |              ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this function could have a `#[must_use]` attribute
   --> src/uu/cat/src/cat.rs:275:1
    |
275 | pub fn uu_app() -> Command {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn uu_app() -> Command`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
    = note: `-W clippy::must-use-candidate` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::must_use_candidate)]`

warning: missing `#[inline]` for a function
   --> src/uu/cat/src/cat.rs:275:1
    |
275 | / pub fn uu_app() -> Command {
276 | |     Command::new(uucore::util_name())
277 | |         .version(uucore::crate_version!())
278 | |         .override_usage(format_usage(USAGE))
...   |
357 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_inline_in_public_items
    = note: `-W clippy::missing-inline-in-public-items` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_inline_in_public_items)]`

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:276:5
    |
276 | /     Command::new(uucore::util_name())
277 | |         .version(uucore::crate_version!())
278 | |         .override_usage(format_usage(USAGE))
279 | |         .about(ABOUT)
...   |
355 | |                 .action(ArgAction::SetTrue),
356 | |         )
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
276 |     return Command::new(uucore::util_name())
    |     ++++++

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:359:1
    |
359 | / fn cat_handle<R: FdReadable>(
360 | |     handle: &mut InputHandle<R>,
361 | |     options: &OutputOptions,
362 | |     state: &mut OutputState,
363 | | ) -> CatResult<()> {
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:359:1
    |
359 | / fn cat_handle<R: FdReadable>(
360 | |     handle: &mut InputHandle<R>,
361 | |     options: &OutputOptions,
362 | |     state: &mut OutputState,
...   |
369 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:365:9
    |
365 |         write_fast(handle)
    |         ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
365 |         return write_fast(handle)
    |         ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:367:9
    |
367 |         write_lines(handle, options, state)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
367 |         return write_lines(handle, options, state)
    |         ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:380:5
    |
380 |     (flags & o_append) > 0
    |     ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
380 |     return (flags & o_append) > 0
    |     ++++++

warning: default numeric fallback might occur
   --> src/uu/cat/src/cat.rs:379:20
    |
379 |     let o_append = 1 << 10;
    |                    ^ help: consider adding suffix: `1_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback
    = note: `-W clippy::default-numeric-fallback` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::default_numeric_fallback)]`

warning: default numeric fallback might occur
   --> src/uu/cat/src/cat.rs:379:25
    |
379 |     let o_append = 1 << 10;
    |                         ^^ help: consider adding suffix: `10_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:388:1
    |
388 | / fn cat_path(
389 | |     path: &str,
390 | |     options: &OutputOptions,
391 | |     state: &mut OutputState,
392 | |     out_info: Option<&FileInformation>,
393 | | ) -> CatResult<()> {
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:388:1
    |
388 | / fn cat_path(
389 | |     path: &str,
390 | |     options: &OutputOptions,
391 | |     state: &mut OutputState,
...   |
438 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:407:13
    |
407 |             cat_handle(&mut handle, options, state)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
407 |             return cat_handle(&mut handle, options, state)
    |             ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:409:33
    |
409 |         InputType::Directory => Err(CatError::IsDirectory),
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
409 |         InputType::Directory => return Err(CatError::IsDirectory),
    |                                 ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:418:13
    |
418 |             cat_handle(&mut handle, options, state)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
418 |             return cat_handle(&mut handle, options, state)
    |             ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:435:13
    |
435 |             cat_handle(&mut handle, options, state)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
435 |             return cat_handle(&mut handle, options, state)
    |             ++++++

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:394:11
    |
394 |     match get_input_type(path)? {
    |           ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:397:27
    |
397 |             let in_info = FileInformation::from_file(&stdin)?;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: `out_info` is shadowed
   --> src/uu/cat/src/cat.rs:402:25
    |
402 |             if let Some(out_info) = out_info {
    |                         ^^^^^^^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:392:5
    |
392 |     out_info: Option<&FileInformation>,
    |     ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse
    = note: `-W clippy::shadow-reuse` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::shadow_reuse)]`

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:412:26
    |
412 |             let socket = UnixStream::connect(path)?;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:413:13
    |
413 |             socket.shutdown(Shutdown::Write)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:421:24
    |
421 |             let file = File::open(path)?;
    |                        ^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: `out_info` is shadowed
   --> src/uu/cat/src/cat.rs:423:25
    |
423 |             if let Some(out_info) = out_info {
    |                         ^^^^^^^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:392:5
    |
392 |     out_info: Option<&FileInformation>,
    |     ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:440:1
    |
440 | fn cat_files(files: &[String], options: &OutputOptions) -> UResult<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:440:1
    |
440 | / fn cat_files(files: &[String], options: &OutputOptions) -> UResult<()> {
441 | |     let out_info = FileInformation::from_file(&io::stdout()).ok();
442 | |
443 | |     let mut state = OutputState {
...   |
470 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:460:9
    |
460 |         Ok(())
    |         ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
460 |         return Ok(())
    |         ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:465:9
    |
465 | /         Err(uucore::error::USimpleError::new(
466 | |             error_messages.len() as i32,
467 | |             error_messages.join(&line_joiner),
468 | |         ))
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
465 |         return Err(uucore::error::USimpleError::new(
    |         ++++++

warning: use of `print!`
   --> src/uu/cat/src/cat.rs:457:9
    |
457 |         print!("\r");
    |         ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_stdout
    = note: `-W clippy::print-stdout` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::print_stdout)]`

warning: consider bringing this path into scope with the `use` keyword
   --> src/uu/cat/src/cat.rs:465:13
    |
465 |         Err(uucore::error::USimpleError::new(
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absolute_paths
    = note: `-W clippy::absolute-paths` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::absolute_paths)]`

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
   --> src/uu/cat/src/cat.rs:466:13
    |
466 |             error_messages.len() as i32,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`
help: ... or use `try_from` and handle the error accordingly
    |
466 -             error_messages.len() as i32,
466 +             i32::try_from(error_messages.len()),
    |

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
   --> src/uu/cat/src/cat.rs:466:13
    |
466 |             error_messages.len() as i32,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_wrap)]`

warning: using a potentially dangerous silent `as` conversion
   --> src/uu/cat/src/cat.rs:466:13
    |
466 |             error_messages.len() as i32,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a safe wrapper for this conversion
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#as_conversions
    = note: `-W clippy::as-conversions` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::as_conversions)]`

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:477:1
    |
477 | fn get_input_type(path: &str) -> CatResult<InputType> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:501:39
    |
501 |         ft if ft.is_block_device() => Ok(InputType::BlockDevice),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
501 |         ft if ft.is_block_device() => return Ok(InputType::BlockDevice),
    |                                       ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:503:38
    |
503 |         ft if ft.is_char_device() => Ok(InputType::CharacterDevice),
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
503 |         ft if ft.is_char_device() => return Ok(InputType::CharacterDevice),
    |                                      ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:505:31
    |
505 |         ft if ft.is_fifo() => Ok(InputType::Fifo),
    |                               ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
505 |         ft if ft.is_fifo() => return Ok(InputType::Fifo),
    |                               ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:507:33
    |
507 |         ft if ft.is_socket() => Ok(InputType::Socket),
    |                                 ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
507 |         ft if ft.is_socket() => return Ok(InputType::Socket),
    |                                 ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:508:30
    |
508 |         ft if ft.is_dir() => Ok(InputType::Directory),
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
508 |         ft if ft.is_dir() => return Ok(InputType::Directory),
    |                              ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:509:31
    |
509 |         ft if ft.is_file() => Ok(InputType::File),
    |                               ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
509 |         ft if ft.is_file() => return Ok(InputType::File),
    |                               ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:510:34
    |
510 |         ft if ft.is_symlink() => Ok(InputType::SymLink),
    |                                  ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
510 |         ft if ft.is_symlink() => return Ok(InputType::SymLink),
    |                                  ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:511:14
    |
511 |           _ => Err(CatError::UnknownFiletype {
    |  ______________^
512 | |             ft_debug: format!("{ft:?}"),
513 | |         }),
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
511 |         _ => return Err(CatError::UnknownFiletype {
    |              ++++++

warning: default numeric fallback might occur
   --> src/uu/cat/src/cat.rs:489:45
    |
489 |                 let too_many_symlink_code = 40;
    |                                             ^^ help: consider adding suffix: `40_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:484:13
    |
484 |         Err(e) => {
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: `ft` is shadowed by itself in `ft`
   --> src/uu/cat/src/cat.rs:501:9
    |
501 |         ft if ft.is_block_device() => Ok(InputType::BlockDevice),
    |         ^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:482:9
    |
482 |     let ft = match metadata(path) {
    |         ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same
    = note: `-W clippy::shadow-same` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::shadow_same)]`

warning: `ft` is shadowed by itself in `ft`
   --> src/uu/cat/src/cat.rs:503:9
    |
503 |         ft if ft.is_char_device() => Ok(InputType::CharacterDevice),
    |         ^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:482:9
    |
482 |     let ft = match metadata(path) {
    |         ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same

warning: `ft` is shadowed by itself in `ft`
   --> src/uu/cat/src/cat.rs:505:9
    |
505 |         ft if ft.is_fifo() => Ok(InputType::Fifo),
    |         ^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:482:9
    |
482 |     let ft = match metadata(path) {
    |         ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same

warning: `ft` is shadowed by itself in `ft`
   --> src/uu/cat/src/cat.rs:507:9
    |
507 |         ft if ft.is_socket() => Ok(InputType::Socket),
    |         ^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:482:9
    |
482 |     let ft = match metadata(path) {
    |         ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same

warning: `ft` is shadowed by itself in `ft`
   --> src/uu/cat/src/cat.rs:508:9
    |
508 |         ft if ft.is_dir() => Ok(InputType::Directory),
    |         ^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:482:9
    |
482 |     let ft = match metadata(path) {
    |         ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same

warning: `ft` is shadowed by itself in `ft`
   --> src/uu/cat/src/cat.rs:509:9
    |
509 |         ft if ft.is_file() => Ok(InputType::File),
    |         ^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:482:9
    |
482 |     let ft = match metadata(path) {
    |         ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same

warning: `FileType::is_file()` only covers regular files
   --> src/uu/cat/src/cat.rs:509:15
    |
509 |         ft if ft.is_file() => Ok(InputType::File),
    |               ^^^^^^^^^^^^
    |
    = help: use `!FileType::is_dir()` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#filetype_is_file
    = note: `-W clippy::filetype-is-file` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::filetype_is_file)]`

warning: `ft` is shadowed by itself in `ft`
   --> src/uu/cat/src/cat.rs:510:9
    |
510 |         ft if ft.is_symlink() => Ok(InputType::SymLink),
    |         ^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:482:9
    |
482 |     let ft = match metadata(path) {
    |         ^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_same

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:519:1
    |
519 | fn write_fast<R: FdReadable>(handle: &mut InputHandle<R>) -> CatResult<()> {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:546:5
    |
546 |     Ok(())
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
546 |     return Ok(())
    |     ++++++

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:526:13
    |
526 |         if !splice::write_fast_using_splice(handle, &stdout_lock)? {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: allocating a local array larger than 16384 bytes
   --> src/uu/cat/src/cat.rs:532:19
    |
532 |     let mut buf = [0; 1024 * 64];
    |                   ^^^^^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 1024 * 64].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays
    = note: `-W clippy::large-stack-arrays` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::large_stack_arrays)]`

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:537:9
    |
537 |         stdout_lock.write_all(&buf[..n])?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: slicing may panic
   --> src/uu/cat/src/cat.rs:537:32
    |
537 |         stdout_lock.write_all(&buf[..n])?;
    |                                ^^^^^^^^
    |
    = help: consider using `.get(..n)`or `.get_mut(..n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:545:5
    |
545 |     stdout_lock.flush()?;
    |     ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:551:1
    |
551 | / fn write_lines<R: FdReadable>(
552 | |     handle: &mut InputHandle<R>,
553 | |     options: &OutputOptions,
554 | |     state: &mut OutputState,
555 | | ) -> CatResult<()> {
    | |__________________^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:598:17
    |
598 |                 assert_eq!(in_buf[pos + offset], b'\n');
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:551:1
    |
551 | / fn write_lines<R: FdReadable>(
552 | |     handle: &mut InputHandle<R>,
553 | |     options: &OutputOptions,
554 | |     state: &mut OutputState,
555 | | ) -> CatResult<()> {
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:619:5
    |
619 |     Ok(())
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
619 |     return Ok(())
    |     ++++++

warning: used `panic!()` or assertion in a function that returns `Result`
   --> src/uu/cat/src/cat.rs:551:1
    |
551 | / fn write_lines<R: FdReadable>(
552 | |     handle: &mut InputHandle<R>,
553 | |     options: &OutputOptions,
554 | |     state: &mut OutputState,
...   |
619 | |     Ok(())
620 | | }
    | |_^
    |
    = help: `panic!()` or assertions should not be used in a function that returns `Result` as `Result` is expected to return an error instead of crashing
note: return Err() instead of panicking
   --> src/uu/cat/src/cat.rs:598:17
    |
598 |                 assert_eq!(in_buf[pos + offset], b'\n');
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#panic_in_result_fn

warning: allocating a local array larger than 16384 bytes
   --> src/uu/cat/src/cat.rs:556:22
    |
556 |     let mut in_buf = [0; 1024 * 31];
    |                      ^^^^^^^^^^^^^^
    |
    = help: consider allocating on the heap with `vec![0; 1024 * 31].into_boxed_slice()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#large_stack_arrays

warning: `stdout` is shadowed
   --> src/uu/cat/src/cat.rs:558:9
    |
558 |     let stdout = stdout.lock();
    |         ^^^^^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:557:9
    |
557 |     let stdout = io::stdout();
    |         ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: slicing may panic
   --> src/uu/cat/src/cat.rs:566:23
    |
566 |         let in_buf = &in_buf[..n];
    |                       ^^^^^^^^^^^
    |
    = help: consider using `.get(..n)`or `.get_mut(..n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: `in_buf` is shadowed
   --> src/uu/cat/src/cat.rs:566:13
    |
566 |         let in_buf = &in_buf[..n];
    |             ^^^^^^
    |
note: previous binding is here
   --> src/uu/cat/src/cat.rs:556:9
    |
556 |     let mut in_buf = [0; 1024 * 31];
    |         ^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#shadow_reuse

warning: indexing may panic
   --> src/uu/cat/src/cat.rs:570:16
    |
570 |             if in_buf[pos] == b'\n' {
    |                ^^^^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:571:17
    |
571 |                 write_new_line(&mut writer, options, state, handle.is_interactive)?;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:573:17
    |
573 |                 pos += 1;
    |                 ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:577:17
    |
577 |                 writer.write_all(b"\r")?;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:583:17
    |
583 |                 state.line_number.write(&mut writer)?;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: slicing may panic
   --> src/uu/cat/src/cat.rs:588:50
    |
588 |             let offset = write_end(&mut writer, &in_buf[pos..], options);
    |                                                  ^^^^^^^^^^^^^
    |
    = help: consider using `.get(n..)` or .get_mut(n..)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:591:16
    |
591 |             if offset + pos == in_buf.len() {
    |                ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: indexing may panic
   --> src/uu/cat/src/cat.rs:595:16
    |
595 |             if in_buf[pos + offset] == b'\r' {
    |                ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:595:23
    |
595 |             if in_buf[pos + offset] == b'\r' {
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: assert without any message
   --> src/uu/cat/src/cat.rs:598:17
    |
598 |                 assert_eq!(in_buf[pos + offset], b'\n');
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider describing why the failing assert is problematic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_assert_message
    = note: `-W clippy::missing-assert-message` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_assert_message)]`

warning: indexing may panic
   --> src/uu/cat/src/cat.rs:598:28
    |
598 |                 assert_eq!(in_buf[pos + offset], b'\n');
    |                            ^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:598:35
    |
598 |                 assert_eq!(in_buf[pos + offset], b'\n');
    |                                   ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:600:17
    |
600 | /                 write_end_of_line(
601 | |                     &mut writer,
602 | |                     options.end_of_line().as_bytes(),
603 | |                     handle.is_interactive,
604 | |                 )?;
    | |__________________^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:607:13
    |
607 |             pos += offset + 1;
    |             ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:616:9
    |
616 |         writer.flush()?;
    |         ^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:623:1
    |
623 | / fn write_new_line<W: Write>(
624 | |     writer: &mut W,
625 | |     options: &OutputOptions,
626 | |     state: &mut OutputState,
627 | |     is_interactive: bool,
628 | | ) -> CatResult<()> {
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:648:5
    |
648 |     Ok(())
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
648 |     return Ok(())
    |     ++++++

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:631:13
    |
631 |             writer.write_all(b"^M")?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:633:13
    |
633 |             writer.write_all(b"\r")?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:637:9
    |
637 |         write_end_of_line(writer, options.end_of_line().as_bytes(), is_interactive)?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:643:13
    |
643 |             state.line_number.write(writer)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:623:1
    |
623 | / fn write_new_line<W: Write>(
624 | |     writer: &mut W,
625 | |     options: &OutputOptions,
626 | |     state: &mut OutputState,
...   |
648 | |     Ok(())
649 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:646:9
    |
646 |         write_end_of_line(writer, options.end_of_line().as_bytes(), is_interactive)?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:653:9
    |
653 |         write_nonprint_to_end(in_buf, writer, options.tab().as_bytes())
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
653 |         return write_nonprint_to_end(in_buf, writer, options.tab().as_bytes())
    |         ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:655:9
    |
655 |         write_tab_to_end(in_buf, writer)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
655 |         return write_tab_to_end(in_buf, writer)
    |         ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:657:9
    |
657 |         write_to_end(in_buf, writer)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
657 |         return write_to_end(in_buf, writer)
    |         ++++++

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:666:1
    |
666 | fn write_to_end<W: Write>(in_buf: &[u8], writer: &mut W) -> usize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:670:13
    |
670 |             writer.write_all(&in_buf[..p]).unwrap();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:671:13
    |
671 |             p
    |             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
671 |             return p
    |             ++++++

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:675:13
    |
675 |             in_buf.len()
    |             ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
675 |             return in_buf.len()
    |             ++++++

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:651:1
    |
651 | / fn write_end<W: Write>(writer: &mut W, in_buf: &[u8], options: &OutputOptions) -> usize {
652 | |     if options.show_nonprint {
653 | |         write_nonprint_to_end(in_buf, writer, options.tab().as_bytes())
654 | |     } else if options.show_tabs {
...   |
659 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> src/uu/cat/src/cat.rs:668:5
    |
668 | /     match memchr2(b'\n', b'\r', in_buf) {
669 | |         Some(p) => {
670 | |             writer.write_all(&in_buf[..p]).unwrap();
671 | |             p
...   |
677 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
    = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::single_match_else)]`
help: try
    |
668 ~     if let Some(p) = memchr2(b'\n', b'\r', in_buf) {
669 +         writer.write_all(&in_buf[..p]).unwrap();
670 +         p
671 +     } else {
672 +         writer.write_all(in_buf).unwrap();
673 +         in_buf.len()
674 +     }
    |

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:669:14
    |
669 |         Some(p) => {
    |              ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: used `unwrap()` on a `Result` value
   --> src/uu/cat/src/cat.rs:670:13
    |
670 |             writer.write_all(&in_buf[..p]).unwrap();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used
    = note: `-W clippy::unwrap-used` implied by `-W clippy::restriction`
    = help: to override `-W clippy::restriction` add `#[allow(clippy::unwrap_used)]`

warning: slicing may panic
   --> src/uu/cat/src/cat.rs:670:31
    |
670 |             writer.write_all(&in_buf[..p]).unwrap();
    |                               ^^^^^^^^^^^
    |
    = help: consider using `.get(..n)`or `.get_mut(..n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:666:1
    |
666 | / fn write_to_end<W: Write>(in_buf: &[u8], writer: &mut W) -> usize {
667 | |     // using memchr2 significantly improves performances
668 | |     match memchr2(b'\n', b'\r', in_buf) {
669 | |         Some(p) => {
...   |
678 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: used `unwrap()` on a `Result` value
   --> src/uu/cat/src/cat.rs:674:13
    |
674 |             writer.write_all(in_buf).unwrap();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:680:1
    |
680 | fn write_tab_to_end<W: Write>(mut in_buf: &[u8], writer: &mut W) -> usize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:688:17
    |
688 |                 writer.write_all(&in_buf[..p]).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unnecessary semicolon
   --> src/uu/cat/src/cat.rs:702:10
    |
702 |         };
    |          ^ help: remove
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_semicolon
    = note: `-W clippy::unnecessary-semicolon` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::unnecessary_semicolon)]`

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> src/uu/cat/src/cat.rs:683:9
    |
683 | /         match in_buf
684 | |             .iter()
685 | |             .position(|c| *c == b'\n' || *c == b'\t' || *c == b'\r')
...   |
702 | |         };
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
    |
683 ~         if let Some(p) = in_buf
684 +             .iter()
685 +             .position(|c| *c == b'\n' || *c == b'\t' || *c == b'\r') {
686 +             writer.write_all(&in_buf[..p]).unwrap();
687 +             if in_buf[p] == b'\t' {
688 +                 writer.write_all(b"^I").unwrap();
689 +                 in_buf = &in_buf[p + 1..];
690 +                 count += p + 1;
691 +             } else {
692 +                 // b'\n' or b'\r'
693 +                 return count + p;
694 +             }
695 +         } else {
696 +             writer.write_all(in_buf).unwrap();
697 +             return in_buf.len() + count;
698 ~         };
    |

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:685:27
    |
685 |             .position(|c| *c == b'\n' || *c == b'\t' || *c == b'\r')
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
685 |             .position(|c| return *c == b'\n' || *c == b'\t' || *c == b'\r')
    |                           ++++++

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:685:24
    |
685 |             .position(|c| *c == b'\n' || *c == b'\t' || *c == b'\r')
    |                        ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: this ident consists of a single char
   --> src/uu/cat/src/cat.rs:687:18
    |
687 |             Some(p) => {
    |                  ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#min_ident_chars

warning: used `unwrap()` on a `Result` value
   --> src/uu/cat/src/cat.rs:688:17
    |
688 |                 writer.write_all(&in_buf[..p]).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: slicing may panic
   --> src/uu/cat/src/cat.rs:688:35
    |
688 |                 writer.write_all(&in_buf[..p]).unwrap();
    |                                   ^^^^^^^^^^^
    |
    = help: consider using `.get(..n)`or `.get_mut(..n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: indexing may panic
   --> src/uu/cat/src/cat.rs:689:20
    |
689 |                 if in_buf[p] == b'\t' {
    |                    ^^^^^^^^^
    |
    = help: consider using `.get(n)` or `.get_mut(n)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:680:1
    |
680 | / fn write_tab_to_end<W: Write>(mut in_buf: &[u8], writer: &mut W) -> usize {
681 | |     let mut count = 0;
682 | |     loop {
683 | |         match in_buf
...   |
704 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: used `unwrap()` on a `Result` value
   --> src/uu/cat/src/cat.rs:690:21
    |
690 |                     writer.write_all(b"^I").unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: slicing may panic
   --> src/uu/cat/src/cat.rs:691:31
    |
691 |                     in_buf = &in_buf[p + 1..];
    |                               ^^^^^^^^^^^^^^^
    |
    = help: consider using `.get(n..)` or .get_mut(n..)` instead
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#indexing_slicing

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:691:38
    |
691 |                     in_buf = &in_buf[p + 1..];
    |                                      ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:692:21
    |
692 |                     count += p + 1;
    |                     ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:695:28
    |
695 |                     return count + p;
    |                            ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: used `unwrap()` on a `Result` value
   --> src/uu/cat/src/cat.rs:699:17
    |
699 |                 writer.write_all(in_buf).unwrap();
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:700:24
    |
700 |                 return in_buf.len() + count;
    |                        ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:706:1
    |
706 | fn write_nonprint_to_end<W: Write>(in_buf: &[u8], writer: &mut W, tab: &[u8]) -> usize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:713:9
    |
713 | /         match byte {
714 | |             9 => writer.write_all(tab),
715 | |             0..=8 | 10..=31 => writer.write_all(&[b'^', byte + 64]),
716 | |             32..=126 => writer.write_all(&[byte]),
...   |
722 | |         .unwrap();
    | |_________________^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:725:5
    |
725 |     count
    |     ^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
725 |     return count
    |     ++++++

warning: used `unwrap()` on a `Result` value
   --> src/uu/cat/src/cat.rs:713:9
    |
713 | /         match byte {
714 | |             9 => writer.write_all(tab),
715 | |             0..=8 | 10..=31 => writer.write_all(&[b'^', byte + 64]),
716 | |             32..=126 => writer.write_all(&[byte]),
...   |
722 | |         .unwrap();
    | |_________________^
    |
    = note: if this value is an `Err`, it will panic
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unwrap_used

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:715:57
    |
715 |             0..=8 | 10..=31 => writer.write_all(&[b'^', byte + 64]),
    |                                                         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:718:63
    |
718 |             128..=159 => writer.write_all(&[b'M', b'-', b'^', byte - 64]),
    |                                                               ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:719:57
    |
719 |             160..=254 => writer.write_all(&[b'M', b'-', byte - 128]),
    |                                                         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: arithmetic operation that can potentially result in unexpected side-effects
   --> src/uu/cat/src/cat.rs:723:9
    |
723 |         count += 1;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#arithmetic_side_effects

warning: docs for function returning `Result` missing `# Errors` section
   --> src/uu/cat/src/cat.rs:728:1
    |
728 | / fn write_end_of_line<W: Write>(
729 | |     writer: &mut W,
730 | |     end_of_line: &[u8],
731 | |     is_interactive: bool,
732 | | ) -> CatResult<()> {
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: missing `return` statement
   --> src/uu/cat/src/cat.rs:737:5
    |
737 |     Ok(())
    |     ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#implicit_return
help: add `return` as shown
    |
737 |     return Ok(())
    |     ++++++

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:706:1
    |
706 | / fn write_nonprint_to_end<W: Write>(in_buf: &[u8], writer: &mut W, tab: &[u8]) -> usize {
707 | |     let mut count = 0;
708 | |
709 | |     for byte in in_buf.iter().copied() {
...   |
725 | |     count
726 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:733:5
    |
733 |     writer.write_all(end_of_line)?;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: question mark operator was used
   --> src/uu/cat/src/cat.rs:735:9
    |
735 |         writer.flush()?;
    |         ^^^^^^^^^^^^^^^
    |
    = help: consider using a custom macro or match expression
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#question_mark_used

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:745:5
    |
745 |     fn test_write_tab_to_end_with_newline() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:748:9
    |
748 |         assert_eq!(super::write_tab_to_end(in_buf, &mut writer), 5);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:752:5
    |
752 |     fn test_write_tab_to_end_no_newline() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:755:9
    |
755 |         assert_eq!(super::write_tab_to_end(in_buf, &mut writer), 5);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:759:5
    |
759 |     fn test_write_nonprint_to_end_new_line() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:764:9
    |
764 |         assert_eq!(writer.buffer().len(), 0);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:768:5
    |
768 |     fn test_write_nonprint_to_end_9() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:773:9
    |
773 |         assert_eq!(writer.buffer(), tab);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:777:5
    |
777 |     fn test_write_nonprint_to_end_0_to_8() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:783:13
    |
783 |             assert_eq!(writer.buffer(), [b'^', byte + 64]);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:788:5
    |
788 |     fn test_write_nonprint_to_end_10_to_31() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:794:13
    |
794 |             assert_eq!(writer.buffer(), [b'^', byte + 64]);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/uu/cat/src/cat.rs:799:5
    |
799 |     fn test_incrementing_string() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/uu/cat/src/cat.rs:801:9
    |
801 |         assert_eq!(b"     1\t", incrementing_string.to_str());
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: default numeric fallback might occur
   --> src/uu/cat/src/cat.rs:805:18
    |
805 |         for _ in 3..=100 {
    |                  ^ help: consider adding suffix: `3_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback

warning: missing documentation for a function
   --> src/uu/cat/src/cat.rs:728:1
    |
728 | / fn write_end_of_line<W: Write>(
729 | |     writer: &mut W,
730 | |     end_of_line: &[u8],
731 | |     is_interactive: bool,
...   |
737 | |     Ok(())
738 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items

warning: default numeric fallback might occur
   --> src/uu/cat/src/cat.rs:805:22
    |
805 |         for _ in 3..=100 {
    |                      ^^^ help: consider adding suffix: `100_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback

warning: default numeric fallback might occur
   --> src/uu/cat/src/cat.rs:810:18
    |
810 |         for _ in 101..=1_000_000 {
    |                  ^^^ help: consider adding suffix: `101_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback

warning: default numeric fallback might occur
   --> src/uu/cat/src/cat.rs:810:24
    |
810 |         for _ in 101..=1_000_000 {
    |                        ^^^^^^^^^ help: consider adding suffix: `1_000_000_i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_numeric_fallback

warning: this function is only used once
  --> src/uu/cat/src/splice.rs:55:1
   |
55 | / fn copy_exact(read_fd: &impl AsFd, write_fd: &impl AsFd, num_bytes: usize) -> nix::Result<()> {
56 | |     let mut left = num_bytes;
57 | |     let mut buf = [0; BUF_SIZE];
58 | |     while left > 0 {
...  |
70 | |     Ok(())
71 | | }
   | |_^
   |
note: used here
  --> src/uu/cat/src/splice.rs:41:21
   |
41 |                     copy_exact(&pipe_rd, write_fd, n)?;
   |                     ^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn
   = note: `-W clippy::single-call-fn` implied by `-W clippy::restriction`
   = help: to override `-W clippy::restriction` add `#[allow(clippy::single_call_fn)]`

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:275:1
    |
275 | / pub fn uu_app() -> Command {
276 | |     Command::new(uucore::util_name())
277 | |         .version(uucore::crate_version!())
278 | |         .override_usage(format_usage(USAGE))
...   |
357 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:224:19
    |
224 |     let matches = uu_app().try_get_matches_from(args)?;
    |                   ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:440:1
    |
440 | / fn cat_files(files: &[String], options: &OutputOptions) -> UResult<()> {
441 | |     let out_info = FileInformation::from_file(&io::stdout()).ok();
442 | |
443 | |     let mut state = OutputState {
...   |
470 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:272:5
    |
272 |     cat_files(&files, &options)
    |     ^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:223:1
    |
223 | / pub fn uumain(args: impl uucore::Args) -> UResult<()> {
224 | |     let matches = uu_app().try_get_matches_from(args)?;
225 | |
226 | |     let number_mode = if matches.get_flag(options::NUMBER_NONBLANK) {
...   |
272 | |     cat_files(&files, &options)
273 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:222:1
    |
222 | #[uucore::main]
    | ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn
    = note: this warning originates in the attribute macro `uucore::main` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:519:1
    |
519 | / fn write_fast<R: FdReadable>(handle: &mut InputHandle<R>) -> CatResult<()> {
520 | |     let stdout = io::stdout();
521 | |     let mut stdout_lock = stdout.lock();
522 | |     #[cfg(any(target_os = "linux", target_os = "android"))]
...   |
546 | |     Ok(())
547 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:365:9
    |
365 |         write_fast(handle)
    |         ^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:551:1
    |
551 | / fn write_lines<R: FdReadable>(
552 | |     handle: &mut InputHandle<R>,
553 | |     options: &OutputOptions,
554 | |     state: &mut OutputState,
...   |
619 | |     Ok(())
620 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:367:9
    |
367 |         write_lines(handle, options, state)
    |         ^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:477:1
    |
477 | / fn get_input_type(path: &str) -> CatResult<InputType> {
478 | |     if path == "-" {
479 | |         return Ok(InputType::StdIn);
...   |
515 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:394:11
    |
394 |     match get_input_type(path)? {
    |           ^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:373:1
    |
373 | / fn is_appending() -> bool {
374 | |     let stdout = io::stdout();
375 | |     let Ok(flags) = fcntl(stdout.as_fd(), FcntlArg::F_GETFL) else {
376 | |         return false;
...   |
380 | |     (flags & o_append) > 0
381 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:403:44
    |
403 |                 if in_info == *out_info && is_appending() {
    |                                            ^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:388:1
    |
388 | / fn cat_path(
389 | |     path: &str,
390 | |     options: &OutputOptions,
391 | |     state: &mut OutputState,
...   |
438 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:452:27
    |
452 |         if let Err(err) = cat_path(path, options, &mut state, out_info.as_ref()) {
    |                           ^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/splice.rs:23:1
    |
23  | / pub(super) fn write_fast_using_splice<R: FdReadable, S: AsRawFd + AsFd>(
24  | |     handle: &InputHandle<R>,
25  | |     write_fd: &S,
26  | | ) -> CatResult<bool> {
...   |
50  | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:526:13
    |
526 |         if !splice::write_fast_using_splice(handle, &stdout_lock)? {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:55:5
    |
55  | /     fn new() -> Self {
56  | |         let mut buf = [b'0'; LINE_NUMBER_BUF_SIZE];
57  | |
58  | |         let init_str = "     1\t";
...   |
71  | |     }
    | |_____^
    |
note: used here
   --> src/uu/cat/src/cat.rs:444:22
    |
444 |         line_number: LineNumber::new(),
    |                      ^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:623:1
    |
623 | / fn write_new_line<W: Write>(
624 | |     writer: &mut W,
625 | |     options: &OutputOptions,
626 | |     state: &mut OutputState,
...   |
648 | |     Ok(())
649 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:571:17
    |
571 |                 write_new_line(&mut writer, options, state, handle.is_interactive)?;
    |                 ^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:651:1
    |
651 | / fn write_end<W: Write>(writer: &mut W, in_buf: &[u8], options: &OutputOptions) -> usize {
652 | |     if options.show_nonprint {
653 | |         write_nonprint_to_end(in_buf, writer, options.tab().as_bytes())
654 | |     } else if options.show_tabs {
...   |
659 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:588:26
    |
588 |             let offset = write_end(&mut writer, &in_buf[pos..], options);
    |                          ^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:666:1
    |
666 | / fn write_to_end<W: Write>(in_buf: &[u8], writer: &mut W) -> usize {
667 | |     // using memchr2 significantly improves performances
668 | |     match memchr2(b'\n', b'\r', in_buf) {
669 | |         Some(p) => {
...   |
678 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:657:9
    |
657 |         write_to_end(in_buf, writer)
    |         ^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:706:1
    |
706 | / fn write_nonprint_to_end<W: Write>(in_buf: &[u8], writer: &mut W, tab: &[u8]) -> usize {
707 | |     let mut count = 0;
708 | |
709 | |     for byte in in_buf.iter().copied() {
...   |
725 | |     count
726 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:653:9
    |
653 |         write_nonprint_to_end(in_buf, writer, options.tab().as_bytes())
    |         ^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: this function is only used once
   --> src/uu/cat/src/cat.rs:680:1
    |
680 | / fn write_tab_to_end<W: Write>(mut in_buf: &[u8], writer: &mut W) -> usize {
681 | |     let mut count = 0;
682 | |     loop {
683 | |         match in_buf
...   |
704 | | }
    | |_^
    |
note: used here
   --> src/uu/cat/src/cat.rs:655:9
    |
655 |         write_tab_to_end(in_buf, writer)
    |         ^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_call_fn

warning: `uu_cat` (lib test) generated 240 warnings (86 duplicates) (run `cargo clippy --fix --lib -p uu_cat --tests` to apply 35 suggestions)
warning: `uu_cat` (lib) generated 272 warnings (157 duplicates) (run `cargo clippy --fix --lib -p uu_cat` to apply 25 suggestions)
warning: missing documentation for the crate
 --> src/uu/cat/src/main.rs:1:1
  |
1 | uucore::bin!(uu_cat);
  | ^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_docs_in_private_items
  = note: `-W clippy::missing-docs-in-private-items` implied by `-W clippy::restriction`
  = help: to override `-W clippy::restriction` add `#[allow(clippy::missing_docs_in_private_items)]`

warning: usage of `process::exit`
 --> src/uu/cat/src/main.rs:1:1
  |
1 | uucore::bin!(uu_cat);
  | ^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#exit
  = note: `-W clippy::exit` implied by `-W clippy::restriction`
  = help: to override `-W clippy::restriction` add `#[allow(clippy::exit)]`
  = note: this warning originates in the macro `uucore::bin` (in Nightly builds, run with -Z macro-backtrace for more info)

warning: `uu_cat` (bin "cat" test) generated 10 warnings (9 duplicates)
warning: `uu_cat` (bin "cat") generated 10 warnings (9 duplicates)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 1m 23s
