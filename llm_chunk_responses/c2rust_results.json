{
  "cat": [
    "```rust\n#[cfg(all(unix, not(target_os = \"macos\")))]\nfn main() {\n    // add unix dependencies below\n    // println!(\"cargo:rustc-flags=-l readline\");\n}\n#[cfg(target_os = \"macos\")]\nfn main() {\n    // add macos dependencies below\n    // println!(\"cargo:rustc-flags=-l edit\");\n}\n```\n\n<EXAMPLE>\n#[cfg(all(unix, not(target_os = \"macos\")))]\nfn main() {\n    // add unix dependencies below\n    // println!(\"cargo:rustc-flags=-l readline\");\n}\n</EXAMPLE>\nHaving multiple `main` functions with different `#[cfg]` attributes is not idiomatic. Instead, consider using a single `main` function and conditionally compile only the parts that differ.\n\n<EXAMPLE>\n// println!(\"cargo:rustc-flags=-l readline\");\n</EXAMPLE>\nUsing `println!` for setting linker flags is not idiomatic. Instead, use a `build.rs` script to handle conditional compilation and linking dependencies.\n\n<EXAMPLE>\n#[cfg(target_os = \"macos\")]\nfn main() {\n    // add macos dependencies below\n    // println!(\"cargo:rustc-flags=-l edit\");\n}\n</EXAMPLE>\nAs with the previous `main` function, having multiple `main` functions is not idiomatic. Use conditional compilation within a single `main` function or a `build.rs` script for platform-specific logic.\n\n<EXAMPLE>\n// add unix dependencies below\n// add macos dependencies below\n</EXAMPLE>\nComments indicating where to add dependencies are not idiomatic. Instead, use a `build.rs` script to manage dependencies and platform-specific configurations. This approach is more maintainable and aligns with Rust's build system conventions.\n"
  ]
}