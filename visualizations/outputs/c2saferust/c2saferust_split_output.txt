   Compiling rust v0.0.0 (/mnt/c/Users/sebir/Documents/summer/Research/c2saferrust/coreutils/src/split/rust_WIP)
warning: literal with an empty format string
   --> src/version_etc.rs:317:9
    |
317 |         "https://www.gnu.org/software/coreutils/"
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::print-literal` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
315 ~         "{} home page: <https://www.gnu.org/software/coreutils/>",
316 ~         home_page.to_string_lossy().replace("%s", "GNU coreutils")
    |

warning: unused import: `std::any::Any`
 --> src/alignalloc.rs:1:5
  |
1 | use std::any::Any;
  |     ^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `std::os::raw::c_int`
 --> src/c_ctype.rs:9:5
  |
9 | use std::os::raw::c_int;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::ops::RangeInclusive`
  --> src/c_ctype.rs:11:5
   |
11 | use std::ops::RangeInclusive;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::convert::TryFrom`
  --> src/c_ctype.rs:13:5
   |
13 | use std::convert::TryFrom;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unnecessary parentheses around block return value
  --> src/c_ctype.rs:78:5
   |
78 |     (c >= 97 && c <= 122)
   |     ^                   ^
   |
   = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
   |
78 -     (c >= 97 && c <= 122)
78 +     c >= 97 && c <= 122
   |

warning: unused import: `std::ffi::CString`
 --> src/closeout.rs:1:5
  |
1 | use std::ffi::CString;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::process`
 --> src/closeout.rs:3:5
  |
3 | use std::process;
  |     ^^^^^^^^^^^^

warning: unused import: `std::io`
 --> src/closeout.rs:4:5
  |
4 | use std::io;
  |     ^^^^^^^

warning: unused import: `std::os::unix::io::FromRawFd`
 --> src/dup_safer.rs:1:5
  |
1 | use std::os::unix::io::FromRawFd;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::os::unix::io::AsRawFd`
 --> src/dup_safer.rs:9:9
  |
9 |     use std::os::unix::io::AsRawFd;
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: the item `FromRawFd` is imported redundantly
  --> src/dup_safer.rs:10:9
   |
1  | use std::os::unix::io::FromRawFd;
   |     ---------------------------- the item `FromRawFd` is already imported here
...
10 |     use std::os::unix::io::FromRawFd;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::os::unix::io::FromRawFd`
  --> src/dup_safer.rs:10:9
   |
10 |     use std::os::unix::io::FromRawFd;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::io`
 --> src/dup_safer_flag.rs:1:5
  |
1 | use std::io;
  |     ^^^^^^^

warning: unused import: `std::os::raw::c_int`
 --> src/fclose.rs:1:5
  |
1 | use std::os::raw::c_int;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::ffi::VaList`
 --> src/fcntl.rs:3:5
  |
3 | use std::ffi::VaList;
  |     ^^^^^^^^^^^^^^^^

warning: unused imports: `AsRawFd`, `RawFd`
 --> src/fd_safer_flag.rs:1:25
  |
1 | use std::os::unix::io::{AsRawFd, RawFd};
  |                         ^^^^^^^  ^^^^^

warning: unused import: `std::fs::File`
 --> src/fd_safer_flag.rs:2:5
  |
2 | use std::fs::File;
  |     ^^^^^^^^^^^^^

warning: unused import: `ErrorKind`
 --> src/fd_safer_flag.rs:3:21
  |
3 | use std::io::{self, ErrorKind};
  |                     ^^^^^^^^^

warning: unused import: `std::ptr`
 --> src/fflush.rs:2:5
  |
2 | use std::ptr;
  |     ^^^^^^^^

warning: unused import: `std::alloc`
 --> src/ialloc.rs:6:5
  |
6 | use std::alloc;
  |     ^^^^^^^^^^

warning: unused import: `std::ptr`
 --> src/ialloc.rs:7:5
  |
7 | use std::ptr;
  |     ^^^^^^^^

warning: unused import: `std::slice`
 --> src/ialloc.rs:8:5
  |
8 | use std::slice;
  |     ^^^^^^^^^^

warning: unused import: `std::mem`
 --> src/mbszero.rs:1:5
  |
1 | use std::mem;
  |     ^^^^^^^^

warning: unused import: `std::ffi::CStr`
 --> src/progname.rs:1:5
  |
1 | use std::ffi::CStr;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::process`
 --> src/progname.rs:2:5
  |
2 | use std::process;
  |     ^^^^^^^^^^^^

warning: unused import: `std::ffi::CString`
 --> src/sig2str.rs:1:5
  |
1 | use std::ffi::CString;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::mem`
 --> src/stdbit.rs:5:5
  |
5 | use std::mem;
  |     ^^^^^^^^

warning: unnecessary parentheses around block return value
  --> src/stdbit.rs:15:9
   |
15 |         (8 * std::mem::size_of::<u32>() as i32)
   |         ^                                     ^
   |
help: remove these parentheses
   |
15 -         (8 * std::mem::size_of::<u32>() as i32)
15 +         8 * std::mem::size_of::<u32>() as i32
   |

warning: unnecessary parentheses around block return value
  --> src/stdbit.rs:48:9
   |
48 |         (8 * std::mem::size_of::<u32>() as i32)
   |         ^                                     ^
   |
help: remove these parentheses
   |
48 -         (8 * std::mem::size_of::<u32>() as i32)
48 +         8 * std::mem::size_of::<u32>() as i32
   |

warning: unused import: `std::mem`
 --> src/stdc_leading_zeros.rs:8:5
  |
8 | use std::mem;
  |     ^^^^^^^^

warning: unused import: `std::convert::TryInto`
  --> src/stdc_leading_zeros.rs:10:5
   |
10 | use std::convert::TryInto;
   |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `::libc`
  --> src/stdc_leading_zeros.rs:12:5
   |
12 | use ::libc;
   |     ^^^^^^

warning: unnecessary parentheses around block return value
  --> src/stdc_leading_zeros.rs:18:9
   |
18 |         (8 * std::mem::size_of::<u32>() as i32)
   |         ^                                     ^
   |
help: remove these parentheses
   |
18 -         (8 * std::mem::size_of::<u32>() as i32)
18 +         8 * std::mem::size_of::<u32>() as i32
   |

warning: unused import: `std::ffi`
 --> src/temp_stream.rs:3:5
  |
3 | use std::ffi;
  |     ^^^^^^^^

warning: unused import: `std::io`
 --> src/temp_stream.rs:4:5
  |
4 | use std::io;
  |     ^^^^^^^

warning: unused import: `std::ffi::CStr`
 --> src/temp_stream.rs:6:5
  |
6 | use std::ffi::CStr;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::fs`
 --> src/temp_stream.rs:7:5
  |
7 | use std::fs;
  |     ^^^^^^^

warning: unused imports: `CStr`, `CString`
   --> src/temp_stream.rs:101:20
    |
101 |     use std::ffi::{CString, CStr};
    |                    ^^^^^^^  ^^^^

warning: the item `CStr` is imported redundantly
   --> src/temp_stream.rs:101:29
    |
6   | use std::ffi::CStr;
    |     -------------- the item `CStr` is already imported here
...
101 |     use std::ffi::{CString, CStr};
    |                             ^^^^

warning: unused import: `std::fs::File`
   --> src/temp_stream.rs:102:5
    |
102 | use std::fs::File;
    |     ^^^^^^^^^^^^^

warning: unused imports: `Write`, `self`
   --> src/temp_stream.rs:103:15
    |
103 | use std::io::{self, Write};
    |               ^^^^  ^^^^^

warning: the item `io` is imported redundantly
   --> src/temp_stream.rs:103:15
    |
4   | use std::io;
    |     ------- the item `io` is already imported here
...
103 | use std::io::{self, Write};
    |               ^^^^

warning: unused import: `std::os::unix::io::AsRawFd`
   --> src/temp_stream.rs:104:5
    |
104 | use std::os::unix::io::AsRawFd;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::process`
 --> src/xalloc_die.rs:1:5
  |
1 | use std::process;
  |     ^^^^^^^^^^^^

warning: unused import: `Write`
  --> src/xbinary_io.rs:21:25
   |
21 |     use std::io::{self, Write};
   |                         ^^^^^

warning: unused import: `TCSETA`
  --> src/xbinary_io.rs:23:31
   |
23 |     use libc::{self, termios, TCSETA};
   |                               ^^^^^^

warning: the item `libc` is imported redundantly
  --> src/xbinary_io.rs:23:16
   |
4  | use ::libc;
   |     ------ the item `libc` is already imported here
...
23 |     use libc::{self, termios, TCSETA};
   |                ^^^^

warning: unused import: `std::ffi::CStr`
 --> src/xdectoumax.rs:1:5
  |
1 | use std::ffi::CStr;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::io::Write`
 --> src/xdectoumax.rs:2:5
  |
2 | use std::io::Write;
  |     ^^^^^^^^^^^^^^

warning: unused import: `std::slice`
 --> src/xmalloc.rs:8:5
  |
8 | use std::slice;
  |     ^^^^^^^^^^

warning: unused import: `std::mem`
  --> src/xmalloc.rs:10:5
   |
10 | use std::mem;
   |     ^^^^^^^^

warning: unused label
   --> src/xstrtoimax.rs:431:5
    |
431 |     'c_2247: {
    |     ^^^^^^^
    |
    = note: `#[warn(unused_labels)]` on by default

warning: unused import: `std::ffi::CStr`
 --> src/xstrtoumax.rs:3:5
  |
3 | use std::ffi::CStr;
  |     ^^^^^^^^^^^^^^

warning: unused label
   --> src/xstrtoumax.rs:398:5
    |
398 |     'c_2256: {
    |     ^^^^^^^

warning: this `else { if .. }` block can be collapsed
   --> src/closeout.rs:120:20
    |
120 |               } else {
    |  ____________________^
121 | |                 if false {
122 | |                     error(
123 | |                         0,
...   |
149 | |                 }
150 | |             }
    | |_____________^
    |
    = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
120 ~             } else if false {
121 +                 error(
122 +                     0,
123 +                     std::io::Error::last_os_error().raw_os_error().unwrap_or(0),
124 +                     b"%s\0".as_ptr() as *const libc::c_char,
125 +                     write_error,
126 +                 );
127 +                 unreachable!();
128 +             } else {
129 +                 let __errstatus = 0;
130 +                 error(
131 +                     __errstatus,
132 +                     std::io::Error::last_os_error().raw_os_error().unwrap_or(0),
133 +                     b"%s\0".as_ptr() as *const libc::c_char,
134 +                     write_error,
135 +                 );
136 +                 if __errstatus != 0 {
137 +                     unreachable!();
138 +                 }
139 +                 error(
140 +                     __errstatus,
141 +                     std::io::Error::last_os_error().raw_os_error().unwrap_or(0),
142 +                     b"%s\0".as_ptr() as *const libc::c_char,
143 +                     write_error,
144 +                 );
145 +                 if __errstatus != 0 {
146 +                     unreachable!();
147 +                 }
148 +             }
    |

warning: long literal lacking separators
 --> src/dup_safer_flag.rs:9:29
  |
9 |     let command = if flag & 0o2000000 != 0 {
  |                             ^^^^^^^^^ help: consider: `0o2_000_000`
  |
  = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/fd_reopen.rs:20:12
   |
20 |       } else {
   |  ____________^
21 | |         let mut fd2: libc::c_int = dup2(fd, desired_fd);
22 | |         let mut saved_errno: libc::c_int = *__errno_location();
23 | |         close(fd);
24 | |         *__errno_location() = saved_errno;
25 | |         return fd2;
26 | |     };
   | |_____^
   |
   = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/full_write.rs:23:16
   |
23 |           } else {
   |  ________________^
24 | |             total = (total as libc::c_ulong).wrapping_add(n_rw) as size_t as size_t;
25 | |             ptr = ptr.offset(n_rw as isize);
26 | |             count = (count as libc::c_ulong).wrapping_sub(n_rw) as size_t as size_t;
27 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
 --> src/localcharset.rs:8:36
  |
8 | pub const _NL_NUM: C2RustUnnamed = 786449;
  |                                    ^^^^^^ help: consider: `786_449`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:9:54
  |
9 | pub const _NL_NUM_LC_IDENTIFICATION: C2RustUnnamed = 786448;
  |                                                      ^^^^^^ help: consider: `786_448`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:10:55
   |
10 | pub const _NL_IDENTIFICATION_CODESET: C2RustUnnamed = 786447;
   |                                                       ^^^^^^ help: consider: `786_447`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:11:56
   |
11 | pub const _NL_IDENTIFICATION_CATEGORY: C2RustUnnamed = 786446;
   |                                                        ^^^^^^ help: consider: `786_446`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:12:52
   |
12 | pub const _NL_IDENTIFICATION_DATE: C2RustUnnamed = 786445;
   |                                                    ^^^^^^ help: consider: `786_445`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:13:56
   |
13 | pub const _NL_IDENTIFICATION_REVISION: C2RustUnnamed = 786444;
   |                                                        ^^^^^^ help: consider: `786_444`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:14:60
   |
14 | pub const _NL_IDENTIFICATION_ABBREVIATION: C2RustUnnamed = 786443;
   |                                                            ^^^^^^ help: consider: `786_443`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:15:59
   |
15 | pub const _NL_IDENTIFICATION_APPLICATION: C2RustUnnamed = 786442;
   |                                                           ^^^^^^ help: consider: `786_442`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:16:56
   |
16 | pub const _NL_IDENTIFICATION_AUDIENCE: C2RustUnnamed = 786441;
   |                                                        ^^^^^^ help: consider: `786_441`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:17:57
   |
17 | pub const _NL_IDENTIFICATION_TERRITORY: C2RustUnnamed = 786440;
   |                                                         ^^^^^^ help: consider: `786_440`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:18:56
   |
18 | pub const _NL_IDENTIFICATION_LANGUAGE: C2RustUnnamed = 786439;
   |                                                        ^^^^^^ help: consider: `786_439`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:19:51
   |
19 | pub const _NL_IDENTIFICATION_FAX: C2RustUnnamed = 786438;
   |                                                   ^^^^^^ help: consider: `786_438`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:20:51
   |
20 | pub const _NL_IDENTIFICATION_TEL: C2RustUnnamed = 786437;
   |                                                   ^^^^^^ help: consider: `786_437`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:21:53
   |
21 | pub const _NL_IDENTIFICATION_EMAIL: C2RustUnnamed = 786436;
   |                                                     ^^^^^^ help: consider: `786_436`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:22:55
   |
22 | pub const _NL_IDENTIFICATION_CONTACT: C2RustUnnamed = 786435;
   |                                                       ^^^^^^ help: consider: `786_435`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:23:55
   |
23 | pub const _NL_IDENTIFICATION_ADDRESS: C2RustUnnamed = 786434;
   |                                                       ^^^^^^ help: consider: `786_434`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:24:54
   |
24 | pub const _NL_IDENTIFICATION_SOURCE: C2RustUnnamed = 786433;
   |                                                      ^^^^^^ help: consider: `786_433`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:25:53
   |
25 | pub const _NL_IDENTIFICATION_TITLE: C2RustUnnamed = 786432;
   |                                                     ^^^^^^ help: consider: `786_432`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:26:51
   |
26 | pub const _NL_NUM_LC_MEASUREMENT: C2RustUnnamed = 720898;
   |                                                   ^^^^^^ help: consider: `720_898`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:27:52
   |
27 | pub const _NL_MEASUREMENT_CODESET: C2RustUnnamed = 720897;
   |                                                    ^^^^^^ help: consider: `720_897`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:28:56
   |
28 | pub const _NL_MEASUREMENT_MEASUREMENT: C2RustUnnamed = 720896;
   |                                                        ^^^^^^ help: consider: `720_896`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:29:49
   |
29 | pub const _NL_NUM_LC_TELEPHONE: C2RustUnnamed = 655365;
   |                                                 ^^^^^^ help: consider: `655_365`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:30:50
   |
30 | pub const _NL_TELEPHONE_CODESET: C2RustUnnamed = 655364;
   |                                                  ^^^^^^ help: consider: `655_364`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:31:53
   |
31 | pub const _NL_TELEPHONE_INT_PREFIX: C2RustUnnamed = 655363;
   |                                                     ^^^^^^ help: consider: `655_363`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:32:53
   |
32 | pub const _NL_TELEPHONE_INT_SELECT: C2RustUnnamed = 655362;
   |                                                     ^^^^^^ help: consider: `655_362`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:33:54
   |
33 | pub const _NL_TELEPHONE_TEL_DOM_FMT: C2RustUnnamed = 655361;
   |                                                      ^^^^^^ help: consider: `655_361`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:34:54
   |
34 | pub const _NL_TELEPHONE_TEL_INT_FMT: C2RustUnnamed = 655360;
   |                                                      ^^^^^^ help: consider: `655_360`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:35:47
   |
35 | pub const _NL_NUM_LC_ADDRESS: C2RustUnnamed = 589837;
   |                                               ^^^^^^ help: consider: `589_837`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:36:48
   |
36 | pub const _NL_ADDRESS_CODESET: C2RustUnnamed = 589836;
   |                                                ^^^^^^ help: consider: `589_836`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:37:49
   |
37 | pub const _NL_ADDRESS_LANG_LIB: C2RustUnnamed = 589835;
   |                                                 ^^^^^^ help: consider: `589_835`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:38:50
   |
38 | pub const _NL_ADDRESS_LANG_TERM: C2RustUnnamed = 589834;
   |                                                  ^^^^^^ help: consider: `589_834`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:39:48
   |
39 | pub const _NL_ADDRESS_LANG_AB: C2RustUnnamed = 589833;
   |                                                ^^^^^^ help: consider: `589_833`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:40:50
   |
40 | pub const _NL_ADDRESS_LANG_NAME: C2RustUnnamed = 589832;
   |                                                  ^^^^^^ help: consider: `589_832`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:41:53
   |
41 | pub const _NL_ADDRESS_COUNTRY_ISBN: C2RustUnnamed = 589831;
   |                                                     ^^^^^^ help: consider: `589_831`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:42:52
   |
42 | pub const _NL_ADDRESS_COUNTRY_NUM: C2RustUnnamed = 589830;
   |                                                    ^^^^^^ help: consider: `589_830`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:43:52
   |
43 | pub const _NL_ADDRESS_COUNTRY_CAR: C2RustUnnamed = 589829;
   |                                                    ^^^^^^ help: consider: `589_829`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:44:52
   |
44 | pub const _NL_ADDRESS_COUNTRY_AB3: C2RustUnnamed = 589828;
   |                                                    ^^^^^^ help: consider: `589_828`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:45:52
   |
45 | pub const _NL_ADDRESS_COUNTRY_AB2: C2RustUnnamed = 589827;
   |                                                    ^^^^^^ help: consider: `589_827`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:46:53
   |
46 | pub const _NL_ADDRESS_COUNTRY_POST: C2RustUnnamed = 589826;
   |                                                     ^^^^^^ help: consider: `589_826`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:47:53
   |
47 | pub const _NL_ADDRESS_COUNTRY_NAME: C2RustUnnamed = 589825;
   |                                                     ^^^^^^ help: consider: `589_825`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:48:51
   |
48 | pub const _NL_ADDRESS_POSTAL_FMT: C2RustUnnamed = 589824;
   |                                                   ^^^^^^ help: consider: `589_824`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:49:44
   |
49 | pub const _NL_NUM_LC_NAME: C2RustUnnamed = 524295;
   |                                            ^^^^^^ help: consider: `524_295`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:50:45
   |
50 | pub const _NL_NAME_CODESET: C2RustUnnamed = 524294;
   |                                             ^^^^^^ help: consider: `524_294`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:51:45
   |
51 | pub const _NL_NAME_NAME_MS: C2RustUnnamed = 524293;
   |                                             ^^^^^^ help: consider: `524_293`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:52:47
   |
52 | pub const _NL_NAME_NAME_MISS: C2RustUnnamed = 524292;
   |                                               ^^^^^^ help: consider: `524_292`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:53:46
   |
53 | pub const _NL_NAME_NAME_MRS: C2RustUnnamed = 524291;
   |                                              ^^^^^^ help: consider: `524_291`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:54:45
   |
54 | pub const _NL_NAME_NAME_MR: C2RustUnnamed = 524290;
   |                                             ^^^^^^ help: consider: `524_290`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:55:46
   |
55 | pub const _NL_NAME_NAME_GEN: C2RustUnnamed = 524289;
   |                                              ^^^^^^ help: consider: `524_289`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:56:46
   |
56 | pub const _NL_NAME_NAME_FMT: C2RustUnnamed = 524288;
   |                                              ^^^^^^ help: consider: `524_288`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:57:45
   |
57 | pub const _NL_NUM_LC_PAPER: C2RustUnnamed = 458755;
   |                                             ^^^^^^ help: consider: `458_755`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:58:46
   |
58 | pub const _NL_PAPER_CODESET: C2RustUnnamed = 458754;
   |                                              ^^^^^^ help: consider: `458_754`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:59:44
   |
59 | pub const _NL_PAPER_WIDTH: C2RustUnnamed = 458753;
   |                                            ^^^^^^ help: consider: `458_753`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:60:45
   |
60 | pub const _NL_PAPER_HEIGHT: C2RustUnnamed = 458752;
   |                                             ^^^^^^ help: consider: `458_752`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:61:48
   |
61 | pub const _NL_NUM_LC_MESSAGES: C2RustUnnamed = 327685;
   |                                                ^^^^^^ help: consider: `327_685`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:62:49
   |
62 | pub const _NL_MESSAGES_CODESET: C2RustUnnamed = 327684;
   |                                                 ^^^^^^ help: consider: `327_684`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:63:36
   |
63 | pub const __NOSTR: C2RustUnnamed = 327683;
   |                                    ^^^^^^ help: consider: `327_683`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:64:37
   |
64 | pub const __YESSTR: C2RustUnnamed = 327682;
   |                                     ^^^^^^ help: consider: `327_682`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:65:37
   |
65 | pub const __NOEXPR: C2RustUnnamed = 327681;
   |                                     ^^^^^^ help: consider: `327_681`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:66:38
   |
66 | pub const __YESEXPR: C2RustUnnamed = 327680;
   |                                      ^^^^^^ help: consider: `327_680`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:76:48
   |
76 | pub const _NL_NUM_LC_MONETARY: C2RustUnnamed = 262190;
   |                                                ^^^^^^ help: consider: `262_190`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:77:49
   |
77 | pub const _NL_MONETARY_CODESET: C2RustUnnamed = 262189;
   |                                                 ^^^^^^ help: consider: `262_189`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:78:58
   |
78 | pub const _NL_MONETARY_THOUSANDS_SEP_WC: C2RustUnnamed = 262188;
   |                                                          ^^^^^^ help: consider: `262_188`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:79:58
   |
79 | pub const _NL_MONETARY_DECIMAL_POINT_WC: C2RustUnnamed = 262187;
   |                                                          ^^^^^^ help: consider: `262_187`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:80:57
   |
80 | pub const _NL_MONETARY_CONVERSION_RATE: C2RustUnnamed = 262186;
   |                                                         ^^^^^^ help: consider: `262_186`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:81:54
   |
81 | pub const _NL_MONETARY_DUO_VALID_TO: C2RustUnnamed = 262185;
   |                                                      ^^^^^^ help: consider: `262_185`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:82:56
   |
82 | pub const _NL_MONETARY_DUO_VALID_FROM: C2RustUnnamed = 262184;
   |                                                        ^^^^^^ help: consider: `262_184`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:83:54
   |
83 | pub const _NL_MONETARY_UNO_VALID_TO: C2RustUnnamed = 262183;
   |                                                      ^^^^^^ help: consider: `262_183`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:84:56
   |
84 | pub const _NL_MONETARY_UNO_VALID_FROM: C2RustUnnamed = 262182;
   |                                                        ^^^^^^ help: consider: `262_182`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:85:61
   |
85 | pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: C2RustUnnamed = 262181;
   |                                                             ^^^^^^ help: consider: `262_181`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:86:61
   |
86 | pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: C2RustUnnamed = 262180;
   |                                                             ^^^^^^ help: consider: `262_180`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:87:57
   |
87 | pub const _NL_MONETARY_DUO_N_SIGN_POSN: C2RustUnnamed = 262179;
   |                                                         ^^^^^^ help: consider: `262_179`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:88:57
   |
88 | pub const _NL_MONETARY_DUO_P_SIGN_POSN: C2RustUnnamed = 262178;
   |                                                         ^^^^^^ help: consider: `262_178`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:89:64
   |
89 | pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: C2RustUnnamed = 262177;
   |                                                                ^^^^^^ help: consider: `262_177`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:90:63
   |
90 | pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: C2RustUnnamed = 262176;
   |                                                               ^^^^^^ help: consider: `262_176`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:91:64
   |
91 | pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: C2RustUnnamed = 262175;
   |                                                                ^^^^^^ help: consider: `262_175`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:92:63
   |
92 | pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: C2RustUnnamed = 262174;
   |                                                               ^^^^^^ help: consider: `262_174`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:93:60
   |
93 | pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: C2RustUnnamed = 262173;
   |                                                            ^^^^^^ help: consider: `262_173`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:94:59
   |
94 | pub const _NL_MONETARY_DUO_N_CS_PRECEDES: C2RustUnnamed = 262172;
   |                                                           ^^^^^^ help: consider: `262_172`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:95:60
   |
95 | pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: C2RustUnnamed = 262171;
   |                                                            ^^^^^^ help: consider: `262_171`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:96:59
   |
96 | pub const _NL_MONETARY_DUO_P_CS_PRECEDES: C2RustUnnamed = 262170;
   |                                                           ^^^^^^ help: consider: `262_170`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:97:57
   |
97 | pub const _NL_MONETARY_DUO_FRAC_DIGITS: C2RustUnnamed = 262169;
   |                                                         ^^^^^^ help: consider: `262_169`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:98:61
   |
98 | pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: C2RustUnnamed = 262168;
   |                                                             ^^^^^^ help: consider: `262_168`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:99:61
   |
99 | pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: C2RustUnnamed = 262167;
   |                                                             ^^^^^^ help: consider: `262_167`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:100:61
    |
100 | pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: C2RustUnnamed = 262166;
    |                                                             ^^^^^^ help: consider: `262_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:101:46
    |
101 | pub const __INT_N_SIGN_POSN: C2RustUnnamed = 262165;
    |                                              ^^^^^^ help: consider: `262_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:102:46
    |
102 | pub const __INT_P_SIGN_POSN: C2RustUnnamed = 262164;
    |                                              ^^^^^^ help: consider: `262_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:103:49
    |
103 | pub const __INT_N_SEP_BY_SPACE: C2RustUnnamed = 262163;
    |                                                 ^^^^^^ help: consider: `262_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:104:48
    |
104 | pub const __INT_N_CS_PRECEDES: C2RustUnnamed = 262162;
    |                                                ^^^^^^ help: consider: `262_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:105:49
    |
105 | pub const __INT_P_SEP_BY_SPACE: C2RustUnnamed = 262161;
    |                                                 ^^^^^^ help: consider: `262_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:106:48
    |
106 | pub const __INT_P_CS_PRECEDES: C2RustUnnamed = 262160;
    |                                                ^^^^^^ help: consider: `262_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:107:50
    |
107 | pub const _NL_MONETARY_CRNCYSTR: C2RustUnnamed = 262159;
    |                                                  ^^^^^^ help: consider: `262_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:108:42
    |
108 | pub const __N_SIGN_POSN: C2RustUnnamed = 262158;
    |                                          ^^^^^^ help: consider: `262_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:109:42
    |
109 | pub const __P_SIGN_POSN: C2RustUnnamed = 262157;
    |                                          ^^^^^^ help: consider: `262_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:110:45
    |
110 | pub const __N_SEP_BY_SPACE: C2RustUnnamed = 262156;
    |                                             ^^^^^^ help: consider: `262_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:111:44
    |
111 | pub const __N_CS_PRECEDES: C2RustUnnamed = 262155;
    |                                            ^^^^^^ help: consider: `262_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:112:45
    |
112 | pub const __P_SEP_BY_SPACE: C2RustUnnamed = 262154;
    |                                             ^^^^^^ help: consider: `262_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:113:44
    |
113 | pub const __P_CS_PRECEDES: C2RustUnnamed = 262153;
    |                                            ^^^^^^ help: consider: `262_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:114:42
    |
114 | pub const __FRAC_DIGITS: C2RustUnnamed = 262152;
    |                                          ^^^^^^ help: consider: `262_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:115:46
    |
115 | pub const __INT_FRAC_DIGITS: C2RustUnnamed = 262151;
    |                                              ^^^^^^ help: consider: `262_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:116:44
    |
116 | pub const __NEGATIVE_SIGN: C2RustUnnamed = 262150;
    |                                            ^^^^^^ help: consider: `262_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:117:44
    |
117 | pub const __POSITIVE_SIGN: C2RustUnnamed = 262149;
    |                                            ^^^^^^ help: consider: `262_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:118:43
    |
118 | pub const __MON_GROUPING: C2RustUnnamed = 262148;
    |                                           ^^^^^^ help: consider: `262_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:119:48
    |
119 | pub const __MON_THOUSANDS_SEP: C2RustUnnamed = 262147;
    |                                                ^^^^^^ help: consider: `262_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:120:48
    |
120 | pub const __MON_DECIMAL_POINT: C2RustUnnamed = 262146;
    |                                                ^^^^^^ help: consider: `262_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:121:46
    |
121 | pub const __CURRENCY_SYMBOL: C2RustUnnamed = 262145;
    |                                              ^^^^^^ help: consider: `262_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:122:46
    |
122 | pub const __INT_CURR_SYMBOL: C2RustUnnamed = 262144;
    |                                              ^^^^^^ help: consider: `262_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:210:47
    |
210 | pub const _NL_NUM_LC_COLLATE: C2RustUnnamed = 196627;
    |                                               ^^^^^^ help: consider: `196_627`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:211:48
    |
211 | pub const _NL_COLLATE_CODESET: C2RustUnnamed = 196626;
    |                                                ^^^^^^ help: consider: `196_626`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:212:50
    |
212 | pub const _NL_COLLATE_COLLSEQWC: C2RustUnnamed = 196625;
    |                                                  ^^^^^^ help: consider: `196_625`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:213:50
    |
213 | pub const _NL_COLLATE_COLLSEQMB: C2RustUnnamed = 196624;
    |                                                  ^^^^^^ help: consider: `196_624`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:214:53
    |
214 | pub const _NL_COLLATE_SYMB_EXTRAMB: C2RustUnnamed = 196623;
    |                                                     ^^^^^^ help: consider: `196_623`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:215:53
    |
215 | pub const _NL_COLLATE_SYMB_TABLEMB: C2RustUnnamed = 196622;
    |                                                     ^^^^^^ help: consider: `196_622`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:216:57
    |
216 | pub const _NL_COLLATE_SYMB_HASH_SIZEMB: C2RustUnnamed = 196621;
    |                                                         ^^^^^^ help: consider: `196_621`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:217:51
    |
217 | pub const _NL_COLLATE_INDIRECTWC: C2RustUnnamed = 196620;
    |                                                   ^^^^^^ help: consider: `196_620`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:218:48
    |
218 | pub const _NL_COLLATE_EXTRAWC: C2RustUnnamed = 196619;
    |                                                ^^^^^^ help: consider: `196_619`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:219:49
    |
219 | pub const _NL_COLLATE_WEIGHTWC: C2RustUnnamed = 196618;
    |                                                 ^^^^^^ help: consider: `196_618`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:220:48
    |
220 | pub const _NL_COLLATE_TABLEWC: C2RustUnnamed = 196617;
    |                                                ^^^^^^ help: consider: `196_617`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:221:45
    |
221 | pub const _NL_COLLATE_GAP3: C2RustUnnamed = 196616;
    |                                             ^^^^^^ help: consider: `196_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:222:45
    |
222 | pub const _NL_COLLATE_GAP2: C2RustUnnamed = 196615;
    |                                             ^^^^^^ help: consider: `196_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:223:45
    |
223 | pub const _NL_COLLATE_GAP1: C2RustUnnamed = 196614;
    |                                             ^^^^^^ help: consider: `196_614`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:224:51
    |
224 | pub const _NL_COLLATE_INDIRECTMB: C2RustUnnamed = 196613;
    |                                                   ^^^^^^ help: consider: `196_613`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:225:48
    |
225 | pub const _NL_COLLATE_EXTRAMB: C2RustUnnamed = 196612;
    |                                                ^^^^^^ help: consider: `196_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:226:49
    |
226 | pub const _NL_COLLATE_WEIGHTMB: C2RustUnnamed = 196611;
    |                                                 ^^^^^^ help: consider: `196_611`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:227:48
    |
227 | pub const _NL_COLLATE_TABLEMB: C2RustUnnamed = 196610;
    |                                                ^^^^^^ help: consider: `196_610`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:228:49
    |
228 | pub const _NL_COLLATE_RULESETS: C2RustUnnamed = 196609;
    |                                                 ^^^^^^ help: consider: `196_609`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:229:47
    |
229 | pub const _NL_COLLATE_NRULES: C2RustUnnamed = 196608;
    |                                               ^^^^^^ help: consider: `196_608`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:230:44
    |
230 | pub const _NL_NUM_LC_TIME: C2RustUnnamed = 131231;
    |                                            ^^^^^^ help: consider: `131_231`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:231:45
    |
231 | pub const _NL_WABALTMON_12: C2RustUnnamed = 131230;
    |                                             ^^^^^^ help: consider: `131_230`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:232:45
    |
232 | pub const _NL_WABALTMON_11: C2RustUnnamed = 131229;
    |                                             ^^^^^^ help: consider: `131_229`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:233:45
    |
233 | pub const _NL_WABALTMON_10: C2RustUnnamed = 131228;
    |                                             ^^^^^^ help: consider: `131_228`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:234:44
    |
234 | pub const _NL_WABALTMON_9: C2RustUnnamed = 131227;
    |                                            ^^^^^^ help: consider: `131_227`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:235:44
    |
235 | pub const _NL_WABALTMON_8: C2RustUnnamed = 131226;
    |                                            ^^^^^^ help: consider: `131_226`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:236:44
    |
236 | pub const _NL_WABALTMON_7: C2RustUnnamed = 131225;
    |                                            ^^^^^^ help: consider: `131_225`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:237:44
    |
237 | pub const _NL_WABALTMON_6: C2RustUnnamed = 131224;
    |                                            ^^^^^^ help: consider: `131_224`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:238:44
    |
238 | pub const _NL_WABALTMON_5: C2RustUnnamed = 131223;
    |                                            ^^^^^^ help: consider: `131_223`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:239:44
    |
239 | pub const _NL_WABALTMON_4: C2RustUnnamed = 131222;
    |                                            ^^^^^^ help: consider: `131_222`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:240:44
    |
240 | pub const _NL_WABALTMON_3: C2RustUnnamed = 131221;
    |                                            ^^^^^^ help: consider: `131_221`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:241:44
    |
241 | pub const _NL_WABALTMON_2: C2RustUnnamed = 131220;
    |                                            ^^^^^^ help: consider: `131_220`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:242:44
    |
242 | pub const _NL_WABALTMON_1: C2RustUnnamed = 131219;
    |                                            ^^^^^^ help: consider: `131_219`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:243:44
    |
243 | pub const _NL_ABALTMON_12: C2RustUnnamed = 131218;
    |                                            ^^^^^^ help: consider: `131_218`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:244:44
    |
244 | pub const _NL_ABALTMON_11: C2RustUnnamed = 131217;
    |                                            ^^^^^^ help: consider: `131_217`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:245:44
    |
245 | pub const _NL_ABALTMON_10: C2RustUnnamed = 131216;
    |                                            ^^^^^^ help: consider: `131_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:246:43
    |
246 | pub const _NL_ABALTMON_9: C2RustUnnamed = 131215;
    |                                           ^^^^^^ help: consider: `131_215`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:247:43
    |
247 | pub const _NL_ABALTMON_8: C2RustUnnamed = 131214;
    |                                           ^^^^^^ help: consider: `131_214`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:248:43
    |
248 | pub const _NL_ABALTMON_7: C2RustUnnamed = 131213;
    |                                           ^^^^^^ help: consider: `131_213`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:249:43
    |
249 | pub const _NL_ABALTMON_6: C2RustUnnamed = 131212;
    |                                           ^^^^^^ help: consider: `131_212`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:250:43
    |
250 | pub const _NL_ABALTMON_5: C2RustUnnamed = 131211;
    |                                           ^^^^^^ help: consider: `131_211`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:251:43
    |
251 | pub const _NL_ABALTMON_4: C2RustUnnamed = 131210;
    |                                           ^^^^^^ help: consider: `131_210`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:252:43
    |
252 | pub const _NL_ABALTMON_3: C2RustUnnamed = 131209;
    |                                           ^^^^^^ help: consider: `131_209`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:253:43
    |
253 | pub const _NL_ABALTMON_2: C2RustUnnamed = 131208;
    |                                           ^^^^^^ help: consider: `131_208`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:254:43
    |
254 | pub const _NL_ABALTMON_1: C2RustUnnamed = 131207;
    |                                           ^^^^^^ help: consider: `131_207`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:255:43
    |
255 | pub const _NL_WALTMON_12: C2RustUnnamed = 131206;
    |                                           ^^^^^^ help: consider: `131_206`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:256:43
    |
256 | pub const _NL_WALTMON_11: C2RustUnnamed = 131205;
    |                                           ^^^^^^ help: consider: `131_205`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:257:43
    |
257 | pub const _NL_WALTMON_10: C2RustUnnamed = 131204;
    |                                           ^^^^^^ help: consider: `131_204`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:258:42
    |
258 | pub const _NL_WALTMON_9: C2RustUnnamed = 131203;
    |                                          ^^^^^^ help: consider: `131_203`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:259:42
    |
259 | pub const _NL_WALTMON_8: C2RustUnnamed = 131202;
    |                                          ^^^^^^ help: consider: `131_202`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:260:42
    |
260 | pub const _NL_WALTMON_7: C2RustUnnamed = 131201;
    |                                          ^^^^^^ help: consider: `131_201`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:261:42
    |
261 | pub const _NL_WALTMON_6: C2RustUnnamed = 131200;
    |                                          ^^^^^^ help: consider: `131_200`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:262:42
    |
262 | pub const _NL_WALTMON_5: C2RustUnnamed = 131199;
    |                                          ^^^^^^ help: consider: `131_199`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:263:42
    |
263 | pub const _NL_WALTMON_4: C2RustUnnamed = 131198;
    |                                          ^^^^^^ help: consider: `131_198`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:264:42
    |
264 | pub const _NL_WALTMON_3: C2RustUnnamed = 131197;
    |                                          ^^^^^^ help: consider: `131_197`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:265:42
    |
265 | pub const _NL_WALTMON_2: C2RustUnnamed = 131196;
    |                                          ^^^^^^ help: consider: `131_196`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:266:42
    |
266 | pub const _NL_WALTMON_1: C2RustUnnamed = 131195;
    |                                          ^^^^^^ help: consider: `131_195`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:267:40
    |
267 | pub const __ALTMON_12: C2RustUnnamed = 131194;
    |                                        ^^^^^^ help: consider: `131_194`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:268:40
    |
268 | pub const __ALTMON_11: C2RustUnnamed = 131193;
    |                                        ^^^^^^ help: consider: `131_193`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:269:40
    |
269 | pub const __ALTMON_10: C2RustUnnamed = 131192;
    |                                        ^^^^^^ help: consider: `131_192`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:270:39
    |
270 | pub const __ALTMON_9: C2RustUnnamed = 131191;
    |                                       ^^^^^^ help: consider: `131_191`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:271:39
    |
271 | pub const __ALTMON_8: C2RustUnnamed = 131190;
    |                                       ^^^^^^ help: consider: `131_190`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:272:39
    |
272 | pub const __ALTMON_7: C2RustUnnamed = 131189;
    |                                       ^^^^^^ help: consider: `131_189`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:273:39
    |
273 | pub const __ALTMON_6: C2RustUnnamed = 131188;
    |                                       ^^^^^^ help: consider: `131_188`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:274:39
    |
274 | pub const __ALTMON_5: C2RustUnnamed = 131187;
    |                                       ^^^^^^ help: consider: `131_187`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:275:39
    |
275 | pub const __ALTMON_4: C2RustUnnamed = 131186;
    |                                       ^^^^^^ help: consider: `131_186`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:276:39
    |
276 | pub const __ALTMON_3: C2RustUnnamed = 131185;
    |                                       ^^^^^^ help: consider: `131_185`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:277:39
    |
277 | pub const __ALTMON_2: C2RustUnnamed = 131184;
    |                                       ^^^^^^ help: consider: `131_184`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:278:39
    |
278 | pub const __ALTMON_1: C2RustUnnamed = 131183;
    |                                       ^^^^^^ help: consider: `131_183`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:279:45
    |
279 | pub const _NL_TIME_CODESET: C2RustUnnamed = 131182;
    |                                             ^^^^^^ help: consider: `131_182`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:280:43
    |
280 | pub const _NL_W_DATE_FMT: C2RustUnnamed = 131181;
    |                                           ^^^^^^ help: consider: `131_181`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:281:38
    |
281 | pub const _DATE_FMT: C2RustUnnamed = 131180;
    |                                      ^^^^^^ help: consider: `131_180`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:282:46
    |
282 | pub const _NL_TIME_TIMEZONE: C2RustUnnamed = 131179;
    |                                              ^^^^^^ help: consider: `131_179`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:283:51
    |
283 | pub const _NL_TIME_CAL_DIRECTION: C2RustUnnamed = 131178;
    |                                                   ^^^^^^ help: consider: `131_178`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:284:51
    |
284 | pub const _NL_TIME_FIRST_WORKDAY: C2RustUnnamed = 131177;
    |                                                   ^^^^^^ help: consider: `131_177`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:285:51
    |
285 | pub const _NL_TIME_FIRST_WEEKDAY: C2RustUnnamed = 131176;
    |                                                   ^^^^^^ help: consider: `131_176`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:286:50
    |
286 | pub const _NL_TIME_WEEK_1STWEEK: C2RustUnnamed = 131175;
    |                                                  ^^^^^^ help: consider: `131_175`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:287:49
    |
287 | pub const _NL_TIME_WEEK_1STDAY: C2RustUnnamed = 131174;
    |                                                 ^^^^^^ help: consider: `131_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:288:48
    |
288 | pub const _NL_TIME_WEEK_NDAYS: C2RustUnnamed = 131173;
    |                                                ^^^^^^ help: consider: `131_173`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:289:43
    |
289 | pub const _NL_WERA_T_FMT: C2RustUnnamed = 131172;
    |                                           ^^^^^^ help: consider: `131_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:290:45
    |
290 | pub const _NL_WERA_D_T_FMT: C2RustUnnamed = 131171;
    |                                             ^^^^^^ help: consider: `131_171`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:291:44
    |
291 | pub const _NL_WALT_DIGITS: C2RustUnnamed = 131170;
    |                                            ^^^^^^ help: consider: `131_170`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:292:43
    |
292 | pub const _NL_WERA_D_FMT: C2RustUnnamed = 131169;
    |                                           ^^^^^^ help: consider: `131_169`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:293:42
    |
293 | pub const _NL_WERA_YEAR: C2RustUnnamed = 131168;
    |                                          ^^^^^^ help: consider: `131_168`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:294:44
    |
294 | pub const _NL_WT_FMT_AMPM: C2RustUnnamed = 131167;
    |                                            ^^^^^^ help: consider: `131_167`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:295:39
    |
295 | pub const _NL_WT_FMT: C2RustUnnamed = 131166;
    |                                       ^^^^^^ help: consider: `131_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:296:39
    |
296 | pub const _NL_WD_FMT: C2RustUnnamed = 131165;
    |                                       ^^^^^^ help: consider: `131_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:297:41
    |
297 | pub const _NL_WD_T_FMT: C2RustUnnamed = 131164;
    |                                         ^^^^^^ help: consider: `131_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:298:40
    |
298 | pub const _NL_WPM_STR: C2RustUnnamed = 131163;
    |                                        ^^^^^^ help: consider: `131_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:299:40
    |
299 | pub const _NL_WAM_STR: C2RustUnnamed = 131162;
    |                                        ^^^^^^ help: consider: `131_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:300:40
    |
300 | pub const _NL_WMON_12: C2RustUnnamed = 131161;
    |                                        ^^^^^^ help: consider: `131_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:301:40
    |
301 | pub const _NL_WMON_11: C2RustUnnamed = 131160;
    |                                        ^^^^^^ help: consider: `131_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:302:40
    |
302 | pub const _NL_WMON_10: C2RustUnnamed = 131159;
    |                                        ^^^^^^ help: consider: `131_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:303:39
    |
303 | pub const _NL_WMON_9: C2RustUnnamed = 131158;
    |                                       ^^^^^^ help: consider: `131_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:304:39
    |
304 | pub const _NL_WMON_8: C2RustUnnamed = 131157;
    |                                       ^^^^^^ help: consider: `131_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:305:39
    |
305 | pub const _NL_WMON_7: C2RustUnnamed = 131156;
    |                                       ^^^^^^ help: consider: `131_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:306:39
    |
306 | pub const _NL_WMON_6: C2RustUnnamed = 131155;
    |                                       ^^^^^^ help: consider: `131_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:307:39
    |
307 | pub const _NL_WMON_5: C2RustUnnamed = 131154;
    |                                       ^^^^^^ help: consider: `131_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:308:39
    |
308 | pub const _NL_WMON_4: C2RustUnnamed = 131153;
    |                                       ^^^^^^ help: consider: `131_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:309:39
    |
309 | pub const _NL_WMON_3: C2RustUnnamed = 131152;
    |                                       ^^^^^^ help: consider: `131_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:310:39
    |
310 | pub const _NL_WMON_2: C2RustUnnamed = 131151;
    |                                       ^^^^^^ help: consider: `131_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:311:39
    |
311 | pub const _NL_WMON_1: C2RustUnnamed = 131150;
    |                                       ^^^^^^ help: consider: `131_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:312:42
    |
312 | pub const _NL_WABMON_12: C2RustUnnamed = 131149;
    |                                          ^^^^^^ help: consider: `131_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:313:42
    |
313 | pub const _NL_WABMON_11: C2RustUnnamed = 131148;
    |                                          ^^^^^^ help: consider: `131_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:314:42
    |
314 | pub const _NL_WABMON_10: C2RustUnnamed = 131147;
    |                                          ^^^^^^ help: consider: `131_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:315:41
    |
315 | pub const _NL_WABMON_9: C2RustUnnamed = 131146;
    |                                         ^^^^^^ help: consider: `131_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:316:41
    |
316 | pub const _NL_WABMON_8: C2RustUnnamed = 131145;
    |                                         ^^^^^^ help: consider: `131_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:317:41
    |
317 | pub const _NL_WABMON_7: C2RustUnnamed = 131144;
    |                                         ^^^^^^ help: consider: `131_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:318:41
    |
318 | pub const _NL_WABMON_6: C2RustUnnamed = 131143;
    |                                         ^^^^^^ help: consider: `131_143`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:319:41
    |
319 | pub const _NL_WABMON_5: C2RustUnnamed = 131142;
    |                                         ^^^^^^ help: consider: `131_142`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:320:41
    |
320 | pub const _NL_WABMON_4: C2RustUnnamed = 131141;
    |                                         ^^^^^^ help: consider: `131_141`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:321:41
    |
321 | pub const _NL_WABMON_3: C2RustUnnamed = 131140;
    |                                         ^^^^^^ help: consider: `131_140`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:322:41
    |
322 | pub const _NL_WABMON_2: C2RustUnnamed = 131139;
    |                                         ^^^^^^ help: consider: `131_139`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:323:41
    |
323 | pub const _NL_WABMON_1: C2RustUnnamed = 131138;
    |                                         ^^^^^^ help: consider: `131_138`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:324:39
    |
324 | pub const _NL_WDAY_7: C2RustUnnamed = 131137;
    |                                       ^^^^^^ help: consider: `131_137`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:325:39
    |
325 | pub const _NL_WDAY_6: C2RustUnnamed = 131136;
    |                                       ^^^^^^ help: consider: `131_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:326:39
    |
326 | pub const _NL_WDAY_5: C2RustUnnamed = 131135;
    |                                       ^^^^^^ help: consider: `131_135`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:327:39
    |
327 | pub const _NL_WDAY_4: C2RustUnnamed = 131134;
    |                                       ^^^^^^ help: consider: `131_134`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:328:39
    |
328 | pub const _NL_WDAY_3: C2RustUnnamed = 131133;
    |                                       ^^^^^^ help: consider: `131_133`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:329:39
    |
329 | pub const _NL_WDAY_2: C2RustUnnamed = 131132;
    |                                       ^^^^^^ help: consider: `131_132`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:330:39
    |
330 | pub const _NL_WDAY_1: C2RustUnnamed = 131131;
    |                                       ^^^^^^ help: consider: `131_131`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:331:41
    |
331 | pub const _NL_WABDAY_7: C2RustUnnamed = 131130;
    |                                         ^^^^^^ help: consider: `131_130`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:332:41
    |
332 | pub const _NL_WABDAY_6: C2RustUnnamed = 131129;
    |                                         ^^^^^^ help: consider: `131_129`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:333:41
    |
333 | pub const _NL_WABDAY_5: C2RustUnnamed = 131128;
    |                                         ^^^^^^ help: consider: `131_128`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:334:41
    |
334 | pub const _NL_WABDAY_4: C2RustUnnamed = 131127;
    |                                         ^^^^^^ help: consider: `131_127`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:335:41
    |
335 | pub const _NL_WABDAY_3: C2RustUnnamed = 131126;
    |                                         ^^^^^^ help: consider: `131_126`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:336:41
    |
336 | pub const _NL_WABDAY_2: C2RustUnnamed = 131125;
    |                                         ^^^^^^ help: consider: `131_125`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:337:41
    |
337 | pub const _NL_WABDAY_1: C2RustUnnamed = 131124;
    |                                         ^^^^^^ help: consider: `131_124`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:338:49
    |
338 | pub const _NL_TIME_ERA_ENTRIES: C2RustUnnamed = 131123;
    |                                                 ^^^^^^ help: consider: `131_123`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:339:53
    |
339 | pub const _NL_TIME_ERA_NUM_ENTRIES: C2RustUnnamed = 131122;
    |                                                     ^^^^^^ help: consider: `131_122`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:340:38
    |
340 | pub const ERA_T_FMT: C2RustUnnamed = 131121;
    |                                      ^^^^^^ help: consider: `131_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:341:40
    |
341 | pub const ERA_D_T_FMT: C2RustUnnamed = 131120;
    |                                        ^^^^^^ help: consider: `131_120`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:342:39
    |
342 | pub const ALT_DIGITS: C2RustUnnamed = 131119;
    |                                       ^^^^^^ help: consider: `131_119`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:343:38
    |
343 | pub const ERA_D_FMT: C2RustUnnamed = 131118;
    |                                      ^^^^^^ help: consider: `131_118`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:344:39
    |
344 | pub const __ERA_YEAR: C2RustUnnamed = 131117;
    |                                       ^^^^^^ help: consider: `131_117`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:345:32
    |
345 | pub const ERA: C2RustUnnamed = 131116;
    |                                ^^^^^^ help: consider: `131_116`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:346:39
    |
346 | pub const T_FMT_AMPM: C2RustUnnamed = 131115;
    |                                       ^^^^^^ help: consider: `131_115`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:347:34
    |
347 | pub const T_FMT: C2RustUnnamed = 131114;
    |                                  ^^^^^^ help: consider: `131_114`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:348:34
    |
348 | pub const D_FMT: C2RustUnnamed = 131113;
    |                                  ^^^^^^ help: consider: `131_113`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:349:36
    |
349 | pub const D_T_FMT: C2RustUnnamed = 131112;
    |                                    ^^^^^^ help: consider: `131_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:350:35
    |
350 | pub const PM_STR: C2RustUnnamed = 131111;
    |                                   ^^^^^^ help: consider: `131_111`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:351:35
    |
351 | pub const AM_STR: C2RustUnnamed = 131110;
    |                                   ^^^^^^ help: consider: `131_110`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:352:35
    |
352 | pub const MON_12: C2RustUnnamed = 131109;
    |                                   ^^^^^^ help: consider: `131_109`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:353:35
    |
353 | pub const MON_11: C2RustUnnamed = 131108;
    |                                   ^^^^^^ help: consider: `131_108`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:354:35
    |
354 | pub const MON_10: C2RustUnnamed = 131107;
    |                                   ^^^^^^ help: consider: `131_107`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:355:34
    |
355 | pub const MON_9: C2RustUnnamed = 131106;
    |                                  ^^^^^^ help: consider: `131_106`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:356:34
    |
356 | pub const MON_8: C2RustUnnamed = 131105;
    |                                  ^^^^^^ help: consider: `131_105`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:357:34
    |
357 | pub const MON_7: C2RustUnnamed = 131104;
    |                                  ^^^^^^ help: consider: `131_104`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:358:34
    |
358 | pub const MON_6: C2RustUnnamed = 131103;
    |                                  ^^^^^^ help: consider: `131_103`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:359:34
    |
359 | pub const MON_5: C2RustUnnamed = 131102;
    |                                  ^^^^^^ help: consider: `131_102`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:360:34
    |
360 | pub const MON_4: C2RustUnnamed = 131101;
    |                                  ^^^^^^ help: consider: `131_101`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:361:34
    |
361 | pub const MON_3: C2RustUnnamed = 131100;
    |                                  ^^^^^^ help: consider: `131_100`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:362:34
    |
362 | pub const MON_2: C2RustUnnamed = 131099;
    |                                  ^^^^^^ help: consider: `131_099`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:363:34
    |
363 | pub const MON_1: C2RustUnnamed = 131098;
    |                                  ^^^^^^ help: consider: `131_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:364:37
    |
364 | pub const ABMON_12: C2RustUnnamed = 131097;
    |                                     ^^^^^^ help: consider: `131_097`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:365:37
    |
365 | pub const ABMON_11: C2RustUnnamed = 131096;
    |                                     ^^^^^^ help: consider: `131_096`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:366:37
    |
366 | pub const ABMON_10: C2RustUnnamed = 131095;
    |                                     ^^^^^^ help: consider: `131_095`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:367:36
    |
367 | pub const ABMON_9: C2RustUnnamed = 131094;
    |                                    ^^^^^^ help: consider: `131_094`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:368:36
    |
368 | pub const ABMON_8: C2RustUnnamed = 131093;
    |                                    ^^^^^^ help: consider: `131_093`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:369:36
    |
369 | pub const ABMON_7: C2RustUnnamed = 131092;
    |                                    ^^^^^^ help: consider: `131_092`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:370:36
    |
370 | pub const ABMON_6: C2RustUnnamed = 131091;
    |                                    ^^^^^^ help: consider: `131_091`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:371:36
    |
371 | pub const ABMON_5: C2RustUnnamed = 131090;
    |                                    ^^^^^^ help: consider: `131_090`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:372:36
    |
372 | pub const ABMON_4: C2RustUnnamed = 131089;
    |                                    ^^^^^^ help: consider: `131_089`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:373:36
    |
373 | pub const ABMON_3: C2RustUnnamed = 131088;
    |                                    ^^^^^^ help: consider: `131_088`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:374:36
    |
374 | pub const ABMON_2: C2RustUnnamed = 131087;
    |                                    ^^^^^^ help: consider: `131_087`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:375:36
    |
375 | pub const ABMON_1: C2RustUnnamed = 131086;
    |                                    ^^^^^^ help: consider: `131_086`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:376:34
    |
376 | pub const DAY_7: C2RustUnnamed = 131085;
    |                                  ^^^^^^ help: consider: `131_085`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:377:34
    |
377 | pub const DAY_6: C2RustUnnamed = 131084;
    |                                  ^^^^^^ help: consider: `131_084`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:378:34
    |
378 | pub const DAY_5: C2RustUnnamed = 131083;
    |                                  ^^^^^^ help: consider: `131_083`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:379:34
    |
379 | pub const DAY_4: C2RustUnnamed = 131082;
    |                                  ^^^^^^ help: consider: `131_082`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:380:34
    |
380 | pub const DAY_3: C2RustUnnamed = 131081;
    |                                  ^^^^^^ help: consider: `131_081`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:381:34
    |
381 | pub const DAY_2: C2RustUnnamed = 131080;
    |                                  ^^^^^^ help: consider: `131_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:382:34
    |
382 | pub const DAY_1: C2RustUnnamed = 131079;
    |                                  ^^^^^^ help: consider: `131_079`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:383:36
    |
383 | pub const ABDAY_7: C2RustUnnamed = 131078;
    |                                    ^^^^^^ help: consider: `131_078`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:384:36
    |
384 | pub const ABDAY_6: C2RustUnnamed = 131077;
    |                                    ^^^^^^ help: consider: `131_077`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:385:36
    |
385 | pub const ABDAY_5: C2RustUnnamed = 131076;
    |                                    ^^^^^^ help: consider: `131_076`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:386:36
    |
386 | pub const ABDAY_4: C2RustUnnamed = 131075;
    |                                    ^^^^^^ help: consider: `131_075`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:387:36
    |
387 | pub const ABDAY_3: C2RustUnnamed = 131074;
    |                                    ^^^^^^ help: consider: `131_074`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:388:36
    |
388 | pub const ABDAY_2: C2RustUnnamed = 131073;
    |                                    ^^^^^^ help: consider: `131_073`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:389:36
    |
389 | pub const ABDAY_1: C2RustUnnamed = 131072;
    |                                    ^^^^^^ help: consider: `131_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:220:5
    |
220 |     o: Option<&mut quoting_options>,
    |     ^
221 |     c: i8,
    |     ^
222 |     i: i32,
    |     ^
...
232 |     let p = &mut options.quote_these_too[index];
    |         ^
233 |     let r = (*p >> shift) & 1;
    |         ^
    |
    = note: `-W clippy::many-single-char-names` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:335:13
    |
335 |     let mut i: size_t = 0;
    |             ^
...
459 |      let mut c: libc::c_uchar = 0;
    |              ^
...
797 |                     let mut m: size_t = 0;
    |                             ^
...
816 |                         let mut w: char32_t = 0;
    |                                 ^
...
841 |                                     let mut j: size_t = 0;
    |                                             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: long literal lacking separators
   --> src/quotearg.rs:355:28
    |
355 |         current_block_48 = 1283995450065962895;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:358:28
    |
358 |         current_block_48 = 1283995450065962895;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:363:28
    |
363 |         current_block_48 = 2989495919056355252;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:383:28
    |
383 |         current_block_48 = 2989495919056355252;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:387:28
    |
387 |         current_block_48 = 2694013637280298776;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:390:28
    |
390 |         current_block_48 = 2694013637280298776;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:393:28
    |
393 |         current_block_48 = 2266290538919981374;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:396:28
    |
396 |         current_block_48 = 14141891332124833771;
    |                            ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:400:28
    |
400 |         current_block_48 = 2989495919056355252;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:408:5
    |
408 |     1283995450065962895 => {
    |     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:418:28
    |
418 |         current_block_48 = 2989495919056355252;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:420:5
    |
420 |     2694013637280298776 => {
    |     ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:422:28
    |
422 |         current_block_48 = 2266290538919981374;
    |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:428:5
    |
428 |     2266290538919981374 => {
    |     ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:432:28
    |
432 |         current_block_48 = 14141891332124833771;
    |                            ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:438:5
    |
438 |     14141891332124833771 => {
    |     ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:469:39
    |
469 |                     <= (if argsize == 18446744073709551615 as libc::c_ulong
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:484:37
    |
484 |                     current_block = 7928555609993211441;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:494:25
    |
494 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:531:21
    |
531 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:533:21
    |
533 |     current_block = 13619784596304402172;
    |                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_619_784_596_304_402_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:535:21
    |
535 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:542:45
    |
542 | ...                   current_block = 17954593875197965021;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:544:33
    |
544 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:546:57
    |
546 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:566:69
    |
566 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:602:45
    |
602 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:605:45
    |
605 | ...                   current_block = 14514781131754033399;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_514_781_131_754_033_399`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:607:33
    |
607 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:609:57
    |
609 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:629:69
    |
629 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:665:45
    |
665 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:668:45
    |
668 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:674:37
    |
674 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:678:37
    |
678 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:682:37
    |
682 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:686:37
    |
686 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:690:37
    |
690 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:694:37
    |
694 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:698:37
    |
698 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:704:25
    |
704 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:707:21
    |
707 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:709:21
    |
709 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:711:21
    |
711 |     current_block = 9215498979640025612;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:716:38
    |
716 |                     if if argsize == 18446744073709551615 as libc::c_ulong {
    |                                      ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:723:41
    |
723 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:725:41
    |
725 |                         current_block = 16442922512115311366;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:729:37
    |
729 |                     current_block = 16442922512115311366;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:732:37
    |
732 |                     current_block = 4634307283396172174;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:735:37
    |
735 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:738:37
    |
738 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:741:37
    |
741 |                     current_block = 16620298045565028098;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:744:37
    |
744 |                     current_block = 15155215915847730705;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:752:25
    |
752 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:781:21
    |
781 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:783:21
    |
783 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:794:37
    |
794 |                     current_block = 253337042034819032;
    |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:813:39
    |
813 |                         if argsize == 18446744073709551615 as libc::c_ulong {
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:849:65
    |
849 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:873:33
    |
873 |                 current_block = 7928555609993211441;
    |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:933:21
    |
933 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:935:21
    |
935 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:941:17
    |
941 |                 16442922512115311366 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:943:41
    |
943 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:945:41
    |
945 |                         current_block = 4634307283396172174;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:948:17
    |
948 |                 9215498979640025612 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:953:41
    |
953 |                         current_block = 7928555609993211441;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:956:37
    |
956 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:961:17
    |
961 |                 1190876092451756080 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:964:41
    |
964 |                         current_block = 3173013908131212616;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:966:41
    |
966 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:969:17
    |
969 |                 4634307283396172174 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:971:37
    |
971 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:976:17
    |
976 |                 7549413860336125482 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:977:37
    |
977 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:982:17
    |
982 |                 13059411171234995867 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:983:37
    |
983 |                     current_block = 16620298045565028098;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:988:17
    |
988 |                 16620298045565028098 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:989:37
    |
989 |                     current_block = 15155215915847730705;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:994:17
    |
994 |                 15155215915847730705 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:999:41
    |
999 |                         current_block = 7928555609993211441;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1002:37
     |
1002 |                     current_block = 253337042034819032;
     |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1007:17
     |
1007 |                 253337042034819032 => {
     |                 ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1028:41
     |
1028 |                         current_block = 4476262310586904498;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1030:41
     |
1030 |                         current_block = 3173013908131212616;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1036:17
     |
1036 |                 3173013908131212616 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1038:41
     |
1038 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1068:37
     |
1068 |                     current_block = 4476262310586904498;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1073:17
     |
1073 |                 4476262310586904498 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1104:21
     |
1104 |     current_block = 7928555609993211441;
     |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1108:21
     |
1108 |     current_block = 6412618891452676311;
     |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/quotearg.rs:1128:8
     |
1128 |   } else {
     |  ________^
1129 | |     if !(buffersize == 0 && orig_buffersize != 0) {
1130 | |         current_block = 6412618891452676311;
1131 | |         break;
...    |
1134 | |     len = 0;
1135 | | }
     | |_^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/quotearg.rs:1130:25
     |
1130 |         current_block = 6412618891452676311;
     |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1139:9
     |
1139 |         7928555609993211441 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/quotearg.rs:1344:13
     |
1344 |     let mut qsize: size_t = quotearg_buffer_restyled(
     |             ^^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/quotearg.rs:1341:13
     |
1341 |     let mut size: size_t = (*sv.offset(n as isize)).size;
     |             ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/quotearg.rs:1308:44
     |
1308 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                            ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1309:11
     |
1309 |         < 9223372036854775807 as libc::c_long
     |           ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1311:9
     |
1311 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1313:9
     |
1313 |         9223372036854775807 as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1485:41
     |
1485 |         quotearg_char_mem(arg.as_ptr(), 18446744073709551615 as libc::c_ulong, ch_as_c_char)
     |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1543:9
     |
1543 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/safe_write.rs:9:44
  |
9 | pub const SYS_BUFSIZE_MAX: C2RustUnnamed = 2146435072;
  |                                            ^^^^^^^^^^ help: consider: `2_146_435_072`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/safe_write.rs:21:16
   |
21 |           } else {
   |  ________________^
22 | |             if *__errno_location() == 4 as libc::c_int {
23 | |                 continue;
24 | |             }
...  |
31 | |             }
32 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:34:12
   |
34 |       } else {
   |  ____________^
35 | |         let mut length: size_t = strlen(result);
36 | |         if length < bufsize {
37 | |             memcpy(
...  |
56 | |         }
57 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:43:16
   |
43 |           } else {
   |  ________________^
44 | |             if bufsize > 0 as libc::c_int as libc::c_ulong {
45 | |                 memcpy(
46 | |                     buf as *mut libc::c_void,
...  |
55 | |             return 34 as libc::c_int;
56 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
   --> src/temp_stream.rs:226:8
    |
226 |   } else {
    |  ________^
227 | |     clearerr_unlocked(tmp_fp);
228 | |         if rpl_fseeko(tmp_fp, 0 as libc::c_int as off_t, 0 as libc::c_int)
229 | |             < 0 as libc::c_int
...   |
281 | |     
282 | | }
    | |_^
    |
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/tmpdir.rs:73:26
   |
73 |         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
   |                          ^^^^^^^^ help: consider: `0o170_000`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
  --> src/tmpdir.rs:86:13
   |
86 |     let mut plen: size_t = 0;
   |             ^^^^
   |
note: existing binding defined here
  --> src/tmpdir.rs:85:13
   |
85 |     let mut dlen: size_t = 0;
   |             ^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
  --> src/xdectoimax.rs:43:24
   |
43 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_long {
   |                        ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xdectoimax.rs:46:23
   |
46 |                 < ((-(2147483647 as libc::c_int) - 1 as libc::c_int) / 2 as libc::c_int)
   |                       ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/xmalloc.rs:50:12
   |
50 |       } else {
   |  ____________^
51 | |     return _gl_alloc_nomem();
52 | | };
   | |_^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:47:30
   |
47 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:606:18
    |
606 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                  ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:252:10
    |
252 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |          ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:606:27
    |
606 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                           ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:252:18
    |
252 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |                  ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
   --> src/xmalloc.rs:255:13
    |
255 |         n = 9223372036854775807 as libc::c_long;
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:457:16
    |
457 |           } else {
    |  ________________^
458 | |             if s == 0 as libc::c_int as libc::c_long {
459 | |                 0 as libc::c_int
460 | |             } else {
...   |
571 | |             }
572 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
457 ~         } else if s == 0 as libc::c_int as libc::c_long {
458 +             0 as libc::c_int
459 +         } else {
460 +             if n < 0 as libc::c_int as libc::c_long {
461 +                 if (if (if ((if 1 as libc::c_int != 0 {
462 +                     0 as libc::c_int as libc::c_long
463 +                 } else {
464 +                     (if 1 as libc::c_int != 0 {
465 +                         0 as libc::c_int as libc::c_long
466 +                     } else {
467 +                         n
468 +                     }) + 0 as libc::c_int as idx_t
469 +                 }) - 1 as libc::c_int as libc::c_long)
470 +                     < 0 as libc::c_int as libc::c_long
471 +                 {
472 +                     !(((((if 1 as libc::c_int != 0 {
473 +                         0 as libc::c_int as libc::c_long
474 +                     } else {
475 +                         (if 1 as libc::c_int != 0 {
476 +                             0 as libc::c_int as libc::c_long
477 +                         } else {
478 +                             n
479 +                         }) + 0 as libc::c_int as idx_t
480 +                     }) + 1 as libc::c_int as libc::c_long)
481 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
482 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
483 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
484 +                         - 1 as libc::c_int as libc::c_long)
485 +                         * 2 as libc::c_int as libc::c_long
486 +                         + 1 as libc::c_int as libc::c_long)
487 +                 } else {
488 +                     (if 1 as libc::c_int != 0 {
489 +                         0 as libc::c_int as libc::c_long
490 +                     } else {
491 +                         (if 1 as libc::c_int != 0 {
492 +                             0 as libc::c_int as libc::c_long
493 +                         } else {
494 +                             n
495 +                         }) + 0 as libc::c_int as idx_t
496 +                     }) + 0 as libc::c_int as libc::c_long
497 +                 }) < 0 as libc::c_int as libc::c_long
498 +                 {
499 +                     (((if 1 as libc::c_int != 0 {
500 +                         0 as libc::c_int as libc::c_long
501 +                     } else {
502 +                         n
503 +                     }) + 0 as libc::c_int as idx_t)
504 +                         < -(if ((if 1 as libc::c_int != 0 {
505 +                             0 as libc::c_int as libc::c_long
506 +                         } else {
507 +                             (if 1 as libc::c_int != 0 {
508 +                                 0 as libc::c_int as libc::c_long
509 +                             } else {
510 +                                 n
511 +                             }) + 0 as libc::c_int as idx_t
512 +                         }) - 1 as libc::c_int as libc::c_long)
513 +                             < 0 as libc::c_int as libc::c_long
514 +                         {
515 +                             ((((if 1 as libc::c_int != 0 {
516 +                                 0 as libc::c_int as libc::c_long
517 +                             } else {
518 +                                 (if 1 as libc::c_int != 0 {
519 +                                     0 as libc::c_int as libc::c_long
520 +                                 } else {
521 +                                     n
522 +                                 }) + 0 as libc::c_int as idx_t
523 +                             }) + 1 as libc::c_int as libc::c_long)
524 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
525 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
526 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
527 +                                 - 1 as libc::c_int as libc::c_long)
528 +                                 * 2 as libc::c_int as libc::c_long
529 +                                 + 1 as libc::c_int as libc::c_long
530 +                         } else {
531 +                             (if 1 as libc::c_int != 0 {
532 +                                 0 as libc::c_int as libc::c_long
533 +                             } else {
534 +                                 (if 1 as libc::c_int != 0 {
535 +                                     0 as libc::c_int as libc::c_long
536 +                                 } else {
537 +                                     n
538 +                                 }) + 0 as libc::c_int as idx_t
539 +                             }) - 1 as libc::c_int as libc::c_long
540 +                         })) as libc::c_int
541 +                 } else {
542 +                     ((0 as libc::c_int as libc::c_long)
543 +                         < (if 1 as libc::c_int != 0 {
544 +                             0 as libc::c_int as libc::c_long
545 +                         } else {
546 +                             n
547 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
548 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
549 +                 {
550 +                     if ((if 1 as libc::c_int != 0 {
551 +                         0 as libc::c_int as libc::c_long
552 +                     } else {
553 +                         s
554 +                     }) - 1 as libc::c_int as libc::c_long)
555 +                         < 0 as libc::c_int as libc::c_long
556 +                     {
557 +                         ((0 as libc::c_int as libc::c_long)
558 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
559 +                     } else {
560 +                         ((-(1 as libc::c_int) as libc::c_long
561 +                             - 0 as libc::c_int as idx_t)
562 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
563 +                     }
564 +                 } else {
565 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
566 +                 }
567 +             } else {
568 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
569 +             }
570 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:349:20
    |
349 |               } else {
    |  ____________________^
350 | |                 if (if (if ((if 1 as libc::c_int != 0 {
351 | |                     0 as libc::c_int as libc::c_long
352 | |                 } else {
...   |
455 | |                 }
456 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
349 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
350 +                 0 as libc::c_int as libc::c_long
351 +             } else {
352 +                 (if 1 as libc::c_int != 0 {
353 +                     0 as libc::c_int as libc::c_long
354 +                 } else {
355 +                     s
356 +                 }) + 0 as libc::c_int as idx_t
357 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
358 +             {
359 +                 !(((((if 1 as libc::c_int != 0 {
360 +                     0 as libc::c_int as libc::c_long
361 +                 } else {
362 +                     (if 1 as libc::c_int != 0 {
363 +                         0 as libc::c_int as libc::c_long
364 +                     } else {
365 +                         s
366 +                     }) + 0 as libc::c_int as idx_t
367 +                 }) + 1 as libc::c_int as libc::c_long)
368 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
369 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
370 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
371 +                     - 1 as libc::c_int as libc::c_long)
372 +                     * 2 as libc::c_int as libc::c_long
373 +                     + 1 as libc::c_int as libc::c_long)
374 +             } else {
375 +                 (if 1 as libc::c_int != 0 {
376 +                     0 as libc::c_int as libc::c_long
377 +                 } else {
378 +                     (if 1 as libc::c_int != 0 {
379 +                         0 as libc::c_int as libc::c_long
380 +                     } else {
381 +                         s
382 +                     }) + 0 as libc::c_int as idx_t
383 +                 }) + 0 as libc::c_int as libc::c_long
384 +             }) < 0 as libc::c_int as libc::c_long
385 +             {
386 +                 (((if 1 as libc::c_int != 0 {
387 +                     0 as libc::c_int as libc::c_long
388 +                 } else {
389 +                     s
390 +                 }) + 0 as libc::c_int as idx_t)
391 +                     < -(if ((if 1 as libc::c_int != 0 {
392 +                         0 as libc::c_int as libc::c_long
393 +                     } else {
394 +                         (if 1 as libc::c_int != 0 {
395 +                             0 as libc::c_int as libc::c_long
396 +                         } else {
397 +                             s
398 +                         }) + 0 as libc::c_int as idx_t
399 +                     }) - 1 as libc::c_int as libc::c_long)
400 +                         < 0 as libc::c_int as libc::c_long
401 +                     {
402 +                         ((((if 1 as libc::c_int != 0 {
403 +                             0 as libc::c_int as libc::c_long
404 +                         } else {
405 +                             (if 1 as libc::c_int != 0 {
406 +                                 0 as libc::c_int as libc::c_long
407 +                             } else {
408 +                                 s
409 +                             }) + 0 as libc::c_int as idx_t
410 +                         }) + 1 as libc::c_int as libc::c_long)
411 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
412 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
413 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
414 +                             - 1 as libc::c_int as libc::c_long)
415 +                             * 2 as libc::c_int as libc::c_long
416 +                             + 1 as libc::c_int as libc::c_long
417 +                     } else {
418 +                         (if 1 as libc::c_int != 0 {
419 +                             0 as libc::c_int as libc::c_long
420 +                         } else {
421 +                             (if 1 as libc::c_int != 0 {
422 +                                 0 as libc::c_int as libc::c_long
423 +                             } else {
424 +                                 s
425 +                             }) + 0 as libc::c_int as idx_t
426 +                         }) - 1 as libc::c_int as libc::c_long
427 +                     })) as libc::c_int
428 +             } else {
429 +                 ((0 as libc::c_int as libc::c_long)
430 +                     < (if 1 as libc::c_int != 0 {
431 +                         0 as libc::c_int as libc::c_long
432 +                     } else {
433 +                         s
434 +                     }) + 0 as libc::c_int as idx_t) as libc::c_int
435 +             }) != 0 && s == -(1 as libc::c_int) as libc::c_long
436 +             {
437 +                 if ((if 1 as libc::c_int != 0 {
438 +                     0 as libc::c_int as libc::c_long
439 +                 } else {
440 +                     n
441 +                 }) - 1 as libc::c_int as libc::c_long)
442 +                     < 0 as libc::c_int as libc::c_long
443 +                 {
444 +                     ((0 as libc::c_int as libc::c_long)
445 +                         < n + 0 as libc::c_int as idx_t) as libc::c_int
446 +                 } else {
447 +                     ((0 as libc::c_int as libc::c_long) < n
448 +                         && (-(1 as libc::c_int) as libc::c_long
449 +                             - 0 as libc::c_int as idx_t)
450 +                             < n - 1 as libc::c_int as libc::c_long) as libc::c_int
451 +                 }
452 +             } else {
453 +                 (0 as libc::c_int as idx_t / s < n) as libc::c_int
454 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:337:25
    |
337 | /                         (if 1 as libc::c_int != 0 {
338 | |                             0 as libc::c_int as libc::c_long
339 | |                         } else {
340 | |                             s
...   |
343 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
344 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
337 ~                         ((if 1 as libc::c_int != 0 {
338 +                             0 as libc::c_int as libc::c_long
339 +                         } else {
340 +                             s
341 +                         }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
342 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
343 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:460:20
    |
460 |               } else {
    |  ____________________^
461 | |                 if n < 0 as libc::c_int as libc::c_long {
462 | |                     if (if (if ((if 1 as libc::c_int != 0 {
463 | |                         0 as libc::c_int as libc::c_long
...   |
570 | |                 }
571 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
460 ~             } else if n < 0 as libc::c_int as libc::c_long {
461 +                 if (if (if ((if 1 as libc::c_int != 0 {
462 +                     0 as libc::c_int as libc::c_long
463 +                 } else {
464 +                     (if 1 as libc::c_int != 0 {
465 +                         0 as libc::c_int as libc::c_long
466 +                     } else {
467 +                         n
468 +                     }) + 0 as libc::c_int as idx_t
469 +                 }) - 1 as libc::c_int as libc::c_long)
470 +                     < 0 as libc::c_int as libc::c_long
471 +                 {
472 +                     !(((((if 1 as libc::c_int != 0 {
473 +                         0 as libc::c_int as libc::c_long
474 +                     } else {
475 +                         (if 1 as libc::c_int != 0 {
476 +                             0 as libc::c_int as libc::c_long
477 +                         } else {
478 +                             n
479 +                         }) + 0 as libc::c_int as idx_t
480 +                     }) + 1 as libc::c_int as libc::c_long)
481 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
482 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
483 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
484 +                         - 1 as libc::c_int as libc::c_long)
485 +                         * 2 as libc::c_int as libc::c_long
486 +                         + 1 as libc::c_int as libc::c_long)
487 +                 } else {
488 +                     (if 1 as libc::c_int != 0 {
489 +                         0 as libc::c_int as libc::c_long
490 +                     } else {
491 +                         (if 1 as libc::c_int != 0 {
492 +                             0 as libc::c_int as libc::c_long
493 +                         } else {
494 +                             n
495 +                         }) + 0 as libc::c_int as idx_t
496 +                     }) + 0 as libc::c_int as libc::c_long
497 +                 }) < 0 as libc::c_int as libc::c_long
498 +                 {
499 +                     (((if 1 as libc::c_int != 0 {
500 +                         0 as libc::c_int as libc::c_long
501 +                     } else {
502 +                         n
503 +                     }) + 0 as libc::c_int as idx_t)
504 +                         < -(if ((if 1 as libc::c_int != 0 {
505 +                             0 as libc::c_int as libc::c_long
506 +                         } else {
507 +                             (if 1 as libc::c_int != 0 {
508 +                                 0 as libc::c_int as libc::c_long
509 +                             } else {
510 +                                 n
511 +                             }) + 0 as libc::c_int as idx_t
512 +                         }) - 1 as libc::c_int as libc::c_long)
513 +                             < 0 as libc::c_int as libc::c_long
514 +                         {
515 +                             ((((if 1 as libc::c_int != 0 {
516 +                                 0 as libc::c_int as libc::c_long
517 +                             } else {
518 +                                 (if 1 as libc::c_int != 0 {
519 +                                     0 as libc::c_int as libc::c_long
520 +                                 } else {
521 +                                     n
522 +                                 }) + 0 as libc::c_int as idx_t
523 +                             }) + 1 as libc::c_int as libc::c_long)
524 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
525 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
526 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
527 +                                 - 1 as libc::c_int as libc::c_long)
528 +                                 * 2 as libc::c_int as libc::c_long
529 +                                 + 1 as libc::c_int as libc::c_long
530 +                         } else {
531 +                             (if 1 as libc::c_int != 0 {
532 +                                 0 as libc::c_int as libc::c_long
533 +                             } else {
534 +                                 (if 1 as libc::c_int != 0 {
535 +                                     0 as libc::c_int as libc::c_long
536 +                                 } else {
537 +                                     n
538 +                                 }) + 0 as libc::c_int as idx_t
539 +                             }) - 1 as libc::c_int as libc::c_long
540 +                         })) as libc::c_int
541 +                 } else {
542 +                     ((0 as libc::c_int as libc::c_long)
543 +                         < (if 1 as libc::c_int != 0 {
544 +                             0 as libc::c_int as libc::c_long
545 +                         } else {
546 +                             n
547 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
548 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
549 +                 {
550 +                     if ((if 1 as libc::c_int != 0 {
551 +                         0 as libc::c_int as libc::c_long
552 +                     } else {
553 +                         s
554 +                     }) - 1 as libc::c_int as libc::c_long)
555 +                         < 0 as libc::c_int as libc::c_long
556 +                     {
557 +                         ((0 as libc::c_int as libc::c_long)
558 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
559 +                     } else {
560 +                         ((-(1 as libc::c_int) as libc::c_long
561 +                             - 0 as libc::c_int as idx_t)
562 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
563 +                     }
564 +                 } else {
565 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
566 +                 }
567 +             } else {
568 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
569 +             }
    |

warning: long literal lacking separators
   --> src/xmalloc.rs:583:13
    |
583 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:584:15
    |
584 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:586:13
    |
586 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:588:13
    |
588 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:816:28
    |
816 |                       } else {
    |  ____________________________^
817 | |                         if s == 0 as libc::c_int as libc::c_long {
818 | |                             0 as libc::c_int
819 | |                         } else {
...   |
930 | |                         }
931 | |                     }) != 0
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
816 ~                     } else if s == 0 as libc::c_int as libc::c_long {
817 +                         0 as libc::c_int
818 +                     } else {
819 +                         if n < 0 as libc::c_int as libc::c_long {
820 +                             if (if (if ((if 1 as libc::c_int != 0 {
821 +                                 0 as libc::c_int as libc::c_long
822 +                             } else {
823 +                                 (if 1 as libc::c_int != 0 {
824 +                                     0 as libc::c_int as libc::c_long
825 +                                 } else {
826 +                                     n
827 +                                 }) + 0 as libc::c_int as idx_t
828 +                             }) - 1 as libc::c_int as libc::c_long)
829 +                                 < 0 as libc::c_int as libc::c_long
830 +                             {
831 +                                 !(((((if 1 as libc::c_int != 0 {
832 +                                     0 as libc::c_int as libc::c_long
833 +                                 } else {
834 +                                     (if 1 as libc::c_int != 0 {
835 +                                         0 as libc::c_int as libc::c_long
836 +                                     } else {
837 +                                         n
838 +                                     }) + 0 as libc::c_int as idx_t
839 +                                 }) + 1 as libc::c_int as libc::c_long)
840 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
841 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
842 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
843 +                                     - 1 as libc::c_int as libc::c_long)
844 +                                     * 2 as libc::c_int as libc::c_long
845 +                                     + 1 as libc::c_int as libc::c_long)
846 +                             } else {
847 +                                 (if 1 as libc::c_int != 0 {
848 +                                     0 as libc::c_int as libc::c_long
849 +                                 } else {
850 +                                     (if 1 as libc::c_int != 0 {
851 +                                         0 as libc::c_int as libc::c_long
852 +                                     } else {
853 +                                         n
854 +                                     }) + 0 as libc::c_int as idx_t
855 +                                 }) + 0 as libc::c_int as libc::c_long
856 +                             }) < 0 as libc::c_int as libc::c_long
857 +                             {
858 +                                 (((if 1 as libc::c_int != 0 {
859 +                                     0 as libc::c_int as libc::c_long
860 +                                 } else {
861 +                                     n
862 +                                 }) + 0 as libc::c_int as idx_t)
863 +                                     < -(if ((if 1 as libc::c_int != 0 {
864 +                                         0 as libc::c_int as libc::c_long
865 +                                     } else {
866 +                                         (if 1 as libc::c_int != 0 {
867 +                                             0 as libc::c_int as libc::c_long
868 +                                         } else {
869 +                                             n
870 +                                         }) + 0 as libc::c_int as idx_t
871 +                                     }) - 1 as libc::c_int as libc::c_long)
872 +                                         < 0 as libc::c_int as libc::c_long
873 +                                     {
874 +                                         ((((if 1 as libc::c_int != 0 {
875 +                                             0 as libc::c_int as libc::c_long
876 +                                         } else {
877 +                                             (if 1 as libc::c_int != 0 {
878 +                                                 0 as libc::c_int as libc::c_long
879 +                                             } else {
880 +                                                 n
881 +                                             }) + 0 as libc::c_int as idx_t
882 +                                         }) + 1 as libc::c_int as libc::c_long)
883 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
884 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
885 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
886 +                                             - 1 as libc::c_int as libc::c_long)
887 +                                             * 2 as libc::c_int as libc::c_long
888 +                                             + 1 as libc::c_int as libc::c_long
889 +                                     } else {
890 +                                         (if 1 as libc::c_int != 0 {
891 +                                             0 as libc::c_int as libc::c_long
892 +                                         } else {
893 +                                             (if 1 as libc::c_int != 0 {
894 +                                                 0 as libc::c_int as libc::c_long
895 +                                             } else {
896 +                                                 n
897 +                                             }) + 0 as libc::c_int as idx_t
898 +                                         }) - 1 as libc::c_int as libc::c_long
899 +                                     })) as libc::c_int
900 +                             } else {
901 +                                 ((0 as libc::c_int as libc::c_long)
902 +                                     < (if 1 as libc::c_int != 0 {
903 +                                         0 as libc::c_int as libc::c_long
904 +                                     } else {
905 +                                         n
906 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
907 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
908 +                             {
909 +                                 if ((if 1 as libc::c_int != 0 {
910 +                                     0 as libc::c_int as libc::c_long
911 +                                 } else {
912 +                                     s
913 +                                 }) - 1 as libc::c_int as libc::c_long)
914 +                                     < 0 as libc::c_int as libc::c_long
915 +                                 {
916 +                                     ((0 as libc::c_int as libc::c_long)
917 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
918 +                                 } else {
919 +                                     ((-(1 as libc::c_int) as libc::c_long
920 +                                         - 0 as libc::c_int as idx_t)
921 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
922 +                                 }
923 +                             } else {
924 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
925 +                             }
926 +                         } else {
927 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
928 +                         }
929 ~                     }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:707:32
    |
707 |                           } else {
    |  ________________________________^
708 | |                             if (if (if ((if 1 as libc::c_int != 0 {
709 | |                                 0 as libc::c_int as libc::c_long
710 | |                             } else {
...   |
814 | |                             }
815 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
707 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
708 +                             0 as libc::c_int as libc::c_long
709 +                         } else {
710 +                             (if 1 as libc::c_int != 0 {
711 +                                 0 as libc::c_int as libc::c_long
712 +                             } else {
713 +                                 s
714 +                             }) + 0 as libc::c_int as idx_t
715 +                         }) - 1 as libc::c_int as libc::c_long)
716 +                             < 0 as libc::c_int as libc::c_long
717 +                         {
718 +                             !(((((if 1 as libc::c_int != 0 {
719 +                                 0 as libc::c_int as libc::c_long
720 +                             } else {
721 +                                 (if 1 as libc::c_int != 0 {
722 +                                     0 as libc::c_int as libc::c_long
723 +                                 } else {
724 +                                     s
725 +                                 }) + 0 as libc::c_int as idx_t
726 +                             }) + 1 as libc::c_int as libc::c_long)
727 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
728 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
729 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
730 +                                 - 1 as libc::c_int as libc::c_long)
731 +                                 * 2 as libc::c_int as libc::c_long
732 +                                 + 1 as libc::c_int as libc::c_long)
733 +                         } else {
734 +                             (if 1 as libc::c_int != 0 {
735 +                                 0 as libc::c_int as libc::c_long
736 +                             } else {
737 +                                 (if 1 as libc::c_int != 0 {
738 +                                     0 as libc::c_int as libc::c_long
739 +                                 } else {
740 +                                     s
741 +                                 }) + 0 as libc::c_int as idx_t
742 +                             }) + 0 as libc::c_int as libc::c_long
743 +                         }) < 0 as libc::c_int as libc::c_long
744 +                         {
745 +                             (((if 1 as libc::c_int != 0 {
746 +                                 0 as libc::c_int as libc::c_long
747 +                             } else {
748 +                                 s
749 +                             }) + 0 as libc::c_int as idx_t)
750 +                                 < -(if ((if 1 as libc::c_int != 0 {
751 +                                     0 as libc::c_int as libc::c_long
752 +                                 } else {
753 +                                     (if 1 as libc::c_int != 0 {
754 +                                         0 as libc::c_int as libc::c_long
755 +                                     } else {
756 +                                         s
757 +                                     }) + 0 as libc::c_int as idx_t
758 +                                 }) - 1 as libc::c_int as libc::c_long)
759 +                                     < 0 as libc::c_int as libc::c_long
760 +                                 {
761 +                                     ((((if 1 as libc::c_int != 0 {
762 +                                         0 as libc::c_int as libc::c_long
763 +                                     } else {
764 +                                         (if 1 as libc::c_int != 0 {
765 +                                             0 as libc::c_int as libc::c_long
766 +                                         } else {
767 +                                             s
768 +                                         }) + 0 as libc::c_int as idx_t
769 +                                     }) + 1 as libc::c_int as libc::c_long)
770 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
771 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
772 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
773 +                                         - 1 as libc::c_int as libc::c_long)
774 +                                         * 2 as libc::c_int as libc::c_long
775 +                                         + 1 as libc::c_int as libc::c_long
776 +                                 } else {
777 +                                     (if 1 as libc::c_int != 0 {
778 +                                         0 as libc::c_int as libc::c_long
779 +                                     } else {
780 +                                         (if 1 as libc::c_int != 0 {
781 +                                             0 as libc::c_int as libc::c_long
782 +                                         } else {
783 +                                             s
784 +                                         }) + 0 as libc::c_int as idx_t
785 +                                     }) - 1 as libc::c_int as libc::c_long
786 +                                 })) as libc::c_int
787 +                         } else {
788 +                             ((0 as libc::c_int as libc::c_long)
789 +                                 < (if 1 as libc::c_int != 0 {
790 +                                     0 as libc::c_int as libc::c_long
791 +                                 } else {
792 +                                     s
793 +                                 }) + 0 as libc::c_int as idx_t) as libc::c_int
794 +                         }) != 0 && s == -(1 as libc::c_int) as libc::c_long
795 +                         {
796 +                             if ((if 1 as libc::c_int != 0 {
797 +                                 0 as libc::c_int as libc::c_long
798 +                             } else {
799 +                                 n
800 +                             }) - 1 as libc::c_int as libc::c_long)
801 +                                 < 0 as libc::c_int as libc::c_long
802 +                             {
803 +                                 ((0 as libc::c_int as libc::c_long)
804 +                                     < n + 0 as libc::c_int as idx_t) as libc::c_int
805 +                             } else {
806 +                                 ((0 as libc::c_int as libc::c_long) < n
807 +                                     && (-(1 as libc::c_int) as libc::c_long
808 +                                         - 0 as libc::c_int as idx_t)
809 +                                         < n - 1 as libc::c_int as libc::c_long) as libc::c_int
810 +                             }
811 +                         } else {
812 +                             (0 as libc::c_int as idx_t / s < n) as libc::c_int
813 +                         }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:694:37
    |
694 | / ...                   (if 1 as libc::c_int != 0 {
695 | | ...                       0 as libc::c_int as libc::c_long
696 | | ...                   } else {
697 | | ...                       s
...   |
700 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
701 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
694 ~                                     ((if 1 as libc::c_int != 0 {
695 +                                         0 as libc::c_int as libc::c_long
696 +                                     } else {
697 +                                         s
698 +                                     }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
699 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
700 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:819:32
    |
819 |                           } else {
    |  ________________________________^
820 | |                             if n < 0 as libc::c_int as libc::c_long {
821 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
822 | |                                     0 as libc::c_int as libc::c_long
...   |
929 | |                             }
930 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
819 ~                         } else if n < 0 as libc::c_int as libc::c_long {
820 +                             if (if (if ((if 1 as libc::c_int != 0 {
821 +                                 0 as libc::c_int as libc::c_long
822 +                             } else {
823 +                                 (if 1 as libc::c_int != 0 {
824 +                                     0 as libc::c_int as libc::c_long
825 +                                 } else {
826 +                                     n
827 +                                 }) + 0 as libc::c_int as idx_t
828 +                             }) - 1 as libc::c_int as libc::c_long)
829 +                                 < 0 as libc::c_int as libc::c_long
830 +                             {
831 +                                 !(((((if 1 as libc::c_int != 0 {
832 +                                     0 as libc::c_int as libc::c_long
833 +                                 } else {
834 +                                     (if 1 as libc::c_int != 0 {
835 +                                         0 as libc::c_int as libc::c_long
836 +                                     } else {
837 +                                         n
838 +                                     }) + 0 as libc::c_int as idx_t
839 +                                 }) + 1 as libc::c_int as libc::c_long)
840 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
841 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
842 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
843 +                                     - 1 as libc::c_int as libc::c_long)
844 +                                     * 2 as libc::c_int as libc::c_long
845 +                                     + 1 as libc::c_int as libc::c_long)
846 +                             } else {
847 +                                 (if 1 as libc::c_int != 0 {
848 +                                     0 as libc::c_int as libc::c_long
849 +                                 } else {
850 +                                     (if 1 as libc::c_int != 0 {
851 +                                         0 as libc::c_int as libc::c_long
852 +                                     } else {
853 +                                         n
854 +                                     }) + 0 as libc::c_int as idx_t
855 +                                 }) + 0 as libc::c_int as libc::c_long
856 +                             }) < 0 as libc::c_int as libc::c_long
857 +                             {
858 +                                 (((if 1 as libc::c_int != 0 {
859 +                                     0 as libc::c_int as libc::c_long
860 +                                 } else {
861 +                                     n
862 +                                 }) + 0 as libc::c_int as idx_t)
863 +                                     < -(if ((if 1 as libc::c_int != 0 {
864 +                                         0 as libc::c_int as libc::c_long
865 +                                     } else {
866 +                                         (if 1 as libc::c_int != 0 {
867 +                                             0 as libc::c_int as libc::c_long
868 +                                         } else {
869 +                                             n
870 +                                         }) + 0 as libc::c_int as idx_t
871 +                                     }) - 1 as libc::c_int as libc::c_long)
872 +                                         < 0 as libc::c_int as libc::c_long
873 +                                     {
874 +                                         ((((if 1 as libc::c_int != 0 {
875 +                                             0 as libc::c_int as libc::c_long
876 +                                         } else {
877 +                                             (if 1 as libc::c_int != 0 {
878 +                                                 0 as libc::c_int as libc::c_long
879 +                                             } else {
880 +                                                 n
881 +                                             }) + 0 as libc::c_int as idx_t
882 +                                         }) + 1 as libc::c_int as libc::c_long)
883 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
884 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
885 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
886 +                                             - 1 as libc::c_int as libc::c_long)
887 +                                             * 2 as libc::c_int as libc::c_long
888 +                                             + 1 as libc::c_int as libc::c_long
889 +                                     } else {
890 +                                         (if 1 as libc::c_int != 0 {
891 +                                             0 as libc::c_int as libc::c_long
892 +                                         } else {
893 +                                             (if 1 as libc::c_int != 0 {
894 +                                                 0 as libc::c_int as libc::c_long
895 +                                             } else {
896 +                                                 n
897 +                                             }) + 0 as libc::c_int as idx_t
898 +                                         }) - 1 as libc::c_int as libc::c_long
899 +                                     })) as libc::c_int
900 +                             } else {
901 +                                 ((0 as libc::c_int as libc::c_long)
902 +                                     < (if 1 as libc::c_int != 0 {
903 +                                         0 as libc::c_int as libc::c_long
904 +                                     } else {
905 +                                         n
906 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
907 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
908 +                             {
909 +                                 if ((if 1 as libc::c_int != 0 {
910 +                                     0 as libc::c_int as libc::c_long
911 +                                 } else {
912 +                                     s
913 +                                 }) - 1 as libc::c_int as libc::c_long)
914 +                                     < 0 as libc::c_int as libc::c_long
915 +                                 {
916 +                                     ((0 as libc::c_int as libc::c_long)
917 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
918 +                                 } else {
919 +                                     ((-(1 as libc::c_int) as libc::c_long
920 +                                         - 0 as libc::c_int as idx_t)
921 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
922 +                                 }
923 +                             } else {
924 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
925 +                             }
926 +                         } else {
927 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
928 +                         }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:234:16
    |
234 |           } else {
    |  ________________^
235 | |             if scale_factor == 0 as libc::c_int {
236 | |                 0 as libc::c_int
237 | |             } else {
...   |
351 | |             }
352 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
234 ~         } else if scale_factor == 0 as libc::c_int {
235 +             0 as libc::c_int
236 +         } else {
237 +             if *x < 0 as libc::c_int as libc::c_long {
238 +                 if (if (if ((if 1 as libc::c_int != 0 {
239 +                     0 as libc::c_int as libc::c_long
240 +                 } else {
241 +                     (if 1 as libc::c_int != 0 {
242 +                         0 as libc::c_int as libc::c_long
243 +                     } else {
244 +                         *x
245 +                     }) + 0 as libc::c_int as intmax_t
246 +                 }) - 1 as libc::c_int as libc::c_long)
247 +                     < 0 as libc::c_int as libc::c_long
248 +                 {
249 +                     !(((((if 1 as libc::c_int != 0 {
250 +                         0 as libc::c_int as libc::c_long
251 +                     } else {
252 +                         (if 1 as libc::c_int != 0 {
253 +                             0 as libc::c_int as libc::c_long
254 +                         } else {
255 +                             *x
256 +                         }) + 0 as libc::c_int as intmax_t
257 +                     }) + 1 as libc::c_int as libc::c_long)
258 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
259 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
260 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
261 +                         - 1 as libc::c_int as libc::c_long)
262 +                         * 2 as libc::c_int as libc::c_long
263 +                         + 1 as libc::c_int as libc::c_long)
264 +                 } else {
265 +                     (if 1 as libc::c_int != 0 {
266 +                         0 as libc::c_int as libc::c_long
267 +                     } else {
268 +                         (if 1 as libc::c_int != 0 {
269 +                             0 as libc::c_int as libc::c_long
270 +                         } else {
271 +                             *x
272 +                         }) + 0 as libc::c_int as intmax_t
273 +                     }) + 0 as libc::c_int as libc::c_long
274 +                 }) < 0 as libc::c_int as libc::c_long
275 +                 {
276 +                     (((if 1 as libc::c_int != 0 {
277 +                         0 as libc::c_int as libc::c_long
278 +                     } else {
279 +                         *x
280 +                     }) + 0 as libc::c_int as intmax_t)
281 +                         < -(if ((if 1 as libc::c_int != 0 {
282 +                             0 as libc::c_int as libc::c_long
283 +                         } else {
284 +                             (if 1 as libc::c_int != 0 {
285 +                                 0 as libc::c_int as libc::c_long
286 +                             } else {
287 +                                 *x
288 +                             }) + 0 as libc::c_int as intmax_t
289 +                         }) - 1 as libc::c_int as libc::c_long)
290 +                             < 0 as libc::c_int as libc::c_long
291 +                         {
292 +                             ((((if 1 as libc::c_int != 0 {
293 +                                 0 as libc::c_int as libc::c_long
294 +                             } else {
295 +                                 (if 1 as libc::c_int != 0 {
296 +                                     0 as libc::c_int as libc::c_long
297 +                                 } else {
298 +                                     *x
299 +                                 }) + 0 as libc::c_int as intmax_t
300 +                             }) + 1 as libc::c_int as libc::c_long)
301 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
302 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
303 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
304 +                                 - 1 as libc::c_int as libc::c_long)
305 +                                 * 2 as libc::c_int as libc::c_long
306 +                                 + 1 as libc::c_int as libc::c_long
307 +                         } else {
308 +                             (if 1 as libc::c_int != 0 {
309 +                                 0 as libc::c_int as libc::c_long
310 +                             } else {
311 +                                 (if 1 as libc::c_int != 0 {
312 +                                     0 as libc::c_int as libc::c_long
313 +                                 } else {
314 +                                     *x
315 +                                 }) + 0 as libc::c_int as intmax_t
316 +                             }) - 1 as libc::c_int as libc::c_long
317 +                         })) as libc::c_int
318 +                 } else {
319 +                     ((0 as libc::c_int as libc::c_long)
320 +                         < (if 1 as libc::c_int != 0 {
321 +                             0 as libc::c_int as libc::c_long
322 +                         } else {
323 +                             *x
324 +                         }) + 0 as libc::c_int as intmax_t) as libc::c_int
325 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
326 +                 {
327 +                     if ((if 1 as libc::c_int != 0 {
328 +                         0 as libc::c_int
329 +                     } else {
330 +                         scale_factor
331 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
332 +                     {
333 +                         ((0 as libc::c_int as libc::c_long)
334 +                             < scale_factor as libc::c_long
335 +                                 + 0 as libc::c_int as intmax_t) as libc::c_int
336 +                     } else {
337 +                         ((-(1 as libc::c_int) as libc::c_long
338 +                             - 0 as libc::c_int as intmax_t)
339 +                             < (scale_factor - 1 as libc::c_int) as libc::c_long)
340 +                             as libc::c_int
341 +                     }
342 +                 } else {
343 +                     (0 as libc::c_int as intmax_t / *x
344 +                         < scale_factor as libc::c_long) as libc::c_int
345 +                 }
346 +             } else {
347 +                 ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
348 +                     < *x) as libc::c_int
349 +             }
350 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:128:20
    |
128 |               } else {
    |  ____________________^
129 | |                 if (if (if ((if 1 as libc::c_int != 0 {
130 | |                     0 as libc::c_int as libc::c_long
131 | |                 } else {
...   |
232 | |                 }
233 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
128 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
129 +                 0 as libc::c_int as libc::c_long
130 +             } else {
131 +                 (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
132 +                     as libc::c_long + 0 as libc::c_int as intmax_t
133 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
134 +             {
135 +                 !(((((if 1 as libc::c_int != 0 {
136 +                     0 as libc::c_int as libc::c_long
137 +                 } else {
138 +                     (if 1 as libc::c_int != 0 {
139 +                         0 as libc::c_int
140 +                     } else {
141 +                         scale_factor
142 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t
143 +                 }) + 1 as libc::c_int as libc::c_long)
144 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
145 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
146 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
147 +                     - 1 as libc::c_int as libc::c_long)
148 +                     * 2 as libc::c_int as libc::c_long
149 +                     + 1 as libc::c_int as libc::c_long)
150 +             } else {
151 +                 (if 1 as libc::c_int != 0 {
152 +                     0 as libc::c_int as libc::c_long
153 +                 } else {
154 +                     (if 1 as libc::c_int != 0 {
155 +                         0 as libc::c_int
156 +                     } else {
157 +                         scale_factor
158 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t
159 +                 }) + 0 as libc::c_int as libc::c_long
160 +             }) < 0 as libc::c_int as libc::c_long
161 +             {
162 +                 (((if 1 as libc::c_int != 0 {
163 +                     0 as libc::c_int
164 +                 } else {
165 +                     scale_factor
166 +                 }) as libc::c_long + 0 as libc::c_int as intmax_t)
167 +                     < -(if ((if 1 as libc::c_int != 0 {
168 +                         0 as libc::c_int as libc::c_long
169 +                     } else {
170 +                         (if 1 as libc::c_int != 0 {
171 +                             0 as libc::c_int
172 +                         } else {
173 +                             scale_factor
174 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t
175 +                     }) - 1 as libc::c_int as libc::c_long)
176 +                         < 0 as libc::c_int as libc::c_long
177 +                     {
178 +                         ((((if 1 as libc::c_int != 0 {
179 +                             0 as libc::c_int as libc::c_long
180 +                         } else {
181 +                             (if 1 as libc::c_int != 0 {
182 +                                 0 as libc::c_int
183 +                             } else {
184 +                                 scale_factor
185 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
186 +                         }) + 1 as libc::c_int as libc::c_long)
187 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
188 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
189 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
190 +                             - 1 as libc::c_int as libc::c_long)
191 +                             * 2 as libc::c_int as libc::c_long
192 +                             + 1 as libc::c_int as libc::c_long
193 +                     } else {
194 +                         (if 1 as libc::c_int != 0 {
195 +                             0 as libc::c_int as libc::c_long
196 +                         } else {
197 +                             (if 1 as libc::c_int != 0 {
198 +                                 0 as libc::c_int
199 +                             } else {
200 +                                 scale_factor
201 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
202 +                         }) - 1 as libc::c_int as libc::c_long
203 +                     })) as libc::c_int
204 +             } else {
205 +                 ((0 as libc::c_int as libc::c_long)
206 +                     < (if 1 as libc::c_int != 0 {
207 +                         0 as libc::c_int
208 +                     } else {
209 +                         scale_factor
210 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
211 +             }) != 0 && scale_factor == -(1 as libc::c_int)
212 +             {
213 +                 if ((if 1 as libc::c_int != 0 {
214 +                     0 as libc::c_int as libc::c_long
215 +                 } else {
216 +                     *x
217 +                 }) - 1 as libc::c_int as libc::c_long)
218 +                     < 0 as libc::c_int as libc::c_long
219 +                 {
220 +                     ((0 as libc::c_int as libc::c_long)
221 +                         < *x + 0 as libc::c_int as intmax_t) as libc::c_int
222 +                 } else {
223 +                     ((0 as libc::c_int as libc::c_long) < *x
224 +                         && (-(1 as libc::c_int) as libc::c_long
225 +                             - 0 as libc::c_int as intmax_t)
226 +                             < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
227 +                 }
228 +             } else {
229 +                 ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
230 +                     as libc::c_int
231 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xstrtoimax.rs:116:25
    |
116 | /                         (if 1 as libc::c_int != 0 {
117 | |                             0 as libc::c_int
118 | |                         } else {
119 | |                             scale_factor
...   |
122 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
123 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
116 ~                         ((if 1 as libc::c_int != 0 {
117 +                             0 as libc::c_int
118 +                         } else {
119 +                             scale_factor
120 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
121 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
122 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:237:20
    |
237 |               } else {
    |  ____________________^
238 | |                 if *x < 0 as libc::c_int as libc::c_long {
239 | |                     if (if (if ((if 1 as libc::c_int != 0 {
240 | |                         0 as libc::c_int as libc::c_long
...   |
350 | |                 }
351 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
237 ~             } else if *x < 0 as libc::c_int as libc::c_long {
238 +                 if (if (if ((if 1 as libc::c_int != 0 {
239 +                     0 as libc::c_int as libc::c_long
240 +                 } else {
241 +                     (if 1 as libc::c_int != 0 {
242 +                         0 as libc::c_int as libc::c_long
243 +                     } else {
244 +                         *x
245 +                     }) + 0 as libc::c_int as intmax_t
246 +                 }) - 1 as libc::c_int as libc::c_long)
247 +                     < 0 as libc::c_int as libc::c_long
248 +                 {
249 +                     !(((((if 1 as libc::c_int != 0 {
250 +                         0 as libc::c_int as libc::c_long
251 +                     } else {
252 +                         (if 1 as libc::c_int != 0 {
253 +                             0 as libc::c_int as libc::c_long
254 +                         } else {
255 +                             *x
256 +                         }) + 0 as libc::c_int as intmax_t
257 +                     }) + 1 as libc::c_int as libc::c_long)
258 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
259 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
260 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
261 +                         - 1 as libc::c_int as libc::c_long)
262 +                         * 2 as libc::c_int as libc::c_long
263 +                         + 1 as libc::c_int as libc::c_long)
264 +                 } else {
265 +                     (if 1 as libc::c_int != 0 {
266 +                         0 as libc::c_int as libc::c_long
267 +                     } else {
268 +                         (if 1 as libc::c_int != 0 {
269 +                             0 as libc::c_int as libc::c_long
270 +                         } else {
271 +                             *x
272 +                         }) + 0 as libc::c_int as intmax_t
273 +                     }) + 0 as libc::c_int as libc::c_long
274 +                 }) < 0 as libc::c_int as libc::c_long
275 +                 {
276 +                     (((if 1 as libc::c_int != 0 {
277 +                         0 as libc::c_int as libc::c_long
278 +                     } else {
279 +                         *x
280 +                     }) + 0 as libc::c_int as intmax_t)
281 +                         < -(if ((if 1 as libc::c_int != 0 {
282 +                             0 as libc::c_int as libc::c_long
283 +                         } else {
284 +                             (if 1 as libc::c_int != 0 {
285 +                                 0 as libc::c_int as libc::c_long
286 +                             } else {
287 +                                 *x
288 +                             }) + 0 as libc::c_int as intmax_t
289 +                         }) - 1 as libc::c_int as libc::c_long)
290 +                             < 0 as libc::c_int as libc::c_long
291 +                         {
292 +                             ((((if 1 as libc::c_int != 0 {
293 +                                 0 as libc::c_int as libc::c_long
294 +                             } else {
295 +                                 (if 1 as libc::c_int != 0 {
296 +                                     0 as libc::c_int as libc::c_long
297 +                                 } else {
298 +                                     *x
299 +                                 }) + 0 as libc::c_int as intmax_t
300 +                             }) + 1 as libc::c_int as libc::c_long)
301 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
302 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
303 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
304 +                                 - 1 as libc::c_int as libc::c_long)
305 +                                 * 2 as libc::c_int as libc::c_long
306 +                                 + 1 as libc::c_int as libc::c_long
307 +                         } else {
308 +                             (if 1 as libc::c_int != 0 {
309 +                                 0 as libc::c_int as libc::c_long
310 +                             } else {
311 +                                 (if 1 as libc::c_int != 0 {
312 +                                     0 as libc::c_int as libc::c_long
313 +                                 } else {
314 +                                     *x
315 +                                 }) + 0 as libc::c_int as intmax_t
316 +                             }) - 1 as libc::c_int as libc::c_long
317 +                         })) as libc::c_int
318 +                 } else {
319 +                     ((0 as libc::c_int as libc::c_long)
320 +                         < (if 1 as libc::c_int != 0 {
321 +                             0 as libc::c_int as libc::c_long
322 +                         } else {
323 +                             *x
324 +                         }) + 0 as libc::c_int as intmax_t) as libc::c_int
325 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
326 +                 {
327 +                     if ((if 1 as libc::c_int != 0 {
328 +                         0 as libc::c_int
329 +                     } else {
330 +                         scale_factor
331 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
332 +                     {
333 +                         ((0 as libc::c_int as libc::c_long)
334 +                             < scale_factor as libc::c_long
335 +                                 + 0 as libc::c_int as intmax_t) as libc::c_int
336 +                     } else {
337 +                         ((-(1 as libc::c_int) as libc::c_long
338 +                             - 0 as libc::c_int as intmax_t)
339 +                             < (scale_factor - 1 as libc::c_int) as libc::c_long)
340 +                             as libc::c_int
341 +                     }
342 +                 } else {
343 +                     (0 as libc::c_int as intmax_t / *x
344 +                         < scale_factor as libc::c_long) as libc::c_int
345 +                 }
346 +             } else {
347 +                 ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
348 +                     < *x) as libc::c_int
349 +             }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoumax.rs:180:16
    |
180 |           } else {
    |  ________________^
181 | |             if scale_factor == 0 as libc::c_int {
182 | |                 0 as libc::c_int
183 | |             } else {
...   |
313 | |             }
314 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
180 ~         } else if scale_factor == 0 as libc::c_int {
181 +             0 as libc::c_int
182 +         } else {
183 +             if *x < 0 as libc::c_int as libc::c_ulong {
184 +                 if (if (if (if 1 as libc::c_int != 0 {
185 +                     0 as libc::c_int as libc::c_ulong
186 +                 } else {
187 +                     (if 1 as libc::c_int != 0 {
188 +                         0 as libc::c_int as libc::c_ulong
189 +                     } else {
190 +                         *x
191 +                     })
192 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
193 +                 })
194 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
195 +                     < 0 as libc::c_int as libc::c_ulong
196 +                 {
197 +                     !((if 1 as libc::c_int != 0 {
198 +                         0 as libc::c_int as libc::c_ulong
199 +                     } else {
200 +                         (if 1 as libc::c_int != 0 {
201 +                             0 as libc::c_int as libc::c_ulong
202 +                         } else {
203 +                             *x
204 +                         })
205 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
206 +                     })
207 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
208 +                         << (::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
209 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
210 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
211 +                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
212 +                         .wrapping_mul(2 as libc::c_int as libc::c_ulong)
213 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
214 +                 } else {
215 +                     (if 1 as libc::c_int != 0 {
216 +                         0 as libc::c_int as libc::c_ulong
217 +                     } else {
218 +                         (if 1 as libc::c_int != 0 {
219 +                             0 as libc::c_int as libc::c_ulong
220 +                         } else {
221 +                             *x
222 +                         })
223 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
224 +                     })
225 +                         .wrapping_add(0 as libc::c_int as libc::c_ulong)
226 +                 }) < 0 as libc::c_int as libc::c_ulong
227 +                 {
228 +                     ((if 1 as libc::c_int != 0 {
229 +                         0 as libc::c_int as libc::c_ulong
230 +                     } else {
231 +                         *x
232 +                     })
233 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
234 +                         < (if (if 1 as libc::c_int != 0 {
235 +                             0 as libc::c_int as libc::c_ulong
236 +                         } else {
237 +                             (if 1 as libc::c_int != 0 {
238 +                                 0 as libc::c_int as libc::c_ulong
239 +                             } else {
240 +                                 *x
241 +                             })
242 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
243 +                         })
244 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
245 +                             < 0 as libc::c_int as libc::c_ulong
246 +                         {
247 +                             ((if 1 as libc::c_int != 0 {
248 +                                 0 as libc::c_int as libc::c_ulong
249 +                             } else {
250 +                                 (if 1 as libc::c_int != 0 {
251 +                                     0 as libc::c_int as libc::c_ulong
252 +                                 } else {
253 +                                     *x
254 +                                 })
255 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
256 +                             })
257 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
258 +                                 << (::core::mem::size_of::<libc::c_ulong>()
259 +                                     as libc::c_ulong)
260 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
261 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
262 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
263 +                                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
264 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
265 +                         } else {
266 +                             (if 1 as libc::c_int != 0 {
267 +                                 0 as libc::c_int as libc::c_ulong
268 +                             } else {
269 +                                 (if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_ulong
271 +                                 } else {
272 +                                     *x
273 +                                 })
274 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
275 +                             })
276 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
277 +                         })
278 +                             .wrapping_neg()) as libc::c_int
279 +                 } else {
280 +                     ((0 as libc::c_int as libc::c_ulong)
281 +                         < (if 1 as libc::c_int != 0 {
282 +                             0 as libc::c_int as libc::c_ulong
283 +                         } else {
284 +                             *x
285 +                         })
286 +                             .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
287 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
288 +                 {
289 +                     if ((if 1 as libc::c_int != 0 {
290 +                         0 as libc::c_int
291 +                     } else {
292 +                         scale_factor
293 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
294 +                     {
295 +                         ((0 as libc::c_int as libc::c_ulong)
296 +                             < (scale_factor as libc::c_ulong)
297 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
298 +                     } else {
299 +                         ((-(1 as libc::c_int) as libc::c_ulong)
300 +                             .wrapping_sub(0 as libc::c_int as uintmax_t)
301 +                             < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
302 +                             as libc::c_int
303 +                     }
304 +                 } else {
305 +                     ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
306 +                         < scale_factor as libc::c_ulong) as libc::c_int
307 +                 }
308 +             } else {
309 +                 ((-(1 as libc::c_int) as uintmax_t)
310 +                     .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
311 +             }
312 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoumax.rs:183:20
    |
183 |               } else {
    |  ____________________^
184 | |                 if *x < 0 as libc::c_int as libc::c_ulong {
185 | |                     if (if (if (if 1 as libc::c_int != 0 {
186 | |                         0 as libc::c_int as libc::c_ulong
...   |
312 | |                 }
313 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
183 ~             } else if *x < 0 as libc::c_int as libc::c_ulong {
184 +                 if (if (if (if 1 as libc::c_int != 0 {
185 +                     0 as libc::c_int as libc::c_ulong
186 +                 } else {
187 +                     (if 1 as libc::c_int != 0 {
188 +                         0 as libc::c_int as libc::c_ulong
189 +                     } else {
190 +                         *x
191 +                     })
192 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
193 +                 })
194 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
195 +                     < 0 as libc::c_int as libc::c_ulong
196 +                 {
197 +                     !((if 1 as libc::c_int != 0 {
198 +                         0 as libc::c_int as libc::c_ulong
199 +                     } else {
200 +                         (if 1 as libc::c_int != 0 {
201 +                             0 as libc::c_int as libc::c_ulong
202 +                         } else {
203 +                             *x
204 +                         })
205 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
206 +                     })
207 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
208 +                         << (::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
209 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
210 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
211 +                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
212 +                         .wrapping_mul(2 as libc::c_int as libc::c_ulong)
213 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
214 +                 } else {
215 +                     (if 1 as libc::c_int != 0 {
216 +                         0 as libc::c_int as libc::c_ulong
217 +                     } else {
218 +                         (if 1 as libc::c_int != 0 {
219 +                             0 as libc::c_int as libc::c_ulong
220 +                         } else {
221 +                             *x
222 +                         })
223 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
224 +                     })
225 +                         .wrapping_add(0 as libc::c_int as libc::c_ulong)
226 +                 }) < 0 as libc::c_int as libc::c_ulong
227 +                 {
228 +                     ((if 1 as libc::c_int != 0 {
229 +                         0 as libc::c_int as libc::c_ulong
230 +                     } else {
231 +                         *x
232 +                     })
233 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
234 +                         < (if (if 1 as libc::c_int != 0 {
235 +                             0 as libc::c_int as libc::c_ulong
236 +                         } else {
237 +                             (if 1 as libc::c_int != 0 {
238 +                                 0 as libc::c_int as libc::c_ulong
239 +                             } else {
240 +                                 *x
241 +                             })
242 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
243 +                         })
244 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
245 +                             < 0 as libc::c_int as libc::c_ulong
246 +                         {
247 +                             ((if 1 as libc::c_int != 0 {
248 +                                 0 as libc::c_int as libc::c_ulong
249 +                             } else {
250 +                                 (if 1 as libc::c_int != 0 {
251 +                                     0 as libc::c_int as libc::c_ulong
252 +                                 } else {
253 +                                     *x
254 +                                 })
255 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
256 +                             })
257 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
258 +                                 << (::core::mem::size_of::<libc::c_ulong>()
259 +                                     as libc::c_ulong)
260 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
261 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
262 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
263 +                                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
264 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
265 +                         } else {
266 +                             (if 1 as libc::c_int != 0 {
267 +                                 0 as libc::c_int as libc::c_ulong
268 +                             } else {
269 +                                 (if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_ulong
271 +                                 } else {
272 +                                     *x
273 +                                 })
274 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
275 +                             })
276 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
277 +                         })
278 +                             .wrapping_neg()) as libc::c_int
279 +                 } else {
280 +                     ((0 as libc::c_int as libc::c_ulong)
281 +                         < (if 1 as libc::c_int != 0 {
282 +                             0 as libc::c_int as libc::c_ulong
283 +                         } else {
284 +                             *x
285 +                         })
286 +                             .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
287 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
288 +                 {
289 +                     if ((if 1 as libc::c_int != 0 {
290 +                         0 as libc::c_int
291 +                     } else {
292 +                         scale_factor
293 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
294 +                     {
295 +                         ((0 as libc::c_int as libc::c_ulong)
296 +                             < (scale_factor as libc::c_ulong)
297 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
298 +                     } else {
299 +                         ((-(1 as libc::c_int) as libc::c_ulong)
300 +                             .wrapping_sub(0 as libc::c_int as uintmax_t)
301 +                             < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
302 +                             as libc::c_int
303 +                     }
304 +                 } else {
305 +                     ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
306 +                         < scale_factor as libc::c_ulong) as libc::c_int
307 +                 }
308 +             } else {
309 +                 ((-(1 as libc::c_int) as uintmax_t)
310 +                     .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
311 +             }
    |

warning: unused variable: `e`
  --> src/fd_safer.rs:12:13
   |
12 |         let e = std::io::Error::last_os_error(); // Capture the current error
   |             ^ help: if this is intentional, prefix it with an underscore: `_e`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `e`
  --> src/fd_safer_flag.rs:15:13
   |
15 |         let e = std::io::Error::last_os_error();
   |             ^ help: if this is intentional, prefix it with an underscore: `_e`

warning: unused variable: `pending_shell_escape_end`
   --> src/quotearg.rs:333:13
    |
333 |     let mut pending_shell_escape_end: bool = false;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_pending_shell_escape_end`

warning: unused variable: `i`
   --> src/quotearg.rs:335:13
    |
335 |     let mut i: size_t = 0;
    |             ^ help: if this is intentional, prefix it with an underscore: `_i`

warning: unused variable: `argsize`
    --> src/quotearg.rs:1414:9
     |
1414 |     mut argsize: size_t,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_argsize`

warning: unused variable: `result`
    --> src/quotearg.rs:1478:9
     |
1478 |     let result = set_char_quoting(Some(&mut options), ch as i8, 1);
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `fd`
  --> src/xbinary_io.rs:55:17
   |
55 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
   |                 ^^ help: if this is intentional, prefix it with an underscore: `_fd`

warning: unused variable: `mode`
  --> src/xbinary_io.rs:55:26
   |
55 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
   |                          ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unused variable: `err`
  --> src/xdectoumax.rs:57:5
   |
57 |     err: &str,
   |     ^^^ help: if this is intentional, prefix it with an underscore: `_err`

warning: unused variable: `condition2`
   --> src/xstrtoumax.rs:143:5
    |
143 | let condition2 = if condition1 {
    |     ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_condition2`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:500:13
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
500 |               unsafe { *buffer.offset(len as isize) = '\'' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`
    = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:504:13
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
504 |               unsafe { *buffer.offset(len as isize) = '$' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:508:13
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
508 |               unsafe { *buffer.offset(len as isize) = '\'' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:514:9
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
514 |           unsafe { *buffer.offset(len as isize) = '\\' as i8; }
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:519:26
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
519 |           && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                            ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:519:70
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
519 |           && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                                                        ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:522:13
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
522 |               unsafe { *buffer.offset(len as isize) = '0' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:526:13
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
526 |               unsafe { *buffer.offset(len as isize) = '0' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:760:9
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
760 |           unsafe {
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:767:9
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
767 |           unsafe {
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:774:9
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
774 |           unsafe {
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:869:24
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
869 |       let buffer_slice = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                          ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:931:13
    |
322 | / unsafe extern "C" fn quotearg_buffer_restyled(
323 | |     mut buffer: *mut libc::c_char,
324 | |     mut buffersize: size_t,
325 | |     mut arg: *const libc::c_char,
...   |
331 | |     mut right_quote: *const libc::c_char,
332 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
931 |           c = unsafe { *arg.offset(i as isize) } as u8;
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/temp_stream.rs:217:35
    |
97  | / pub unsafe extern "C" fn temp_stream(
98  | |     mut fp: *mut *mut FILE,
99  | |     mut file_name: *mut *mut libc::c_char,
100 | | ) -> bool {
    | |_________- because it's nested under this `unsafe` fn
...
217 |           record_or_unlink_tempfile(unsafe { std::ffi::CStr::from_ptr(tempfile).to_str().unwrap() });
    |                                     ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xmalloc.rs:101:9
    |
101 |         unsafe { _gl_alloc_nomem() }
    |         ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:487:30
    |
405 | / pub unsafe extern "C" fn xstrtoimax(
406 | |     mut s: *const libc::c_char,
407 | |     mut ptr: *mut *mut libc::c_char,
408 | |     mut strtol_base: libc::c_int,
409 | |     mut val: *mut intmax_t,
410 | |     mut valid_suffixes: *const libc::c_char,
411 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
487 |       let valid_suffixes_str = unsafe { std::ffi::CStr::from_ptr(valid_suffixes).to_string_lossy() };
    |                                ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:496:23
    |
405 | / pub unsafe extern "C" fn xstrtoimax(
406 | |     mut s: *const libc::c_char,
407 | |     mut ptr: *mut *mut libc::c_char,
408 | |     mut strtol_base: libc::c_int,
409 | |     mut val: *mut intmax_t,
410 | |     mut valid_suffixes: *const libc::c_char,
411 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
496 |                   match unsafe { *(*p).offset(1) } as u8 {
    |                         ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:498:28
    |
405 | / pub unsafe extern "C" fn xstrtoimax(
406 | |     mut s: *const libc::c_char,
407 | |     mut ptr: *mut *mut libc::c_char,
408 | |     mut strtol_base: libc::c_int,
409 | |     mut val: *mut intmax_t,
410 | |     mut valid_suffixes: *const libc::c_char,
411 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
498 |                           if unsafe { *(*p).offset(2) } as u8 == b'B' {
    |                              ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:563:10
    |
405 | / pub unsafe extern "C" fn xstrtoimax(
406 | |     mut s: *const libc::c_char,
407 | |     mut ptr: *mut *mut libc::c_char,
408 | |     mut strtol_base: libc::c_int,
409 | |     mut val: *mut intmax_t,
410 | |     mut valid_suffixes: *const libc::c_char,
411 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
563 |       *p = unsafe { (*p).offset(suffixes as isize) };
    |            ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unsafe function's docs miss `# Safety` section
  --> src/alignalloc.rs:14:1
   |
14 | / pub unsafe extern "C" fn alignalloc(
15 | |     mut alignment: idx_t,
16 | |     mut size: idx_t,
17 | | ) -> *mut libc::c_void {
...  |
24 | |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
25 | | }
   | |_^
   |
   = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/alignalloc.rs:24:5
   |
24 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong)`
   |
   = note: `-W clippy::needless-return` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:18:8
   |
18 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:18:42
   |
18 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/alignalloc.rs:19:21
   |
19 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:19:21
   |
19 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:21:8
   |
21 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:21:42
   |
21 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/alignalloc.rs:22:16
   |
22 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:22:16
   |
22 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:24:26
   |
24 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:24:54
   |
24 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                                                      ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/basename_lgpl.rs:7:1
   |
7  | / pub unsafe extern "C" fn last_component(
8  | |     mut name: *const libc::c_char,
9  | | ) -> *mut libc::c_char {
10 | |     let mut base: *const libc::c_char = name.offset(0 as libc::c_int as isize);
...  |
28 | |     return base as *mut libc::c_char;
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/basename_lgpl.rs:7:1
   |
7  | / pub unsafe extern "C" fn last_component(
8  | |     mut name: *const libc::c_char,
9  | | ) -> *mut libc::c_char {
10 | |     let mut base: *const libc::c_char = name.offset(0 as libc::c_int as isize);
...  |
28 | |     return base as *mut libc::c_char;
29 | | }
   | |_^
   |
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/basename_lgpl.rs:28:5
   |
28 |     return base as *mut libc::c_char;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `base as *mut libc::c_char`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/basename_lgpl.rs:11:38
   |
11 |     let mut p: *const libc::c_char = 0 as *const libc::c_char;
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:13:11
   |
13 |     while *base as libc::c_int == '/' as i32 {
   |           ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*base)`
   |
   = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/basename_lgpl.rs:15:9
   |
15 |         base;
   |         ^^^^^
   |
   = note: `-W clippy::no-effect` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:19:12
   |
19 |         if *p as libc::c_int == '/' as i32 {
   |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/basename_lgpl.rs:26:9
   |
26 |         p;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/basename_lgpl.rs:31:1
   |
31 | / pub unsafe extern "C" fn base_len(mut name: *const libc::c_char) -> size_t {
32 | |     let mut len: size_t = 0;
33 | |     let mut prefix_len: size_t = 0 as libc::c_int as size_t;
34 | |     len = strlen(name);
...  |
54 | |     return len;
55 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/basename_lgpl.rs:54:5
   |
54 |     return len;
   |     ^^^^^^^^^^^ help: remove `return`: `len`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:33:34
   |
33 |     let mut prefix_len: size_t = 0 as libc::c_int as size_t;
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:35:11
   |
35 |     while (1 as libc::c_int as libc::c_ulong) < len
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:36:12
   |
36 |           && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |  ____________^
37 | |             as libc::c_int == '/' as i32
   | |__________________________^ help: try: `i32::from(*name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/basename_lgpl.rs:36:25
   |
36 |         && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/basename_lgpl.rs:36:25
   |
36 |         && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:36:42
   |
36 |         && *name.offset(len.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: statement with no effect
  --> src/basename_lgpl.rs:40:9
   |
40 |         len;
   |         ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:42:40
   |
42 |     if 0 as libc::c_int != 0 && len == 1 as libc::c_int as libc::c_ulong
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:43:12
   |
43 |         && *name.offset(0 as libc::c_int as isize) as libc::c_int == '/' as i32
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*name.offset(0 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:44:12
   |
44 |         && *name.offset(1 as libc::c_int as isize) as libc::c_int == '/' as i32
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*name.offset(1 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:47:16
   |
47 |         return 2 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/basename_lgpl.rs:50:12
   |
50 |         && *name.offset(prefix_len as isize) as libc::c_int == '/' as i32
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*name.offset(prefix_len as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/basename_lgpl.rs:50:25
   |
50 |         && *name.offset(prefix_len as isize) as libc::c_int == '/' as i32
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/basename_lgpl.rs:50:25
   |
50 |         && *name.offset(prefix_len as isize) as libc::c_int == '/' as i32
   |                         ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/basename_lgpl.rs:52:40
   |
52 |         return prefix_len.wrapping_add(1 as libc::c_int as libc::c_ulong);
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/binary_io.rs:5:1
   |
5  | / pub unsafe extern "C" fn set_binary_mode(
6  | |     mut fd: libc::c_int,
7  | |     mut mode: libc::c_int,
8  | | ) -> libc::c_int {
9  | |     return __gl_setmode(fd, mode);
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/binary_io.rs:9:5
  |
9 |     return __gl_setmode(fd, mode);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_setmode(fd, mode)`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/binary_io.rs:14:1
   |
14 | / pub unsafe extern "C" fn __gl_setmode(
15 | |     mut _fd: libc::c_int,
16 | |     mut _mode: libc::c_int,
17 | | ) -> libc::c_int {
18 | |     return 0 as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/binary_io.rs:14:1
   |
14 | / pub unsafe extern "C" fn __gl_setmode(
15 | |     mut _fd: libc::c_int,
16 | |     mut _mode: libc::c_int,
17 | | ) -> libc::c_int {
18 | |     return 0 as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/binary_io.rs:18:5
   |
18 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/c_ctype.rs:21:1
   |
21 | / pub fn c_isalnum(c: i32) -> bool {
22 | |     (c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:22:5
   |
22 |     (c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
   |     ^^^^^^^^^^^^^^^^^^^^ help: use: `(48..=57).contains(&c)`
   |
   = note: `-W clippy::manual-range-contains` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:22:29
   |
22 |     (c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
   |                             ^^^^^^^^^^^^^^^^^^^^ help: use: `(65..=90).contains(&c)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:22:53
   |
22 |     (c >= 48 && c <= 57) || (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
   |                                                     ^^^^^^^^^^^^^^^^^^^^^ help: use: `(97..=122).contains(&c)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: this could be a `const fn`
  --> src/c_ctype.rs:28:1
   |
28 | / pub fn c_isalpha(c: libc::c_int) -> bool {
29 | |     c >= 65 && c <= 90 || c >= 97 && c <= 122
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:29:5
   |
29 |     c >= 65 && c <= 90 || c >= 97 && c <= 122
   |     ^^^^^^^^^^^^^^^^^^ help: use: `(65..=90).contains(&c)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:29:27
   |
29 |     c >= 65 && c <= 90 || c >= 97 && c <= 122
   |                           ^^^^^^^^^^^^^^^^^^^ help: use: `(97..=122).contains(&c)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:42:1
   |
42 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
43 | |     return c == ' ' as i32 || c == '\t' as i32;
44 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:42:1
   |
42 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
43 | |     return c == ' ' as i32 || c == '\t' as i32;
44 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:43:5
   |
43 |     return c == ' ' as i32 || c == '\t' as i32;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c == ' ' as i32 || c == '\t' as i32`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/c_ctype.rs:48:1
   |
48 | / pub fn c_iscntrl(c: i32) -> bool {
49 | |     match c {
50 | |         0..=31 | 127 => true,
51 | |         _ => false,
52 | |     }
53 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:49:5
   |
49 | /     match c {
50 | |         0..=31 | 127 => true,
51 | |         _ => false,
52 | |     }
   | |_____^ help: try this: `matches!(c, 0..=31 | 127)`
   |
   = note: `-W clippy::match-like-matches-macro` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
  --> src/c_ctype.rs:58:1
   |
58 | / pub fn c_isdigit(c: i32) -> bool {
59 | |     c >= 48 && c <= 57
60 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:59:5
   |
59 |     c >= 48 && c <= 57
   |     ^^^^^^^^^^^^^^^^^^ help: use: `(48..=57).contains(&c)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: this could be a `const fn`
  --> src/c_ctype.rs:65:1
   |
65 | / pub fn c_isgraph(c: i32) -> bool {
66 | |     match c {
67 | |         48..=57 | 97..=122 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40
68 | |         | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58 | 59 | 60 | 61 | 62
...  |
71 | |     }
72 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:66:5
   |
66 | /     match c {
67 | |         48..=57 | 97..=122 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40
68 | |         | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58 | 59 | 60 | 61 | 62
69 | |         | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125 | 126 => true,
70 | |         _ => false,
71 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
   |
66 ~     matches!(c, 48..=57 | 97..=122 | 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40
67 +         | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58 | 59 | 60 | 61 | 62
68 +         | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125 | 126)
   |

warning: this could be a `const fn`
  --> src/c_ctype.rs:77:1
   |
77 | / pub fn c_islower(c: i32) -> bool {
78 | |     (c >= 97 && c <= 122)
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:78:5
   |
78 |     (c >= 97 && c <= 122)
   |     ^^^^^^^^^^^^^^^^^^^^^ help: use: `(97..=122).contains(&c)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/c_ctype.rs:85:20
   |
85 |     char::from_u32(c as u32).map_or(false, |ch| ch.is_ascii() && (ch.is_alphanumeric() || ch.is_ascii_punctuation() || ch.is_whitespace()))
   |                    ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/c_ctype.rs:91:1
   |
91 | / pub fn c_ispunct(c: i32) -> bool {
92 | |     match c {
93 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
94 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...  |
97 | |     }
98 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:92:5
   |
92 | /     match c {
93 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
94 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
95 | |         | 126 => true,
96 | |         _ => false,
97 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
   |
92 ~     matches!(c, 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
93 +         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
94 +         | 126)
   |

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:103:1
    |
103 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
104 | |     match c {
105 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
106 | |         _ => return 0 as libc::c_int != 0,
107 | |     };
108 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:103:1
    |
103 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
104 | |     match c {
105 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
106 | |         _ => return 0 as libc::c_int != 0,
107 | |     };
108 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:105:39
    |
105 |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:106:14
    |
106 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
   --> src/c_ctype.rs:112:1
    |
112 | / pub fn c_isupper(c: i32) -> bool {
113 | |     matches!(c, 65..=90)
114 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:119:1
    |
119 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
120 | |     match c {
121 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
122 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
123 | |         _ => return 0 as libc::c_int != 0,
124 | |     };
125 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:119:1
    |
119 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
120 | |     match c {
121 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
122 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
123 | |         _ => return 0 as libc::c_int != 0,
124 | |     };
125 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:122:42
    |
122 |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:123:14
    |
123 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/c_ctype.rs:130:38
    |
130 |     if let Some(ch) = char::from_u32(c as u32) {
    |                                      ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/c_ctype.rs:142:38
    |
142 |     if let Some(ch) = char::from_u32(c as u32) {
    |                                      ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/c_strcasecmp.rs:4:1
   |
4  | / unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
5  | |     match c {
6  | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
7  | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...  |
11 | |     };
12 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
 --> src/c_strcasecmp.rs:8:13
  |
8 |             return c - 'A' as i32 + 'a' as i32;
  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'A' as i32 + 'a' as i32`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_strcasecmp.rs:10:14
   |
10 |         _ => return c,
   |              ^^^^^^^^ help: remove `return`: `c`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/close_stream.rs:31:22
   |
31 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/close_stream.rs:42:29
   |
42 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:52:50
   |
52 |     let some_pending: bool = unsafe { __fpending(stream) != 0 };
   |                                                  ^^^^^^
   |
   = note: `-W clippy::not-unsafe-ptr-arg-deref` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:53:52
   |
53 |     let prev_fail: bool = unsafe { ferror_unlocked(stream) != 0 };
   |                                                    ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:54:49
   |
54 |     let fclose_fail: bool = unsafe { rpl_fclose(stream) != 0 };
   |                                                 ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: unneeded `return` statement
  --> src/close_stream.rs:62:5
   |
62 |     return 0;
   |     ^^^^^^^^^ help: remove `return`: `0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/closeout.rs:43:22
   |
43 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/closeout.rs:54:29
   |
54 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:77:1
   |
77 | / pub unsafe extern "C" fn close_stdout_set_ignore_EPIPE(mut ignore: bool) {
78 | |     ignore_EPIPE = ignore;
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:86:39
   |
86 |             let write_error = gettext(b"write error\0".as_ptr() as *const libc::c_char);
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"write error\0".as_ptr().cast::<i8>()`
   |
   = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
   --> src/closeout.rs:87:13
    |
87  | /             if !file_name.is_null() {
88  | |                 if false {
89  | |                     error(
90  | |                         0,
...   |
149 | |                 }
150 | |             }
    | |_____________^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:92:25
   |
92 |                         b"%s: %s\0".as_ptr() as *const libc::c_char,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s: %s\0".as_ptr().cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: binding to `_` prefixed variable with no side-effect
  --> src/closeout.rs:98:21
   |
98 |                     let __errstatus = 0;
   |                     ^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:102:25
    |
102 |                         b"%s: %s\0".as_ptr() as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s: %s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:112:25
    |
112 |                         b"%s: %s\0".as_ptr() as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s: %s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:125:25
    |
125 |                         b"%s\0".as_ptr() as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:130:21
    |
130 |                     let __errstatus = 0;
    |                     ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:134:25
    |
134 |                         b"%s\0".as_ptr() as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:143:25
    |
143 |                         b"%s\0".as_ptr() as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
  --> src/dup_safer.rs:13:5
   |
12 |     let new_fd = unsafe { rpl_fcntl(fd, 0, libc::F_DUPFD + 1) };
   |     ------------------------------------------------------------ unnecessary `let` binding
13 |     new_fd
   |     ^^^^^^
   |
   = note: `-W clippy::let-and-return` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
12 ~     
13 ~     unsafe { rpl_fcntl(fd, 0, libc::F_DUPFD + 1) }
   |

warning: docs for function returning `Result` missing `# Errors` section
  --> src/dup_safer_flag.rs:8:1
   |
8  | / pub fn dup_safer_flag(fd: i32, flag: i32) -> Result<i32, std::io::Error> {
9  | |     let command = if flag & 0o2000000 != 0 {
10 | |         1030
11 | |     } else {
...  |
19 | |     }
20 | | }
   | |_^
   |
   = note: `-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unnecessary `!=` operation
  --> src/dup_safer_flag.rs:9:19
   |
9  |       let command = if flag & 0o2000000 != 0 {
   |  ___________________^
10 | |         1030
11 | |     } else {
12 | |         0
13 | |     };
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary structure name repetition
  --> src/fadvise.rs:33:22
   |
33 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fadvise.rs:44:29
   |
44 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:61:1
   |
61 | / pub unsafe extern "C" fn fdadvise(
62 | |     mut fd: libc::c_int,
63 | |     mut offset: off_t,
64 | |     mut len: off_t,
...  |
67 | |     posix_fadvise(fd, offset, len, advice as libc::c_int);
68 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `u32` to `i32` may wrap around the value
  --> src/fadvise.rs:67:36
   |
67 |     posix_fadvise(fd, offset, len, advice as libc::c_int);
   |                                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:70:1
   |
70 | / pub unsafe extern "C" fn fadvise(mut fp: *mut FILE, mut advice: fadvice_t) {
71 | |     if !fp.is_null() {
72 | |         fdadvise(
73 | |             fileno(fp),
...  |
78 | |     }
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:74:13
   |
74 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:75:13
   |
75 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/fclose.rs:34:22
   |
34 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fclose.rs:45:29
   |
45 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item name ends with its containing module's name
  --> src/fclose.rs:54:1
   |
54 | / pub fn rpl_fclose(fp: &mut FILE) -> libc::c_int {
55 | |     let mut saved_errno: libc::c_int = 0;
56 | |     let fd = unsafe { fileno(fp) };
57 | |     
...  |
76 | |     result
77 | | }
   | |_^
   |
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name ends with its containing module's name
  --> src/fcntl.rs:23:1
   |
23 | / pub fn rpl_fcntl(
24 | |     fd: libc::c_int,
25 | |     action: libc::c_int,
26 | |     args: &mut std::ffi::VaList,
...  |
84 | |     result
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:57:17
   |
57 |                   9 | 1032 | 1034 | 11 | 1033 => {
   |                   ^--------------------------
   |                   |
   |  _________________help: try merging the arm patterns: `9 | 1032 | 1034 | 11 | 1033 | 1 | 3`
   | |
58 | |                     result = unsafe { fcntl(fd, action) };
59 | |                 }
   | |_________________^
   |
   = note: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:47:17
   |
47 | /                 1 | 3 => {
48 | |                     result = unsafe { fcntl(fd, action) };
49 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:60:17
   |
60 |                   2 | 4 => {
   |                   ^----
   |                   |
   |  _________________help: try merging the arm patterns: `2 | 4 | 1024 | 10`
   | |
61 | |                     let x: libc::c_int;
62 | |                     unsafe {
63 | |                         x = args.arg::<libc::c_int>();
64 | |                     }
65 | |                     result = unsafe { fcntl(fd, action, x) };
66 | |                 }
   | |_________________^
   |
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:67:17
   |
67 | /                 1024 | 10 => {
68 | |                     let x: libc::c_int;
69 | |                     unsafe {
70 | |                         x = args.arg::<libc::c_int>();
71 | |                     }
72 | |                     result = unsafe { fcntl(fd, action, x) };
73 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this match arm has an identical body to the `_` wildcard arm
  --> src/fcntl.rs:50:17
   |
50 | /                 1025 => {
51 | |                     let p: *mut libc::c_void;
52 | |                     unsafe {
53 | |                         p = args.arg::<*mut libc::c_void>();
54 | |                     }
55 | |                     result = unsafe { fcntl(fd, action, p) };
56 | |                 }
   | |_________________^ help: try removing the arm
   |
   = help: or try changing either arm body
note: `_` wildcard arm here
  --> src/fcntl.rs:74:17
   |
74 | /                 _ => {
75 | |                     let p: *mut libc::c_void;
76 | |                     unsafe {
77 | |                         p = args.arg::<*mut libc::c_void>();
78 | |                     }
79 | |                     result = unsafe { fcntl(fd, action, p) };
80 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: unnecessary `!=` operation
   --> src/fcntl.rs:127:26
    |
127 |       have_dupfd_cloexec = if 0 as libc::c_int != 0 {
    |  __________________________^
128 | |         -(1 as libc::c_int)
129 | |     } else {
130 | |         0 as libc::c_int
131 | |     };
    | |_____^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
  --> src/fd_reopen.rs:11:1
   |
11 | / pub unsafe extern "C" fn fd_reopen(
12 | |     mut desired_fd: libc::c_int,
13 | |     mut file: *const libc::c_char,
14 | |     mut flags: libc::c_int,
...  |
26 | |     };
27 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fd_reopen.rs:19:9
   |
19 |         return fd
   |         ^^^^^^^^^ help: remove `return`: `fd`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/fd_reopen.rs:25:9
   |
25 |         return fd2;
   |         ^^^^^^^^^^^ help: remove `return`: `fd2`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: docs for function returning `Result` missing `# Errors` section
  --> src/fd_safer_flag.rs:12:1
   |
12 | / pub fn fd_safer_flag(fd: i32, flag: i32) -> Result<i32, io::Error> {
13 | |     if (0..=2).contains(&fd) {
14 | |         let f = unsafe { dup_safer_flag(fd, flag) }; // Call to unsafe function
15 | |         let e = std::io::Error::last_os_error();
...  |
19 | |     Ok(fd)
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: unnecessary structure name repetition
  --> src/fflush.rs:32:22
   |
32 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fflush.rs:43:29
   |
43 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fflush.rs:53:17
   |
53 |     if unsafe { (*fp)._flags & 0x100 } != 0 {
   |                 ^^^^^^^^^^^^
   |
   = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: item name ends with its containing module's name
  --> src/fflush.rs:59:1
   |
59 | / pub fn rpl_fflush(stream: Option<&mut FILE>) -> libc::c_int {
60 | |     unsafe {
61 | |         if let Some(s) = stream {
62 | |             if __freading(s) != 0 {
...  |
68 | |     }
69 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unnecessary structure name repetition
  --> src/fpurge.rs:28:22
   |
28 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fpurge.rs:39:29
   |
39 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/fpurge.rs:50:18
   |
50 |         __fpurge(fp);
   |                  ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: unnecessary structure name repetition
  --> src/fseeko.rs:29:22
   |
29 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fseeko.rs:40:29
   |
40 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/fseeko.rs:66:5
   |
66 |     return fseeko(fp, offset, whence);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fseeko(fp, offset, whence)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: used binding `_IO_read_end` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:8
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_read_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:30
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |                              ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:12
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |            ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:35
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                   ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_save_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:59
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                                           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fseeko.rs:59:19
   |
59 |         if pos == -(1 as libc::c_int) as libc::c_long {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:62:9
   |
62 |         (*fp)._flags &= !(0x10 as libc::c_int);
   |         ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_offset` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:63:9
   |
63 |         (*fp)._offset = pos;
   |         ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unsafe function's docs miss `# Safety` section
  --> src/full_write.rs:8:1
   |
8  | / pub unsafe extern "C" fn full_write(
9  | |     mut fd: libc::c_int,
10 | |     mut buf: *const libc::c_void,
11 | |     mut count: size_t,
...  |
29 | |     return total;
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/full_write.rs:29:5
   |
29 |     return total;
   |     ^^^^^^^^^^^^^ help: remove `return`: `total`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:13:29
   |
13 |     let mut total: size_t = 0 as libc::c_int as size_t;
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/full_write.rs:14:40
   |
14 |     let mut ptr: *const libc::c_char = buf as *const libc::c_char;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:15:19
   |
15 |     while count > 0 as libc::c_int as libc::c_ulong {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/full_write.rs:16:47
   |
16 |         let mut n_rw: size_t = safe_write(fd, ptr as *const libc::c_void, count);
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:17:20
   |
17 |         if n_rw == -(1 as libc::c_int) as size_t {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:20:20
   |
20 |         if n_rw == 0 as libc::c_int as libc::c_ulong {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/full_write.rs:25:30
   |
25 |             ptr = ptr.offset(n_rw as isize);
   |                              ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/full_write.rs:25:30
   |
25 |             ptr = ptr.offset(n_rw as isize);
   |                              ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
  --> src/ialloc.rs:52:9
   |
52 |         return None; // Handle memory allocation failure appropriately
   |         ^^^^^^^^^^^^ help: remove `return`: `None`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:33:8
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |        ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:33:8
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |        ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:33:36
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |                                    ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:33:36
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |                                    ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:34:29
   |
34 |         let mut nx: usize = n as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:34:29
   |
34 |         let mut nx: usize = n as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:35:29
   |
35 |         let mut sx: usize = s as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:35:29
   |
35 |         let mut sx: usize = s as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/ialloc.rs:81:8
   |
81 |     if s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::absurd-extreme-comparisons` implied by `-W clippy::all`
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/ialloc.rs:102:8
    |
102 |     if s <= usize::MAX {
    |        ^^^^^^^^^^^^^^^
    |
    = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: unsafe function's docs miss `# Safety` section
   --> src/ialloc.rs:119:1
    |
119 | / pub unsafe extern "C" fn _gl_alloc_nomem() -> *mut libc::c_void {
120 | |     *__errno_location() = 12 as libc::c_int;
121 | |     return 0 as *mut libc::c_void;
122 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/ialloc.rs:121:5
    |
121 |     return 0 as *mut libc::c_void;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/ialloc.rs:121:12
    |
121 |     return 0 as *mut libc::c_void;
    |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/localcharset.rs:391:1
    |
391 | / pub unsafe extern "C" fn locale_charset() -> *const libc::c_char {
392 | |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
393 | |     codeset = nl_langinfo(CODESET as libc::c_int);
394 | |     if codeset.is_null() {
...   |
400 | |     return codeset;
401 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/localcharset.rs:400:5
    |
400 |     return codeset;
    |     ^^^^^^^^^^^^^^^ help: remove `return`: `codeset`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/localcharset.rs:392:44
    |
392 |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/localcharset.rs:393:27
    |
393 |     codeset = nl_langinfo(CODESET as libc::c_int);
    |                           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:395:19
    |
395 |         codeset = b"\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/localcharset.rs:397:8
    |
397 |     if *codeset.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*codeset.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:398:19
    |
398 |         codeset = b"ASCII\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ASCII\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:38:9
   |
38 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mbrtoc32.rs:77:5
   |
77 |     return ret;
   |     ^^^^^^^^^^^ help: remove `return`: `ret`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/mbrtoc32.rs:55:15
   |
55 |         pwc = 0 as *mut char32_t;
   |               ^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<char32_t>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:56:13
   |
56 |         s = b"\0" as *const u8 as *const libc::c_char;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:57:13
   |
57 |         n = 1 as libc::c_int as size_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:63:14
   |
63 |     if ret < -(3 as libc::c_int) as size_t && mbsinit(ps) == 0 {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:66:15
   |
66 |     if ret == -(3 as libc::c_int) as size_t {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:8
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:53
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::from(*s as libc::c_uchar)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:75:16
   |
75 |         return 1 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: writing `&mut String` instead of `&mut str` involves a new object where a slice will do
  --> src/mkstemp_safer.rs:12:29
   |
12 | pub fn mkstemp_safer(templ: &mut String) -> libc::c_int {
   |                             ^^^^^^^^^^^
   |
   = note: `-W clippy::ptr-arg` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_arg
help: change this to
   |
12 ~ pub fn mkstemp_safer(templ: &mut str) -> libc::c_int {
13 ~     let c_str = std::ffi::CString::new(templ.to_owned()).expect("CString::new failed");
   |

warning: unneeded `return` statement
  --> src/mkstemp_safer.rs:25:9
   |
25 |         return fd_safer_flag(mkostemp(templ_ptr, flags), flags);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fd_safer_flag(mkostemp(templ_ptr, flags), flags)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/open_safer.rs:20:1
   |
20 | / pub unsafe extern "C" fn open_safer(
21 | |     mut file: *const libc::c_char,
22 | |     mut flags: libc::c_int,
23 | |     mut args: ...
...  |
31 | |     return fd_safer(open(file, flags, mode));
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/open_safer.rs:31:5
   |
31 |     return fd_safer(open(file, flags, mode));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fd_safer(open(file, flags, mode))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if _ { .. } else { .. }` is an expression
  --> src/open_safer.rs:25:5
   |
25 | /     let mut mode: mode_t = 0 as libc::c_int as mode_t;
26 | |     if flags & 0o100 as libc::c_int != 0 {
27 | |         let mut ap: ::core::ffi::VaListImpl;
28 | |         ap = args.clone();
29 | |         mode = ap.arg::<mode_t>();
30 | |     }
   | |_____^ help: it is more idiomatic to write: `let <mut> mode = if flags & 0o100 as libc::c_int != 0 { ..; ap.arg::<mode_t>() } else { 0 as libc::c_int as mode_t };`
   |
   = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
   = note: you might not need `mut` at all
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/open_safer.rs:25:28
   |
25 |     let mut mode: mode_t = 0 as libc::c_int as mode_t;
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary structure name repetition
  --> src/progname.rs:38:22
   |
38 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/progname.rs:49:29
   |
49 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/progname.rs:68:51
   |
68 |     let c_str = unsafe { std::ffi::CStr::from_ptr(argv0) };
   |                                                   ^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: called `map(<f>).unwrap_or(<a>)` on an `Option` value. This can be done more directly by calling `map_or(<a>, <f>)` instead
  --> src/progname.rs:71:17
   |
71 |     let slash = argv0_str.rfind('/').map(|index| &argv0_str[index + 1..]).unwrap_or(&argv0_str);
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::map-unwrap-or` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#map_unwrap_or
help: use `map_or(<a>, <f>)` instead
   |
71 -     let slash = argv0_str.rfind('/').map(|index| &argv0_str[index + 1..]).unwrap_or(&argv0_str);
71 +     let slash = argv0_str.rfind('/').map_or(&argv0_str, |index| &argv0_str[index + 1..]);
   |

warning: stripping a prefix manually
  --> src/progname.rs:77:49
   |
77 |                 program_invocation_short_name = base[3..].as_ptr() as *mut libc::c_char;
   |                                                 ^^^^^^^^^
   |
   = note: `-W clippy::manual-strip` implied by `-W clippy::all`
note: the prefix was tested here
  --> src/progname.rs:75:9
   |
75 |         if base.starts_with("lt-") {
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
help: try using the `strip_prefix` method
   |
75 ~         if let Some(<stripped>) = base.strip_prefix("lt-") {
76 |             unsafe {
77 ~                 program_invocation_short_name = <stripped>.as_ptr() as *mut libc::c_char;
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:81:28
   |
81 |             program_name = base.as_ptr() as *const libc::c_char;
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `base.as_ptr().cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/propername_lite.rs:8:1
   |
8  | / pub unsafe extern "C" fn proper_name_lite(
9  | |     mut name_ascii: *const libc::c_char,
10 | |     mut name_utf8: *const libc::c_char,
11 | | ) -> *const libc::c_char {
...  |
23 | |     };
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/propername_lite.rs:13:5
   |
13 | /     return if translation != name_ascii {
14 | |         translation
15 | |     } else if c_strcasecmp(
16 | |         locale_charset(),
...  |
22 | |         name_ascii
23 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     if translation != name_ascii {
14 +         translation
15 +     } else if c_strcasecmp(
16 +         locale_charset(),
17 +         b"UTF-8\0" as *const u8 as *const libc::c_char,
18 +     ) == 0 as libc::c_int
19 +     {
20 +         name_utf8
21 +     } else {
22 +         name_ascii
23 +     }
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/propername_lite.rs:17:9
   |
17 |         b"UTF-8\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
   --> src/quotearg.rs:141:5
    |
141 |     return iswprint(wc);
    |     ^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `iswprint(wc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:146:9
    |
146 |         ps as *mut libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:153:5
    |
153 |     b"literal\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"literal\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:154:5
    |
154 |     b"shell\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:155:5
    |
155 |     b"shell-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:156:5
    |
156 |     b"shell-escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:157:5
    |
157 |     b"shell-escape-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:158:5
    |
158 |     b"c\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:159:5
    |
159 |     b"c-maybe\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c-maybe\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:160:5
    |
160 |     b"escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:161:5
    |
161 |     b"locale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"locale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:162:5
    |
162 |     b"clocale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"clocale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: use Option::map_or instead of an if let/else
   --> src/quotearg.rs:187:46
    |
187 |       let options_to_clone: &quoting_options = if let Some(ref opt) = o {
    |  ______________________________________________^
188 | |         opt
189 | |     } else {
190 | |         unsafe { &default_quoting_options }
191 | |     };
    | |_____^ help: try: `o.as_ref().map_or(unsafe { &default_quoting_options }, |opt| opt)`
    |
    = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: using `clone` on type `src::quotearg::quoting_options` which implements the `Copy` trait
   --> src/quotearg.rs:192:5
    |
192 |     options_to_clone.clone()
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try dereferencing it: `*options_to_clone`
    |
    = note: `-W clippy::clone-on-copy` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: this pattern creates a reference to a reference
   --> src/quotearg.rs:187:58
    |
187 |     let options_to_clone: &quoting_options = if let Some(ref opt) = o {
    |                                                          ^^^^^^^ help: try this: `opt`
    |
    = note: `-W clippy::needless-borrow` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:224:14
    |
224 |     let uc = c as u8;
    |              ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:234:11
    |
234 |     *p ^= ((i & 1 ^ r as i32) << shift) as u32;
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:234:21
    |
234 |     *p ^= ((i & 1 ^ r as i32) << shift) as u32;
    |                     ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:236:5
    |
236 |     r as i32
    |     ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/quotearg.rs:252:5
    |
252 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: use Option::map_or instead of an if let/else
   --> src/quotearg.rs:245:19
    |
245 |       let options = if let Some(ref mut opt) = o {
    |  ___________________^
246 | |         opt
247 | |     } else {
248 | |         unsafe { &mut default_quoting_options }
249 | |     };
    | |_____^ help: try: `o.as_mut().map_or(unsafe { &mut default_quoting_options }, |opt| opt)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:256:1
    |
256 | / pub unsafe extern "C" fn set_custom_quoting(
257 | |     mut o: *mut quoting_options,
258 | |     mut left_quote: *const libc::c_char,
259 | |     mut right_quote: *const libc::c_char,
...   |
269 | |     (*o).right_quote = right_quote;
270 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: only a `panic!` in `if`-then statement
   --> src/quotearg.rs:280:5
    |
280 | /     if style == custom_quoting_style {
281 | |         panic!("Custom quoting style is not allowed");
282 | |     }
    | |_____^ help: try: `assert!(!(style == custom_quoting_style), "Custom quoting style is not allowed");`
    |
    = note: `-W clippy::manual-assert` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert

warning: unneeded `return` statement
   --> src/quotearg.rs:316:5
    |
316 | /     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
317 | |         b"\"\0" as *const u8 as *const libc::c_char
318 | |     } else {
319 | |         b"'\0" as *const u8 as *const libc::c_char
320 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
316 ~     if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
317 +         b"\"\0" as *const u8 as *const libc::c_char
318 +     } else {
319 +         b"'\0" as *const u8 as *const libc::c_char
320 +     }
    |

warning: `0 as *const _` detected
   --> src/quotearg.rs:293:48
    |
293 |     let mut locale_code: *const libc::c_char = 0 as *const libc::c_char;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:298:34
    |
298 |     if c_strcasecmp(locale_code, b"UTF-8\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:301:19
    |
301 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:302:13
    |
302 |             b"\xE2\x80\x98\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x98\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:304:13
    |
304 |             b"\xE2\x80\x99\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x99\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:307:34
    |
307 |     if c_strcasecmp(locale_code, b"GB18030\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GB18030\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:310:19
    |
310 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:311:13
    |
311 |             b"\xA1\x07e\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\x07e\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:313:13
    |
313 |             b"\xA1\xAF\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\xAF\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:316:36
    |
316 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:316:36
    |
316 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:317:9
    |
317 |         b"\"\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:319:9
    |
319 |         b"'\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/quotearg.rs:823:28
    |
823 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `bytes != 0 as libc::c_int as libc::c_ulong`
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (122/25)
   --> src/quotearg.rs:322:22
    |
322 | unsafe extern "C" fn quotearg_buffer_restyled(
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (822/100)
    --> src/quotearg.rs:322:1
     |
322  | / unsafe extern "C" fn quotearg_buffer_restyled(
323  | |     mut buffer: *mut libc::c_char,
324  | |     mut buffersize: size_t,
325  | |     mut arg: *const libc::c_char,
...    |
1175 | |     };
1176 | | }
     | |_^
     |
     = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/quotearg.rs:1146:13
     |
1146 | /             return quotearg_buffer_restyled(
1147 | |                 buffer,
1148 | |                 buffersize,
1149 | |                 arg,
...    |
1155 | |                 right_quote,
1156 | |             );
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1146 ~             quotearg_buffer_restyled(
1147 +                 buffer,
1148 +                 buffersize,
1149 +                 arg,
1150 +                 argsize,
1151 +                 quoting_style,
1152 +                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1153 +                 0 as *const libc::c_uint,
1154 +                 left_quote,
1155 +                 right_quote,
1156 +             )
     |

warning: unneeded `return` statement
    --> src/quotearg.rs:1173:13
     |
1173 |             return len;
     |             ^^^^^^^^^^^ help: remove `return`: `len`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:336:27
    |
336 |     let mut len: size_t = 0 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:337:39
    |
337 |     let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:338:49
    |
338 |     let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:339:40
    |
339 |     let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:342:12
    |
342 |         == 1 as libc::c_int as libc::c_ulong;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:343:48
    |
343 |     let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:367:40
    |
367 |             left_quote = gettext_quote(b"`\0".as_ptr() as *const libc::c_char, quoting_style);
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"`\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:368:41
    |
368 |             right_quote = gettext_quote(b"'\0".as_ptr() as *const libc::c_char, quoting_style);
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"'\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:374:36
    |
374 |                     *buffer.offset(len as isize) = *quote_string;
    |                                    ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:374:36
    |
374 |                     *buffer.offset(len as isize) = *quote_string;
    |                                    ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:411:32
    |
411 |                 *buffer.offset(len as isize) = '"' as i8;
    |                                ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:411:32
    |
411 |                 *buffer.offset(len as isize) = '"' as i8;
    |                                ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:416:24
    |
416 |         quote_string = b"\"\0".as_ptr() as *const libc::c_char;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"\"\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:427:1
    |
427 | / match current_block_48 {
428 | |     2266290538919981374 => {
429 | |         if !elide_outer_quotes {
430 | |             backslash_escapes = true;
...   |
434 | |     _ => {}
435 | | }
    | |_^
    |
    = note: `-W clippy::single-match` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
427 + if current_block_48 == 2266290538919981374 {
428 +     if !elide_outer_quotes {
429 +         backslash_escapes = true;
430 +     }
431 +     current_block_48 = 14141891332124833771;
432 + }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:437:1
    |
437 | / match current_block_48 {
438 | |     14141891332124833771 => {
439 | |         quoting_style = shell_always_quoting_style;
440 | |         if !elide_outer_quotes {
...   |
449 | |     _ => {}
450 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
437 + if current_block_48 == 14141891332124833771 {
438 +     quoting_style = shell_always_quoting_style;
439 +     if !elide_outer_quotes {
440 +         if len < buffersize {
441 +             *buffer.offset(len as isize) = '\'' as i8;
442 +         }
443 +         len = len.wrapping_add(1);
444 +     }
445 +     quote_string = b"'\0".as_ptr() as *const libc::c_char;
446 +     quote_string_len = 1;
447 + }
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:442:32
    |
442 |                 *buffer.offset(len as isize) = '\'' as i8;
    |                                ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:442:32
    |
442 |                 *buffer.offset(len as isize) = '\'' as i8;
    |                                ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:446:24
    |
446 |         quote_string = b"'\0".as_ptr() as *const libc::c_char;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"'\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: equality checks against false can be replaced by a negation
   --> src/quotearg.rs:453:7
    |
453 |   while if argsize == u64::MAX {
    |  _______^
454 | |     *arg.offset(i as isize) == 0
455 | | } else {
456 | |     i == argsize
457 | | } == false
    | |__________^
    |
    = note: `-W clippy::bool-comparison` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_comparison
help: try simplifying it as shown
    |
453 ~ while !(if argsize == u64::MAX {
454 +     *arg.offset(i as isize) == 0
455 + } else {
456 +     i == argsize
457 + })
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:454:17
    |
454 |     *arg.offset(i as isize) == 0
    |                 ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:454:17
    |
454 |     *arg.offset(i as isize) == 0
    |                 ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:464:16
    |
464 |             if backslash_escapes as libc::c_int != 0
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:466:24
    |
466 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:466:24
    |
466 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:475:21
    |
475 | /                         argsize
476 | |                     })
    | |_____________________^
    |
    = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
    = note: the end suggestion probably needs some adjustments to use the expression result correctly
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
475 ~                     }
476 ~                     argsize)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:470:28
    |
470 |                         && (1 as libc::c_int as libc::c_ulong) < quote_string_len
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:478:21
    |
478 |                     arg.offset(i as isize) as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.offset(i as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:478:32
    |
478 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:478:32
    |
478 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:479:21
    |
479 |                     quote_string as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `quote_string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:489:17
    |
489 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:489:29
    |
489 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:489:29
    |
489 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:490:19
    |
490 |             match c as libc::c_int {
    |                   ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:500:37
    |
500 |             unsafe { *buffer.offset(len as isize) = '\'' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:500:37
    |
500 |             unsafe { *buffer.offset(len as isize) = '\'' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:504:37
    |
504 |             unsafe { *buffer.offset(len as isize) = '$' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:504:37
    |
504 |             unsafe { *buffer.offset(len as isize) = '$' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:508:37
    |
508 |             unsafe { *buffer.offset(len as isize) = '\'' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:508:37
    |
508 |             unsafe { *buffer.offset(len as isize) = '\'' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:514:33
    |
514 |         unsafe { *buffer.offset(len as isize) = '\\' as i8; }
    |                                 ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:514:33
    |
514 |         unsafe { *buffer.offset(len as isize) = '\\' as i8; }
    |                                 ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:519:47
    |
519 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:519:47
    |
519 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:519:91
    |
519 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                                                                           ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:519:91
    |
519 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                                                                           ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:522:37
    |
522 |             unsafe { *buffer.offset(len as isize) = '0' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:522:37
    |
522 |             unsafe { *buffer.offset(len as isize) = '0' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:526:37
    |
526 |             unsafe { *buffer.offset(len as isize) = '0' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:526:37
    |
526 |             unsafe { *buffer.offset(len as isize) = '0' as i8; }
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:530:9
    |
530 |     c = '0' as u8;
    |         ^^^^^^^^^ help: use a byte literal instead: `b'0'`
    |
    = note: `-W clippy::char-lit-as-u8` implied by `-W clippy::all`
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:532:19
    |
532 | } else if flags & QA_ELIDE_NULL_BYTES as i32 != 0 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:551:48
    |
551 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:552:59
    |
552 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:554:44
    |
554 |   ...                   && *arg
    |  __________________________^
555 | | ...                       .offset(
556 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
557 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
554 ~                                         && i32::from(*arg
555 +                                             .offset(
556 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
557 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:556:49
    |
556 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:556:49
    |
556 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:556:64
    |
556 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:559:47
    |
559 |   ...                   match *arg
    |  _____________________________^
560 | | ...                       .offset(
561 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
562 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
559 ~                                         match i32::from(*arg
560 +                                             .offset(
561 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
562 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:561:49
    |
561 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:561:49
    |
561 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:561:64
    |
561 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:569:53
    |
569 |   ...                   c = *arg
    |  ___________________________^
570 | | ...                       .offset(
571 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
572 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:571:57
    |
571 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:571:57
    |
571 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:571:72
    |
571 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:574:67
    |
574 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:577:84
    |
577 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:577:68
    |
577 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:577:68
    |
577 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:580:49
    |
580 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:582:84
    |
582 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:582:68
    |
582 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:582:68
    |
582 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:585:49
    |
585 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:587:84
    |
587 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:587:68
    |
587 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:587:68
    |
587 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:590:49
    |
590 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:592:84
    |
592 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:592:68
    |
592 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:592:68
    |
592 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:595:49
    |
595 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:614:48
    |
614 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:615:59
    |
615 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:617:44
    |
617 |   ...                   && *arg
    |  __________________________^
618 | | ...                       .offset(
619 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
620 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
617 ~                                         && i32::from(*arg
618 +                                             .offset(
619 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
620 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:619:49
    |
619 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:619:49
    |
619 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:619:64
    |
619 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:622:47
    |
622 |   ...                   match *arg
    |  _____________________________^
623 | | ...                       .offset(
624 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
625 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
622 ~                                         match i32::from(*arg
623 +                                             .offset(
624 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
625 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:624:49
    |
624 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:624:49
    |
624 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:624:64
    |
624 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:632:53
    |
632 |   ...                   c = *arg
    |  ___________________________^
633 | | ...                       .offset(
634 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
635 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:634:57
    |
634 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:634:57
    |
634 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:634:72
    |
634 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:637:67
    |
637 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:640:84
    |
640 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:640:68
    |
640 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:640:68
    |
640 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:643:49
    |
643 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:645:84
    |
645 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:645:68
    |
645 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:645:68
    |
645 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:648:49
    |
648 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:650:84
    |
650 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:650:68
    |
650 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:650:68
    |
650 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:653:49
    |
653 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:655:84
    |
655 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:655:68
    |
655 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:655:68
    |
655 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:658:49
    |
658 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:673:27
    |
673 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:673:27
    |
673 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:677:27
    |
677 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:677:27
    |
677 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:681:27
    |
681 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:681:27
    |
681 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:685:27
    |
685 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:685:27
    |
685 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:689:27
    |
689 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:689:27
    |
689 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:693:27
    |
693 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:693:27
    |
693 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:697:27
    |
697 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:697:27
    |
697 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:717:25
    |
717 | /                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
718 | |                             == '\0' as i32) as libc::c_int
    | |__________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
717 ~                         i32::from(*arg.offset(1 as libc::c_int as isize) as libc::c_int
718 +                             == '\0' as i32)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:717:26
    |
717 |                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(1 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:720:25
    |
720 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(argsize == 1 as libc::c_int as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:720:37
    |
720 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:783:1
    |
783 | /     current_block = 253337042034819032;
784 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
783 + }
784 + current_block = 253337042034819032;
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:761:28
    |
761 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:761:28
    |
761 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:768:28
    |
768 |             *buffer.offset(len as isize) = '\\' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:768:28
    |
768 |             *buffer.offset(len as isize) = '\\' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:775:28
    |
775 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:775:28
    |
775 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `if _ { .. } else { .. }` is an expression
   --> src/quotearg.rs:798:21
    |
798 | /                     let mut printable: bool = false;
799 | |                     if unibyte_locale {
800 | |                         m = 1 as libc::c_int as size_t;
801 | |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
...   |
864 | |                         }
865 | |                     }
    | |_____________________^
    |
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
    |
798 ~                     let <mut> printable = if unibyte_locale { ..; *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
799 +                             as libc::c_int
800 +                             & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
801 +                             != 0 as libc::c_int } else { ..; false };
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:800:29
    |
800 |                         m = 1 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:801:37
    |
801 |                           printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |  _____________________________________^
802 | |                             as libc::c_int
    | |__________________________________________^ help: try: `i32::from(*(*__ctype_b_loc()).offset(c as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:801:64
    |
801 |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |                                                                ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:803:31
    |
803 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISprint as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/quotearg.rs:803:31
    |
803 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/quotearg.rs:803:31
    |
803 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:803:31
    |
803 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:811:29
    |
811 |                         m = 0 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:819:42
    |
819 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:819:42
    |
819 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:823:39
    |
823 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:824:41
    |
824 | ...                   if bytes == -(1 as libc::c_int) as size_t {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:826:48
    |
826 | ...                   } else if bytes == -(2 as libc::c_int) as size_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:829:40
    |
829 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i.wrapping_add(m) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:829:52
    |
829 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:829:52
    |
829 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:833:37
    |
833 | ...                   m;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:837:40
    |
837 | ...                   && elide_outer_quotes as libc::c_int != 0
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:839:44
    |
839 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:839:44
    |
839 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:842:41
    |
842 | ...                   j = 1 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:844:47
    |
844 |   ...                   match *arg
    |  _____________________________^
845 | | ...                       .offset(i.wrapping_add(m).wrapping_add(j) as isize)
846 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
844 ~                                         match i32::from(*arg
845 +                                             .offset(i.wrapping_add(m).wrapping_add(j) as isize))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:845:53
    |
845 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:845:53
    |
845 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:855:41
    |
855 | ...                   j;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:869:72
    |
869 |     let buffer_slice = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                                                                        ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:879:34
    |
879 |                     buffer_slice[len as usize] = '\'' as i8;
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:883:34
    |
883 |                     buffer_slice[len as usize] = '$' as i8;
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:887:34
    |
887 |                     buffer_slice[len as usize] = '\'' as i8;
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:893:30
    |
893 |                 buffer_slice[len as usize] = '\\' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:897:46
    |
897 |                 buffer_slice[len as usize] = ('0' as i32 + (c as i32 >> 6)) as i8;
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:897:61
    |
897 |                 buffer_slice[len as usize] = ('0' as i32 + (c as i32 >> 6)) as i8;
    |                                                             ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:897:30
    |
897 |                 buffer_slice[len as usize] = ('0' as i32 + (c as i32 >> 6)) as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:901:46
    |
901 |                 buffer_slice[len as usize] = ('0' as i32 + ((c as i32 >> 3) & 7)) as i8;
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:901:62
    |
901 |                 buffer_slice[len as usize] = ('0' as i32 + ((c as i32 >> 3) & 7)) as i8;
    |                                                              ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:901:30
    |
901 |                 buffer_slice[len as usize] = ('0' as i32 + ((c as i32 >> 3) & 7)) as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:904:17
    |
904 |             c = ('0' as i32 + (c as i32 & 7)) as u8;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:904:17
    |
904 |             c = ('0' as i32 + (c as i32 & 7)) as u8;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:904:32
    |
904 |             c = ('0' as i32 + (c as i32 & 7)) as u8;
    |                                ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:907:30
    |
907 |                 buffer_slice[len as usize] = '\\' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:917:30
    |
917 |                 buffer_slice[len as usize] = '\'' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:921:30
    |
921 |                 buffer_slice[len as usize] = '\'' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:927:42
    |
927 |             buffer_slice[len as usize] = c as i8;
    |                                          ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:927:26
    |
927 |             buffer_slice[len as usize] = c as i8;
    |                          ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:931:13
    |
931 |         c = unsafe { *arg.offset(i as isize) } as u8;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:931:34
    |
931 |         c = unsafe { *arg.offset(i as isize) } as u8;
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:931:34
    |
931 |         c = unsafe { *arg.offset(i as isize) } as u8;
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/quotearg.rs:942:21
    |
942 | /                     if i != 0 as libc::c_int as libc::c_ulong {
943 | |                         current_block = 253337042034819032;
944 | |                     } else {
945 | |                         current_block = 4634307283396172174;
946 | |                     }
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:942:29
    |
942 |                     if i != 0 as libc::c_int as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:950:28
    |
950 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:950:28
    |
950 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:951:28
    |
951 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:975:13
    |
975 | /             match current_block {
976 | |                 7549413860336125482 => {
977 | |                     current_block = 13059411171234995867;
978 | |                 }
979 | |                 _ => {}
980 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
975 ~             if current_block == 7549413860336125482 {
976 +                 current_block = 13059411171234995867;
977 +             }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:981:13
    |
981 | /             match current_block {
982 | |                 13059411171234995867 => {
983 | |                     current_block = 16620298045565028098;
984 | |                 }
985 | |                 _ => {}
986 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
981 ~             if current_block == 13059411171234995867 {
982 +                 current_block = 16620298045565028098;
983 +             }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:987:13
    |
987 | /             match current_block {
988 | |                 16620298045565028098 => {
989 | |                     current_block = 15155215915847730705;
990 | |                 }
991 | |                 _ => {}
992 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
987 ~             if current_block == 16620298045565028098 {
988 +                 current_block = 15155215915847730705;
989 +             }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:993:13
     |
993  | /             match current_block {
994  | |                 15155215915847730705 => {
995  | |                     if quoting_style as libc::c_uint
996  | |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1004 | |                 _ => {}
1005 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
993  ~             if current_block == 15155215915847730705 {
994  +                 if quoting_style as libc::c_uint
995  +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
996  +                     && elide_outer_quotes as libc::c_int != 0
997  +                 {
998  +                     current_block = 7928555609993211441;
999  +                     break 's_25;
1000 +                 }
1001 +                 current_block = 253337042034819032;
1002 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:996:28
    |
996 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:996:28
    |
996 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:997:28
    |
997 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1006:13
     |
1006 | /             match current_block {
1007 | |                 253337042034819032 => {
1008 | |                     if !((backslash_escapes as libc::c_int != 0
1009 | |                         && quoting_style as libc::c_uint
...    |
1033 | |                 _ => {}
1034 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1006 ~             if current_block == 253337042034819032 {
1007 +                 if !((backslash_escapes as libc::c_int != 0
1008 +                     && quoting_style as libc::c_uint
1009 +                         != shell_always_quoting_style as libc::c_int as libc::c_uint
1010 +                     || elide_outer_quotes as libc::c_int != 0)
1011 +                     && !quote_these_too.is_null()
1012 +                     && *quote_these_too
1013 +                         .offset(
1014 +                             (c as libc::c_ulong)
1015 +                                 .wrapping_div(
1016 +                                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1017 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1018 +                                 ) as isize,
1019 +                         )
1020 +                         >> (c as libc::c_ulong)
1021 +                             .wrapping_rem(
1022 +                                 (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1023 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1024 +                             ) & 1 as libc::c_int as libc::c_uint != 0)
1025 +                     && !is_right_quote
1026 +                 {
1027 +                     current_block = 4476262310586904498;
1028 +                 } else {
1029 +                     current_block = 3173013908131212616;
1030 +                 }
1031 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1008:27
     |
1008 |                     if !((backslash_escapes as libc::c_int != 0
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1010:32
     |
1010 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1010:32
     |
1010 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1011:28
     |
1011 |                         || elide_outer_quotes as libc::c_int != 0)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1015:33
     |
1015 | / ...                   (c as libc::c_ulong)
1016 | | ...                       .wrapping_div(
1017 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1018 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1019 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1015:33
     |
1015 | / ...                   (c as libc::c_ulong)
1016 | | ...                       .wrapping_div(
1017 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1018 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1019 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1015:33
     |
1015 | ...                   (c as libc::c_ulong)
     |                       ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1018:59
     |
1018 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1021:32
     |
1021 | ...                   >> (c as libc::c_ulong)
     |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1024:55
     |
1024 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1025:37
     |
1025 | ...                   ) & 1 as libc::c_int as libc::c_uint != 0)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1035:13
     |
1035 | /             match current_block {
1036 | |                 3173013908131212616 => {
1037 | |                     if elide_outer_quotes {
1038 | |                         current_block = 7928555609993211441;
...    |
1070 | |                 _ => {}
1071 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1035 ~             if current_block == 3173013908131212616 {
1036 +                 if elide_outer_quotes {
1037 +                     current_block = 7928555609993211441;
1038 +                     break 's_25;
1039 +                 }
1040 +                 escaping = 1 as libc::c_int != 0;
1041 +                 if quoting_style as libc::c_uint
1042 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1043 +                     && !pending_shell_escape_end
1044 +                 {
1045 +                     if len < buffersize {
1046 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1047 +                     }
1048 +                     len = len.wrapping_add(1);
1049 +                     len;
1050 +                     if len < buffersize {
1051 +                         *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
1052 +                     }
1053 +                     len = len.wrapping_add(1);
1054 +                     len;
1055 +                     if len < buffersize {
1056 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1057 +                     }
1058 +                     len = len.wrapping_add(1);
1059 +                     len;
1060 +                     pending_shell_escape_end = 1 as libc::c_int != 0;
1061 +                 }
1062 +                 if len < buffersize {
1063 +                     *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
1064 +                 }
1065 +                 len = len.wrapping_add(1);
1066 +                 len;
1067 +                 current_block = 4476262310586904498;
1068 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1043:28
     |
1043 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1043:28
     |
1043 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1047:60
     |
1047 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1047:44
     |
1047 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1047:44
     |
1047 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1050:25
     |
1050 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1052:60
     |
1052 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1052:44
     |
1052 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1052:44
     |
1052 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1055:25
     |
1055 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1057:60
     |
1057 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1057:44
     |
1057 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1057:44
     |
1057 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1060:25
     |
1060 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1064:56
     |
1064 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1064:40
     |
1064 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1064:40
     |
1064 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1067:21
     |
1067 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1072:13
     |
1072 | /             match current_block {
1073 | |                 4476262310586904498 => {
1074 | |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1075 | |                         if len < buffersize {
...    |
1096 | |                 _ => {}
1097 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1072 ~             if current_block == 4476262310586904498 {
1073 +                 if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1074 +                     if len < buffersize {
1075 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1076 +                     }
1077 +                     len = len.wrapping_add(1);
1078 +                     len;
1079 +                     if len < buffersize {
1080 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1081 +                     }
1082 +                     len = len.wrapping_add(1);
1083 +                     len;
1084 +                     pending_shell_escape_end = 0 as libc::c_int != 0;
1085 +                 }
1086 +                 if len < buffersize {
1087 +                     *buffer.offset(len as isize) = c as libc::c_char;
1088 +                 }
1089 +                 len = len.wrapping_add(1);
1090 +                 len;
1091 +                 if !c_and_shell_quote_compat {
1092 +                     all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
1093 +                 }
1094 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1074:24
     |
1074 |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1076:60
     |
1076 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1076:44
     |
1076 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1076:44
     |
1076 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1079:25
     |
1079 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1081:60
     |
1081 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1081:44
     |
1081 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1081:44
     |
1081 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1084:25
     |
1084 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
    --> src/quotearg.rs:1088:56
     |
1088 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1088:40
     |
1088 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1088:40
     |
1088 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1091:21
     |
1091 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1099:13
     |
1099 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1138:5
     |
1138 | /     match current_block {
1139 | |         7928555609993211441 => {
1140 | |             if quoting_style as libc::c_uint
1141 | |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1174 | |         }
1175 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1138 ~     if current_block == 7928555609993211441 {
1139 +         if quoting_style as libc::c_uint
1140 +             == shell_always_quoting_style as libc::c_int as libc::c_uint
1141 +             && backslash_escapes as libc::c_int != 0
1142 +         {
1143 +             quoting_style = shell_escape_always_quoting_style;
1144 +         }
1145 +         return quotearg_buffer_restyled(
1146 +             buffer,
1147 +             buffersize,
1148 +             arg,
1149 +             argsize,
1150 +             quoting_style,
1151 +             flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1152 +             0 as *const libc::c_uint,
1153 +             left_quote,
1154 +             right_quote,
1155 +         );
1156 +     } else {
1157 +         if !quote_string.is_null() && !elide_outer_quotes {
1158 +             while *quote_string != 0 {
1159 +                 if len < buffersize {
1160 +                     *buffer.offset(len as isize) = *quote_string;
1161 +                 }
1162 +                 len = len.wrapping_add(1);
1163 +                 len;
1164 +                 quote_string = quote_string.offset(1);
1165 +                 quote_string;
1166 +             }
1167 +         }
1168 +         if len < buffersize {
1169 +             *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
1170 +         }
1171 +         return len;
1172 ~     };
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1141:20
     |
1141 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1141:20
     |
1141 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1142:20
     |
1142 |                 && backslash_escapes as libc::c_int != 0
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1152:26
     |
1152 |                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *const _` detected
    --> src/quotearg.rs:1153:17
     |
1153 |                 0 as *const libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_uint>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1162:40
     |
1162 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1162:40
     |
1162 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1165:21
     |
1165 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1167:21
     |
1167 |                     quote_string;
     |                     ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1171:48
     |
1171 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1171:32
     |
1171 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1171:32
     |
1171 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1178:1
     |
1178 | / pub fn quotearg_buffer(
1179 | |     buffer: &mut [c_char],
1180 | |     arg: &[c_char],
1181 | |     o: Option<&quoting_options>,
...    |
1205 | |     r.try_into().unwrap()
1206 | | }
     | |_^
     |
     = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
note: first possible panic found here
    --> src/quotearg.rs:1194:13
     |
1194 |             buffer.len().try_into().unwrap(),
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1178:1
     |
1178 | / pub fn quotearg_buffer(
1179 | |     buffer: &mut [c_char],
1180 | |     arg: &[c_char],
1181 | |     o: Option<&quoting_options>,
...    |
1205 | |     r.try_into().unwrap()
1206 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1209:1
     |
1209 | / pub unsafe extern "C" fn quotearg_alloc(
1210 | |     mut arg: *const libc::c_char,
1211 | |     mut argsize: size_t,
1212 | |     mut o: *const quoting_options,
1213 | | ) -> *mut libc::c_char {
1214 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1215 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1209:1
     |
1209 | / pub unsafe extern "C" fn quotearg_alloc(
1210 | |     mut arg: *const libc::c_char,
1211 | |     mut argsize: size_t,
1212 | |     mut o: *const quoting_options,
1213 | | ) -> *mut libc::c_char {
1214 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1215 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1214:5
     |
1214 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1214:45
     |
1214 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |                                             ^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<size_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1217:1
     |
1217 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1218 | |     mut arg: *const libc::c_char,
1219 | |     mut argsize: size_t,
1220 | |     mut size: *mut size_t,
...    |
1263 | |     return buf;
1264 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1217:1
     |
1217 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1218 | |     mut arg: *const libc::c_char,
1219 | |     mut argsize: size_t,
1220 | |     mut size: *mut size_t,
...    |
1263 | |     return buf;
1264 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1263:5
     |
1263 |     return buf;
     |     ^^^^^^^^^^^ help: remove `return`: `buf`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1223:41
     |
1223 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1224 | |         o
1225 | |     } else {
1226 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1227 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1226:9
     |
1226 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1230:11
     |
1230 |           | (if !size.is_null() {
     |  ___________^
1231 | |             0 as libc::c_int
1232 | |         } else {
1233 | |             QA_ELIDE_NULL_BYTES as libc::c_int
1234 | |         });
     | |__________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1233:13
     |
1233 |             QA_ELIDE_NULL_BYTES as libc::c_int
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1236:9
     |
1236 |         0 as *mut libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1237:9
     |
1237 |         0 as libc::c_int as size_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1246:23
     |
1246 |         .wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1261:38
     |
1261 |         *size = bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1273:9
     |
1269 | /         let mut init = slotvec {
1270 | |             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1271 | |             val: slot0.as_ptr() as *mut _,
1272 | |         };
     | |__________- unnecessary `let` binding
1273 |           init
     |           ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1269 ~         
1270 ~         slotvec {
1271 +             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1272 +             val: slot0.as_ptr() as *mut _,
1273 +         }
     |

warning: borrow as raw pointer
    --> src/quotearg.rs:1277:5
     |
1277 |     &slotvec0 as *const slotvec as *mut slotvec
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1280:1
     |
1280 | / pub unsafe extern "C" fn quotearg_free() {
1281 | |     let mut sv: *mut slotvec = slotvec;
1282 | |     let mut i: libc::c_int = 0;
1283 | |     i = 1 as libc::c_int;
...    |
1298 | |     nslots = 1 as libc::c_int;
1299 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1280:1
     |
1280 | / pub unsafe extern "C" fn quotearg_free() {
1281 | |     let mut sv: *mut slotvec = slotvec;
1282 | |     let mut i: libc::c_int = 0;
1283 | |     i = 1 as libc::c_int;
...    |
1298 | |     nslots = 1 as libc::c_int;
1299 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1285:14
     |
1285 |         free((*sv.offset(i as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(i as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: statement with no effect
    --> src/quotearg.rs:1287:9
     |
1287 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1290:14
     |
1290 |         free((*sv.offset(0 as libc::c_int as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(0 as libc::c_int as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: borrow as raw pointer
    --> src/quotearg.rs:1294:14
     |
1294 |     if sv != &mut slotvec0 as *mut slotvec {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1295:14
     |
1295 |         free(sv as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
    --> src/quotearg.rs:1377:5
     |
1377 |     return val;
     |     ^^^^^^^^^^^ help: remove `return`: `val`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1308:39
     |
1308 |       let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |  _______________________________________^
1309 | |         < 9223372036854775807 as libc::c_long
1310 | |     {
1311 | |         2147483647 as libc::c_int as libc::c_long
1312 | |     } else {
1313 | |         9223372036854775807 as libc::c_long
1314 | |     }) as libc::c_int;
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1308:43
     |
1308 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1311:9
     |
1311 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/quotearg.rs:1319:44
     |
1319 |         let mut preallocated: bool = sv == &mut slotvec0 as *mut slotvec;
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1320:37
     |
1320 |         let mut new_nslots: idx_t = nslots as idx_t;
     |                                     ^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1321:14
     |
1321 |           sv = xpalloc(
     |  ______________^
1322 | |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1323 | |                 as *mut libc::c_void,
1324 | |             &mut new_nslots,
...    |
1327 | |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1328 | |         ) as *mut slotvec;
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1321 ~         sv = xpalloc(
1322 +             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1323 +                 as *mut libc::c_void,
1324 +             &mut new_nslots,
1325 +             (n - nslots + 1 as libc::c_int) as idx_t,
1326 +             nslots_max as ptrdiff_t,
1327 +             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1328 ~         ).cast::<src::quotearg::slotvec>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1322:13
     |
1322 | /             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1323 | |                 as *mut libc::c_void,
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `(if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv }).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/quotearg.rs:1322:13
     |
1322 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1322:17
     |
1322 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(preallocated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1322:52
     |
1322 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                                                    ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<slotvec>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1325:13
     |
1325 |             (n - nslots + 1 as libc::c_int) as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n - nslots + 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1326:13
     |
1326 |             nslots_max as ptrdiff_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots_max)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/quotearg.rs:1327:13
     |
1327 |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1334:13
     |
1334 |             sv.offset(nslots as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.offset(nslots as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1336:13
     |
1336 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1336:28
     |
1336 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1339:18
     |
1339 |         nslots = new_nslots as libc::c_int;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1343:53
     |
1343 |     let mut flags: libc::c_int = (*options).flags | QA_ELIDE_NULL_BYTES as libc::c_int;
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1356:35
     |
1356 |         size = qsize.wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1359:18
     |
1359 |             free(val as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/quotearg.rs:1362:13
     |
1362 |         let ref mut fresh0 = (*sv.offset(n as isize)).val;
     |         ----^^^^^^^^^^^^^^-------------------------------- help: try: `let fresh0 = &mut (*sv.offset(n as isize)).val;`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1380:1
     |
1380 | / pub fn quotearg_n(
1381 | |     n: i32,
1382 | |     arg: &CStr,
1383 | | ) -> *mut libc::c_char {
...    |
1391 | |     }
1392 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1395:1
     |
1395 | / pub fn quotearg_n_mem(
1396 | |     n: i32,
1397 | |     arg: &CStr,
1398 | | ) -> *mut libc::c_char {
...    |
1402 | |     }
1403 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1412:1
     |
1412 | / pub unsafe extern "C" fn quotearg_mem(
1413 | |     mut arg: *const libc::c_char,
1414 | |     mut argsize: size_t,
1415 | | ) -> *mut libc::c_char {
1416 | |     let arg_cstr = CStr::from_ptr(arg);
1417 | | return quotearg_n_mem(0, arg_cstr);
1418 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1412:1
     |
1412 | / pub unsafe extern "C" fn quotearg_mem(
1413 | |     mut arg: *const libc::c_char,
1414 | |     mut argsize: size_t,
1415 | | ) -> *mut libc::c_char {
1416 | |     let arg_cstr = CStr::from_ptr(arg);
1417 | | return quotearg_n_mem(0, arg_cstr);
1418 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1417:1
     |
1417 | return quotearg_n_mem(0, arg_cstr);
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_mem(0, arg_cstr)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1420:1
     |
1420 | / pub fn quotearg_n_style(
1421 | |     n: i32,
1422 | |     s: quoting_style,
1423 | |     arg: &CStr,
...    |
1428 | |     }
1429 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1432:1
     |
1432 | / pub fn quotearg_n_style_mem(
1433 | |     n: i32,
1434 | |     s: quoting_style,
1435 | |     arg: &str,
...    |
1442 | |     }
1443 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1441:31
     |
1441 |         quotearg_n_options(n, arg.as_ptr() as *const libc::c_char, argsize, &o)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1446:1
     |
1446 | / pub fn quotearg_style(
1447 | |     s: quoting_style,
1448 | |     arg: &CStr,
1449 | | ) -> CString {
1450 | |     let result_ptr = quotearg_n_style(0, s, arg);
1451 | |     unsafe { CString::from_raw(result_ptr) }
1452 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1455:1
     |
1455 | / pub fn quotearg_style_mem(
1456 | |     s: quoting_style,
1457 | |     arg: &CStr,
1458 | | ) -> String {
...    |
1461 | |     unsafe { CStr::from_ptr(result_ptr).to_string_lossy().into_owned() }
1462 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1465:1
     |
1465 | / pub unsafe extern "C" fn quotearg_char_mem(
1466 | |     mut arg: *const libc::c_char,
1467 | |     mut argsize: size_t,
1468 | |     mut ch: libc::c_char,
...    |
1479 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1480 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1465:1
     |
1465 | / pub unsafe extern "C" fn quotearg_char_mem(
1466 | |     mut arg: *const libc::c_char,
1467 | |     mut argsize: size_t,
1468 | |     mut ch: libc::c_char,
...    |
1479 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1480 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1479:5
     |
1479 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
    --> src/quotearg.rs:1474:21
     |
1474 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1475:22
     |
1475 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1479:63
     |
1479 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |                                                               ^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1482:1
     |
1482 | / pub fn quotearg_char(arg: &CStr, ch: char) -> CString {
1483 | |     let ch_as_c_char = ch as libc::c_char;
1484 | |     let result_ptr = unsafe {
1485 | |         quotearg_char_mem(arg.as_ptr(), 18446744073709551615 as libc::c_ulong, ch_as_c_char)
1486 | |     };
1487 | |     unsafe { CStr::from_ptr(result_ptr).to_owned() }
1488 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1491:1
     |
1491 | / pub fn quotearg_colon(arg: &CStr) -> CString {
1492 | |     quotearg_char(arg, ':' as char)
1493 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting to the same type is unnecessary (`char` -> `char`)
    --> src/quotearg.rs:1492:24
     |
1492 |     quotearg_char(arg, ':' as char)
     |                        ^^^^^^^^^^^ help: try: `':'`
     |
     = note: `-W clippy::unnecessary-cast` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1496:1
     |
1496 | / pub fn quotearg_colon_mem(arg: &CStr) -> String {
1497 | |     let argsize = arg.to_bytes().len() as u64;
1498 | |     let result_ptr: *mut libc::c_char = unsafe { quotearg_char_mem(arg.as_ptr(), argsize, ':' as i32 as c_char) };
1499 | |     unsafe { CStr::from_ptr(result_ptr).to_string_lossy().into_owned() }
1500 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1503:1
     |
1503 | / pub fn quotearg_n_style_colon(
1504 | |     n: i32,
1505 | |     s: quoting_style,
1506 | |     arg: &CStr,
...    |
1528 | |     unsafe { CString::from_raw(result_ptr) }
1529 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1516:42
     |
1516 |     set_char_quoting(Some(&mut options), ':' as i32 as i8, 1);
     |                                          ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1524:13
     |
1524 |             &mut options,
     |             ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1532:1
     |
1532 | / pub unsafe extern "C" fn quotearg_n_custom(
1533 | |     mut n: libc::c_int,
1534 | |     mut left_quote: *const libc::c_char,
1535 | |     mut right_quote: *const libc::c_char,
...    |
1544 | |     );
1545 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1532:1
     |
1532 | / pub unsafe extern "C" fn quotearg_n_custom(
1533 | |     mut n: libc::c_int,
1534 | |     mut left_quote: *const libc::c_char,
1535 | |     mut right_quote: *const libc::c_char,
...    |
1544 | |     );
1545 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1538:5
     |
1538 | /     return quotearg_n_custom_mem(
1539 | |         n,
1540 | |         left_quote,
1541 | |         right_quote,
1542 | |         arg,
1543 | |         18446744073709551615 as libc::c_ulong,
1544 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1538 ~     quotearg_n_custom_mem(
1539 +         n,
1540 +         left_quote,
1541 +         right_quote,
1542 +         arg,
1543 +         18446744073709551615 as libc::c_ulong,
1544 +     )
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1547:1
     |
1547 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1548 | |     mut n: libc::c_int,
1549 | |     mut left_quote: *const libc::c_char,
1550 | |     mut right_quote: *const libc::c_char,
...    |
1556 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1557 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1547:1
     |
1547 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1548 | |     mut n: libc::c_int,
1549 | |     mut left_quote: *const libc::c_char,
1550 | |     mut right_quote: *const libc::c_char,
...    |
1556 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1557 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1556:5
     |
1556 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1556:48
     |
1556 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |                                                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1559:1
     |
1559 | / pub fn quotearg_custom(
1560 | |     left_quote: &str,
1561 | |     right_quote: &str,
1562 | |     arg: &str,
...    |
1577 | |     unsafe { std::ffi::CStr::from_ptr(result).to_string_lossy().into_owned() }
1578 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1564:24
     |
1564 |     let left_quote_c = std::ffi::CString::new(left_quote).unwrap();
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1559:1
     |
1559 | / pub fn quotearg_custom(
1560 | |     left_quote: &str,
1561 | |     right_quote: &str,
1562 | |     arg: &str,
...    |
1577 | |     unsafe { std::ffi::CStr::from_ptr(result).to_string_lossy().into_owned() }
1578 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1581:1
     |
1581 | / pub fn quotearg_custom_mem(
1582 | |     left_quote: &str,
1583 | |     right_quote: &str,
1584 | |     arg: &str,
...    |
1596 | |     unsafe { CStr::from_ptr(result_ptr).to_string_lossy().into_owned() } // Convert raw pointer to String
1597 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1590:13
     |
1590 |             left_quote.as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `left_quote.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1591:13
     |
1591 |             right_quote.as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `right_quote.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1592:13
     |
1592 |             arg.as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1608:5
     |
1601 | /     let mut init = quoting_options {
1602 | |         style: locale_quoting_style,
1603 | |         flags: 0 as libc::c_int,
1604 | |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1605 | |         left_quote: 0 as *const libc::c_char,
1606 | |         right_quote: 0 as *const libc::c_char,
1607 | |     };
     | |______- unnecessary `let` binding
1608 |       init
     |       ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1601 ~     
1602 ~     quoting_options {
1603 +         style: locale_quoting_style,
1604 +         flags: 0 as libc::c_int,
1605 +         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1606 +         left_quote: 0 as *const libc::c_char,
1607 +         right_quote: 0 as *const libc::c_char,
1608 +     }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1604:27
     |
1604 |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/safe_write.rs:12:1
   |
12 | / pub unsafe extern "C" fn safe_write(
13 | |     mut fd: libc::c_int,
14 | |     mut buf: *const libc::c_void,
15 | |     mut count: size_t,
...  |
33 | |     };
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/safe_write.rs:19:12
   |
19 |         if 0 as libc::c_int as libc::c_long <= result {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_write.rs:20:20
   |
20 |             return result as size_t
   |                    ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_write.rs:26:20
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_write.rs:26:21
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_write.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_write.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_write.rs:30:24
   |
30 |                 return result as size_t
   |                        ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/same_inode.rs:42:1
   |
42 | / pub unsafe extern "C" fn psame_inode(mut a: *const stat, mut b: *const stat) -> bool {
43 | |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
44 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/same_inode.rs:42:1
   |
42 | / pub unsafe extern "C" fn psame_inode(mut a: *const stat, mut b: *const stat) -> bool {
43 | |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
44 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/same_inode.rs:43:5
   |
43 |     return (*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `(*a).st_dev ^ (*b).st_dev | (*a).st_ino ^ (*b).st_ino == 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null.rs:14:1
   |
14 | / pub unsafe extern "C" fn setlocale_null_r(
15 | |     mut category: libc::c_int,
16 | |     mut buf: *mut libc::c_char,
17 | |     mut bufsize: size_t,
18 | | ) -> libc::c_int {
19 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/setlocale_null.rs:14:1
   |
14 | / pub unsafe extern "C" fn setlocale_null_r(
15 | |     mut category: libc::c_int,
16 | |     mut buf: *mut libc::c_char,
17 | |     mut bufsize: size_t,
18 | | ) -> libc::c_int {
19 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/setlocale_null.rs:19:5
   |
19 |     return setlocale_null_r_unlocked(category, buf, bufsize);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_r_unlocked(category, buf, bufsize)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:16:1
   |
16 | / pub unsafe extern "C" fn setlocale_null_unlocked(
17 | |     mut category: libc::c_int,
18 | | ) -> *const libc::c_char {
19 | |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
20 | |     return result;
21 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:20:5
   |
20 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/setlocale_null_unlocked.rs:19:63
   |
19 |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:23:1
   |
23 | / pub unsafe extern "C" fn setlocale_null_r_unlocked(
24 | |     mut category: libc::c_int,
25 | |     mut buf: *mut libc::c_char,
26 | |     mut bufsize: size_t,
...  |
57 | |     };
58 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:33:9
   |
33 |         return 22 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `22 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:42:13
   |
42 |             return 0 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:55:13
   |
55 |             return 34 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `34 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:30:22
   |
30 |         if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:31:54
   |
31 |             *buf.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:38:17
   |
38 |                 buf as *mut libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:39:17
   |
39 |                 result as *const libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:40:37
   |
40 |                 length.wrapping_add(1 as libc::c_int as libc::c_ulong),
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:44:26
   |
44 |             if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:46:21
   |
46 |                     buf as *mut libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:47:21
   |
47 |                     result as *const libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:48:42
   |
48 |                     bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong),
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:53:25
   |
53 |                     ) = '\0' as i32 as libc::c_char;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:52:46
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:37:13
   |
30 | /             let mut init = numname {
31 | |                 num: 1 as libc::c_int,
32 | |                 name: *::core::mem::transmute::<
33 | |                     &[u8; 8],
34 | |                     &[libc::c_char; 8],
35 | |                 >(b"HUP\0\0\0\0\0"),
36 | |             };
   | |______________- unnecessary `let` binding
37 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
30 ~             
31 ~             numname {
32 +                 num: 1 as libc::c_int,
33 +                 name: *::core::mem::transmute::<
34 +                     &[u8; 8],
35 +                     &[libc::c_char; 8],
36 +                 >(b"HUP\0\0\0\0\0"),
37 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:47:13
   |
40 | /             let mut init = numname {
41 | |                 num: 2 as libc::c_int,
42 | |                 name: *::core::mem::transmute::<
43 | |                     &[u8; 8],
44 | |                     &[libc::c_char; 8],
45 | |                 >(b"INT\0\0\0\0\0"),
46 | |             };
   | |______________- unnecessary `let` binding
47 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
40 ~             
41 ~             numname {
42 +                 num: 2 as libc::c_int,
43 +                 name: *::core::mem::transmute::<
44 +                     &[u8; 8],
45 +                     &[libc::c_char; 8],
46 +                 >(b"INT\0\0\0\0\0"),
47 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:57:13
   |
50 | /             let mut init = numname {
51 | |                 num: 3 as libc::c_int,
52 | |                 name: *::core::mem::transmute::<
53 | |                     &[u8; 8],
54 | |                     &[libc::c_char; 8],
55 | |                 >(b"QUIT\0\0\0\0"),
56 | |             };
   | |______________- unnecessary `let` binding
57 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
50 ~             
51 ~             numname {
52 +                 num: 3 as libc::c_int,
53 +                 name: *::core::mem::transmute::<
54 +                     &[u8; 8],
55 +                     &[libc::c_char; 8],
56 +                 >(b"QUIT\0\0\0\0"),
57 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:67:13
   |
60 | /             let mut init = numname {
61 | |                 num: 4 as libc::c_int,
62 | |                 name: *::core::mem::transmute::<
63 | |                     &[u8; 8],
64 | |                     &[libc::c_char; 8],
65 | |                 >(b"ILL\0\0\0\0\0"),
66 | |             };
   | |______________- unnecessary `let` binding
67 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
60 ~             
61 ~             numname {
62 +                 num: 4 as libc::c_int,
63 +                 name: *::core::mem::transmute::<
64 +                     &[u8; 8],
65 +                     &[libc::c_char; 8],
66 +                 >(b"ILL\0\0\0\0\0"),
67 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:77:13
   |
70 | /             let mut init = numname {
71 | |                 num: 5 as libc::c_int,
72 | |                 name: *::core::mem::transmute::<
73 | |                     &[u8; 8],
74 | |                     &[libc::c_char; 8],
75 | |                 >(b"TRAP\0\0\0\0"),
76 | |             };
   | |______________- unnecessary `let` binding
77 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
70 ~             
71 ~             numname {
72 +                 num: 5 as libc::c_int,
73 +                 name: *::core::mem::transmute::<
74 +                     &[u8; 8],
75 +                     &[libc::c_char; 8],
76 +                 >(b"TRAP\0\0\0\0"),
77 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:87:13
   |
80 | /             let mut init = numname {
81 | |                 num: 6 as libc::c_int,
82 | |                 name: *::core::mem::transmute::<
83 | |                     &[u8; 8],
84 | |                     &[libc::c_char; 8],
85 | |                 >(b"ABRT\0\0\0\0"),
86 | |             };
   | |______________- unnecessary `let` binding
87 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
80 ~             
81 ~             numname {
82 +                 num: 6 as libc::c_int,
83 +                 name: *::core::mem::transmute::<
84 +                     &[u8; 8],
85 +                     &[libc::c_char; 8],
86 +                 >(b"ABRT\0\0\0\0"),
87 +             }
   |

warning: returning the result of a `let` binding from a block
  --> src/sig2str.rs:97:13
   |
90 | /             let mut init = numname {
91 | |                 num: 8 as libc::c_int,
92 | |                 name: *::core::mem::transmute::<
93 | |                     &[u8; 8],
94 | |                     &[libc::c_char; 8],
95 | |                 >(b"FPE\0\0\0\0\0"),
96 | |             };
   | |______________- unnecessary `let` binding
97 |               init
   |               ^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
90 ~             
91 ~             numname {
92 +                 num: 8 as libc::c_int,
93 +                 name: *::core::mem::transmute::<
94 +                     &[u8; 8],
95 +                     &[libc::c_char; 8],
96 +                 >(b"FPE\0\0\0\0\0"),
97 +             }
   |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:107:13
    |
100 | /             let mut init = numname {
101 | |                 num: 9 as libc::c_int,
102 | |                 name: *::core::mem::transmute::<
103 | |                     &[u8; 8],
104 | |                     &[libc::c_char; 8],
105 | |                 >(b"KILL\0\0\0\0"),
106 | |             };
    | |______________- unnecessary `let` binding
107 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
100 ~             
101 ~             numname {
102 +                 num: 9 as libc::c_int,
103 +                 name: *::core::mem::transmute::<
104 +                     &[u8; 8],
105 +                     &[libc::c_char; 8],
106 +                 >(b"KILL\0\0\0\0"),
107 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:117:13
    |
110 | /             let mut init = numname {
111 | |                 num: 11 as libc::c_int,
112 | |                 name: *::core::mem::transmute::<
113 | |                     &[u8; 8],
114 | |                     &[libc::c_char; 8],
115 | |                 >(b"SEGV\0\0\0\0"),
116 | |             };
    | |______________- unnecessary `let` binding
117 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
110 ~             
111 ~             numname {
112 +                 num: 11 as libc::c_int,
113 +                 name: *::core::mem::transmute::<
114 +                     &[u8; 8],
115 +                     &[libc::c_char; 8],
116 +                 >(b"SEGV\0\0\0\0"),
117 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:127:13
    |
120 | /             let mut init = numname {
121 | |                 num: 7 as libc::c_int,
122 | |                 name: *::core::mem::transmute::<
123 | |                     &[u8; 8],
124 | |                     &[libc::c_char; 8],
125 | |                 >(b"BUS\0\0\0\0\0"),
126 | |             };
    | |______________- unnecessary `let` binding
127 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
120 ~             
121 ~             numname {
122 +                 num: 7 as libc::c_int,
123 +                 name: *::core::mem::transmute::<
124 +                     &[u8; 8],
125 +                     &[libc::c_char; 8],
126 +                 >(b"BUS\0\0\0\0\0"),
127 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:137:13
    |
130 | /             let mut init = numname {
131 | |                 num: 13 as libc::c_int,
132 | |                 name: *::core::mem::transmute::<
133 | |                     &[u8; 8],
134 | |                     &[libc::c_char; 8],
135 | |                 >(b"PIPE\0\0\0\0"),
136 | |             };
    | |______________- unnecessary `let` binding
137 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
130 ~             
131 ~             numname {
132 +                 num: 13 as libc::c_int,
133 +                 name: *::core::mem::transmute::<
134 +                     &[u8; 8],
135 +                     &[libc::c_char; 8],
136 +                 >(b"PIPE\0\0\0\0"),
137 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:147:13
    |
140 | /             let mut init = numname {
141 | |                 num: 14 as libc::c_int,
142 | |                 name: *::core::mem::transmute::<
143 | |                     &[u8; 8],
144 | |                     &[libc::c_char; 8],
145 | |                 >(b"ALRM\0\0\0\0"),
146 | |             };
    | |______________- unnecessary `let` binding
147 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
140 ~             
141 ~             numname {
142 +                 num: 14 as libc::c_int,
143 +                 name: *::core::mem::transmute::<
144 +                     &[u8; 8],
145 +                     &[libc::c_char; 8],
146 +                 >(b"ALRM\0\0\0\0"),
147 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:157:13
    |
150 | /             let mut init = numname {
151 | |                 num: 15 as libc::c_int,
152 | |                 name: *::core::mem::transmute::<
153 | |                     &[u8; 8],
154 | |                     &[libc::c_char; 8],
155 | |                 >(b"TERM\0\0\0\0"),
156 | |             };
    | |______________- unnecessary `let` binding
157 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
150 ~             
151 ~             numname {
152 +                 num: 15 as libc::c_int,
153 +                 name: *::core::mem::transmute::<
154 +                     &[u8; 8],
155 +                     &[libc::c_char; 8],
156 +                 >(b"TERM\0\0\0\0"),
157 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:167:13
    |
160 | /             let mut init = numname {
161 | |                 num: 10 as libc::c_int,
162 | |                 name: *::core::mem::transmute::<
163 | |                     &[u8; 8],
164 | |                     &[libc::c_char; 8],
165 | |                 >(b"USR1\0\0\0\0"),
166 | |             };
    | |______________- unnecessary `let` binding
167 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
160 ~             
161 ~             numname {
162 +                 num: 10 as libc::c_int,
163 +                 name: *::core::mem::transmute::<
164 +                     &[u8; 8],
165 +                     &[libc::c_char; 8],
166 +                 >(b"USR1\0\0\0\0"),
167 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:177:13
    |
170 | /             let mut init = numname {
171 | |                 num: 12 as libc::c_int,
172 | |                 name: *::core::mem::transmute::<
173 | |                     &[u8; 8],
174 | |                     &[libc::c_char; 8],
175 | |                 >(b"USR2\0\0\0\0"),
176 | |             };
    | |______________- unnecessary `let` binding
177 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
170 ~             
171 ~             numname {
172 +                 num: 12 as libc::c_int,
173 +                 name: *::core::mem::transmute::<
174 +                     &[u8; 8],
175 +                     &[libc::c_char; 8],
176 +                 >(b"USR2\0\0\0\0"),
177 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:187:13
    |
180 | /             let mut init = numname {
181 | |                 num: 17 as libc::c_int,
182 | |                 name: *::core::mem::transmute::<
183 | |                     &[u8; 8],
184 | |                     &[libc::c_char; 8],
185 | |                 >(b"CHLD\0\0\0\0"),
186 | |             };
    | |______________- unnecessary `let` binding
187 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
180 ~             
181 ~             numname {
182 +                 num: 17 as libc::c_int,
183 +                 name: *::core::mem::transmute::<
184 +                     &[u8; 8],
185 +                     &[libc::c_char; 8],
186 +                 >(b"CHLD\0\0\0\0"),
187 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:197:13
    |
190 | /             let mut init = numname {
191 | |                 num: 23 as libc::c_int,
192 | |                 name: *::core::mem::transmute::<
193 | |                     &[u8; 8],
194 | |                     &[libc::c_char; 8],
195 | |                 >(b"URG\0\0\0\0\0"),
196 | |             };
    | |______________- unnecessary `let` binding
197 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
190 ~             
191 ~             numname {
192 +                 num: 23 as libc::c_int,
193 +                 name: *::core::mem::transmute::<
194 +                     &[u8; 8],
195 +                     &[libc::c_char; 8],
196 +                 >(b"URG\0\0\0\0\0"),
197 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:207:13
    |
200 | /             let mut init = numname {
201 | |                 num: 19 as libc::c_int,
202 | |                 name: *::core::mem::transmute::<
203 | |                     &[u8; 8],
204 | |                     &[libc::c_char; 8],
205 | |                 >(b"STOP\0\0\0\0"),
206 | |             };
    | |______________- unnecessary `let` binding
207 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
200 ~             
201 ~             numname {
202 +                 num: 19 as libc::c_int,
203 +                 name: *::core::mem::transmute::<
204 +                     &[u8; 8],
205 +                     &[libc::c_char; 8],
206 +                 >(b"STOP\0\0\0\0"),
207 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:217:13
    |
210 | /             let mut init = numname {
211 | |                 num: 20 as libc::c_int,
212 | |                 name: *::core::mem::transmute::<
213 | |                     &[u8; 8],
214 | |                     &[libc::c_char; 8],
215 | |                 >(b"TSTP\0\0\0\0"),
216 | |             };
    | |______________- unnecessary `let` binding
217 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
210 ~             
211 ~             numname {
212 +                 num: 20 as libc::c_int,
213 +                 name: *::core::mem::transmute::<
214 +                     &[u8; 8],
215 +                     &[libc::c_char; 8],
216 +                 >(b"TSTP\0\0\0\0"),
217 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:227:13
    |
220 | /             let mut init = numname {
221 | |                 num: 18 as libc::c_int,
222 | |                 name: *::core::mem::transmute::<
223 | |                     &[u8; 8],
224 | |                     &[libc::c_char; 8],
225 | |                 >(b"CONT\0\0\0\0"),
226 | |             };
    | |______________- unnecessary `let` binding
227 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
220 ~             
221 ~             numname {
222 +                 num: 18 as libc::c_int,
223 +                 name: *::core::mem::transmute::<
224 +                     &[u8; 8],
225 +                     &[libc::c_char; 8],
226 +                 >(b"CONT\0\0\0\0"),
227 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:237:13
    |
230 | /             let mut init = numname {
231 | |                 num: 21 as libc::c_int,
232 | |                 name: *::core::mem::transmute::<
233 | |                     &[u8; 8],
234 | |                     &[libc::c_char; 8],
235 | |                 >(b"TTIN\0\0\0\0"),
236 | |             };
    | |______________- unnecessary `let` binding
237 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
230 ~             
231 ~             numname {
232 +                 num: 21 as libc::c_int,
233 +                 name: *::core::mem::transmute::<
234 +                     &[u8; 8],
235 +                     &[libc::c_char; 8],
236 +                 >(b"TTIN\0\0\0\0"),
237 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:247:13
    |
240 | /             let mut init = numname {
241 | |                 num: 22 as libc::c_int,
242 | |                 name: *::core::mem::transmute::<
243 | |                     &[u8; 8],
244 | |                     &[libc::c_char; 8],
245 | |                 >(b"TTOU\0\0\0\0"),
246 | |             };
    | |______________- unnecessary `let` binding
247 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
240 ~             
241 ~             numname {
242 +                 num: 22 as libc::c_int,
243 +                 name: *::core::mem::transmute::<
244 +                     &[u8; 8],
245 +                     &[libc::c_char; 8],
246 +                 >(b"TTOU\0\0\0\0"),
247 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:257:13
    |
250 | /             let mut init = numname {
251 | |                 num: 31 as libc::c_int,
252 | |                 name: *::core::mem::transmute::<
253 | |                     &[u8; 8],
254 | |                     &[libc::c_char; 8],
255 | |                 >(b"SYS\0\0\0\0\0"),
256 | |             };
    | |______________- unnecessary `let` binding
257 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
250 ~             
251 ~             numname {
252 +                 num: 31 as libc::c_int,
253 +                 name: *::core::mem::transmute::<
254 +                     &[u8; 8],
255 +                     &[libc::c_char; 8],
256 +                 >(b"SYS\0\0\0\0\0"),
257 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:267:13
    |
260 | /             let mut init = numname {
261 | |                 num: 29 as libc::c_int,
262 | |                 name: *::core::mem::transmute::<
263 | |                     &[u8; 8],
264 | |                     &[libc::c_char; 8],
265 | |                 >(b"POLL\0\0\0\0"),
266 | |             };
    | |______________- unnecessary `let` binding
267 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
260 ~             
261 ~             numname {
262 +                 num: 29 as libc::c_int,
263 +                 name: *::core::mem::transmute::<
264 +                     &[u8; 8],
265 +                     &[libc::c_char; 8],
266 +                 >(b"POLL\0\0\0\0"),
267 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:277:13
    |
270 | /             let mut init = numname {
271 | |                 num: 26 as libc::c_int,
272 | |                 name: *::core::mem::transmute::<
273 | |                     &[u8; 8],
274 | |                     &[libc::c_char; 8],
275 | |                 >(b"VTALRM\0\0"),
276 | |             };
    | |______________- unnecessary `let` binding
277 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
270 ~             
271 ~             numname {
272 +                 num: 26 as libc::c_int,
273 +                 name: *::core::mem::transmute::<
274 +                     &[u8; 8],
275 +                     &[libc::c_char; 8],
276 +                 >(b"VTALRM\0\0"),
277 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:287:13
    |
280 | /             let mut init = numname {
281 | |                 num: 27 as libc::c_int,
282 | |                 name: *::core::mem::transmute::<
283 | |                     &[u8; 8],
284 | |                     &[libc::c_char; 8],
285 | |                 >(b"PROF\0\0\0\0"),
286 | |             };
    | |______________- unnecessary `let` binding
287 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
280 ~             
281 ~             numname {
282 +                 num: 27 as libc::c_int,
283 +                 name: *::core::mem::transmute::<
284 +                     &[u8; 8],
285 +                     &[libc::c_char; 8],
286 +                 >(b"PROF\0\0\0\0"),
287 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:297:13
    |
290 | /             let mut init = numname {
291 | |                 num: 24 as libc::c_int,
292 | |                 name: *::core::mem::transmute::<
293 | |                     &[u8; 8],
294 | |                     &[libc::c_char; 8],
295 | |                 >(b"XCPU\0\0\0\0"),
296 | |             };
    | |______________- unnecessary `let` binding
297 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
290 ~             
291 ~             numname {
292 +                 num: 24 as libc::c_int,
293 +                 name: *::core::mem::transmute::<
294 +                     &[u8; 8],
295 +                     &[libc::c_char; 8],
296 +                 >(b"XCPU\0\0\0\0"),
297 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:307:13
    |
300 | /             let mut init = numname {
301 | |                 num: 25 as libc::c_int,
302 | |                 name: *::core::mem::transmute::<
303 | |                     &[u8; 8],
304 | |                     &[libc::c_char; 8],
305 | |                 >(b"XFSZ\0\0\0\0"),
306 | |             };
    | |______________- unnecessary `let` binding
307 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
300 ~             
301 ~             numname {
302 +                 num: 25 as libc::c_int,
303 +                 name: *::core::mem::transmute::<
304 +                     &[u8; 8],
305 +                     &[libc::c_char; 8],
306 +                 >(b"XFSZ\0\0\0\0"),
307 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:317:13
    |
310 | /             let mut init = numname {
311 | |                 num: 6 as libc::c_int,
312 | |                 name: *::core::mem::transmute::<
313 | |                     &[u8; 8],
314 | |                     &[libc::c_char; 8],
315 | |                 >(b"IOT\0\0\0\0\0"),
316 | |             };
    | |______________- unnecessary `let` binding
317 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
310 ~             
311 ~             numname {
312 +                 num: 6 as libc::c_int,
313 +                 name: *::core::mem::transmute::<
314 +                     &[u8; 8],
315 +                     &[libc::c_char; 8],
316 +                 >(b"IOT\0\0\0\0\0"),
317 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:327:13
    |
320 | /             let mut init = numname {
321 | |                 num: 17 as libc::c_int,
322 | |                 name: *::core::mem::transmute::<
323 | |                     &[u8; 8],
324 | |                     &[libc::c_char; 8],
325 | |                 >(b"CLD\0\0\0\0\0"),
326 | |             };
    | |______________- unnecessary `let` binding
327 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
320 ~             
321 ~             numname {
322 +                 num: 17 as libc::c_int,
323 +                 name: *::core::mem::transmute::<
324 +                     &[u8; 8],
325 +                     &[libc::c_char; 8],
326 +                 >(b"CLD\0\0\0\0\0"),
327 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:337:13
    |
330 | /             let mut init = numname {
331 | |                 num: 30 as libc::c_int,
332 | |                 name: *::core::mem::transmute::<
333 | |                     &[u8; 8],
334 | |                     &[libc::c_char; 8],
335 | |                 >(b"PWR\0\0\0\0\0"),
336 | |             };
    | |______________- unnecessary `let` binding
337 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
330 ~             
331 ~             numname {
332 +                 num: 30 as libc::c_int,
333 +                 name: *::core::mem::transmute::<
334 +                     &[u8; 8],
335 +                     &[libc::c_char; 8],
336 +                 >(b"PWR\0\0\0\0\0"),
337 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:347:13
    |
340 | /             let mut init = numname {
341 | |                 num: 28 as libc::c_int,
342 | |                 name: *::core::mem::transmute::<
343 | |                     &[u8; 8],
344 | |                     &[libc::c_char; 8],
345 | |                 >(b"WINCH\0\0\0"),
346 | |             };
    | |______________- unnecessary `let` binding
347 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
340 ~             
341 ~             numname {
342 +                 num: 28 as libc::c_int,
343 +                 name: *::core::mem::transmute::<
344 +                     &[u8; 8],
345 +                     &[libc::c_char; 8],
346 +                 >(b"WINCH\0\0\0"),
347 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:357:13
    |
350 | /             let mut init = numname {
351 | |                 num: 29 as libc::c_int,
352 | |                 name: *::core::mem::transmute::<
353 | |                     &[u8; 8],
354 | |                     &[libc::c_char; 8],
355 | |                 >(b"IO\0\0\0\0\0\0"),
356 | |             };
    | |______________- unnecessary `let` binding
357 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
350 ~             
351 ~             numname {
352 +                 num: 29 as libc::c_int,
353 +                 name: *::core::mem::transmute::<
354 +                     &[u8; 8],
355 +                     &[libc::c_char; 8],
356 +                 >(b"IO\0\0\0\0\0\0"),
357 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:367:13
    |
360 | /             let mut init = numname {
361 | |                 num: 16 as libc::c_int,
362 | |                 name: *::core::mem::transmute::<
363 | |                     &[u8; 8],
364 | |                     &[libc::c_char; 8],
365 | |                 >(b"STKFLT\0\0"),
366 | |             };
    | |______________- unnecessary `let` binding
367 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
360 ~             
361 ~             numname {
362 +                 num: 16 as libc::c_int,
363 +                 name: *::core::mem::transmute::<
364 +                     &[u8; 8],
365 +                     &[libc::c_char; 8],
366 +                 >(b"STKFLT\0\0"),
367 +             }
    |

warning: returning the result of a `let` binding from a block
   --> src/sig2str.rs:377:13
    |
370 | /             let mut init = numname {
371 | |                 num: 0 as libc::c_int,
372 | |                 name: *::core::mem::transmute::<
373 | |                     &[u8; 8],
374 | |                     &[libc::c_char; 8],
375 | |                 >(b"EXIT\0\0\0\0"),
376 | |             };
    | |______________- unnecessary `let` binding
377 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
370 ~             
371 ~             numname {
372 +                 num: 0 as libc::c_int,
373 +                 name: *::core::mem::transmute::<
374 +                     &[u8; 8],
375 +                     &[libc::c_char; 8],
376 +                 >(b"EXIT\0\0\0\0"),
377 +             }
    |

warning: unneeded `return` statement
   --> src/sig2str.rs:448:5
    |
448 |     return -(1 as libc::c_int);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `-(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
   --> src/sig2str.rs:382:8
    |
382 |     if (*signame as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:382:48
    |
382 |     if (*signame as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:383:12
    |
383 |         <= 9 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
   --> src/sig2str.rs:385:43
    |
385 |         let mut endp: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:389:20
    |
389 |                   <= (64 as libc::c_int + 1 as libc::c_int - 1 as libc::c_int)
    |  ____________________^
390 | |                     as libc::c_long
    | |___________________________________^ help: try: `i64::from(64 as libc::c_int + 1 as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
   --> src/sig2str.rs:392:20
    |
392 |             return n as libc::c_int;
    |                    ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:396:13
    |
396 |         i = 0 as libc::c_int as libc::c_uint;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `u64` may become silently lossy if you later change the type
   --> src/sig2str.rs:397:15
    |
397 |         while (i as libc::c_ulong)
    |               ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(i)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/sig2str.rs:407:13
    |
407 |             i;
    |             ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *mut _` detected
   --> src/sig2str.rs:409:45
    |
409 |         let mut endp_0: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:415:17
    |
415 |                 b"RTMIN\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMIN\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/sig2str.rs:416:17
    |
416 |                 5 as libc::c_int as libc::c_ulong,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:424:32
    |
424 |             if *endp_0 == 0 && 0 as libc::c_int as libc::c_long <= n_0
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:425:27
    |
425 |                 && n_0 <= (rtmax - rtmin) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmax - rtmin)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
   --> src/sig2str.rs:427:24
    |
427 |                 return (rtmin as libc::c_long + n_0) as libc::c_int;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:427:25
    |
427 |                 return (rtmin as libc::c_long + n_0) as libc::c_int;
    |                         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmin)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:432:17
    |
432 |                 b"RTMAX\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMAX\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/sig2str.rs:433:17
    |
433 |                 5 as libc::c_int as libc::c_ulong,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:441:32
    |
441 |             if *endp_0 == 0 && (rtmin - rtmax) as libc::c_long <= n_1
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmin - rtmax)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:442:27
    |
442 |                 && n_1 <= 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
   --> src/sig2str.rs:444:24
    |
444 |                 return (rtmax as libc::c_long + n_1) as libc::c_int;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/sig2str.rs:444:25
    |
444 |                 return (rtmax as libc::c_long + n_1) as libc::c_int;
    |                         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(rtmax)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: docs for function which may panic missing `# Panics` section
   --> src/sig2str.rs:451:1
    |
451 | / pub fn str2sig(signame: &str, signum: &mut i32) -> i32 {
452 | |     let c_signame = std::ffi::CString::new(signame).unwrap();
453 | |     unsafe {
454 | |         *signum = str2signum(c_signame.as_ptr());
...   |
460 | |     }
461 | | }
    | |_^
    |
note: first possible panic found here
   --> src/sig2str.rs:452:21
    |
452 |     let c_signame = std::ffi::CString::new(signame).unwrap();
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/sig2str.rs:464:1
    |
464 | / pub unsafe extern "C" fn sig2str(
465 | |     mut signum: libc::c_int,
466 | |     mut signame: *mut libc::c_char,
467 | | ) -> libc::c_int {
...   |
503 | |     return 0 as libc::c_int;
504 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/sig2str.rs:503:5
    |
503 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/sig2str.rs:469:9
    |
469 |     i = 0 as libc::c_int as libc::c_uint;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `u64` may become silently lossy if you later change the type
   --> src/sig2str.rs:470:11
    |
470 |     while (i as libc::c_ulong)
    |           ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(i)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/sig2str.rs:479:9
    |
479 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:489:25
    |
489 |         strcpy(signame, b"RTMIN\0" as *const u8 as *const libc::c_char);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMIN\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:492:25
    |
492 |         strcpy(signame, b"RTMAX\0" as *const u8 as *const libc::c_char);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"RTMAX\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/sig2str.rs:499:13
    |
499 |             b"%+d\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%+d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this could be a `const fn`
  --> src/stdbit.rs:11:1
   |
11 | / pub fn __gl_stdbit_clz(n: u32) -> i32 {
12 | |     if n != 0 {
13 | |         n.leading_zeros() as i32
14 | |     } else {
15 | |         (8 * std::mem::size_of::<u32>() as i32)
16 | |     }
17 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
  --> src/stdbit.rs:12:5
   |
12 | /     if n != 0 {
13 | |         n.leading_zeros() as i32
14 | |     } else {
15 | |         (8 * std::mem::size_of::<u32>() as i32)
16 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:13:9
   |
13 |         n.leading_zeros() as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdbit.rs:15:14
   |
15 |         (8 * std::mem::size_of::<u32>() as i32)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> src/stdbit.rs:15:14
   |
15 |         (8 * std::mem::size_of::<u32>() as i32)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: this could be a `const fn`
  --> src/stdbit.rs:22:1
   |
22 | / pub fn __gl_stdbit_clzl(n: u64) -> i32 {
23 | |     if n != 0 {
24 | |         n.leading_zeros() as i32
25 | |     } else {
26 | |         (8 * std::mem::size_of::<u64>() as u64) as i32
27 | |     }
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
  --> src/stdbit.rs:23:5
   |
23 | /     if n != 0 {
24 | |         n.leading_zeros() as i32
25 | |     } else {
26 | |         (8 * std::mem::size_of::<u64>() as u64) as i32
27 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:24:9
   |
24 |         n.leading_zeros() as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:26:9
   |
26 |         (8 * std::mem::size_of::<u64>() as u64) as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:33:1
   |
33 | / pub unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
34 | |     return (if n != 0 {
35 | |         n.leading_zeros() as i32 as libc::c_ulong
36 | |     } else {
...  |
39 | |     }) as libc::c_int;
40 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:33:1
   |
33 | / pub unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
34 | |     return (if n != 0 {
35 | |         n.leading_zeros() as i32 as libc::c_ulong
36 | |     } else {
...  |
39 | |     }) as libc::c_int;
40 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:34:5
   |
34 | /     return (if n != 0 {
35 | |         n.leading_zeros() as i32 as libc::c_ulong
36 | |     } else {
37 | |         (8 as libc::c_int as libc::c_ulong)
38 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
39 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
34 ~     (if n != 0 {
35 +         n.leading_zeros() as i32 as libc::c_ulong
36 +     } else {
37 +         (8 as libc::c_int as libc::c_ulong)
38 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
39 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:34:12
   |
34 |       return (if n != 0 {
   |  ____________^
35 | |         n.leading_zeros() as i32 as libc::c_ulong
36 | |     } else {
37 | |         (8 as libc::c_int as libc::c_ulong)
38 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
39 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:34:12
   |
34 |       return (if n != 0 {
   |  ____________^
35 | |         n.leading_zeros() as i32 as libc::c_ulong
36 | |     } else {
37 | |         (8 as libc::c_int as libc::c_ulong)
38 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
39 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:35:9
   |
35 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:35:9
   |
35 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:37:9
   |
37 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdbit.rs:44:1
   |
44 | / pub fn __gl_stdbit_ctz(n: u32) -> i32 {
45 | |     if n != 0 {
46 | |         n.trailing_zeros() as i32
47 | |     } else {
48 | |         (8 * std::mem::size_of::<u32>() as i32)
49 | |     }
50 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
  --> src/stdbit.rs:45:5
   |
45 | /     if n != 0 {
46 | |         n.trailing_zeros() as i32
47 | |     } else {
48 | |         (8 * std::mem::size_of::<u32>() as i32)
49 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:46:9
   |
46 |         n.trailing_zeros() as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdbit.rs:48:14
   |
48 |         (8 * std::mem::size_of::<u32>() as i32)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> src/stdbit.rs:48:14
   |
48 |         (8 * std::mem::size_of::<u32>() as i32)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: this could be a `const fn`
  --> src/stdbit.rs:55:1
   |
55 | / pub fn __gl_stdbit_ctzl(n: u64) -> i32 {
56 | |     if n != 0 {
57 | |         n.trailing_zeros() as i32
58 | |     } else {
59 | |         (8 * std::mem::size_of::<u64>() as u64) as i32
60 | |     }
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
  --> src/stdbit.rs:56:5
   |
56 | /     if n != 0 {
57 | |         n.trailing_zeros() as i32
58 | |     } else {
59 | |         (8 * std::mem::size_of::<u64>() as u64) as i32
60 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:57:9
   |
57 |         n.trailing_zeros() as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:59:9
   |
59 |         (8 * std::mem::size_of::<u64>() as u64) as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:66:1
   |
66 | / pub unsafe extern "C" fn __gl_stdbit_ctzll(mut n: libc::c_ulonglong) -> libc::c_int {
67 | |     return (if n != 0 {
68 | |         n.trailing_zeros() as i32 as libc::c_ulong
69 | |     } else {
...  |
72 | |     }) as libc::c_int;
73 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:66:1
   |
66 | / pub unsafe extern "C" fn __gl_stdbit_ctzll(mut n: libc::c_ulonglong) -> libc::c_int {
67 | |     return (if n != 0 {
68 | |         n.trailing_zeros() as i32 as libc::c_ulong
69 | |     } else {
...  |
72 | |     }) as libc::c_int;
73 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:67:5
   |
67 | /     return (if n != 0 {
68 | |         n.trailing_zeros() as i32 as libc::c_ulong
69 | |     } else {
70 | |         (8 as libc::c_int as libc::c_ulong)
71 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
72 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
67 ~     (if n != 0 {
68 +         n.trailing_zeros() as i32 as libc::c_ulong
69 +     } else {
70 +         (8 as libc::c_int as libc::c_ulong)
71 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
72 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:67:12
   |
67 |       return (if n != 0 {
   |  ____________^
68 | |         n.trailing_zeros() as i32 as libc::c_ulong
69 | |     } else {
70 | |         (8 as libc::c_int as libc::c_ulong)
71 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
72 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:67:12
   |
67 |       return (if n != 0 {
   |  ____________^
68 | |         n.trailing_zeros() as i32 as libc::c_ulong
69 | |     } else {
70 | |         (8 as libc::c_int as libc::c_ulong)
71 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
72 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:68:9
   |
68 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:68:9
   |
68 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:70:9
   |
70 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:14:1
   |
14 | / fn __gl_stdbit_clz(n: u32) -> i32 {
15 | |     if n != 0 {
16 | |         n.leading_zeros() as i32
17 | |     } else {
18 | |         (8 * std::mem::size_of::<u32>() as i32)
19 | |     }
20 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
  --> src/stdc_leading_zeros.rs:15:5
   |
15 | /     if n != 0 {
16 | |         n.leading_zeros() as i32
17 | |     } else {
18 | |         (8 * std::mem::size_of::<u32>() as i32)
19 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:16:9
   |
16 |         n.leading_zeros() as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdc_leading_zeros.rs:18:14
   |
18 |         (8 * std::mem::size_of::<u32>() as i32)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> src/stdc_leading_zeros.rs:18:14
   |
18 |         (8 * std::mem::size_of::<u32>() as i32)
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:23:1
   |
23 | / fn __gl_stdbit_clzl(n: u64) -> i32 {
24 | |     if n != 0 {
25 | |         n.leading_zeros() as i32
26 | |     } else {
27 | |         (8 * std::mem::size_of::<u64>() as u32) as i32
28 | |     }
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
  --> src/stdc_leading_zeros.rs:24:5
   |
24 | /     if n != 0 {
25 | |         n.leading_zeros() as i32
26 | |     } else {
27 | |         (8 * std::mem::size_of::<u64>() as u32) as i32
28 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:25:9
   |
25 |         n.leading_zeros() as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:27:9
   |
27 |         (8 * std::mem::size_of::<u64>() as u32) as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdc_leading_zeros.rs:27:14
   |
27 |         (8 * std::mem::size_of::<u64>() as u32) as i32
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:32:1
   |
32 | / fn __gl_stdbit_clzll(n: u64) -> i32 {
33 | |     if n != 0 {
34 | |         n.leading_zeros() as i32
35 | |     } else {
36 | |         (8 * std::mem::size_of::<u64>() as u32) as i32
37 | |     }
38 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
  --> src/stdc_leading_zeros.rs:33:5
   |
33 | /     if n != 0 {
34 | |         n.leading_zeros() as i32
35 | |     } else {
36 | |         (8 * std::mem::size_of::<u64>() as u32) as i32
37 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:34:9
   |
34 |         n.leading_zeros() as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:36:9
   |
36 |         (8 * std::mem::size_of::<u64>() as u32) as i32
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdc_leading_zeros.rs:36:14
   |
36 |         (8 * std::mem::size_of::<u64>() as u32) as i32
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:43:1
   |
43 | / pub fn stdc_leading_zeros_ui(n: u32) -> u32 {
44 | |     let leading_zeros = n.leading_zeros();
45 | |     leading_zeros
46 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:43:1
   |
43 | / pub fn stdc_leading_zeros_ui(n: u32) -> u32 {
44 | |     let leading_zeros = n.leading_zeros();
45 | |     leading_zeros
46 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: returning the result of a `let` binding from a block
  --> src/stdc_leading_zeros.rs:45:5
   |
44 |     let leading_zeros = n.leading_zeros();
   |     -------------------------------------- unnecessary `let` binding
45 |     leading_zeros
   |     ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
   |
44 ~     
45 ~     n.leading_zeros()
   |

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:51:1
   |
51 | / pub fn stdc_leading_zeros_uc(n: u8) -> u32 {
52 | |     let leading_zeros = stdc_leading_zeros_ui(n as u32);
53 | |     let size_difference = (std::mem::size_of::<u32>() as u32).wrapping_sub(std::mem::size_of::<u8>() as u32);
54 | |     (leading_zeros as u64).wrapping_sub((8u32 as u64).wrapping_mul(size_difference as u64)) as u32
55 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:52:47
   |
52 |     let leading_zeros = stdc_leading_zeros_ui(n as u32);
   |                                               ^^^^^^^^ help: try: `u32::from(n)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdc_leading_zeros.rs:53:27
   |
53 |     let size_difference = (std::mem::size_of::<u32>() as u32).wrapping_sub(std::mem::size_of::<u8>() as u32);
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdc_leading_zeros.rs:53:76
   |
53 |     let size_difference = (std::mem::size_of::<u32>() as u32).wrapping_sub(std::mem::size_of::<u8>() as u32);
   |                                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `u32` may truncate the value
  --> src/stdc_leading_zeros.rs:54:5
   |
54 |     (leading_zeros as u64).wrapping_sub((8u32 as u64).wrapping_mul(size_difference as u64)) as u32
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:54:5
   |
54 |     (leading_zeros as u64).wrapping_sub((8u32 as u64).wrapping_mul(size_difference as u64)) as u32
   |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(leading_zeros)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:54:41
   |
54 |     (leading_zeros as u64).wrapping_sub((8u32 as u64).wrapping_mul(size_difference as u64)) as u32
   |                                         ^^^^^^^^^^^^^ help: try: `u64::from(8u32)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:54:68
   |
54 |     (leading_zeros as u64).wrapping_sub((8u32 as u64).wrapping_mul(size_difference as u64)) as u32
   |                                                                    ^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(size_difference)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:60:1
   |
60 | / pub fn stdc_leading_zeros_us(n: u16) -> u32 {
61 | |     let leading_zeros = stdc_leading_zeros_ui(n as u32);
62 | |     let size_diff = (std::mem::size_of::<u32>() - std::mem::size_of::<u16>()) * 8;
63 | |     leading_zeros.wrapping_sub(size_diff as u32)
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `u16` to `u32` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:61:47
   |
61 |     let leading_zeros = stdc_leading_zeros_ui(n as u32);
   |                                               ^^^^^^^^ help: try: `u32::from(n)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
  --> src/stdc_leading_zeros.rs:63:32
   |
63 |     leading_zeros.wrapping_sub(size_diff as u32)
   |                                ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:69:1
   |
69 | / pub fn stdc_leading_zeros_ul(n: u64) -> u32 {
70 | |     return __gl_stdbit_clzl(n) as u32;
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:70:5
   |
70 |     return __gl_stdbit_clzl(n) as u32;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clzl(n) as u32`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:70:12
   |
70 |     return __gl_stdbit_clzl(n) as u32;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:76:1
   |
76 | / pub fn stdc_leading_zeros_ull(n: u64) -> u32 {
77 | |     n.leading_zeros()
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:76:1
   |
76 | / pub fn stdc_leading_zeros_ull(n: u64) -> u32 {
77 | |     n.leading_zeros()
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary structure name repetition
  --> src/temp_stream.rs:60:22
   |
60 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/temp_stream.rs:71:29
   |
71 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/temp_stream.rs:97:1
    |
97  | / pub unsafe extern "C" fn temp_stream(
98  | |     mut fp: *mut *mut FILE,
99  | |     mut file_name: *mut *mut libc::c_char,
100 | | ) -> bool {
...   |
289 | |
290 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/temp_stream.rs:97:1
    |
97  | / pub unsafe extern "C" fn temp_stream(
98  | |     mut fp: *mut *mut FILE,
99  | |     mut file_name: *mut *mut libc::c_char,
100 | | ) -> bool {
...   |
289 | |
290 | | }
    | |_^
    |
note: first possible panic found here
   --> src/temp_stream.rs:126:9
    |
126 |         tempbuf_len.try_into().unwrap(),
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: this function has too many lines (178/100)
   --> src/temp_stream.rs:97:1
    |
97  | / pub unsafe extern "C" fn temp_stream(
98  | |     mut fp: *mut *mut FILE,
99  | |     mut file_name: *mut *mut libc::c_char,
100 | | ) -> bool {
...   |
289 | |
290 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/temp_stream.rs:288:1
    |
288 | return 1 != 0;
    | ^^^^^^^^^^^^^^ help: remove `return`: `1 != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:120:21
    |
120 |             gettext(b"failed to make temporary file name\0" as *const u8 as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:128:9
    |
128 |         b"cutmp\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cutmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:138:21
    |
138 |             gettext(b"failed to make temporary file name\0" as *const u8 as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to make temporary file name\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:152:21
    |
152 |             gettext("failed to create temporary file %s\0".as_ptr() as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"failed to create temporary file %s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:157:9
    |
157 |         let __errstatus: i32 = 0;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:161:21
    |
161 |             gettext("failed to create temporary file %s\0".as_ptr() as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"failed to create temporary file %s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:168:9
    |
168 |         let __errstatus: i32 = 0;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:172:21
    |
172 |             gettext("failed to create temporary file %s\0".as_ptr() as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"failed to create temporary file %s\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:181:35
    |
181 |     let file_pointer = fdopen(fd, mode.as_ptr() as *const libc::c_char);
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `mode.as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:187:25
    |
187 |                 gettext("failed to open %s for writing\0".as_ptr() as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"failed to open %s for writing\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:192:13
    |
192 |             let __errstatus: i32 = 0;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:196:25
    |
196 |                 gettext("failed to open %s for writing\0".as_ptr() as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"failed to open %s for writing\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:203:13
    |
203 |             let __errstatus: i32 = 0;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:207:25
    |
207 |                 gettext("failed to open %s for writing\0".as_ptr() as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"failed to open %s for writing\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:221:6
    |
221 | free(tempfile as *mut libc::c_void);
    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tempfile.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/temp_stream.rs:228:31
    |
228 |         if rpl_fseeko(tmp_fp, 0 as libc::c_int as off_t, 0 as libc::c_int)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/temp_stream.rs:230:42
    |
230 |             || ftruncate(fileno(tmp_fp), 0 as libc::c_int as __off_t) < 0 as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:232:13
    |
232 | /             if 0 != 0 {
233 | |                 error(
234 | |                     0 as libc::c_int,
235 | |                     *__errno_location(),
...   |
277 | |                 });
278 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:232:16
    |
232 |             if 0 != 0 {
    |                ^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:237:25
    |
237 | /                         b"failed to rewind stream for %s\0" as *const u8
238 | |                             as *const libc::c_char,
    | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to rewind stream for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:242:17
    |
242 | /                 if 0 as libc::c_int != 0 as libc::c_int {
243 | |                     unreachable!();
244 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/temp_stream.rs:242:20
    |
242 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:247:21
    |
247 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:252:29
    |
252 | / ...                   b"failed to rewind stream for %s\0" as *const u8
253 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to rewind stream for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:257:21
    |
257 | /                     if __errstatus != 0 as libc::c_int {
258 | |                         unreachable!();
259 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/temp_stream.rs:263:21
    |
263 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/temp_stream.rs:268:29
    |
268 | / ...                   b"failed to rewind stream for %s\0" as *const u8
269 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to rewind stream for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/temp_stream.rs:273:21
    |
273 | /                     if __errstatus != 0 as libc::c_int {
274 | |                         unreachable!();
275 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unneeded `return` statement
  --> src/tmpdir.rs:72:5
   |
72 | /     return stat(dir, &mut buf) == 0 as libc::c_int
73 | |         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
74 | |             == 0o40000 as libc::c_int as libc::c_uint;
   | |______________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
72 ~     stat(dir, &mut buf) == 0 as libc::c_int
73 +         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
74 +             == 0o40000 as libc::c_int as libc::c_uint
   |

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/tmpdir.rs:73:26
   |
73 |         && buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/tmpdir.rs:74:16
   |
74 |             == 0o40000 as libc::c_int as libc::c_uint;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/tmpdir.rs:77:1
    |
77  | / pub unsafe extern "C" fn path_search(
78  | |     mut tmpl: *mut libc::c_char,
79  | |     mut tmpl_len: size_t,
80  | |     mut dir: *const libc::c_char,
...   |
143 | |     return 0 as libc::c_int;
144 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/tmpdir.rs:101:19
    |
101 |         } else if !(!dir.is_null() && direxists(dir) as libc::c_int != 0) {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `dir.is_null() || direxists(dir) as libc::c_int == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/tmpdir.rs:123:12
    |
123 |           && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |  ____________^
124 | |             as libc::c_int == '/' as i32);
    | |_________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
    |
123 ~         && *dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
124 ~             as libc::c_int != '/' as i32;
    |

warning: unneeded `return` statement
   --> src/tmpdir.rs:143:5
    |
143 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/tmpdir.rs:84:38
   |
84 |     let mut d: *const libc::c_char = 0 as *const libc::c_char;
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/tmpdir.rs:89:15
   |
89 |         pfx = b"file\0" as *const u8 as *const libc::c_char;
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"file\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/tmpdir.rs:90:16
   |
90 |         plen = 4 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/tmpdir.rs:93:19
   |
93 |         if plen > 5 as libc::c_int as libc::c_ulong {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/tmpdir.rs:94:20
   |
94 |             plen = 5 as libc::c_int as size_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/tmpdir.rs:98:27
   |
98 |         d = secure_getenv(b"TMPDIR\0" as *const u8 as *const libc::c_char);
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"TMPDIR\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/tmpdir.rs:99:28
   |
99 |         if !d.is_null() && direxists(d) as libc::c_int != 0 {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(direxists(d))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/tmpdir.rs:101:39
    |
101 |         } else if !(!dir.is_null() && direxists(dir) as libc::c_int != 0) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(direxists(dir))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *const _` detected
   --> src/tmpdir.rs:102:19
    |
102 |             dir = 0 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: this `if` has identical blocks
   --> src/tmpdir.rs:106:69
    |
106 |           if direxists(b"/tmp\0" as *const u8 as *const libc::c_char) {
    |  _____________________________________________________________________^
107 | |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
108 | |         } else if strcmp(
    | |_________^
    |
    = note: `-W clippy::if-same-then-else` implied by `-W clippy::all`
note: same as this
   --> src/tmpdir.rs:114:9
    |
114 | /         {
115 | |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
116 | |         } else {
    | |_________^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:106:22
    |
106 |         if direxists(b"/tmp\0" as *const u8 as *const libc::c_char) {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:107:19
    |
107 |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:109:13
    |
109 |             b"/tmp\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:110:13
    |
110 |             b"/tmp\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/tmpdir.rs:112:16
    |
112 |             && direxists(b"/tmp\0" as *const u8 as *const libc::c_char) as libc::c_int
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(direxists(b"/tmp\0" as *const u8 as *const libc::c_char))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:112:26
    |
112 |             && direxists(b"/tmp\0" as *const u8 as *const libc::c_char) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:115:19
    |
115 |             dir = b"/tmp\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/tmp\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:122:25
    |
122 |     add_slash = dlen != 0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/tmpdir.rs:123:14
    |
123 |           && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |  ______________^
124 | |             as libc::c_int == '/' as i32);
    | |__________________________^ help: try: `i32::from(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/tmpdir.rs:123:26
    |
123 |         && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/tmpdir.rs:123:26
    |
123 |         && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:123:44
    |
123 |         && !(*dir.offset(dlen.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize)
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `u64` is more cleanly stated with `u64::from(_)`
   --> src/tmpdir.rs:127:27
    |
127 |             .wrapping_add(add_slash as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(add_slash)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:129:27
    |
129 |             .wrapping_add(6 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/tmpdir.rs:130:27
    |
130 |             .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:135:12
    |
135 |     memcpy(tmpl as *mut libc::c_void, dir as *const libc::c_void, dlen);
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tmpl.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:135:39
    |
135 |     memcpy(tmpl as *mut libc::c_void, dir as *const libc::c_void, dlen);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `dir.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/tmpdir.rs:137:21
    |
137 |         tmpl.offset(dlen as isize),
    |                     ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/tmpdir.rs:137:21
    |
137 |         tmpl.offset(dlen as isize),
    |                     ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: borrow as raw pointer
   --> src/tmpdir.rs:138:9
    |
138 | /         &*(b"/%.*sXXXXXX\0" as *const u8 as *const libc::c_char)
139 | |             .offset(!add_slash as libc::c_int as isize) as *const libc::c_char,
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr
help: try
    |
138 ~         std::ptr::addr_of!(*(b"/%.*sXXXXXX\0" as *const u8 as *const libc::c_char)
139 ~             .offset(!add_slash as libc::c_int as isize)),
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/tmpdir.rs:138:11
    |
138 |         &*(b"/%.*sXXXXXX\0" as *const u8 as *const libc::c_char)
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/%.*sXXXXXX\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/tmpdir.rs:139:21
    |
139 |             .offset(!add_slash as libc::c_int as isize) as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(!add_slash)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i32` may truncate the value
   --> src/tmpdir.rs:140:9
    |
140 |         plen as libc::c_int,
    |         ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
 --> src/version.rs:3:47
  |
3 |   pub static mut Version: *const libc::c_char = b"9.5.42-bbc97\0" as *const u8
  |  _______________________________________________^
4 | |     as *const libc::c_char;
  | |__________________________^ help: try `pointer::cast`, a safer alternative: `(b"9.5.42-bbc97\0" as *const u8).cast::<i8>()`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary structure name repetition
  --> src/version_etc.rs:45:22
   |
45 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/version_etc.rs:56:29
   |
56 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (174/100)
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary boolean `not` operation
  --> src/version_etc.rs:75:5
   |
75 | /     if !command_name.is_null() {
76 | |         fprintf(
77 | |             stream,
78 | |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
...  |
89 | |         );
90 | |     }
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:78:13
   |
78 |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s (%s) %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:86:13
   |
86 |             b"%s %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:94:17
   |
94 |         gettext(b"(C)\0" as *const u8 as *const libc::c_char),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"(C)\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
  --> src/version_etc.rs:95:9
   |
95 |         COPYRIGHT_YEAR as libc::c_int,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:97:20
   |
97 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:101:13
    |
101 | /             b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere...
102 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:104:9
    |
104 |         b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://gnu.org/licenses/gpl.html\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:106:20
    |
106 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:112:25
    |
112 |                 gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:120:21
    |
120 |                     b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:130:21
    |
130 |                     b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:141:21
    |
141 | /                     b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
142 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:154:21
    |
154 | /                     b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
155 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:168:21
    |
168 | /                     b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
169 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:183:21
    |
183 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
184 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:199:21
    |
199 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
200 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:216:21
    |
216 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
217 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:234:21
    |
234 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
235 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:251:1
    |
251 | / pub unsafe extern "C" fn version_etc_ar(
252 | |     mut stream: *mut FILE,
253 | |     mut command_name: *const libc::c_char,
254 | |     mut package: *const libc::c_char,
...   |
264 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
265 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:251:1
    |
251 | / pub unsafe extern "C" fn version_etc_ar(
252 | |     mut stream: *mut FILE,
253 | |     mut command_name: *const libc::c_char,
254 | |     mut package: *const libc::c_char,
...   |
264 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
265 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:259:17
    |
259 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:260:29
    |
260 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/version_etc.rs:260:29
    |
260 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/version_etc.rs:262:9
    |
262 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:267:1
    |
267 | / pub unsafe extern "C" fn version_etc_va(
268 | |     mut stream: *mut FILE,
269 | |     mut command_name: *const libc::c_char,
270 | |     mut package: *const libc::c_char,
...   |
293 | |     );
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:267:1
    |
267 | / pub unsafe extern "C" fn version_etc_va(
268 | |     mut stream: *mut FILE,
269 | |     mut command_name: *const libc::c_char,
270 | |     mut package: *const libc::c_char,
...   |
293 | |     );
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/version_etc.rs:275:51
    |
275 |     let mut authtab: [*const libc::c_char; 10] = [0 as *const libc::c_char; 10];
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:276:17
    |
276 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:277:23
    |
277 |     while n_authors < 10 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:279:21
    |
279 |             authtab[n_authors as usize] = authors.arg::<*const libc::c_char>();
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:280:23
    |
280 |             !(authtab[n_authors as usize]).is_null()
    |                       ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
   --> src/version_etc.rs:284:9
    |
284 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:296:1
    |
296 | / pub unsafe extern "C" fn version_etc(
297 | |     mut stream: *mut FILE,
298 | |     mut command_name: *const libc::c_char,
299 | |     mut package: *const libc::c_char,
...   |
305 | |     version_etc_va(stream, command_name, package, version, authors.as_va_list());
306 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:310:55
    |
310 |     let report_bugs = unsafe { CStr::from_ptr(gettext(b"Report bugs to: %s\n\0".as_ptr() as *const libc::c_char)) };
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Report bugs to: %s\n\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:313:53
    |
313 |     let home_page = unsafe { CStr::from_ptr(gettext(b"%s home page: <%s>\n\0".as_ptr() as *const libc::c_char)) };
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s home page: <%s>\n\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:320:56
    |
320 |     let help_message = unsafe { CStr::from_ptr(gettext(b"General help using GNU software: <%s>\n\0".as_ptr() as *const libc::c_char)) };
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"General help using GNU software: <%s>\n\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/xalignalloc.rs:24:1
   |
24 | / pub unsafe extern "C" fn xalignalloc(
25 | |     mut alignment: idx_t,
26 | |     mut size: idx_t,
27 | | ) -> *mut libc::c_void {
...  |
32 | |     return p;
33 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
  --> src/xalignalloc.rs:24:1
   |
24 | / pub unsafe extern "C" fn xalignalloc(
25 | |     mut alignment: idx_t,
26 | |     mut size: idx_t,
27 | | ) -> *mut libc::c_void {
...  |
32 | |     return p;
33 | | }
   | |_^
   |
note: first possible panic found here
  --> src/xalignalloc.rs:28:43
   |
28 |     let p: *mut libc::c_void = alignalloc(alignment.try_into().unwrap(), size.try_into().unwrap());
   |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unneeded `return` statement
  --> src/xalignalloc.rs:32:5
   |
32 |     return p;
   |     ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:18:9
   |
18 | /         if 0 != 0 {
19 | |             error(
20 | |                 exit_failure,
21 | |                 0,
...  |
49 | |             }
50 | |         }
   | |_________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xalloc_die.rs:18:12
   |
18 |         if 0 != 0 {
   |            ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:22:17
   |
22 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:23:25
   |
23 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:33:17
   |
33 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:34:25
   |
34 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:44:17
   |
44 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:45:25
   |
45 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
  --> src/xbinary_io.rs:52:1
   |
52 | return result;
   | ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/xbinary_io.rs:55:1
   |
55 | / fn __gl_setmode(fd: i32, mode: i32) -> i32 {
56 | |     // Here we would typically set the terminal mode using the termios struct.
57 | |     // Since we are converting to idiomatic Rust, we will assume that the
58 | |     // actual implementation is handled elsewhere.
59 | |     return 0;
60 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/xbinary_io.rs:59:5
   |
59 |     return 0;
   |     ^^^^^^^^^ help: remove `return`: `0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xdectoimax.rs:28:1
    |
28  | / pub unsafe extern "C" fn xnumtoimax(
29  | |     mut n_str: *const libc::c_char,
30  | |     mut base: libc::c_int,
31  | |     mut min: intmax_t,
...   |
127 | |     return tnum;
128 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xdectoimax.rs:127:5
    |
127 |     return tnum;
    |     ^^^^^^^^^^^^ help: remove `return`: `tnum`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/xdectoimax.rs:39:31
   |
39 |     s_err = xstrtoimax(n_str, 0 as *mut *mut libc::c_char, base, &mut tnum, suffixes);
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:40:33
   |
40 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:40:33
   |
40 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: this `if` has identical blocks
  --> src/xdectoimax.rs:43:86
   |
43 |               if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_long {
   |  ______________________________________________________________________________________^
44 | |                 *__errno_location() = 75 as libc::c_int;
45 | |             } else if tnum
   | |_____________^
   |
note: same as this
  --> src/xdectoimax.rs:48:13
   |
48 | /             {
49 | |                 *__errno_location() = 75 as libc::c_int;
50 | |             } else {
   | |_____________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xdectoimax.rs:43:23
   |
43 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_long {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int / 2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xdectoimax.rs:46:19
   |
46 |                   < ((-(2147483647 as libc::c_int) - 1 as libc::c_int) / 2 as libc::c_int)
   |  ___________________^
47 | |                     as libc::c_long
   | |___________________________________^ help: try: `i64::from((-(2147483647 as libc::c_int) - 1 as libc::c_int) / 2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:54:40
   |
54 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:54:40
   |
54 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:57:12
   |
57 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:57:12
   |
57 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoimax.rs:61:33
   |
61 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoimax.rs:61:33
   |
61 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xdectoimax.rs:62:9
    |
62  | /         if 0 != 0 {
63  | |             error(
64  | |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
65  | |                 if *__errno_location() == 22 as libc::c_int {
...   |
123 | |             });
124 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xdectoimax.rs:62:12
   |
62 |         if 0 != 0 {
   |            ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:64:17
   |
64 |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoimax.rs:70:17
   |
70 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:74:13
   |
74 | /             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
75 | |                 != 0 as libc::c_int
76 | |             {
77 | |                 unreachable!();
78 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:74:16
   |
74 |             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:81:48
   |
81 |                   let __errstatus: libc::c_int = if err_exit != 0 {
   |  ________________________________________________^
82 | |                     err_exit
83 | |                 } else {
84 | |                     1 as libc::c_int
85 | |                 };
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoimax.rs:93:21
   |
93 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xdectoimax.rs:97:17
   |
97 | /                 if __errstatus != 0 as libc::c_int {
98 | |                     unreachable!();
99 | |                 } else {};
   | |_________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xdectoimax.rs:103:48
    |
103 |                   let __errstatus: libc::c_int = if err_exit != 0 {
    |  ________________________________________________^
104 | |                     err_exit
105 | |                 } else {
106 | |                     1 as libc::c_int
107 | |                 };
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/xdectoimax.rs:115:21
    |
115 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/xdectoimax.rs:119:17
    |
119 | /                 if __errstatus != 0 as libc::c_int {
120 | |                     unreachable!();
121 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
   --> src/xdectoimax.rs:130:1
    |
130 | / pub unsafe extern "C" fn xdectoimax(
131 | |     mut n_str: *const libc::c_char,
132 | |     mut min: intmax_t,
133 | |     mut max: intmax_t,
...   |
138 | |     return xnumtoimax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
139 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xdectoimax.rs:138:5
    |
138 |     return xnumtoimax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xnumtoimax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/xdectoumax.rs:31:1
   |
31 | / pub unsafe extern "C" fn xdectoumax(
32 | |     mut n_str: *const libc::c_char,
33 | |     mut min: uintmax_t,
34 | |     mut max: uintmax_t,
...  |
48 | | return result;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
  --> src/xdectoumax.rs:31:1
   |
31 | / pub unsafe extern "C" fn xdectoumax(
32 | |     mut n_str: *const libc::c_char,
33 | |     mut min: uintmax_t,
34 | |     mut max: uintmax_t,
...  |
48 | | return result;
49 | | }
   | |_^
   |
note: first possible panic found here
  --> src/xdectoumax.rs:40:5
   |
40 |     std::ffi::CStr::from_ptr(n_str).to_str().unwrap(),
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unneeded `return` statement
  --> src/xdectoumax.rs:48:1
   |
48 | return result;
   | ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoumax.rs:66:13
   |
66 |             n_str.as_ptr() as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `n_str.as_ptr().cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoumax.rs:70:51
   |
70 |             suffixes.map_or(std::ptr::null(), |s| s.as_ptr() as *const libc::c_char),
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `s.as_ptr().cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
  --> src/xmalloc.rs:49:9
   |
49 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:51:5
   |
51 |     return _gl_alloc_nomem();
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:47:8
   |
47 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:48:24
   |
48 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:48:29
   |
48 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((s == 0) as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xmalloc.rs:48:29
   |
48 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(s == 0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:59:29
   |
59 |     if n_usize.is_none() || n_usize.unwrap() > usize::MAX {
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always false
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:65:29
   |
65 |     if s_usize.is_none() || s_usize.unwrap() > usize::MAX {
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always false
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
  --> src/xmalloc.rs:75:5
   |
75 |     Box::into_raw(boxed_slice) as *mut libc::c_void
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `Box::into_raw(boxed_slice).cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:84:8
   |
84 |     if n <= usize::MAX && s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:84:27
   |
84 |     if n <= usize::MAX && s <= usize::MAX {
   |                           ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xmalloc.rs:116:8
    |
116 |     if s <= usize::MAX {
    |        ^^^^^^^^^^^^^^^
    |
    = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:122:13
    |
122 |             ptr as *mut libc::c_void
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:137:1
    |
137 | / pub unsafe extern "C" fn xmalloc(mut s: size_t) -> *mut libc::c_void {
138 | |     let ptr = malloc(s);
139 | | return check_nonnull(ptr);
140 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:139:1
    |
139 | return check_nonnull(ptr);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ptr)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:142:1
    |
142 | / pub unsafe extern "C" fn ximalloc(mut s: idx_t) -> *mut libc::c_void {
143 | |     let ptr = imalloc(s.try_into().expect("Size conversion failed"));
144 | | return check_nonnull(ptr);
145 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:144:1
    |
144 | return check_nonnull(ptr);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ptr)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:147:1
    |
147 | / pub unsafe extern "C" fn xcharalloc(mut n: size_t) -> *mut libc::c_char {
148 | |     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
149 | |         == 1 as libc::c_int as libc::c_ulong
150 | |     {
...   |
154 | |     }) as *mut libc::c_char;
155 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:148:5
    |
148 | /     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
149 | |         == 1 as libc::c_int as libc::c_ulong
150 | |     {
151 | |         xmalloc(n)
152 | |     } else {
153 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
154 | |     }) as *mut libc::c_char;
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
148 ~     (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
149 +         == 1 as libc::c_int as libc::c_ulong
150 +     {
151 +         xmalloc(n)
152 +     } else {
153 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
154 +     }) as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:148:12
    |
148 |       return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
    |  ____________^
149 | |         == 1 as libc::c_int as libc::c_ulong
150 | |     {
151 | |         xmalloc(n)
152 | |     } else {
153 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
154 | |     }) as *mut libc::c_char;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
148 ~     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
149 +         == 1 as libc::c_int as libc::c_ulong
150 +     {
151 +         xmalloc(n)
152 +     } else {
153 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
154 ~     }).cast::<i8>();
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:149:12
    |
149 |         == 1 as libc::c_int as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:157:1
    |
157 | / pub unsafe extern "C" fn xrealloc(
158 | |     mut p: *mut libc::c_void,
159 | |     mut s: size_t,
160 | | ) -> *mut libc::c_void {
...   |
165 | |     return r;
166 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:165:5
    |
165 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:168:1
    |
168 | / pub unsafe extern "C" fn xirealloc(
169 | |     mut p: *mut libc::c_void,
170 | |     mut s: idx_t,
171 | | ) -> *mut libc::c_void {
172 | |     let ptr = irealloc(p, s);
173 | | return check_nonnull(ptr);
174 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:173:1
    |
173 | return check_nonnull(ptr);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ptr)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:176:1
    |
176 | / pub unsafe extern "C" fn xreallocarray(
177 | |     mut p: *mut libc::c_void,
178 | |     mut n: size_t,
179 | |     mut s: size_t,
...   |
185 | |     return r;
186 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:185:5
    |
185 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:188:1
    |
188 | / pub unsafe extern "C" fn xireallocarray(
189 | |     mut p: *mut libc::c_void,
190 | |     mut n: idx_t,
191 | |     mut s: idx_t,
...   |
194 | | return check_nonnull(ptr);
195 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:194:1
    |
194 | return check_nonnull(ptr);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ptr)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:193:32
    |
193 |     let ptr = ireallocarray(p, n as usize, s as usize);
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/xmalloc.rs:193:32
    |
193 |     let ptr = ireallocarray(p, n as usize, s as usize);
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:193:44
    |
193 |     let ptr = ireallocarray(p, n as usize, s as usize);
    |                                            ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/xmalloc.rs:193:44
    |
193 |     let ptr = ireallocarray(p, n as usize, s as usize);
    |                                            ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xnmalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
198 | |     return xreallocarray(0 as *mut libc::c_void, n, s);
199 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:198:5
    |
198 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xreallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:198:26
    |
198 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:208:1
    |
208 | / pub unsafe extern "C" fn x2realloc(
209 | |     mut p: *mut libc::c_void,
210 | |     mut ps: *mut size_t,
211 | | ) -> *mut libc::c_void {
212 | |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
213 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:212:5
    |
212 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `x2nrealloc(p, ps, 1 as libc::c_int as size_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:212:30
    |
212 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:215:1
    |
215 | / pub unsafe extern "C" fn x2nrealloc(
216 | |     mut p: *mut libc::c_void,
217 | |     mut pn: *mut size_t,
218 | |     mut s: size_t,
...   |
240 | |     return p;
241 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:240:5
    |
240 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:223:17
    |
223 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:223:18
    |
223 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:225:31
    |
225 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:225:31
    |
225 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:231:54
    |
231 |                 (n >> 1 as libc::c_int).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xmalloc.rs:233:10
    |
233 |         *(&mut n as *mut size_t) = fresh0;
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:243:1
    |
243 | / pub unsafe extern "C" fn xpalloc(
244 | |     mut pa: *mut libc::c_void,
245 | |     mut pn: *mut idx_t,
246 | |     mut n_incr_min: idx_t,
...   |
947 | |     return pa;
948 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function has a cognitive complexity of (131/25)
   --> src/xmalloc.rs:243:26
    |
243 | pub unsafe extern "C" fn xpalloc(
    |                          ^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (698/100)
   --> src/xmalloc.rs:243:1
    |
243 | / pub unsafe extern "C" fn xpalloc(
244 | |     mut pa: *mut libc::c_void,
245 | |     mut pn: *mut idx_t,
246 | |     mut n_incr_min: idx_t,
...   |
947 | |     return pa;
948 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xmalloc.rs:947:5
    |
947 |     return pa;
    |     ^^^^^^^^^^ help: remove `return`: `pa`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: borrow as raw pointer
   --> src/xmalloc.rs:253:6
    |
253 |     *(&mut n as *mut idx_t) = fresh2;
    |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:257:8
    |
257 |     if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
   --> src/xmalloc.rs:261:38
    |
261 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
262 | |         < -(1 as libc::c_int) as idx_t
263 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
264 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
595 | |         }) as libc::c_ulong
596 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:261:38
    |
261 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
262 | |         < -(1 as libc::c_int) as idx_t
263 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
264 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
595 | |         }) as libc::c_ulong
596 | |     }) as idx_t;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:261:45
    |
261 |     let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:262:11
    |
262 |         < -(1 as libc::c_int) as idx_t
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:263:13
    |
263 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:263:41
    |
263 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:264:15
    |
264 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:264:51
    |
264 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:265:13
    |
265 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:265:41
    |
265 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:266:15
    |
266 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:266:51
    |
266 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:267:20
    |
267 |         && (if s < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:268:20
    |
268 |             if n < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:269:21
    |
269 |                   if ((if 1 as libc::c_int != 0 {
    |  _____________________^
270 | |                     0 as libc::c_int as libc::c_long
271 | |                 } else {
272 | |                     (if 1 as libc::c_int != 0 {
...   |
276 | |                     }) + s
277 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:270:21
    |
270 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:272:21
    |
272 | /                     (if 1 as libc::c_int != 0 {
273 | |                         0 as libc::c_int as libc::c_long
274 | |                     } else {
275 | |                         -(1 as libc::c_int) as idx_t
276 | |                     }) + s
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:273:25
    |
273 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:275:25
    |
275 |                         -(1 as libc::c_int) as idx_t
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:22
    |
277 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:58
    |
277 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:279:21
    |
279 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:279:26
    |
279 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:281:21
    |
281 | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
282 | |                         0 as libc::c_int as libc::c_long
283 | |                     } else {
284 | |                         s
...   |
346 | |                         -(1 as libc::c_int) as idx_t / -s
347 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |_________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
281 ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
282 +                         0 as libc::c_int as libc::c_long
283 +                     } else {
284 +                         s
285 +                     }) - 1 as libc::c_int as libc::c_long)
286 +                         < 0 as libc::c_int as libc::c_long
287 +                     {
288 +                         !(((((if 1 as libc::c_int != 0 {
289 +                             0 as libc::c_int as libc::c_long
290 +                         } else {
291 +                             s
292 +                         }) + 1 as libc::c_int as libc::c_long)
293 +                             << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
294 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
295 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
296 +                             - 1 as libc::c_int as libc::c_long)
297 +                             * 2 as libc::c_int as libc::c_long
298 +                             + 1 as libc::c_int as libc::c_long)
299 +                     } else {
300 +                         (if 1 as libc::c_int != 0 {
301 +                             0 as libc::c_int as libc::c_long
302 +                         } else {
303 +                             s
304 +                         }) + 0 as libc::c_int as libc::c_long
305 +                     }) < 0 as libc::c_int as libc::c_long
306 +                     {
307 +                         (s
308 +                             < -(if ((if 1 as libc::c_int != 0 {
309 +                                 0 as libc::c_int as libc::c_long
310 +                             } else {
311 +                                 s
312 +                             }) - 1 as libc::c_int as libc::c_long)
313 +                                 < 0 as libc::c_int as libc::c_long
314 +                             {
315 +                                 ((((if 1 as libc::c_int != 0 {
316 +                                     0 as libc::c_int as libc::c_long
317 +                                 } else {
318 +                                     s
319 +                                 }) + 1 as libc::c_int as libc::c_long)
320 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
321 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
322 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
323 +                                     - 1 as libc::c_int as libc::c_long)
324 +                                     * 2 as libc::c_int as libc::c_long
325 +                                     + 1 as libc::c_int as libc::c_long
326 +                             } else {
327 +                                 (if 1 as libc::c_int != 0 {
328 +                                     0 as libc::c_int as libc::c_long
329 +                                 } else {
330 +                                     s
331 +                                 }) - 1 as libc::c_int as libc::c_long
332 +                             })) as libc::c_int
333 +                     } else {
334 +                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
335 +                     }) != 0
336 +                     {
337 +                         (if 1 as libc::c_int != 0 {
338 +                             0 as libc::c_int as libc::c_long
339 +                         } else {
340 +                             s
341 +                         }) + -(1 as libc::c_int) as idx_t
342 +                             >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
343 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
344 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
345 +                     } else {
346 +                         -(1 as libc::c_int) as idx_t / -s
347 +                     }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:281:22
    |
281 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
282 | |                         0 as libc::c_int as libc::c_long
283 | |                     } else {
284 | |                         s
...   |
346 | |                         -(1 as libc::c_int) as idx_t / -s
347 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:281:35
    |
281 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
282 | |                         0 as libc::c_int as libc::c_long
283 | |                     } else {
284 | |                         s
285 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:282:25
    |
282 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:285:26
    |
285 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:286:27
    |
286 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:288:30
    |
288 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
289 | |                             0 as libc::c_int as libc::c_long
290 | |                         } else {
291 | |                             s
292 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:289:29
    |
289 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:292:30
    |
292 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:294:47
    |
294 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:295:47
    |
295 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:296:31
    |
296 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:297:31
    |
297 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:298:31
    |
298 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:300:25
    |
300 | /                         (if 1 as libc::c_int != 0 {
301 | |                             0 as libc::c_int as libc::c_long
302 | |                         } else {
303 | |                             s
304 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:301:29
    |
301 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:304:30
    |
304 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:305:26
    |
305 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:307:25
    |
307 | /                         (s
308 | |                             < -(if ((if 1 as libc::c_int != 0 {
309 | |                                 0 as libc::c_int as libc::c_long
310 | |                             } else {
...   |
331 | |                                 }) - 1 as libc::c_int as libc::c_long
332 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
307 ~                         i32::from(s
308 +                             < -(if ((if 1 as libc::c_int != 0 {
309 +                                 0 as libc::c_int as libc::c_long
310 +                             } else {
311 +                                 s
312 +                             }) - 1 as libc::c_int as libc::c_long)
313 +                                 < 0 as libc::c_int as libc::c_long
314 +                             {
315 +                                 ((((if 1 as libc::c_int != 0 {
316 +                                     0 as libc::c_int as libc::c_long
317 +                                 } else {
318 +                                     s
319 +                                 }) + 1 as libc::c_int as libc::c_long)
320 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
321 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
322 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
323 +                                     - 1 as libc::c_int as libc::c_long)
324 +                                     * 2 as libc::c_int as libc::c_long
325 +                                     + 1 as libc::c_int as libc::c_long
326 +                             } else {
327 +                                 (if 1 as libc::c_int != 0 {
328 +                                     0 as libc::c_int as libc::c_long
329 +                                 } else {
330 +                                     s
331 +                                 }) - 1 as libc::c_int as libc::c_long
332 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:308:37
    |
308 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
309 | | ...                       0 as libc::c_int as libc::c_long
310 | | ...                   } else {
311 | | ...                       s
312 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:309:33
    |
309 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:34
    |
312 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:313:35
    |
313 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:315:36
    |
315 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
316 | | ...                       0 as libc::c_int as libc::c_long
317 | | ...                   } else {
318 | | ...                       s
319 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:316:37
    |
316 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:319:38
    |
319 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:321:55
    |
321 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:322:55
    |
322 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:323:39
    |
323 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:324:39
    |
324 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:325:39
    |
325 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:327:33
    |
327 | / ...                   (if 1 as libc::c_int != 0 {
328 | | ...                       0 as libc::c_int as libc::c_long
329 | | ...                   } else {
330 | | ...                       s
331 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:328:37
    |
328 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:331:38
    |
331 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:334:25
    |
334 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:334:26
    |
334 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:337:25
    |
337 | /                         (if 1 as libc::c_int != 0 {
338 | |                             0 as libc::c_int as libc::c_long
339 | |                         } else {
340 | |                             s
341 | |                         }) + -(1 as libc::c_int) as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:338:29
    |
338 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:341:30
    |
341 |                         }) + -(1 as libc::c_int) as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:343:47
    |
343 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:344:47
    |
344 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:346:25
    |
346 |                         -(1 as libc::c_int) as idx_t / -s
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:347:27
    |
347 |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:350:29
    |
350 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
351 | |                     0 as libc::c_int as libc::c_long
352 | |                 } else {
353 | |                     (if 1 as libc::c_int != 0 {
...   |
357 | |                     }) + 0 as libc::c_int as idx_t
358 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:351:21
    |
351 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:353:21
    |
353 | /                     (if 1 as libc::c_int != 0 {
354 | |                         0 as libc::c_int as libc::c_long
355 | |                     } else {
356 | |                         s
357 | |                     }) + 0 as libc::c_int as idx_t
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:354:25
    |
354 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:357:26
    |
357 |                     }) + 0 as libc::c_int as idx_t
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:358:22
    |
358 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:358:58
    |
358 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:360:26
    |
360 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
361 | |                         0 as libc::c_int as libc::c_long
362 | |                     } else {
363 | |                         (if 1 as libc::c_int != 0 {
...   |
367 | |                         }) + 0 as libc::c_int as idx_t
368 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:361:25
    |
361 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:363:25
    |
363 | /                         (if 1 as libc::c_int != 0 {
364 | |                             0 as libc::c_int as libc::c_long
365 | |                         } else {
366 | |                             s
367 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:364:29
    |
364 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:367:30
    |
367 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:368:26
    |
368 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:370:43
    |
370 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:371:43
    |
371 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:372:27
    |
372 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:373:27
    |
373 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:374:27
    |
374 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:376:21
    |
376 | /                     (if 1 as libc::c_int != 0 {
377 | |                         0 as libc::c_int as libc::c_long
378 | |                     } else {
379 | |                         (if 1 as libc::c_int != 0 {
...   |
383 | |                         }) + 0 as libc::c_int as idx_t
384 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:377:25
    |
377 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:379:25
    |
379 | /                         (if 1 as libc::c_int != 0 {
380 | |                             0 as libc::c_int as libc::c_long
381 | |                         } else {
382 | |                             s
383 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:380:29
    |
380 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:383:30
    |
383 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:384:26
    |
384 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:385:22
    |
385 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:387:21
    |
387 | /                     (((if 1 as libc::c_int != 0 {
388 | |                         0 as libc::c_int as libc::c_long
389 | |                     } else {
390 | |                         s
...   |
427 | |                             }) - 1 as libc::c_int as libc::c_long
428 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
387 ~                     i32::from(((if 1 as libc::c_int != 0 {
388 +                         0 as libc::c_int as libc::c_long
389 +                     } else {
390 +                         s
391 +                     }) + 0 as libc::c_int as idx_t)
392 +                         < -(if ((if 1 as libc::c_int != 0 {
393 +                             0 as libc::c_int as libc::c_long
394 +                         } else {
395 +                             (if 1 as libc::c_int != 0 {
396 +                                 0 as libc::c_int as libc::c_long
397 +                             } else {
398 +                                 s
399 +                             }) + 0 as libc::c_int as idx_t
400 +                         }) - 1 as libc::c_int as libc::c_long)
401 +                             < 0 as libc::c_int as libc::c_long
402 +                         {
403 +                             ((((if 1 as libc::c_int != 0 {
404 +                                 0 as libc::c_int as libc::c_long
405 +                             } else {
406 +                                 (if 1 as libc::c_int != 0 {
407 +                                     0 as libc::c_int as libc::c_long
408 +                                 } else {
409 +                                     s
410 +                                 }) + 0 as libc::c_int as idx_t
411 +                             }) + 1 as libc::c_int as libc::c_long)
412 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
413 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
414 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
415 +                                 - 1 as libc::c_int as libc::c_long)
416 +                                 * 2 as libc::c_int as libc::c_long
417 +                                 + 1 as libc::c_int as libc::c_long
418 +                         } else {
419 +                             (if 1 as libc::c_int != 0 {
420 +                                 0 as libc::c_int as libc::c_long
421 +                             } else {
422 +                                 (if 1 as libc::c_int != 0 {
423 +                                     0 as libc::c_int as libc::c_long
424 +                                 } else {
425 +                                     s
426 +                                 }) + 0 as libc::c_int as idx_t
427 +                             }) - 1 as libc::c_int as libc::c_long
428 +                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:387:23
    |
387 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
388 | |                         0 as libc::c_int as libc::c_long
389 | |                     } else {
390 | |                         s
391 | |                     }) + 0 as libc::c_int as idx_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:388:25
    |
388 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:391:26
    |
391 |                     }) + 0 as libc::c_int as idx_t)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:392:33
    |
392 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
393 | |                             0 as libc::c_int as libc::c_long
394 | |                         } else {
395 | |                             (if 1 as libc::c_int != 0 {
...   |
399 | |                             }) + 0 as libc::c_int as idx_t
400 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:393:29
    |
393 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:395:29
    |
395 | / ...                   (if 1 as libc::c_int != 0 {
396 | | ...                       0 as libc::c_int as libc::c_long
397 | | ...                   } else {
398 | | ...                       s
399 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:396:33
    |
396 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:399:34
    |
399 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:400:30
    |
400 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:401:31
    |
401 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:403:32
    |
403 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
404 | | ...                       0 as libc::c_int as libc::c_long
405 | | ...                   } else {
406 | | ...                       (if 1 as libc::c_int != 0 {
...   |
410 | | ...                       }) + 0 as libc::c_int as idx_t
411 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:404:33
    |
404 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:406:33
    |
406 | / ...                   (if 1 as libc::c_int != 0 {
407 | | ...                       0 as libc::c_int as libc::c_long
408 | | ...                   } else {
409 | | ...                       s
410 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:407:37
    |
407 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:410:38
    |
410 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:411:34
    |
411 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:413:51
    |
413 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:414:51
    |
414 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:415:35
    |
415 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:416:35
    |
416 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:417:35
    |
417 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:419:29
    |
419 | / ...                   (if 1 as libc::c_int != 0 {
420 | | ...                       0 as libc::c_int as libc::c_long
421 | | ...                   } else {
422 | | ...                       (if 1 as libc::c_int != 0 {
...   |
426 | | ...                       }) + 0 as libc::c_int as idx_t
427 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:420:33
    |
420 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:422:33
    |
422 | / ...                   (if 1 as libc::c_int != 0 {
423 | | ...                       0 as libc::c_int as libc::c_long
424 | | ...                   } else {
425 | | ...                       s
426 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:423:37
    |
423 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:426:38
    |
426 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:427:34
    |
427 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:430:21
    |
430 | /                     ((0 as libc::c_int as libc::c_long)
431 | |                         < (if 1 as libc::c_int != 0 {
432 | |                             0 as libc::c_int as libc::c_long
433 | |                         } else {
434 | |                             s
435 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |______________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
430 ~                     i32::from((0 as libc::c_int as libc::c_long)
431 +                         < (if 1 as libc::c_int != 0 {
432 +                             0 as libc::c_int as libc::c_long
433 +                         } else {
434 +                             s
435 +                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:430:22
    |
430 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:431:27
    |
431 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
432 | |                             0 as libc::c_int as libc::c_long
433 | |                         } else {
434 | |                             s
435 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:432:29
    |
432 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:435:30
    |
435 |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:436:33
    |
436 |                 }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:438:25
    |
438 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
439 | |                         0 as libc::c_int as libc::c_long
440 | |                     } else {
441 | |                         n
442 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:439:25
    |
439 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:442:26
    |
442 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:443:27
    |
443 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:445:25
    |
445 | /                         ((0 as libc::c_int as libc::c_long)
446 | |                             < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
445 ~                         i32::from((0 as libc::c_int as libc::c_long)
446 +                             < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:445:26
    |
445 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:446:35
    |
446 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:448:25
    |
448 | /                         ((0 as libc::c_int as libc::c_long) < n
449 | |                             && (-(1 as libc::c_int) as libc::c_long
450 | |                                 - 0 as libc::c_int as idx_t)
451 | |                                 < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
448 ~                         i32::from((0 as libc::c_int as libc::c_long) < n
449 +                             && (-(1 as libc::c_int) as libc::c_long
450 +                                 - 0 as libc::c_int as idx_t)
451 +                                 < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:448:26
    |
448 |                         ((0 as libc::c_int as libc::c_long) < n
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:449:33
    |
449 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:450:35
    |
450 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:451:39
    |
451 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:454:21
    |
454 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:454:22
    |
454 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:458:21
    |
458 |             if s == 0 as libc::c_int as libc::c_long {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:461:24
    |
461 |                 if n < 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:462:33
    |
462 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
463 | |                         0 as libc::c_int as libc::c_long
464 | |                     } else {
465 | |                         (if 1 as libc::c_int != 0 {
...   |
469 | |                         }) + 0 as libc::c_int as idx_t
470 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:463:25
    |
463 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:465:25
    |
465 | /                         (if 1 as libc::c_int != 0 {
466 | |                             0 as libc::c_int as libc::c_long
467 | |                         } else {
468 | |                             n
469 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:466:29
    |
466 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:469:30
    |
469 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:470:26
    |
470 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:471:27
    |
471 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:473:30
    |
473 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
474 | |                             0 as libc::c_int as libc::c_long
475 | |                         } else {
476 | |                             (if 1 as libc::c_int != 0 {
...   |
480 | |                             }) + 0 as libc::c_int as idx_t
481 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:474:29
    |
474 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:476:29
    |
476 | / ...                   (if 1 as libc::c_int != 0 {
477 | | ...                       0 as libc::c_int as libc::c_long
478 | | ...                   } else {
479 | | ...                       n
480 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:477:33
    |
477 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:480:34
    |
480 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:481:30
    |
481 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:483:47
    |
483 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:484:47
    |
484 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:485:31
    |
485 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:486:31
    |
486 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:487:31
    |
487 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:489:25
    |
489 | /                         (if 1 as libc::c_int != 0 {
490 | |                             0 as libc::c_int as libc::c_long
491 | |                         } else {
492 | |                             (if 1 as libc::c_int != 0 {
...   |
496 | |                             }) + 0 as libc::c_int as idx_t
497 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:490:29
    |
490 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:492:29
    |
492 | / ...                   (if 1 as libc::c_int != 0 {
493 | | ...                       0 as libc::c_int as libc::c_long
494 | | ...                   } else {
495 | | ...                       n
496 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:493:33
    |
493 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:496:34
    |
496 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:497:30
    |
497 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:498:26
    |
498 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:500:25
    |
500 | /                         (((if 1 as libc::c_int != 0 {
501 | |                             0 as libc::c_int as libc::c_long
502 | |                         } else {
503 | |                             n
...   |
540 | |                                 }) - 1 as libc::c_int as libc::c_long
541 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
500 ~                         i32::from(((if 1 as libc::c_int != 0 {
501 +                             0 as libc::c_int as libc::c_long
502 +                         } else {
503 +                             n
504 +                         }) + 0 as libc::c_int as idx_t)
505 +                             < -(if ((if 1 as libc::c_int != 0 {
506 +                                 0 as libc::c_int as libc::c_long
507 +                             } else {
508 +                                 (if 1 as libc::c_int != 0 {
509 +                                     0 as libc::c_int as libc::c_long
510 +                                 } else {
511 +                                     n
512 +                                 }) + 0 as libc::c_int as idx_t
513 +                             }) - 1 as libc::c_int as libc::c_long)
514 +                                 < 0 as libc::c_int as libc::c_long
515 +                             {
516 +                                 ((((if 1 as libc::c_int != 0 {
517 +                                     0 as libc::c_int as libc::c_long
518 +                                 } else {
519 +                                     (if 1 as libc::c_int != 0 {
520 +                                         0 as libc::c_int as libc::c_long
521 +                                     } else {
522 +                                         n
523 +                                     }) + 0 as libc::c_int as idx_t
524 +                                 }) + 1 as libc::c_int as libc::c_long)
525 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
526 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
527 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
528 +                                     - 1 as libc::c_int as libc::c_long)
529 +                                     * 2 as libc::c_int as libc::c_long
530 +                                     + 1 as libc::c_int as libc::c_long
531 +                             } else {
532 +                                 (if 1 as libc::c_int != 0 {
533 +                                     0 as libc::c_int as libc::c_long
534 +                                 } else {
535 +                                     (if 1 as libc::c_int != 0 {
536 +                                         0 as libc::c_int as libc::c_long
537 +                                     } else {
538 +                                         n
539 +                                     }) + 0 as libc::c_int as idx_t
540 +                                 }) - 1 as libc::c_int as libc::c_long
541 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:500:27
    |
500 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
501 | |                             0 as libc::c_int as libc::c_long
502 | |                         } else {
503 | |                             n
504 | |                         }) + 0 as libc::c_int as idx_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:501:29
    |
501 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:504:30
    |
504 |                         }) + 0 as libc::c_int as idx_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:505:37
    |
505 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
506 | | ...                       0 as libc::c_int as libc::c_long
507 | | ...                   } else {
508 | | ...                       (if 1 as libc::c_int != 0 {
...   |
512 | | ...                       }) + 0 as libc::c_int as idx_t
513 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:506:33
    |
506 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:508:33
    |
508 | / ...                   (if 1 as libc::c_int != 0 {
509 | | ...                       0 as libc::c_int as libc::c_long
510 | | ...                   } else {
511 | | ...                       n
512 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:509:37
    |
509 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:512:38
    |
512 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:513:34
    |
513 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:514:35
    |
514 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:516:36
    |
516 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
517 | | ...                       0 as libc::c_int as libc::c_long
518 | | ...                   } else {
519 | | ...                       (if 1 as libc::c_int != 0 {
...   |
523 | | ...                       }) + 0 as libc::c_int as idx_t
524 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:517:37
    |
517 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:519:37
    |
519 | / ...                   (if 1 as libc::c_int != 0 {
520 | | ...                       0 as libc::c_int as libc::c_long
521 | | ...                   } else {
522 | | ...                       n
523 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:520:41
    |
520 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:523:42
    |
523 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:524:38
    |
524 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:526:55
    |
526 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:527:55
    |
527 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:528:39
    |
528 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:529:39
    |
529 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:530:39
    |
530 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:532:33
    |
532 | / ...                   (if 1 as libc::c_int != 0 {
533 | | ...                       0 as libc::c_int as libc::c_long
534 | | ...                   } else {
535 | | ...                       (if 1 as libc::c_int != 0 {
...   |
539 | | ...                       }) + 0 as libc::c_int as idx_t
540 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:533:37
    |
533 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:535:37
    |
535 | / ...                   (if 1 as libc::c_int != 0 {
536 | | ...                       0 as libc::c_int as libc::c_long
537 | | ...                   } else {
538 | | ...                       n
539 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:536:41
    |
536 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:539:42
    |
539 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:540:38
    |
540 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:543:25
    |
543 | /                         ((0 as libc::c_int as libc::c_long)
544 | |                             < (if 1 as libc::c_int != 0 {
545 | |                                 0 as libc::c_int as libc::c_long
546 | |                             } else {
547 | |                                 n
548 | |                             }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
543 ~                         i32::from((0 as libc::c_int as libc::c_long)
544 +                             < (if 1 as libc::c_int != 0 {
545 +                                 0 as libc::c_int as libc::c_long
546 +                             } else {
547 +                                 n
548 +                             }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:543:26
    |
543 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:544:31
    |
544 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
545 | | ...                       0 as libc::c_int as libc::c_long
546 | | ...                   } else {
547 | | ...                       n
548 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:545:33
    |
545 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:548:34
    |
548 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:549:37
    |
549 |                     }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:551:29
    |
551 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
552 | |                             0 as libc::c_int as libc::c_long
553 | |                         } else {
554 | |                             s
555 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:552:29
    |
552 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:555:30
    |
555 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:556:31
    |
556 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:558:29
    |
558 | / ...                   ((0 as libc::c_int as libc::c_long)
559 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
558 ~                             i32::from((0 as libc::c_int as libc::c_long)
559 +                                 < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:558:30
    |
558 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:559:39
    |
559 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:561:29
    |
561 | / ...                   ((-(1 as libc::c_int) as libc::c_long
562 | | ...                       - 0 as libc::c_int as idx_t)
563 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
561 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
562 +                                 - 0 as libc::c_int as idx_t)
563 +                                 < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:561:31
    |
561 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:562:35
    |
562 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:563:39
    |
563 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:566:25
    |
566 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:566:26
    |
566 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:569:21
    |
569 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:569:22
    |
569 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:575:10
    |
575 |         *(&mut nbytes as *mut idx_t) = fresh8;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:579:10
    |
579 |         *(&mut nbytes as *mut idx_t) = fresh10;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:580:9
    |
580 |         fresh11 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:583:12
    |
583 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:586:13
    |
586 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:591:9
    |
591 | /         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
592 | |             DEFAULT_MXFAST_0 as libc::c_int
593 | |         } else {
594 | |             0 as libc::c_int
595 | |         }) as libc::c_ulong
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:591:22
    |
591 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(DEFAULT_MXFAST_0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:591:22
    |
591 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:592:13
    |
592 |             DEFAULT_MXFAST_0 as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:602:15
    |
602 |         *pn = 0 as libc::c_int as idx_t;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:607:14
    |
607 |             *(&mut n as *mut idx_t) = fresh12;
    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:608:13
    |
608 |             fresh13 as libc::c_int != 0
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:609:20
    |
609 |                 || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:610:24
    |
610 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:610:54
    |
610 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:611:25
    |
611 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
612 | |                         0 as libc::c_int as libc::c_long
613 | |                     } else {
614 | |                         n
615 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:612:25
    |
612 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:615:26
    |
615 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:616:27
    |
616 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:617:25
    |
617 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
618 | |                         0 as libc::c_int as libc::c_long
619 | |                     } else {
620 | |                         s
621 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:618:25
    |
618 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:621:26
    |
621 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:622:27
    |
622 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:623:32
    |
623 |                     && (if s < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:624:32
    |
624 |                         if n < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:625:33
    |
625 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
626 | | ...                       0 as libc::c_int as libc::c_long
627 | | ...                   } else {
628 | | ...                       (if 1 as libc::c_int != 0 {
...   |
632 | | ...                       }) + s
633 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:626:33
    |
626 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:628:33
    |
628 | / ...                   (if 1 as libc::c_int != 0 {
629 | | ...                       0 as libc::c_int as libc::c_long
630 | | ...                   } else {
631 | | ...                       -(1 as libc::c_int) as idx_t
632 | | ...                   }) + s
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:629:37
    |
629 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:631:37
    |
631 | ...                   -(1 as libc::c_int) as idx_t
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:633:34
    |
633 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:634:35
    |
634 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:636:33
    |
636 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:636:38
    |
636 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:638:33
    |
638 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
639 | | ...                       0 as libc::c_int as libc::c_long
640 | | ...                   } else {
641 | | ...                       s
...   |
704 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
705 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
638 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
639 +                                     0 as libc::c_int as libc::c_long
640 +                                 } else {
641 +                                     s
642 +                                 }) - 1 as libc::c_int as libc::c_long)
643 +                                     < 0 as libc::c_int as libc::c_long
644 +                                 {
645 +                                     !(((((if 1 as libc::c_int != 0 {
646 +                                         0 as libc::c_int as libc::c_long
647 +                                     } else {
648 +                                         s
649 +                                     }) + 1 as libc::c_int as libc::c_long)
650 +                                         << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
651 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
652 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
653 +                                         - 1 as libc::c_int as libc::c_long)
654 +                                         * 2 as libc::c_int as libc::c_long
655 +                                         + 1 as libc::c_int as libc::c_long)
656 +                                 } else {
657 +                                     (if 1 as libc::c_int != 0 {
658 +                                         0 as libc::c_int as libc::c_long
659 +                                     } else {
660 +                                         s
661 +                                     }) + 0 as libc::c_int as libc::c_long
662 +                                 }) < 0 as libc::c_int as libc::c_long
663 +                                 {
664 +                                     (s
665 +                                         < -(if ((if 1 as libc::c_int != 0 {
666 +                                             0 as libc::c_int as libc::c_long
667 +                                         } else {
668 +                                             s
669 +                                         }) - 1 as libc::c_int as libc::c_long)
670 +                                             < 0 as libc::c_int as libc::c_long
671 +                                         {
672 +                                             ((((if 1 as libc::c_int != 0 {
673 +                                                 0 as libc::c_int as libc::c_long
674 +                                             } else {
675 +                                                 s
676 +                                             }) + 1 as libc::c_int as libc::c_long)
677 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
678 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
679 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
680 +                                                 - 1 as libc::c_int as libc::c_long)
681 +                                                 * 2 as libc::c_int as libc::c_long
682 +                                                 + 1 as libc::c_int as libc::c_long
683 +                                         } else {
684 +                                             (if 1 as libc::c_int != 0 {
685 +                                                 0 as libc::c_int as libc::c_long
686 +                                             } else {
687 +                                                 s
688 +                                             }) - 1 as libc::c_int as libc::c_long
689 +                                         })) as libc::c_int
690 +                                 } else {
691 +                                     ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
692 +                                 }) != 0
693 +                                 {
694 +                                     (if 1 as libc::c_int != 0 {
695 +                                         0 as libc::c_int as libc::c_long
696 +                                     } else {
697 +                                         s
698 +                                     }) + -(1 as libc::c_int) as idx_t
699 +                                         >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
700 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
701 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
702 +                                 } else {
703 +                                     -(1 as libc::c_int) as idx_t / -s
704 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:638:34
    |
638 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ________________________^
639 | | ...                       0 as libc::c_int as libc::c_long
640 | | ...                   } else {
641 | | ...                       s
...   |
703 | | ...                       -(1 as libc::c_int) as idx_t / -s
704 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:638:47
    |
638 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________________^
639 | | ...                       0 as libc::c_int as libc::c_long
640 | | ...                   } else {
641 | | ...                       s
642 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:639:37
    |
639 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:642:38
    |
642 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:643:39
    |
643 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:645:42
    |
645 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
646 | | ...                       0 as libc::c_int as libc::c_long
647 | | ...                   } else {
648 | | ...                       s
649 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:646:41
    |
646 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:649:42
    |
649 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:651:59
    |
651 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:652:59
    |
652 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:653:43
    |
653 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:654:43
    |
654 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:655:43
    |
655 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:657:37
    |
657 | / ...                   (if 1 as libc::c_int != 0 {
658 | | ...                       0 as libc::c_int as libc::c_long
659 | | ...                   } else {
660 | | ...                       s
661 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:658:41
    |
658 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:661:42
    |
661 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:662:38
    |
662 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:664:37
    |
664 | / ...                   (s
665 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
666 | | ...                           0 as libc::c_int as libc::c_long
667 | | ...                       } else {
...   |
688 | | ...                           }) - 1 as libc::c_int as libc::c_long
689 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
664 ~                                     i32::from(s
665 +                                         < -(if ((if 1 as libc::c_int != 0 {
666 +                                             0 as libc::c_int as libc::c_long
667 +                                         } else {
668 +                                             s
669 +                                         }) - 1 as libc::c_int as libc::c_long)
670 +                                             < 0 as libc::c_int as libc::c_long
671 +                                         {
672 +                                             ((((if 1 as libc::c_int != 0 {
673 +                                                 0 as libc::c_int as libc::c_long
674 +                                             } else {
675 +                                                 s
676 +                                             }) + 1 as libc::c_int as libc::c_long)
677 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
678 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
679 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
680 +                                                 - 1 as libc::c_int as libc::c_long)
681 +                                                 * 2 as libc::c_int as libc::c_long
682 +                                                 + 1 as libc::c_int as libc::c_long
683 +                                         } else {
684 +                                             (if 1 as libc::c_int != 0 {
685 +                                                 0 as libc::c_int as libc::c_long
686 +                                             } else {
687 +                                                 s
688 +                                             }) - 1 as libc::c_int as libc::c_long
689 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:665:49
    |
665 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
666 | | ...                       0 as libc::c_int as libc::c_long
667 | | ...                   } else {
668 | | ...                       s
669 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:666:45
    |
666 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:669:46
    |
669 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:670:47
    |
670 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:672:48
    |
672 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
673 | | ...                       0 as libc::c_int as libc::c_long
674 | | ...                   } else {
675 | | ...                       s
676 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:673:49
    |
673 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:676:50
    |
676 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:678:67
    |
678 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:679:67
    |
679 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:680:51
    |
680 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:681:51
    |
681 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:682:51
    |
682 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:684:45
    |
684 | / ...                   (if 1 as libc::c_int != 0 {
685 | | ...                       0 as libc::c_int as libc::c_long
686 | | ...                   } else {
687 | | ...                       s
688 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:685:49
    |
685 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:688:50
    |
688 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:691:37
    |
691 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:691:38
    |
691 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:694:37
    |
694 | / ...                   (if 1 as libc::c_int != 0 {
695 | | ...                       0 as libc::c_int as libc::c_long
696 | | ...                   } else {
697 | | ...                       s
698 | | ...                   }) + -(1 as libc::c_int) as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:695:41
    |
695 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:698:42
    |
698 | ...                   }) + -(1 as libc::c_int) as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:700:59
    |
700 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:701:59
    |
701 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:703:37
    |
703 | ...                   -(1 as libc::c_int) as idx_t / -s
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:704:39
    |
704 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:708:41
    |
708 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
709 | | ...                       0 as libc::c_int as libc::c_long
710 | | ...                   } else {
711 | | ...                       (if 1 as libc::c_int != 0 {
...   |
715 | | ...                       }) + 0 as libc::c_int as idx_t
716 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:709:33
    |
709 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:711:33
    |
711 | / ...                   (if 1 as libc::c_int != 0 {
712 | | ...                       0 as libc::c_int as libc::c_long
713 | | ...                   } else {
714 | | ...                       s
715 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:712:37
    |
712 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:715:38
    |
715 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:716:34
    |
716 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:717:35
    |
717 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:719:38
    |
719 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
720 | | ...                       0 as libc::c_int as libc::c_long
721 | | ...                   } else {
722 | | ...                       (if 1 as libc::c_int != 0 {
...   |
726 | | ...                       }) + 0 as libc::c_int as idx_t
727 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:720:37
    |
720 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:722:37
    |
722 | / ...                   (if 1 as libc::c_int != 0 {
723 | | ...                       0 as libc::c_int as libc::c_long
724 | | ...                   } else {
725 | | ...                       s
726 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:723:41
    |
723 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:726:42
    |
726 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:727:38
    |
727 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:729:55
    |
729 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:730:55
    |
730 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:731:39
    |
731 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:732:39
    |
732 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:733:39
    |
733 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:735:33
    |
735 | / ...                   (if 1 as libc::c_int != 0 {
736 | | ...                       0 as libc::c_int as libc::c_long
737 | | ...                   } else {
738 | | ...                       (if 1 as libc::c_int != 0 {
...   |
742 | | ...                       }) + 0 as libc::c_int as idx_t
743 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:736:37
    |
736 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:738:37
    |
738 | / ...                   (if 1 as libc::c_int != 0 {
739 | | ...                       0 as libc::c_int as libc::c_long
740 | | ...                   } else {
741 | | ...                       s
742 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:739:41
    |
739 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:742:42
    |
742 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:743:38
    |
743 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:744:34
    |
744 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:746:33
    |
746 | / ...                   (((if 1 as libc::c_int != 0 {
747 | | ...                       0 as libc::c_int as libc::c_long
748 | | ...                   } else {
749 | | ...                       s
...   |
786 | | ...                           }) - 1 as libc::c_int as libc::c_long
787 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
746 ~                                 i32::from(((if 1 as libc::c_int != 0 {
747 +                                     0 as libc::c_int as libc::c_long
748 +                                 } else {
749 +                                     s
750 +                                 }) + 0 as libc::c_int as idx_t)
751 +                                     < -(if ((if 1 as libc::c_int != 0 {
752 +                                         0 as libc::c_int as libc::c_long
753 +                                     } else {
754 +                                         (if 1 as libc::c_int != 0 {
755 +                                             0 as libc::c_int as libc::c_long
756 +                                         } else {
757 +                                             s
758 +                                         }) + 0 as libc::c_int as idx_t
759 +                                     }) - 1 as libc::c_int as libc::c_long)
760 +                                         < 0 as libc::c_int as libc::c_long
761 +                                     {
762 +                                         ((((if 1 as libc::c_int != 0 {
763 +                                             0 as libc::c_int as libc::c_long
764 +                                         } else {
765 +                                             (if 1 as libc::c_int != 0 {
766 +                                                 0 as libc::c_int as libc::c_long
767 +                                             } else {
768 +                                                 s
769 +                                             }) + 0 as libc::c_int as idx_t
770 +                                         }) + 1 as libc::c_int as libc::c_long)
771 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
772 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
773 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
774 +                                             - 1 as libc::c_int as libc::c_long)
775 +                                             * 2 as libc::c_int as libc::c_long
776 +                                             + 1 as libc::c_int as libc::c_long
777 +                                     } else {
778 +                                         (if 1 as libc::c_int != 0 {
779 +                                             0 as libc::c_int as libc::c_long
780 +                                         } else {
781 +                                             (if 1 as libc::c_int != 0 {
782 +                                                 0 as libc::c_int as libc::c_long
783 +                                             } else {
784 +                                                 s
785 +                                             }) + 0 as libc::c_int as idx_t
786 +                                         }) - 1 as libc::c_int as libc::c_long
787 +                                     }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:746:35
    |
746 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
747 | | ...                       0 as libc::c_int as libc::c_long
748 | | ...                   } else {
749 | | ...                       s
750 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:747:37
    |
747 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:750:38
    |
750 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:751:45
    |
751 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
752 | | ...                       0 as libc::c_int as libc::c_long
753 | | ...                   } else {
754 | | ...                       (if 1 as libc::c_int != 0 {
...   |
758 | | ...                       }) + 0 as libc::c_int as idx_t
759 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:752:41
    |
752 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:754:41
    |
754 | / ...                   (if 1 as libc::c_int != 0 {
755 | | ...                       0 as libc::c_int as libc::c_long
756 | | ...                   } else {
757 | | ...                       s
758 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:755:45
    |
755 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:758:46
    |
758 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:759:42
    |
759 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:760:43
    |
760 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:762:44
    |
762 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
763 | | ...                       0 as libc::c_int as libc::c_long
764 | | ...                   } else {
765 | | ...                       (if 1 as libc::c_int != 0 {
...   |
769 | | ...                       }) + 0 as libc::c_int as idx_t
770 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:763:45
    |
763 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:765:45
    |
765 | / ...                   (if 1 as libc::c_int != 0 {
766 | | ...                       0 as libc::c_int as libc::c_long
767 | | ...                   } else {
768 | | ...                       s
769 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:766:49
    |
766 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:769:50
    |
769 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:770:46
    |
770 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:772:63
    |
772 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:773:63
    |
773 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:774:47
    |
774 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:775:47
    |
775 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:776:47
    |
776 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:778:41
    |
778 | / ...                   (if 1 as libc::c_int != 0 {
779 | | ...                       0 as libc::c_int as libc::c_long
780 | | ...                   } else {
781 | | ...                       (if 1 as libc::c_int != 0 {
...   |
785 | | ...                       }) + 0 as libc::c_int as idx_t
786 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:779:45
    |
779 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:781:45
    |
781 | / ...                   (if 1 as libc::c_int != 0 {
782 | | ...                       0 as libc::c_int as libc::c_long
783 | | ...                   } else {
784 | | ...                       s
785 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:782:49
    |
782 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:785:50
    |
785 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:786:46
    |
786 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:789:33
    |
789 | / ...                   ((0 as libc::c_int as libc::c_long)
790 | | ...                       < (if 1 as libc::c_int != 0 {
791 | | ...                           0 as libc::c_int as libc::c_long
792 | | ...                       } else {
793 | | ...                           s
794 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
789 ~                                 i32::from((0 as libc::c_int as libc::c_long)
790 +                                     < (if 1 as libc::c_int != 0 {
791 +                                         0 as libc::c_int as libc::c_long
792 +                                     } else {
793 +                                         s
794 +                                     }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:789:34
    |
789 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:790:39
    |
790 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
791 | | ...                       0 as libc::c_int as libc::c_long
792 | | ...                   } else {
793 | | ...                       s
794 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:791:41
    |
791 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:794:42
    |
794 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:795:45
    |
795 | ...                   }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:797:37
    |
797 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
798 | | ...                       0 as libc::c_int as libc::c_long
799 | | ...                   } else {
800 | | ...                       n
801 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:798:37
    |
798 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:801:38
    |
801 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:802:39
    |
802 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:804:37
    |
804 | / ...                   ((0 as libc::c_int as libc::c_long)
805 | | ...                       < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
804 ~                                     i32::from((0 as libc::c_int as libc::c_long)
805 +                                         < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:804:38
    |
804 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:805:47
    |
805 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:807:37
    |
807 | / ...                   ((0 as libc::c_int as libc::c_long) < n
808 | | ...                       && (-(1 as libc::c_int) as libc::c_long
809 | | ...                           - 0 as libc::c_int as idx_t)
810 | | ...                           < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |____________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
807 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n
808 +                                         && (-(1 as libc::c_int) as libc::c_long
809 +                                             - 0 as libc::c_int as idx_t)
810 +                                             < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:807:38
    |
807 | ...                   ((0 as libc::c_int as libc::c_long) < n
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:808:45
    |
808 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:809:47
    |
809 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:810:51
    |
810 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:813:33
    |
813 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:813:34
    |
813 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:817:33
    |
817 |                         if s == 0 as libc::c_int as libc::c_long {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:820:36
    |
820 | ...                   if n < 0 as libc::c_int as libc::c_long {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:821:45
    |
821 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
822 | | ...                       0 as libc::c_int as libc::c_long
823 | | ...                   } else {
824 | | ...                       (if 1 as libc::c_int != 0 {
...   |
828 | | ...                       }) + 0 as libc::c_int as idx_t
829 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:822:37
    |
822 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:824:37
    |
824 | / ...                   (if 1 as libc::c_int != 0 {
825 | | ...                       0 as libc::c_int as libc::c_long
826 | | ...                   } else {
827 | | ...                       n
828 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:825:41
    |
825 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:828:42
    |
828 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:829:38
    |
829 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:830:39
    |
830 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:832:42
    |
832 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
833 | | ...                       0 as libc::c_int as libc::c_long
834 | | ...                   } else {
835 | | ...                       (if 1 as libc::c_int != 0 {
...   |
839 | | ...                       }) + 0 as libc::c_int as idx_t
840 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:833:41
    |
833 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:835:41
    |
835 | / ...                   (if 1 as libc::c_int != 0 {
836 | | ...                       0 as libc::c_int as libc::c_long
837 | | ...                   } else {
838 | | ...                       n
839 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:836:45
    |
836 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:839:46
    |
839 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:840:42
    |
840 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:842:59
    |
842 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:843:59
    |
843 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:844:43
    |
844 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:845:43
    |
845 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:846:43
    |
846 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:848:37
    |
848 | / ...                   (if 1 as libc::c_int != 0 {
849 | | ...                       0 as libc::c_int as libc::c_long
850 | | ...                   } else {
851 | | ...                       (if 1 as libc::c_int != 0 {
...   |
855 | | ...                       }) + 0 as libc::c_int as idx_t
856 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:849:41
    |
849 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:851:41
    |
851 | / ...                   (if 1 as libc::c_int != 0 {
852 | | ...                       0 as libc::c_int as libc::c_long
853 | | ...                   } else {
854 | | ...                       n
855 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:852:45
    |
852 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:855:46
    |
855 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:856:42
    |
856 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:857:38
    |
857 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:859:37
    |
859 | / ...                   (((if 1 as libc::c_int != 0 {
860 | | ...                       0 as libc::c_int as libc::c_long
861 | | ...                   } else {
862 | | ...                       n
...   |
899 | | ...                           }) - 1 as libc::c_int as libc::c_long
900 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
859 ~                                     i32::from(((if 1 as libc::c_int != 0 {
860 +                                         0 as libc::c_int as libc::c_long
861 +                                     } else {
862 +                                         n
863 +                                     }) + 0 as libc::c_int as idx_t)
864 +                                         < -(if ((if 1 as libc::c_int != 0 {
865 +                                             0 as libc::c_int as libc::c_long
866 +                                         } else {
867 +                                             (if 1 as libc::c_int != 0 {
868 +                                                 0 as libc::c_int as libc::c_long
869 +                                             } else {
870 +                                                 n
871 +                                             }) + 0 as libc::c_int as idx_t
872 +                                         }) - 1 as libc::c_int as libc::c_long)
873 +                                             < 0 as libc::c_int as libc::c_long
874 +                                         {
875 +                                             ((((if 1 as libc::c_int != 0 {
876 +                                                 0 as libc::c_int as libc::c_long
877 +                                             } else {
878 +                                                 (if 1 as libc::c_int != 0 {
879 +                                                     0 as libc::c_int as libc::c_long
880 +                                                 } else {
881 +                                                     n
882 +                                                 }) + 0 as libc::c_int as idx_t
883 +                                             }) + 1 as libc::c_int as libc::c_long)
884 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
885 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
886 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
887 +                                                 - 1 as libc::c_int as libc::c_long)
888 +                                                 * 2 as libc::c_int as libc::c_long
889 +                                                 + 1 as libc::c_int as libc::c_long
890 +                                         } else {
891 +                                             (if 1 as libc::c_int != 0 {
892 +                                                 0 as libc::c_int as libc::c_long
893 +                                             } else {
894 +                                                 (if 1 as libc::c_int != 0 {
895 +                                                     0 as libc::c_int as libc::c_long
896 +                                                 } else {
897 +                                                     n
898 +                                                 }) + 0 as libc::c_int as idx_t
899 +                                             }) - 1 as libc::c_int as libc::c_long
900 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:859:39
    |
859 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
860 | | ...                       0 as libc::c_int as libc::c_long
861 | | ...                   } else {
862 | | ...                       n
863 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:860:41
    |
860 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:863:42
    |
863 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:864:49
    |
864 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
865 | | ...                       0 as libc::c_int as libc::c_long
866 | | ...                   } else {
867 | | ...                       (if 1 as libc::c_int != 0 {
...   |
871 | | ...                       }) + 0 as libc::c_int as idx_t
872 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:865:45
    |
865 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:867:45
    |
867 | / ...                   (if 1 as libc::c_int != 0 {
868 | | ...                       0 as libc::c_int as libc::c_long
869 | | ...                   } else {
870 | | ...                       n
871 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:868:49
    |
868 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:871:50
    |
871 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:872:46
    |
872 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:873:47
    |
873 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:875:48
    |
875 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
876 | | ...                       0 as libc::c_int as libc::c_long
877 | | ...                   } else {
878 | | ...                       (if 1 as libc::c_int != 0 {
...   |
882 | | ...                       }) + 0 as libc::c_int as idx_t
883 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:876:49
    |
876 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:878:49
    |
878 | / ...                   (if 1 as libc::c_int != 0 {
879 | | ...                       0 as libc::c_int as libc::c_long
880 | | ...                   } else {
881 | | ...                       n
882 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:879:53
    |
879 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:882:54
    |
882 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:883:50
    |
883 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:885:67
    |
885 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:886:67
    |
886 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:887:51
    |
887 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:888:51
    |
888 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:889:51
    |
889 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:891:45
    |
891 | / ...                   (if 1 as libc::c_int != 0 {
892 | | ...                       0 as libc::c_int as libc::c_long
893 | | ...                   } else {
894 | | ...                       (if 1 as libc::c_int != 0 {
...   |
898 | | ...                       }) + 0 as libc::c_int as idx_t
899 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:892:49
    |
892 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:894:49
    |
894 | / ...                   (if 1 as libc::c_int != 0 {
895 | | ...                       0 as libc::c_int as libc::c_long
896 | | ...                   } else {
897 | | ...                       n
898 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:895:53
    |
895 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:898:54
    |
898 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:899:50
    |
899 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:902:37
    |
902 | / ...                   ((0 as libc::c_int as libc::c_long)
903 | | ...                       < (if 1 as libc::c_int != 0 {
904 | | ...                           0 as libc::c_int as libc::c_long
905 | | ...                       } else {
906 | | ...                           n
907 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
902 ~                                     i32::from((0 as libc::c_int as libc::c_long)
903 +                                         < (if 1 as libc::c_int != 0 {
904 +                                             0 as libc::c_int as libc::c_long
905 +                                         } else {
906 +                                             n
907 +                                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:902:38
    |
902 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:903:43
    |
903 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
904 | | ...                       0 as libc::c_int as libc::c_long
905 | | ...                   } else {
906 | | ...                       n
907 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:904:45
    |
904 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:907:46
    |
907 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:908:49
    |
908 | ...                   }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:910:41
    |
910 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
911 | | ...                       0 as libc::c_int as libc::c_long
912 | | ...                   } else {
913 | | ...                       s
914 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:911:41
    |
911 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:914:42
    |
914 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:915:43
    |
915 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:917:41
    |
917 | / ...                   ((0 as libc::c_int as libc::c_long)
918 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
917 ~                                         i32::from((0 as libc::c_int as libc::c_long)
918 +                                             < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:917:42
    |
917 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:918:51
    |
918 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:920:41
    |
920 | / ...                   ((-(1 as libc::c_int) as libc::c_long
921 | | ...                       - 0 as libc::c_int as idx_t)
922 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
920 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
921 +                                             - 0 as libc::c_int as idx_t)
922 +                                             < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:920:43
    |
920 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:921:47
    |
921 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:922:51
    |
922 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:925:37
    |
925 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:925:38
    |
925 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:928:33
    |
928 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:928:34
    |
928 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:934:22
    |
934 |                     *(&mut nbytes as *mut idx_t) = fresh18;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:938:22
    |
938 |                     *(&mut nbytes as *mut idx_t) = fresh20;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:939:21
    |
939 |                     fresh21 as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh21)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:945:23
    |
945 |     pa = xrealloc(pa, nbytes as size_t);
    |                       ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:962:1
    |
962 | / pub unsafe extern "C" fn xcalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
963 | |     let ptr = calloc(n, s);
964 | | return check_nonnull(ptr);
965 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:964:1
    |
964 | return check_nonnull(ptr);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ptr)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:970:15
    |
970 |     let ptr = allocation.as_mut_ptr() as *mut libc::c_void;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `allocation.as_mut_ptr().cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:976:1
    |
976 | / pub unsafe extern "C" fn xmemdup(
977 | |     mut p: *const libc::c_void,
978 | |     mut s: size_t,
979 | | ) -> *mut libc::c_void {
980 | |     return memcpy(xmalloc(s), p, s);
981 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:980:5
    |
980 |     return memcpy(xmalloc(s), p, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `memcpy(xmalloc(s), p, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/xmalloc.rs:1000:1
     |
1000 | / pub unsafe extern "C" fn xstrdup(mut string: *const libc::c_char) -> *mut libc::c_char {
1001 | |     return xmemdup(
1002 | |         string as *const libc::c_void,
1003 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
1004 | |     ) as *mut libc::c_char;
1005 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/xmalloc.rs:1001:5
     |
1001 | /     return xmemdup(
1002 | |         string as *const libc::c_void,
1003 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
1004 | |     ) as *mut libc::c_char;
     | |___________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1001 ~     xmemdup(
1002 +         string as *const libc::c_void,
1003 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
1004 +     ) as *mut libc::c_char
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/xmalloc.rs:1001:12
     |
1001 |       return xmemdup(
     |  ____________^
1002 | |         string as *const libc::c_void,
1003 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
1004 | |     ) as *mut libc::c_char;
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1001 ~     return xmemdup(
1002 +         string as *const libc::c_void,
1003 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
1004 ~     ).cast::<i8>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/xmalloc.rs:1002:9
     |
1002 |         string as *const libc::c_void,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `string.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/xmalloc.rs:1003:39
     |
1003 |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function has a cognitive complexity of (65/25)
  --> src/xstrtoimax.rs:41:22
   |
41 | unsafe extern "C" fn bkm_scale(
   |                      ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (343/100)
   --> src/xstrtoimax.rs:41:1
    |
41  | / unsafe extern "C" fn bkm_scale(
42  | |     mut x: *mut intmax_t,
43  | |     mut scale_factor: libc::c_int,
44  | | ) -> strtol_error {
...   |
387 | |     return LONGINT_OK;
388 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:387:5
    |
387 |     return LONGINT_OK;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `LONGINT_OK`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:46:11
   |
46 |     if if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:46:44
   |
46 |     if if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:47:13
   |
47 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { *x })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:47:41
   |
47 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { *x })
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:48:15
   |
48 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:48:51
   |
48 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:49:13
   |
49 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:52:21
   |
52 |             if *x < 0 as libc::c_int as libc::c_long {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:53:21
   |
53 |                   if ((if 1 as libc::c_int != 0 {
   |  _____________________^
54 | |                     0 as libc::c_int as libc::c_long
55 | |                 } else {
56 | |                     (if 1 as libc::c_int != 0 {
...  |
60 | |                     }) + scale_factor as libc::c_long
61 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   | |__________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:54:21
   |
54 |                     0 as libc::c_int as libc::c_long
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:56:21
   |
56 | /                     (if 1 as libc::c_int != 0 {
57 | |                         0 as libc::c_int as libc::c_long
58 | |                     } else {
59 | |                         -(1 as libc::c_int) as intmax_t
60 | |                     }) + scale_factor as libc::c_long
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:57:25
   |
57 |                         0 as libc::c_int as libc::c_long
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:59:25
   |
59 |                         -(1 as libc::c_int) as intmax_t
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:60:26
   |
60 |                     }) + scale_factor as libc::c_long
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:61:22
   |
61 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:61:58
   |
61 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xstrtoimax.rs:63:21
   |
63 | /                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
64 | |                         as libc::c_int
   | |______________________________________^ help: try: `i32::from(*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:63:27
   |
63 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:63:61
   |
63 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:66:21
    |
66  | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
67  | |                         0 as libc::c_int
68  | |                     } else {
69  | |                         scale_factor
...   |
125 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
126 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |__________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
66  ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
67  +                         0 as libc::c_int
68  +                     } else {
69  +                         scale_factor
70  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
71  +                     {
72  +                         !(((((if 1 as libc::c_int != 0 {
73  +                             0 as libc::c_int
74  +                         } else {
75  +                             scale_factor
76  +                         }) + 1 as libc::c_int)
77  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
78  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
79  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
80  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
81  +                     } else {
82  +                         (if 1 as libc::c_int != 0 {
83  +                             0 as libc::c_int
84  +                         } else {
85  +                             scale_factor
86  +                         }) + 0 as libc::c_int
87  +                     }) < 0 as libc::c_int
88  +                     {
89  +                         (scale_factor
90  +                             < -(if ((if 1 as libc::c_int != 0 {
91  +                                 0 as libc::c_int
92  +                             } else {
93  +                                 scale_factor
94  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
95  +                             {
96  +                                 ((((if 1 as libc::c_int != 0 {
97  +                                     0 as libc::c_int
98  +                                 } else {
99  +                                     scale_factor
100 +                                 }) + 1 as libc::c_int)
101 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
102 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
103 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
104 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
105 +                             } else {
106 +                                 (if 1 as libc::c_int != 0 {
107 +                                     0 as libc::c_int
108 +                                 } else {
109 +                                     scale_factor
110 +                                 }) - 1 as libc::c_int
111 +                             })) as libc::c_int
112 +                     } else {
113 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
114 +                     }) != 0
115 +                     {
116 +                         (if 1 as libc::c_int != 0 {
117 +                             0 as libc::c_int
118 +                         } else {
119 +                             scale_factor
120 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
121 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
122 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
123 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
124 +                     } else {
125 +                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
126 +                     }) <= -(1 as libc::c_int) as libc::c_long - *x)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:66:22
    |
66  |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
67  | |                         0 as libc::c_int
68  | |                     } else {
69  | |                         scale_factor
...   |
125 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
126 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:66:35
   |
66 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
   |  ___________________________________^
67 | |                         0 as libc::c_int
68 | |                     } else {
69 | |                         scale_factor
70 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:72:30
   |
72 |                           !(((((if 1 as libc::c_int != 0 {
   |  ______________________________^
73 | |                             0 as libc::c_int
74 | |                         } else {
75 | |                             scale_factor
76 | |                         }) + 1 as libc::c_int)
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:78:47
   |
78 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:79:47
   |
79 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:82:25
   |
82 | /                         (if 1 as libc::c_int != 0 {
83 | |                             0 as libc::c_int
84 | |                         } else {
85 | |                             scale_factor
86 | |                         }) + 0 as libc::c_int
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:89:25
    |
89  | /                         (scale_factor
90  | |                             < -(if ((if 1 as libc::c_int != 0 {
91  | |                                 0 as libc::c_int
92  | |                             } else {
...   |
110 | |                                 }) - 1 as libc::c_int
111 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
89  ~                         i32::from(scale_factor
90  +                             < -(if ((if 1 as libc::c_int != 0 {
91  +                                 0 as libc::c_int
92  +                             } else {
93  +                                 scale_factor
94  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
95  +                             {
96  +                                 ((((if 1 as libc::c_int != 0 {
97  +                                     0 as libc::c_int
98  +                                 } else {
99  +                                     scale_factor
100 +                                 }) + 1 as libc::c_int)
101 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
102 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
103 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
104 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
105 +                             } else {
106 +                                 (if 1 as libc::c_int != 0 {
107 +                                     0 as libc::c_int
108 +                                 } else {
109 +                                     scale_factor
110 +                                 }) - 1 as libc::c_int
111 +                             }))
    |

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:90:37
   |
90 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
   |  _______________________________^
91 | | ...                       0 as libc::c_int
92 | | ...                   } else {
93 | | ...                       scale_factor
94 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
   | |________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:96:36
    |
96  |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
97  | | ...                       0 as libc::c_int
98  | | ...                   } else {
99  | | ...                       scale_factor
100 | | ...                   }) + 1 as libc::c_int)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:102:55
    |
102 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:103:55
    |
103 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:106:33
    |
106 | / ...                   (if 1 as libc::c_int != 0 {
107 | | ...                       0 as libc::c_int
108 | | ...                   } else {
109 | | ...                       scale_factor
110 | | ...                   }) - 1 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:113:25
    |
113 |                         ((0 as libc::c_int) < scale_factor) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:116:25
    |
116 | /                         (if 1 as libc::c_int != 0 {
117 | |                             0 as libc::c_int
118 | |                         } else {
119 | |                             scale_factor
120 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
116 ~                         i64::from((if 1 as libc::c_int != 0 {
117 +                             0 as libc::c_int
118 +                         } else {
119 +                             scale_factor
120 ~                         })) + -(1 as libc::c_int) as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:116:25
    |
116 | /                         (if 1 as libc::c_int != 0 {
117 | |                             0 as libc::c_int
118 | |                         } else {
119 | |                             scale_factor
120 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:120:46
    |
120 |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:122:47
    |
122 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:123:47
    |
123 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:125:25
    |
125 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:125:59
    |
125 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:126:27
    |
126 |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:129:29
    |
129 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
130 | |                     0 as libc::c_int as libc::c_long
131 | |                 } else {
132 | |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
133 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
134 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:130:21
    |
130 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:132:21
    |
132 | /                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
133 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
    | |_______________________________________^ help: try: `i64::from((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor }))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:132:21
    |
132 |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:133:43
    |
133 |                         as libc::c_long + 0 as libc::c_int as intmax_t
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:134:22
    |
134 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:134:58
    |
134 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:136:26
    |
136 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
137 | |                         0 as libc::c_int as libc::c_long
138 | |                     } else {
139 | |                         (if 1 as libc::c_int != 0 {
...   |
143 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
144 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:137:25
    |
137 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:139:25
    |
139 | /                         (if 1 as libc::c_int != 0 {
140 | |                             0 as libc::c_int
141 | |                         } else {
142 | |                             scale_factor
143 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
139 ~                         i64::from((if 1 as libc::c_int != 0 {
140 +                             0 as libc::c_int
141 +                         } else {
142 +                             scale_factor
143 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:139:25
    |
139 | /                         (if 1 as libc::c_int != 0 {
140 | |                             0 as libc::c_int
141 | |                         } else {
142 | |                             scale_factor
143 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:143:46
    |
143 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:144:26
    |
144 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:146:43
    |
146 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:147:43
    |
147 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:148:27
    |
148 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:149:27
    |
149 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:150:27
    |
150 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:152:21
    |
152 | /                     (if 1 as libc::c_int != 0 {
153 | |                         0 as libc::c_int as libc::c_long
154 | |                     } else {
155 | |                         (if 1 as libc::c_int != 0 {
...   |
159 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
160 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:153:25
    |
153 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:155:25
    |
155 | /                         (if 1 as libc::c_int != 0 {
156 | |                             0 as libc::c_int
157 | |                         } else {
158 | |                             scale_factor
159 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
155 ~                         i64::from((if 1 as libc::c_int != 0 {
156 +                             0 as libc::c_int
157 +                         } else {
158 +                             scale_factor
159 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:155:25
    |
155 | /                         (if 1 as libc::c_int != 0 {
156 | |                             0 as libc::c_int
157 | |                         } else {
158 | |                             scale_factor
159 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:159:46
    |
159 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:160:26
    |
160 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:161:22
    |
161 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:163:21
    |
163 | /                     (((if 1 as libc::c_int != 0 {
164 | |                         0 as libc::c_int
165 | |                     } else {
166 | |                         scale_factor
...   |
203 | |                             }) - 1 as libc::c_int as libc::c_long
204 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
163 ~                     i32::from(((if 1 as libc::c_int != 0 {
164 +                         0 as libc::c_int
165 +                     } else {
166 +                         scale_factor
167 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
168 +                         < -(if ((if 1 as libc::c_int != 0 {
169 +                             0 as libc::c_int as libc::c_long
170 +                         } else {
171 +                             (if 1 as libc::c_int != 0 {
172 +                                 0 as libc::c_int
173 +                             } else {
174 +                                 scale_factor
175 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
176 +                         }) - 1 as libc::c_int as libc::c_long)
177 +                             < 0 as libc::c_int as libc::c_long
178 +                         {
179 +                             ((((if 1 as libc::c_int != 0 {
180 +                                 0 as libc::c_int as libc::c_long
181 +                             } else {
182 +                                 (if 1 as libc::c_int != 0 {
183 +                                     0 as libc::c_int
184 +                                 } else {
185 +                                     scale_factor
186 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
187 +                             }) + 1 as libc::c_int as libc::c_long)
188 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
189 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
190 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
191 +                                 - 1 as libc::c_int as libc::c_long)
192 +                                 * 2 as libc::c_int as libc::c_long
193 +                                 + 1 as libc::c_int as libc::c_long
194 +                         } else {
195 +                             (if 1 as libc::c_int != 0 {
196 +                                 0 as libc::c_int as libc::c_long
197 +                             } else {
198 +                                 (if 1 as libc::c_int != 0 {
199 +                                     0 as libc::c_int
200 +                                 } else {
201 +                                     scale_factor
202 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
203 +                             }) - 1 as libc::c_int as libc::c_long
204 +                         }))
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:163:23
    |
163 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
164 | |                         0 as libc::c_int
165 | |                     } else {
166 | |                         scale_factor
167 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
163 ~                     ((i64::from((if 1 as libc::c_int != 0 {
164 +                         0 as libc::c_int
165 +                     } else {
166 +                         scale_factor
167 ~                     })) + 0 as libc::c_int as intmax_t)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:163:23
    |
163 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
164 | |                         0 as libc::c_int
165 | |                     } else {
166 | |                         scale_factor
167 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:167:42
    |
167 |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:168:33
    |
168 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
169 | |                             0 as libc::c_int as libc::c_long
170 | |                         } else {
171 | |                             (if 1 as libc::c_int != 0 {
...   |
175 | |                             }) as libc::c_long + 0 as libc::c_int as intmax_t
176 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:169:29
    |
169 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:171:29
    |
171 | / ...                   (if 1 as libc::c_int != 0 {
172 | | ...                       0 as libc::c_int
173 | | ...                   } else {
174 | | ...                       scale_factor
175 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
171 ~                             i64::from((if 1 as libc::c_int != 0 {
172 +                                 0 as libc::c_int
173 +                             } else {
174 +                                 scale_factor
175 ~                             })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:171:29
    |
171 | / ...                   (if 1 as libc::c_int != 0 {
172 | | ...                       0 as libc::c_int
173 | | ...                   } else {
174 | | ...                       scale_factor
175 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:175:50
    |
175 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:176:30
    |
176 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:177:31
    |
177 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:179:32
    |
179 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
180 | | ...                       0 as libc::c_int as libc::c_long
181 | | ...                   } else {
182 | | ...                       (if 1 as libc::c_int != 0 {
...   |
186 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
187 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:180:33
    |
180 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:182:33
    |
182 | / ...                   (if 1 as libc::c_int != 0 {
183 | | ...                       0 as libc::c_int
184 | | ...                   } else {
185 | | ...                       scale_factor
186 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
182 ~                                 i64::from((if 1 as libc::c_int != 0 {
183 +                                     0 as libc::c_int
184 +                                 } else {
185 +                                     scale_factor
186 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:182:33
    |
182 | / ...                   (if 1 as libc::c_int != 0 {
183 | | ...                       0 as libc::c_int
184 | | ...                   } else {
185 | | ...                       scale_factor
186 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:186:54
    |
186 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:187:34
    |
187 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:189:51
    |
189 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:190:51
    |
190 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:191:35
    |
191 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:192:35
    |
192 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:193:35
    |
193 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:195:29
    |
195 | / ...                   (if 1 as libc::c_int != 0 {
196 | | ...                       0 as libc::c_int as libc::c_long
197 | | ...                   } else {
198 | | ...                       (if 1 as libc::c_int != 0 {
...   |
202 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
203 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:196:33
    |
196 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:198:33
    |
198 | / ...                   (if 1 as libc::c_int != 0 {
199 | | ...                       0 as libc::c_int
200 | | ...                   } else {
201 | | ...                       scale_factor
202 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
198 ~                                 i64::from((if 1 as libc::c_int != 0 {
199 +                                     0 as libc::c_int
200 +                                 } else {
201 +                                     scale_factor
202 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:198:33
    |
198 | / ...                   (if 1 as libc::c_int != 0 {
199 | | ...                       0 as libc::c_int
200 | | ...                   } else {
201 | | ...                       scale_factor
202 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:202:54
    |
202 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:203:34
    |
203 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:206:21
    |
206 | /                     ((0 as libc::c_int as libc::c_long)
207 | |                         < (if 1 as libc::c_int != 0 {
208 | |                             0 as libc::c_int
209 | |                         } else {
210 | |                             scale_factor
211 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
206 ~                     i32::from((0 as libc::c_int as libc::c_long)
207 +                         < (if 1 as libc::c_int != 0 {
208 +                             0 as libc::c_int
209 +                         } else {
210 +                             scale_factor
211 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:206:22
    |
206 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:207:27
    |
207 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
208 | |                             0 as libc::c_int
209 | |                         } else {
210 | |                             scale_factor
211 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
207 ~                         < i64::from((if 1 as libc::c_int != 0 {
208 +                             0 as libc::c_int
209 +                         } else {
210 +                             scale_factor
211 ~                         })) + 0 as libc::c_int as intmax_t) as libc::c_int
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:207:27
    |
207 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
208 | |                             0 as libc::c_int
209 | |                         } else {
210 | |                             scale_factor
211 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:211:46
    |
211 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:214:25
    |
214 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
215 | |                         0 as libc::c_int as libc::c_long
216 | |                     } else {
217 | |                         *x
218 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:215:25
    |
215 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:218:26
    |
218 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:219:27
    |
219 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:221:25
    |
221 | /                         ((0 as libc::c_int as libc::c_long)
222 | |                             < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
221 ~                         i32::from((0 as libc::c_int as libc::c_long)
222 +                             < *x + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:221:26
    |
221 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:222:36
    |
222 | ...                   < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:224:25
    |
224 | /                         ((0 as libc::c_int as libc::c_long) < *x
225 | |                             && (-(1 as libc::c_int) as libc::c_long
226 | |                                 - 0 as libc::c_int as intmax_t)
227 | |                                 < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |_______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
224 ~                         i32::from((0 as libc::c_int as libc::c_long) < *x
225 +                             && (-(1 as libc::c_int) as libc::c_long
226 +                                 - 0 as libc::c_int as intmax_t)
227 +                                 < *x - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:224:26
    |
224 |                         ((0 as libc::c_int as libc::c_long) < *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:225:33
    |
225 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:226:35
    |
226 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:227:40
    |
227 | ...                   < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:230:21
    |
230 | /                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
231 | |                         as libc::c_int
    | |______________________________________^ help: try: `i32::from((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:230:23
    |
230 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:230:54
    |
230 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:238:25
    |
238 |                 if *x < 0 as libc::c_int as libc::c_long {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:239:33
    |
239 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
240 | |                         0 as libc::c_int as libc::c_long
241 | |                     } else {
242 | |                         (if 1 as libc::c_int != 0 {
...   |
246 | |                         }) + 0 as libc::c_int as intmax_t
247 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:240:25
    |
240 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:242:25
    |
242 | /                         (if 1 as libc::c_int != 0 {
243 | |                             0 as libc::c_int as libc::c_long
244 | |                         } else {
245 | |                             *x
246 | |                         }) + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:243:29
    |
243 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:246:30
    |
246 |                         }) + 0 as libc::c_int as intmax_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:247:26
    |
247 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:248:27
    |
248 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:250:30
    |
250 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
251 | |                             0 as libc::c_int as libc::c_long
252 | |                         } else {
253 | |                             (if 1 as libc::c_int != 0 {
...   |
257 | |                             }) + 0 as libc::c_int as intmax_t
258 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:251:29
    |
251 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:253:29
    |
253 | / ...                   (if 1 as libc::c_int != 0 {
254 | | ...                       0 as libc::c_int as libc::c_long
255 | | ...                   } else {
256 | | ...                       *x
257 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:254:33
    |
254 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:257:34
    |
257 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:258:30
    |
258 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:260:47
    |
260 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:261:47
    |
261 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:262:31
    |
262 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:263:31
    |
263 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:264:31
    |
264 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:266:25
    |
266 | /                         (if 1 as libc::c_int != 0 {
267 | |                             0 as libc::c_int as libc::c_long
268 | |                         } else {
269 | |                             (if 1 as libc::c_int != 0 {
...   |
273 | |                             }) + 0 as libc::c_int as intmax_t
274 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:267:29
    |
267 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:269:29
    |
269 | / ...                   (if 1 as libc::c_int != 0 {
270 | | ...                       0 as libc::c_int as libc::c_long
271 | | ...                   } else {
272 | | ...                       *x
273 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:270:33
    |
270 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:273:34
    |
273 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:274:30
    |
274 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:275:26
    |
275 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:277:25
    |
277 | /                         (((if 1 as libc::c_int != 0 {
278 | |                             0 as libc::c_int as libc::c_long
279 | |                         } else {
280 | |                             *x
...   |
317 | |                                 }) - 1 as libc::c_int as libc::c_long
318 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
277 ~                         i32::from(((if 1 as libc::c_int != 0 {
278 +                             0 as libc::c_int as libc::c_long
279 +                         } else {
280 +                             *x
281 +                         }) + 0 as libc::c_int as intmax_t)
282 +                             < -(if ((if 1 as libc::c_int != 0 {
283 +                                 0 as libc::c_int as libc::c_long
284 +                             } else {
285 +                                 (if 1 as libc::c_int != 0 {
286 +                                     0 as libc::c_int as libc::c_long
287 +                                 } else {
288 +                                     *x
289 +                                 }) + 0 as libc::c_int as intmax_t
290 +                             }) - 1 as libc::c_int as libc::c_long)
291 +                                 < 0 as libc::c_int as libc::c_long
292 +                             {
293 +                                 ((((if 1 as libc::c_int != 0 {
294 +                                     0 as libc::c_int as libc::c_long
295 +                                 } else {
296 +                                     (if 1 as libc::c_int != 0 {
297 +                                         0 as libc::c_int as libc::c_long
298 +                                     } else {
299 +                                         *x
300 +                                     }) + 0 as libc::c_int as intmax_t
301 +                                 }) + 1 as libc::c_int as libc::c_long)
302 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
303 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
304 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
305 +                                     - 1 as libc::c_int as libc::c_long)
306 +                                     * 2 as libc::c_int as libc::c_long
307 +                                     + 1 as libc::c_int as libc::c_long
308 +                             } else {
309 +                                 (if 1 as libc::c_int != 0 {
310 +                                     0 as libc::c_int as libc::c_long
311 +                                 } else {
312 +                                     (if 1 as libc::c_int != 0 {
313 +                                         0 as libc::c_int as libc::c_long
314 +                                     } else {
315 +                                         *x
316 +                                     }) + 0 as libc::c_int as intmax_t
317 +                                 }) - 1 as libc::c_int as libc::c_long
318 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:277:27
    |
277 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
278 | |                             0 as libc::c_int as libc::c_long
279 | |                         } else {
280 | |                             *x
281 | |                         }) + 0 as libc::c_int as intmax_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:278:29
    |
278 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:281:30
    |
281 |                         }) + 0 as libc::c_int as intmax_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:282:37
    |
282 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
283 | | ...                       0 as libc::c_int as libc::c_long
284 | | ...                   } else {
285 | | ...                       (if 1 as libc::c_int != 0 {
...   |
289 | | ...                       }) + 0 as libc::c_int as intmax_t
290 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:283:33
    |
283 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:285:33
    |
285 | / ...                   (if 1 as libc::c_int != 0 {
286 | | ...                       0 as libc::c_int as libc::c_long
287 | | ...                   } else {
288 | | ...                       *x
289 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:286:37
    |
286 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:289:38
    |
289 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:290:34
    |
290 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:291:35
    |
291 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:293:36
    |
293 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
294 | | ...                       0 as libc::c_int as libc::c_long
295 | | ...                   } else {
296 | | ...                       (if 1 as libc::c_int != 0 {
...   |
300 | | ...                       }) + 0 as libc::c_int as intmax_t
301 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:294:37
    |
294 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:296:37
    |
296 | / ...                   (if 1 as libc::c_int != 0 {
297 | | ...                       0 as libc::c_int as libc::c_long
298 | | ...                   } else {
299 | | ...                       *x
300 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:297:41
    |
297 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:300:42
    |
300 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:301:38
    |
301 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:303:55
    |
303 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:304:55
    |
304 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:305:39
    |
305 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:306:39
    |
306 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:307:39
    |
307 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:309:33
    |
309 | / ...                   (if 1 as libc::c_int != 0 {
310 | | ...                       0 as libc::c_int as libc::c_long
311 | | ...                   } else {
312 | | ...                       (if 1 as libc::c_int != 0 {
...   |
316 | | ...                       }) + 0 as libc::c_int as intmax_t
317 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:310:37
    |
310 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:312:37
    |
312 | / ...                   (if 1 as libc::c_int != 0 {
313 | | ...                       0 as libc::c_int as libc::c_long
314 | | ...                   } else {
315 | | ...                       *x
316 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:313:41
    |
313 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:316:42
    |
316 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:317:38
    |
317 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:320:25
    |
320 | /                         ((0 as libc::c_int as libc::c_long)
321 | |                             < (if 1 as libc::c_int != 0 {
322 | |                                 0 as libc::c_int as libc::c_long
323 | |                             } else {
324 | |                                 *x
325 | |                             }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
320 ~                         i32::from((0 as libc::c_int as libc::c_long)
321 +                             < (if 1 as libc::c_int != 0 {
322 +                                 0 as libc::c_int as libc::c_long
323 +                             } else {
324 +                                 *x
325 +                             }) + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:320:26
    |
320 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:321:31
    |
321 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
322 | | ...                       0 as libc::c_int as libc::c_long
323 | | ...                   } else {
324 | | ...                       *x
325 | | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:322:33
    |
322 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:325:34
    |
325 | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:326:38
    |
326 |                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:328:29
    |
328 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
329 | |                             0 as libc::c_int
330 | |                         } else {
331 | |                             scale_factor
332 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:334:29
    |
334 | / ...                   ((0 as libc::c_int as libc::c_long)
335 | | ...                       < scale_factor as libc::c_long
336 | | ...                           + 0 as libc::c_int as intmax_t) as libc::c_int
    | |____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
334 ~                             i32::from((0 as libc::c_int as libc::c_long)
335 +                                 < scale_factor as libc::c_long
336 +                                     + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:334:30
    |
334 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:335:35
    |
335 | ...                   < scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:336:39
    |
336 | ...                   + 0 as libc::c_int as intmax_t) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:338:29
    |
338 | / ...                   ((-(1 as libc::c_int) as libc::c_long
339 | | ...                       - 0 as libc::c_int as intmax_t)
340 | | ...                       < (scale_factor - 1 as libc::c_int) as libc::c_long)
341 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
338 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
339 +                                 - 0 as libc::c_int as intmax_t)
340 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:338:31
    |
338 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:339:35
    |
339 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:340:35
    |
340 | ...                   < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:344:25
    |
344 | /                         (0 as libc::c_int as intmax_t / *x
345 | |                             < scale_factor as libc::c_long) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
344 ~                         i32::from(0 as libc::c_int as intmax_t / *x
345 +                             < scale_factor as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:344:26
    |
344 |                         (0 as libc::c_int as intmax_t / *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:345:31
    |
345 | ...                   < scale_factor as libc::c_long) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:348:21
    |
348 | /                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
349 | |                         < *x) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
348 ~                     i32::from((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
349 +                         < *x)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:348:23
    |
348 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:348:57
    |
348 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xstrtoimax.rs:355:10
    |
355 |         *(&mut scaled as *mut intmax_t) = fresh4;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xstrtoimax.rs:359:10
    |
359 |         *(&mut scaled as *mut intmax_t) = fresh6;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:360:9
    |
360 |         fresh7 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh7)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:363:22
    |
363 |         *x = if *x < 0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:364:17
    |
364 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:364:50
    |
364 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:365:17
    |
365 |                 -(1 as libc::c_int) as intmax_t
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:367:19
    |
367 |                 (((1 as libc::c_int as intmax_t)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:369:39
    |
369 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:370:39
    |
370 |                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:371:23
    |
371 |                     - 1 as libc::c_int as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:372:23
    |
372 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:372:58
    |
372 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:374:19
    |
374 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:374:52
    |
374 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:375:13
    |
375 |             -(1 as libc::c_int) as intmax_t
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:377:15
    |
377 |             (((1 as libc::c_int as intmax_t)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:379:35
    |
379 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:380:35
    |
380 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:381:19
    |
381 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:381:55
    |
381 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:382:19
    |
382 |                 + 1 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/xstrtoimax.rs:405:1
    |
405 | / pub unsafe extern "C" fn xstrtoimax(
406 | |     mut s: *const libc::c_char,
407 | |     mut ptr: *mut *mut libc::c_char,
408 | |     mut strtol_base: libc::c_int,
...   |
570 | |
571 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this function has too many lines (154/100)
   --> src/xstrtoimax.rs:405:1
    |
405 | / pub unsafe extern "C" fn xstrtoimax(
406 | |     mut s: *const libc::c_char,
407 | |     mut ptr: *mut *mut libc::c_char,
408 | |     mut strtol_base: libc::c_int,
...   |
570 | |
571 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:569:1
    |
569 | return err;
    | ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xstrtoimax.rs:412:40
    |
412 |     let mut t_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/xstrtoimax.rs:413:41
    |
413 |     let mut p: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:418:13
    |
418 | /             b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
419 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:420:13
    |
420 |             b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:421:13
    |
421 |             86 as libc::c_int as libc::c_uint,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoimax.rs:422:15
    |
422 |               (*::core::mem::transmute::<
    |  _______________^
423 | |                 &[u8; 78],
424 | |                 &[libc::c_char; 78],
425 | |             >(
426 | |                 b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
427 | |             ))
    | |_____________^ help: try: `&*(b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0" as *const [u8; 78] as *const [i8; 78])`
    |
    = note: `-W clippy::transmute-ptr-to-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
   --> src/xstrtoimax.rs:431:5
    |
431 | /     'c_2247: {
432 | |         if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
433 | |             __assert_fail(
434 | |                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
...   |
446 | |         }
447 | |     };
    | |______^
    |
    = note: `-W clippy::unnecessary-operation` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
431 ~     if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
432 +             __assert_fail(
433 +                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
434 +                     as *const libc::c_char,
435 +                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
436 +                 86 as libc::c_int as libc::c_uint,
437 +                 (*::core::mem::transmute::<
438 +                     &[u8; 78],
439 +                     &[libc::c_char; 78],
440 +                 >(
441 +                     b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
442 +                 ))
443 +                     .as_ptr(),
444 +             );
445 +         };
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:434:17
    |
434 | /                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
435 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:436:17
    |
436 |                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:437:17
    |
437 |                 86 as libc::c_int as libc::c_uint,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoimax.rs:438:19
    |
438 |                   (*::core::mem::transmute::<
    |  ___________________^
439 | |                     &[u8; 78],
440 | |                     &[libc::c_char; 78],
441 | |                 >(
442 | |                     b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
443 | |                 ))
    | |_________________^ help: try: `&*(b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0" as *const [u8; 78] as *const [i8; 78])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary boolean `not` operation
   --> src/xstrtoimax.rs:448:9
    |
448 |     p = if !ptr.is_null() { ptr } else { &mut t_ptr };
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:450:8
    |
450 |     if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:450:41
    |
450 |     if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:452:37
    |
452 |         let mut ch: libc::c_uchar = *q as libc::c_uchar;
    |                                     ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:453:15
    |
453 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*__ctype_b_loc()).offset(ch as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:453:42
    |
453 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:454:15
    |
454 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/xstrtoimax.rs:454:15
    |
454 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/xstrtoimax.rs:454:15
    |
454 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:454:15
    |
454 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:457:18
    |
457 |             ch = *q as libc::c_uchar;
    |                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:459:12
    |
459 |         if ch as libc::c_int == '-' as i32 {
    |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:465:41
    |
465 |         if !valid_suffixes.is_null() && **p as libc::c_int != 0
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:466:41
    |
466 |             && !(strchr(valid_suffixes, **p as libc::c_int)).is_null()
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:468:19
    |
468 |             tmp = 1 as libc::c_int as intmax_t;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:488:37
    |
488 |     if !valid_suffixes_str.contains(**p as u8 as char) {
    |                                     ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:493:11
    |
493 |     match **p as u8 {
    |           ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:496:23
    |
496 |                 match unsafe { *(*p).offset(1) } as u8 {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:498:28
    |
498 |                         if unsafe { *(*p).offset(2) } as u8 == b'B' {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:513:11
    |
513 |     match **p as u8 {
    |           ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function has a cognitive complexity of (51/25)
  --> src/xstrtoumax.rs:43:22
   |
43 | unsafe extern "C" fn bkm_scale(
   |                      ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (301/100)
   --> src/xstrtoumax.rs:43:1
    |
43  | / unsafe extern "C" fn bkm_scale(
44  | |     mut x: *mut uintmax_t,
45  | |     mut scale_factor: libc::c_int,
46  | | ) -> strtol_error {
...   |
351 | |     return LONGINT_OK;
352 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoumax.rs:351:5
    |
351 |     return LONGINT_OK;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `LONGINT_OK`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:48:11
   |
48 |     if if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:48:45
   |
48 |     if if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:49:12
   |
49 |         && (if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_ulong } else { *x })
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:49:40
   |
49 |         && (if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_ulong } else { *x })
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:50:27
   |
50 |             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:51:15
   |
51 |             < 0 as libc::c_int as libc::c_ulong
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:52:13
   |
52 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:55:21
   |
55 |             if *x < 0 as libc::c_int as libc::c_ulong {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:56:20
   |
56 |                   if (if 1 as libc::c_int != 0 {
   |  ____________________^
57 | |                     0 as libc::c_int as libc::c_ulong
58 | |                 } else {
59 | |                     (if 1 as libc::c_int != 0 {
...  |
64 | |                         .wrapping_add(scale_factor as libc::c_ulong)
65 | |                 })
   | |__________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:57:21
   |
57 |                     0 as libc::c_int as libc::c_ulong
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:59:21
   |
59 | /                     (if 1 as libc::c_int != 0 {
60 | |                         0 as libc::c_int as libc::c_ulong
61 | |                     } else {
62 | |                         -(1 as libc::c_int) as uintmax_t
63 | |                     })
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:60:25
   |
60 |                         0 as libc::c_int as libc::c_ulong
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:62:25
   |
62 |                         -(1 as libc::c_int) as uintmax_t
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:64:39
   |
64 |                         .wrapping_add(scale_factor as libc::c_ulong)
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:66:35
   |
66 |                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:67:23
   |
67 |                     < 0 as libc::c_int as libc::c_ulong
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xstrtoumax.rs:69:21
   |
69 | /                     (*x
70 | |                         < (-(1 as libc::c_int) as uintmax_t)
71 | |                             .wrapping_div(scale_factor as libc::c_ulong)) as libc::c_int
   | |________________________________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
   |
69 ~                     i32::from(*x
70 +                         < (-(1 as libc::c_int) as uintmax_t)
71 +                             .wrapping_div(scale_factor as libc::c_ulong))
   |

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:70:27
   |
70 |                         < (-(1 as libc::c_int) as uintmax_t)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:71:43
   |
71 | ...                   .wrapping_div(scale_factor as libc::c_ulong)) as libc::c_int
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:73:21
    |
73  | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
74  | |                         0 as libc::c_int
75  | |                     } else {
76  | |                         scale_factor
...   |
135 | |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
136 | |                         as libc::c_int
    | |______________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
73  ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
74  +                         0 as libc::c_int
75  +                     } else {
76  +                         scale_factor
77  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
78  +                     {
79  +                         !(((((if 1 as libc::c_int != 0 {
80  +                             0 as libc::c_int
81  +                         } else {
82  +                             scale_factor
83  +                         }) + 1 as libc::c_int)
84  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
85  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
86  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
87  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
88  +                     } else {
89  +                         (if 1 as libc::c_int != 0 {
90  +                             0 as libc::c_int
91  +                         } else {
92  +                             scale_factor
93  +                         }) + 0 as libc::c_int
94  +                     }) < 0 as libc::c_int
95  +                     {
96  +                         (scale_factor
97  +                             < -(if ((if 1 as libc::c_int != 0 {
98  +                                 0 as libc::c_int
99  +                             } else {
100 +                                 scale_factor
101 +                             }) - 1 as libc::c_int) < 0 as libc::c_int
102 +                             {
103 +                                 ((((if 1 as libc::c_int != 0 {
104 +                                     0 as libc::c_int
105 +                                 } else {
106 +                                     scale_factor
107 +                                 }) + 1 as libc::c_int)
108 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
109 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
110 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
111 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
112 +                             } else {
113 +                                 (if 1 as libc::c_int != 0 {
114 +                                     0 as libc::c_int
115 +                                 } else {
116 +                                     scale_factor
117 +                                 }) - 1 as libc::c_int
118 +                             })) as libc::c_int
119 +                     } else {
120 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
121 +                     }) != 0
122 +                     {
123 +                         ((if 1 as libc::c_int != 0 {
124 +                             0 as libc::c_int
125 +                         } else {
126 +                             scale_factor
127 +                         }) as libc::c_ulong)
128 +                             .wrapping_add(-(1 as libc::c_int) as uintmax_t)
129 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
130 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
131 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
132 +                     } else {
133 +                         (-(1 as libc::c_int) as uintmax_t)
134 +                             .wrapping_div(-scale_factor as libc::c_ulong)
135 +                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:73:22
    |
73  |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
74  | |                         0 as libc::c_int
75  | |                     } else {
76  | |                         scale_factor
...   |
134 | |                             .wrapping_div(-scale_factor as libc::c_ulong)
135 | |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:73:35
   |
73 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
   |  ___________________________________^
74 | |                         0 as libc::c_int
75 | |                     } else {
76 | |                         scale_factor
77 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:79:30
   |
79 |                           !(((((if 1 as libc::c_int != 0 {
   |  ______________________________^
80 | |                             0 as libc::c_int
81 | |                         } else {
82 | |                             scale_factor
83 | |                         }) + 1 as libc::c_int)
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:85:47
   |
85 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:86:47
   |
86 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:89:25
   |
89 | /                         (if 1 as libc::c_int != 0 {
90 | |                             0 as libc::c_int
91 | |                         } else {
92 | |                             scale_factor
93 | |                         }) + 0 as libc::c_int
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:96:25
    |
96  | /                         (scale_factor
97  | |                             < -(if ((if 1 as libc::c_int != 0 {
98  | |                                 0 as libc::c_int
99  | |                             } else {
...   |
117 | |                                 }) - 1 as libc::c_int
118 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
96  ~                         i32::from(scale_factor
97  +                             < -(if ((if 1 as libc::c_int != 0 {
98  +                                 0 as libc::c_int
99  +                             } else {
100 +                                 scale_factor
101 +                             }) - 1 as libc::c_int) < 0 as libc::c_int
102 +                             {
103 +                                 ((((if 1 as libc::c_int != 0 {
104 +                                     0 as libc::c_int
105 +                                 } else {
106 +                                     scale_factor
107 +                                 }) + 1 as libc::c_int)
108 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
109 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
110 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
111 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
112 +                             } else {
113 +                                 (if 1 as libc::c_int != 0 {
114 +                                     0 as libc::c_int
115 +                                 } else {
116 +                                     scale_factor
117 +                                 }) - 1 as libc::c_int
118 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:97:37
    |
97  |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
98  | | ...                       0 as libc::c_int
99  | | ...                   } else {
100 | | ...                       scale_factor
101 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:103:36
    |
103 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
104 | | ...                       0 as libc::c_int
105 | | ...                   } else {
106 | | ...                       scale_factor
107 | | ...                   }) + 1 as libc::c_int)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:109:55
    |
109 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:110:55
    |
110 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:113:33
    |
113 | / ...                   (if 1 as libc::c_int != 0 {
114 | | ...                       0 as libc::c_int
115 | | ...                   } else {
116 | | ...                       scale_factor
117 | | ...                   }) - 1 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:120:25
    |
120 |                         ((0 as libc::c_int) < scale_factor) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:123:25
    |
123 | /                         ((if 1 as libc::c_int != 0 {
124 | |                             0 as libc::c_int
125 | |                         } else {
126 | |                             scale_factor
127 | |                         }) as libc::c_ulong)
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:123:26
    |
123 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
124 | |                             0 as libc::c_int
125 | |                         } else {
126 | |                             scale_factor
127 | |                         }) as libc::c_ulong)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:128:43
    |
128 | ...                   .wrapping_add(-(1 as libc::c_int) as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:130:47
    |
130 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:131:47
    |
131 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:133:25
    |
133 |                         (-(1 as libc::c_int) as uintmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:134:43
    |
134 | ...                   .wrapping_div(-scale_factor as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:135:27
    |
135 |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:139:42
    |
139 |                 let scale_factor_value = if scale_factor != 0 { scale_factor } else { 0 };
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xstrtoumax.rs:142:18
    |
142 | let condition1 = (scale_factor_value as u64).wrapping_sub(1) < 0;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:142:18
    |
142 | let condition1 = (scale_factor_value as u64).wrapping_sub(1) < 0;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:144:6
    |
144 |     !(scale_factor_value as u64)
    |      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:151:5
    |
151 |     scale_factor_value as u64
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i32` may truncate the value
   --> src/xstrtoumax.rs:155:5
    |
155 | /     if (scale_factor_value as u64).wrapping_add(1) < 0 {
156 | |         ((scale_factor_value as u64).wrapping_add(1)
157 | |             << ((std::mem::size_of::<u64>() * 8) as u64 - 2))
158 | |             .wrapping_sub(1)
...   |
163 | |     }
164 | |     .wrapping_neg() as i32
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xstrtoumax.rs:155:8
    |
155 |     if (scale_factor_value as u64).wrapping_add(1) < 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:155:8
    |
155 |     if (scale_factor_value as u64).wrapping_add(1) < 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:156:10
    |
156 |         ((scale_factor_value as u64).wrapping_add(1)
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:162:9
    |
162 |         scale_factor_value as u64 - 1
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:166:5
    |
166 |     (0u64 < scale_factor_value as u64) as i32
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0u64 < scale_factor_value as u64)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:166:13
    |
166 |     (0u64 < scale_factor_value as u64) as i32
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xstrtoumax.rs:170:8
    |
170 |     if x_value.wrapping_sub(1) < 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:171:9
    |
171 |         (0u64 < x_value) as i32
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0u64 < x_value)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:173:9
    |
173 |         (0u64 < x_value && (u64::MAX - 1) < x_value.wrapping_sub(1)) as i32
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0u64 < x_value && (u64::MAX - 1) < x_value.wrapping_sub(1))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:176:5
    |
176 |     (0u64.wrapping_div(scale_factor as u64) < x_value) as i32
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0u64.wrapping_div(scale_factor as u64) < x_value)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:176:24
    |
176 |     (0u64.wrapping_div(scale_factor as u64) < x_value) as i32
    |                        ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:184:25
    |
184 |                 if *x < 0 as libc::c_int as libc::c_ulong {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:185:32
    |
185 |                       if (if (if (if 1 as libc::c_int != 0 {
    |  ________________________________^
186 | |                         0 as libc::c_int as libc::c_ulong
187 | |                     } else {
188 | |                         (if 1 as libc::c_int != 0 {
...   |
193 | |                             .wrapping_add(0 as libc::c_int as uintmax_t)
194 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:186:25
    |
186 |                         0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:188:25
    |
188 | /                         (if 1 as libc::c_int != 0 {
189 | |                             0 as libc::c_int as libc::c_ulong
190 | |                         } else {
191 | |                             *x
192 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:189:29
    |
189 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:193:43
    |
193 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:195:39
    |
195 |                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:196:27
    |
196 |                         < 0 as libc::c_int as libc::c_ulong
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:198:27
    |
198 |                           !((if 1 as libc::c_int != 0 {
    |  ___________________________^
199 | |                             0 as libc::c_int as libc::c_ulong
200 | |                         } else {
201 | |                             (if 1 as libc::c_int != 0 {
...   |
206 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)
207 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:199:29
    |
199 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:201:29
    |
201 | / ...                   (if 1 as libc::c_int != 0 {
202 | | ...                       0 as libc::c_int as libc::c_ulong
203 | | ...                   } else {
204 | | ...                       *x
205 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:202:33
    |
202 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:206:47
    |
206 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:208:43
    |
208 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:210:47
    |
210 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:211:47
    |
211 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:212:43
    |
212 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:213:43
    |
213 | ...                   .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:214:43
    |
214 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:216:25
    |
216 | /                         (if 1 as libc::c_int != 0 {
217 | |                             0 as libc::c_int as libc::c_ulong
218 | |                         } else {
219 | |                             (if 1 as libc::c_int != 0 {
...   |
224 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)
225 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:217:29
    |
217 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:219:29
    |
219 | / ...                   (if 1 as libc::c_int != 0 {
220 | | ...                       0 as libc::c_int as libc::c_ulong
221 | | ...                   } else {
222 | | ...                       *x
223 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:220:33
    |
220 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:224:47
    |
224 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:226:43
    |
226 | ...                   .wrapping_add(0 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:227:26
    |
227 |                     }) < 0 as libc::c_int as libc::c_ulong
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:229:25
    |
229 | /                         ((if 1 as libc::c_int != 0 {
230 | |                             0 as libc::c_int as libc::c_ulong
231 | |                         } else {
232 | |                             *x
...   |
278 | |                             })
279 | |                                 .wrapping_neg()) as libc::c_int
    | |_______________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
229 ~                         i32::from((if 1 as libc::c_int != 0 {
230 +                             0 as libc::c_int as libc::c_ulong
231 +                         } else {
232 +                             *x
233 +                         })
234 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
235 +                             < (if (if 1 as libc::c_int != 0 {
236 +                                 0 as libc::c_int as libc::c_ulong
237 +                             } else {
238 +                                 (if 1 as libc::c_int != 0 {
239 +                                     0 as libc::c_int as libc::c_ulong
240 +                                 } else {
241 +                                     *x
242 +                                 })
243 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
244 +                             })
245 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
246 +                                 < 0 as libc::c_int as libc::c_ulong
247 +                             {
248 +                                 ((if 1 as libc::c_int != 0 {
249 +                                     0 as libc::c_int as libc::c_ulong
250 +                                 } else {
251 +                                     (if 1 as libc::c_int != 0 {
252 +                                         0 as libc::c_int as libc::c_ulong
253 +                                     } else {
254 +                                         *x
255 +                                     })
256 +                                         .wrapping_add(0 as libc::c_int as uintmax_t)
257 +                                 })
258 +                                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
259 +                                     << (::core::mem::size_of::<libc::c_ulong>()
260 +                                         as libc::c_ulong)
261 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
262 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
263 +                                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
264 +                                     .wrapping_mul(2 as libc::c_int as libc::c_ulong)
265 +                                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
266 +                             } else {
267 +                                 (if 1 as libc::c_int != 0 {
268 +                                     0 as libc::c_int as libc::c_ulong
269 +                                 } else {
270 +                                     (if 1 as libc::c_int != 0 {
271 +                                         0 as libc::c_int as libc::c_ulong
272 +                                     } else {
273 +                                         *x
274 +                                     })
275 +                                         .wrapping_add(0 as libc::c_int as uintmax_t)
276 +                                 })
277 +                                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
278 +                             })
279 +                                 .wrapping_neg())
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:229:26
    |
229 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
230 | |                             0 as libc::c_int as libc::c_ulong
231 | |                         } else {
232 | |                             *x
233 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:230:29
    |
230 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:234:43
    |
234 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:235:35
    |
235 |   ...                   < (if (if 1 as libc::c_int != 0 {
    |  _____________________________^
236 | | ...                       0 as libc::c_int as libc::c_ulong
237 | | ...                   } else {
238 | | ...                       (if 1 as libc::c_int != 0 {
...   |
243 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
244 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:236:33
    |
236 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:238:33
    |
238 | / ...                   (if 1 as libc::c_int != 0 {
239 | | ...                       0 as libc::c_int as libc::c_ulong
240 | | ...                   } else {
241 | | ...                       *x
242 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:239:37
    |
239 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:243:51
    |
243 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:245:47
    |
245 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:246:35
    |
246 | ...                   < 0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:248:34
    |
248 |   ...                   ((if 1 as libc::c_int != 0 {
    |  ________________________^
249 | | ...                       0 as libc::c_int as libc::c_ulong
250 | | ...                   } else {
251 | | ...                       (if 1 as libc::c_int != 0 {
...   |
256 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
257 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:249:37
    |
249 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:251:37
    |
251 | / ...                   (if 1 as libc::c_int != 0 {
252 | | ...                       0 as libc::c_int as libc::c_ulong
253 | | ...                   } else {
254 | | ...                       *x
255 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:252:41
    |
252 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:256:55
    |
256 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:258:51
    |
258 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:261:55
    |
261 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:262:55
    |
262 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:263:51
    |
263 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:264:51
    |
264 | ...                   .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:265:51
    |
265 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:267:33
    |
267 | / ...                   (if 1 as libc::c_int != 0 {
268 | | ...                       0 as libc::c_int as libc::c_ulong
269 | | ...                   } else {
270 | | ...                       (if 1 as libc::c_int != 0 {
...   |
275 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
276 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:268:37
    |
268 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:270:37
    |
270 | / ...                   (if 1 as libc::c_int != 0 {
271 | | ...                       0 as libc::c_int as libc::c_ulong
272 | | ...                   } else {
273 | | ...                       *x
274 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:271:41
    |
271 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:275:55
    |
275 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:277:51
    |
277 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:281:25
    |
281 | /                         ((0 as libc::c_int as libc::c_ulong)
282 | |                             < (if 1 as libc::c_int != 0 {
283 | |                                 0 as libc::c_int as libc::c_ulong
284 | |                             } else {
285 | |                                 *x
286 | |                             })
287 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    | |____________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
281 ~                         i32::from((0 as libc::c_int as libc::c_ulong)
282 +                             < (if 1 as libc::c_int != 0 {
283 +                                 0 as libc::c_int as libc::c_ulong
284 +                             } else {
285 +                                 *x
286 +                             })
287 +                                 .wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:281:26
    |
281 |                         ((0 as libc::c_int as libc::c_ulong)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:282:31
    |
282 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
283 | | ...                       0 as libc::c_int as libc::c_ulong
284 | | ...                   } else {
285 | | ...                       *x
286 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:283:33
    |
283 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:287:47
    |
287 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:288:38
    |
288 |                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:290:29
    |
290 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
291 | |                             0 as libc::c_int
292 | |                         } else {
293 | |                             scale_factor
294 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:296:29
    |
296 | / ...                   ((0 as libc::c_int as libc::c_ulong)
297 | | ...                       < (scale_factor as libc::c_ulong)
298 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    | |__________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
296 ~                             i32::from((0 as libc::c_int as libc::c_ulong)
297 +                                 < (scale_factor as libc::c_ulong)
298 +                                     .wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:296:30
    |
296 | ...                   ((0 as libc::c_int as libc::c_ulong)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:297:35
    |
297 | ...                   < (scale_factor as libc::c_ulong)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:298:51
    |
298 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:300:29
    |
300 | / ...                   ((-(1 as libc::c_int) as libc::c_ulong)
301 | | ...                       .wrapping_sub(0 as libc::c_int as uintmax_t)
302 | | ...                       < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
303 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
300 ~                             i32::from((-(1 as libc::c_int) as libc::c_ulong)
301 +                                 .wrapping_sub(0 as libc::c_int as uintmax_t)
302 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:300:30
    |
300 | ...                   ((-(1 as libc::c_int) as libc::c_ulong)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:301:47
    |
301 | ...                   .wrapping_sub(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:302:35
    |
302 | ...                   < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:306:25
    |
306 | /                         ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
307 | |                             < scale_factor as libc::c_ulong) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
306 ~                         i32::from((0 as libc::c_int as uintmax_t).wrapping_div(*x)
307 +                             < scale_factor as libc::c_ulong)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:306:26
    |
306 |                         ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:307:31
    |
307 | ...                   < scale_factor as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:310:21
    |
310 | /                     ((-(1 as libc::c_int) as uintmax_t)
311 | |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
310 ~                     i32::from((-(1 as libc::c_int) as uintmax_t)
311 +                         .wrapping_div(scale_factor as libc::c_ulong) < *x)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:310:22
    |
310 |                     ((-(1 as libc::c_int) as uintmax_t)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:311:39
    |
311 |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xstrtoumax.rs:317:10
    |
317 |         *(&mut scaled as *mut uintmax_t) = fresh4;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xstrtoumax.rs:321:10
    |
321 |         *(&mut scaled as *mut uintmax_t) = fresh6;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:322:9
    |
322 |         fresh7 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh7)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:325:22
    |
325 |         *x = if *x < 0 as libc::c_int as libc::c_ulong {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:326:17
    |
326 |             !if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:326:51
    |
326 |             !if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:327:17
    |
327 |                 -(1 as libc::c_int) as uintmax_t
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:329:18
    |
329 |                 ((1 as libc::c_int as uintmax_t)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:331:39
    |
331 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:332:39
    |
332 |                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:333:35
    |
333 |                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:334:35
    |
334 |                     .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:335:35
    |
335 |                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:337:19
    |
337 |         } else if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:337:53
    |
337 |         } else if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:338:13
    |
338 |             -(1 as libc::c_int) as uintmax_t
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:340:14
    |
340 |             ((1 as libc::c_int as uintmax_t)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:342:35
    |
342 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:343:35
    |
343 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:344:31
    |
344 |                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:345:31
    |
345 |                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:346:31
    |
346 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xstrtoumax.rs:372:1
    |
372 | / pub unsafe extern "C" fn xstrtoumax(
373 | |     mut s: *const libc::c_char,
374 | |     mut ptr: *mut *mut libc::c_char,
375 | |     mut strtol_base: libc::c_int,
...   |
537 | |
538 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/xstrtoumax.rs:372:1
    |
372 | / pub unsafe extern "C" fn xstrtoumax(
373 | |     mut s: *const libc::c_char,
374 | |     mut ptr: *mut *mut libc::c_char,
375 | |     mut strtol_base: libc::c_int,
...   |
537 | |
538 | | }
    | |_^
    |
note: first possible panic found here
   --> src/xstrtoumax.rs:454:32
    |
454 |     let valid_suffixes_slice = std::ffi::CStr::from_ptr(valid_suffixes).to_str().unwrap();
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: this function has too many lines (154/100)
   --> src/xstrtoumax.rs:372:1
    |
372 | / pub unsafe extern "C" fn xstrtoumax(
373 | |     mut s: *const libc::c_char,
374 | |     mut ptr: *mut *mut libc::c_char,
375 | |     mut strtol_base: libc::c_int,
...   |
537 | |
538 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoumax.rs:536:1
    |
536 | return err;
    | ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xstrtoumax.rs:379:40
    |
379 |     let mut t_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/xstrtoumax.rs:380:41
    |
380 |     let mut p: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:385:13
    |
385 | /             b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
386 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:387:13
    |
387 |             b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:388:13
    |
388 |             86 as libc::c_int as libc::c_uint,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoumax.rs:389:15
    |
389 |               (*::core::mem::transmute::<
    |  _______________^
390 | |                 &[u8; 79],
391 | |                 &[libc::c_char; 79],
392 | |             >(
393 | |                 b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
394 | |             ))
    | |_____________^ help: try: `&*(b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0" as *const [u8; 79] as *const [i8; 79])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
   --> src/xstrtoumax.rs:398:5
    |
398 | /     'c_2256: {
399 | |         if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
400 | |             __assert_fail(
401 | |                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
...   |
413 | |         }
414 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
398 ~     if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
399 +             __assert_fail(
400 +                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
401 +                     as *const libc::c_char,
402 +                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
403 +                 86 as libc::c_int as libc::c_uint,
404 +                 (*::core::mem::transmute::<
405 +                     &[u8; 79],
406 +                     &[libc::c_char; 79],
407 +                 >(
408 +                     b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
409 +                 ))
410 +                     .as_ptr(),
411 +             );
412 +         };
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:401:17
    |
401 | /                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
402 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:403:17
    |
403 |                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:404:17
    |
404 |                 86 as libc::c_int as libc::c_uint,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoumax.rs:405:19
    |
405 |                   (*::core::mem::transmute::<
    |  ___________________^
406 | |                     &[u8; 79],
407 | |                     &[libc::c_char; 79],
408 | |                 >(
409 | |                     b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
410 | |                 ))
    | |_________________^ help: try: `&*(b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0" as *const [u8; 79] as *const [i8; 79])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary boolean `not` operation
   --> src/xstrtoumax.rs:415:9
    |
415 |     p = if !ptr.is_null() { ptr } else { &mut t_ptr };
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:417:8
    |
417 |     if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:417:42
    |
417 |     if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:419:37
    |
419 |         let mut ch: libc::c_uchar = *q as libc::c_uchar;
    |                                     ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:420:15
    |
420 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*__ctype_b_loc()).offset(ch as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:420:42
    |
420 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:421:15
    |
421 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/xstrtoumax.rs:421:15
    |
421 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/xstrtoumax.rs:421:15
    |
421 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoumax.rs:421:15
    |
421 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:424:18
    |
424 |             ch = *q as libc::c_uchar;
    |                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:426:12
    |
426 |         if ch as libc::c_int == '-' as i32 {
    |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:432:41
    |
432 |         if !valid_suffixes.is_null() && **p as libc::c_int != 0
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:433:41
    |
433 |             && !(strchr(valid_suffixes, **p as libc::c_int)).is_null()
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:435:19
    |
435 |             tmp = 1 as libc::c_int as uintmax_t;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:455:41
    |
455 |     if !valid_suffixes_slice.contains(&(**p as u8 as char).to_string()) {
    |                                         ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:460:11
    |
460 |     match **p as i32 {
    |           ^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:463:23
    |
463 |                 match *(*p).offset(1) as i32 {
    |                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*p).offset(1))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:465:28
    |
465 |                         if *(*p).offset(2) as i32 == 'B' as i32 {
    |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*p).offset(2))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:480:11
    |
480 |     match **p as i32 {
    |           ^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: path statement with no effect
  --> src/basename_lgpl.rs:15:9
   |
15 |         base;
   |         ^^^^^
   |
   = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
  --> src/basename_lgpl.rs:26:9
   |
26 |         p;
   |         ^^

warning: path statement with no effect
  --> src/basename_lgpl.rs:40:9
   |
40 |         len;
   |         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:580:49
    |
580 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:585:49
    |
585 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:590:49
    |
590 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:595:49
    |
595 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:643:49
    |
643 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:648:49
    |
648 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:653:49
    |
653 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:658:49
    |
658 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:833:37
    |
833 | ...                   m;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:855:41
    |
855 | ...                   j;
    |                       ^^

warning: path statement with no effect
    --> src/quotearg.rs:1050:25
     |
1050 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1055:25
     |
1055 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1060:25
     |
1060 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1067:21
     |
1067 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1079:25
     |
1079 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1084:25
     |
1084 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1091:21
     |
1091 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1099:13
     |
1099 |             i;
     |             ^^

warning: path statement with no effect
    --> src/quotearg.rs:1165:21
     |
1165 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1167:21
     |
1167 |                     quote_string;
     |                     ^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1287:9
     |
1287 |         i;
     |         ^^

warning: path statement with no effect
   --> src/sig2str.rs:407:13
    |
407 |             i;
    |             ^^

warning: path statement with no effect
   --> src/sig2str.rs:479:9
    |
479 |         i;
    |         ^^

warning: path statement with no effect
   --> src/version_etc.rs:262:9
    |
262 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/version_etc.rs:284:9
    |
284 |         n_authors;
    |         ^^^^^^^^^^

warning: comparison is useless due to type limits
   --> src/xstrtoumax.rs:142:18
    |
142 | let condition1 = (scale_factor_value as u64).wrapping_sub(1) < 0;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_comparisons)]` on by default

warning: comparison is useless due to type limits
   --> src/xstrtoumax.rs:155:8
    |
155 |     if (scale_factor_value as u64).wrapping_add(1) < 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: comparison is useless due to type limits
   --> src/xstrtoumax.rs:170:8
    |
170 |     if x_value.wrapping_sub(1) < 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `rust` (lib) generated 2406 warnings
warning: unused label
    --> src/split.rs:1332:17
     |
1332 |                 'c_9037: {
     |                 ^^^^^^^
     |
     = note: `#[warn(unused_labels)]` on by default

warning: unused label
    --> src/split.rs:3168:5
     |
3168 |     'c_14132: {
     |     ^^^^^^^^

warning: unnecessary trailing semicolon
    --> src/split.rs:4911:1
     |
4911 | ;
     | ^ help: remove this semicolon
     |
     = note: `#[warn(redundant_semicolons)]` on by default

warning: unused label
    --> src/split.rs:5126:13
     |
5126 |             'c_16295: {
     |             ^^^^^^^^

warning: long literal lacking separators
   --> src/split.rs:368:41
    |
368 | pub const IO_BUFSIZE: C2RustUnnamed_1 = 262144;
    |                                         ^^^^^^ help: consider: `262_144`
    |
    = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:370:46
    |
370 | pub const SYS_BUFSIZE_MAX: C2RustUnnamed_2 = 2146435072;
    |                                              ^^^^^^^^^^ help: consider: `2_146_435_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:509:19
    |
509 |     (sb.st_mode & 0o170000) == 0o100000
    |                   ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:509:32
    |
509 |     (sb.st_mode & 0o170000) == 0o100000
    |                                ^^^^^^^^ help: consider: `0o100_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:510:26
    |
510 |         || (sb.st_mode & 0o170000) == 0o120000
    |                          ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:510:39
    |
510 |         || (sb.st_mode & 0o170000) == 0o120000
    |                                       ^^^^^^^^ help: consider: `0o120_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:604:24
    |
604 |     if (*st).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                        ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:605:12
    |
605 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^ help: consider: `0o100_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/split.rs:606:12
    |
606 |         && blocksize & blocksize - 1 as libc::c_int as libc::c_long != 0
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `blocksize & (blocksize - 1 as libc::c_int as libc::c_long)`
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: long literal lacking separators
   --> src/split.rs:611:13
    |
611 |         if (9223372036854775807 as libc::c_long as libc::c_ulonglong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:612:16
    |
612 |             < (9223372036854775807 as libc::c_longlong as libc::c_ulonglong)
    |                ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/split.rs:616:48
    |
616 |               let mut power: libc::c_ulonglong = (1 as libc::c_ulonglong)
    |  ________________________________________________^
617 | |                 << 64 as libc::c_int - leading_zeros;
    | |____________________________________________________^ help: consider parenthesizing your expression: `(1 as libc::c_ulonglong) << (64 as libc::c_int - leading_zeros)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: long literal lacking separators
   --> src/split.rs:618:25
    |
618 |             if power <= 9223372036854775807 as libc::c_long as libc::c_ulonglong {
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:623:21
    |
623 |     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:624:11
    |
624 |         < 18446744073709551615 as libc::c_ulong
    |           ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:626:9
    |
626 |         9223372036854775807 as libc::c_long as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:628:9
    |
628 |         18446744073709551615 as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:633:14
    |
633 |         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:634:15
    |
634 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:636:13
    |
636 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:638:13
    |
638 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/split.rs:898:35
    |
898 |                     n_units_end = 9223372036854775807 as libc::c_long;
    |                                   ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
   --> src/split.rs:965:12
    |
965 |       } else {
    |  ____________^
966 | |         suffix_length = (if 2 as libc::c_int > suffix_length_needed {
967 | |             2 as libc::c_int
968 | |         } else {
969 | |             suffix_length_needed
970 | |         }) as idx_t;
971 | |     };
    | |_____^
    |
    = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/split.rs:1168:28
     |
1168 |         current_block_37 = 9769017674192345533;
     |                            ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1175:36
     |
1175 |                 current_block_37 = 14434620278749266018;
     |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_434_620_278_749_266_018`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1188:36
     |
1188 |                 current_block_37 = 9769017674192345533;
     |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1205:13
     |
1205 |             9769017674192345533 => {}
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1251:36
     |
1251 |                 current_block_37 = 2873832966593178012;
     |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_873_832_966_593_178_012`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1256:9
     |
1256 |         9769017674192345533 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_769_017_674_192_345_533`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/split.rs:1579:12
     |
1579 |       } else {
     |  ____________^
1580 | |         let mut fd_pair: [libc::c_int; 2] = [0; 2];
1581 | |         let mut child_pid: pid_t = 0;
1582 | |         let mut shell_prog: *const libc::c_char = getenv(
...    |
2049 | |         return fd_pair[1 as libc::c_int as usize];
2050 | |     };
     | |_____^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/split.rs:1517:40
     |
1517 |             && (out_stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                        ^^^^^^^^ help: consider: `0o170_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:1518:20
     |
1518 |                 == 0o100000 as libc::c_int as libc::c_uint
     |                    ^^^^^^^^ help: consider: `0o100_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2036:21
     |
2036 |                 if (2147483647 as libc::c_int as libc::c_long)
     |                     ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2037:23
     |
2037 |                     < 9223372036854775807 as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2039:21
     |
2039 |                     2147483647 as libc::c_int as libc::c_long
     |                     ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:2041:21
     |
2041 |                     9223372036854775807 as libc::c_long
     |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/split.rs:2173:20
     |
2173 |               } else {
     |  ____________________^
2174 | |                 j += 1;
2175 | |                 j;
2176 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:2375:16
     |
2375 |           } else {
     |  ________________^
2376 | |             if 0 != 0 {
2377 | |                 error(
2378 | |                     1 as libc::c_int,
...    |
2422 | |             };
2423 | |         }
     | |_________^
     |
     = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
2375 ~         } else if 0 != 0 {
2376 +             error(
2377 +                 1 as libc::c_int,
2378 +                 0 as libc::c_int,
2379 +                 gettext(
2380 +                     b"unknown status from command (0x%X)\0" as *const u8
2381 +                         as *const libc::c_char,
2382 +                 ),
2383 +                 (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
2384 +             );
2385 +             if 1 as libc::c_int != 0 as libc::c_int {
2386 +                 unreachable!();
2387 +             } else {};
2388 +         } else {
2389 +             ({
2390 +                 let __errstatus: libc::c_int = 1 as libc::c_int;
2391 +                 error(
2392 +                     __errstatus,
2393 +                     0 as libc::c_int,
2394 +                     gettext(
2395 +                         b"unknown status from command (0x%X)\0" as *const u8
2396 +                             as *const libc::c_char,
2397 +                     ),
2398 +                     (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
2399 +                 );
2400 +                 if __errstatus != 0 as libc::c_int {
2401 +                     unreachable!();
2402 +                 } else {};
2403 +                 
2404 +             });
2405 +             ({
2406 +                 let __errstatus: libc::c_int = 1 as libc::c_int;
2407 +                 error(
2408 +                     __errstatus,
2409 +                     0 as libc::c_int,
2410 +                     gettext(
2411 +                         b"unknown status from command (0x%X)\0" as *const u8
2412 +                             as *const libc::c_char,
2413 +                     ),
2414 +                     (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
2415 +                 );
2416 +                 if __errstatus != 0 as libc::c_int {
2417 +                     unreachable!();
2418 +                 } else {};
2419 +                 
2420 +             });
2421 +         }
     |

warning: redundant else block
    --> src/split.rs:2497:12
     |
2497 |       } else {
     |  ____________^
2498 | |         if !ignorable(*__errno_location()) {
2499 | |             if 0 != 0 {
2500 | |                 error(
...    |
2550 | |         return 0 as libc::c_int != 0;
2551 | |     };
     | |_____^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
    --> src/split.rs:2650:20
     |
2650 |               } else {
     |  ____________________^
2651 | |                 bp_out = bp_out.offset(to_write as isize);
2652 | |                 n_read -= to_write;
2653 | |                 to_write = n_bytes + (opened < rem_bytes) as libc::c_int as libc::c_long;
2654 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
    --> src/split.rs:2760:20
     |
2760 |               } else {
     |  ____________________^
2761 | |                 bp = bp.offset(1);
2762 | |                 bp;
2763 | |                 n += 1;
...    |
2773 | |                 }
2774 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: binding's name is too similar to existing binding
    --> src/split.rs:2851:21
     |
2851 |             let mut eol: *mut libc::c_char = 0 as *mut libc::c_char;
     |                     ^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/split.rs:2850:21
     |
2850 |             let mut eoc: *mut libc::c_char = 0 as *mut libc::c_char;
     |                     ^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: redundant else block
    --> src/split.rs:3102:24
     |
3102 |                   } else {
     |  ________________________^
3103 | |                     if k == chunk_no {
3104 | |                         return;
3105 | |                     }
...    |
3121 | |                     }
3122 | |                 }
     | |_________________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: binding's name is too similar to existing binding
    --> src/split.rs:3305:9
     |
3305 |     mut nfiles: idx_t,
     |         ^^^^^^
     |
note: existing binding defined here
    --> src/split.rs:3303:9
     |
3303 |     mut files: *mut of_t,
     |         ^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/split.rs:3505:13
     |
3505 |         if (9223372036854775807 as libc::c_long) < n {
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/split.rs:3932:9
     |
3932 |     mut argv: *mut *mut libc::c_char,
     |         ^^^^
     |
note: existing binding defined here
    --> src/split.rs:3931:9
     |
3931 |     mut argc: libc::c_int,
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/split.rs:3939:5
     |
3939 | /     static mut multipliers: [libc::c_char; 15] = unsafe {
3940 | |         *::core::mem::transmute::<&[u8; 15], &[libc::c_char; 15]>(b"bEGKkMmPQRTYZ0\0")
3941 | |     };
     | |______^
     |
     = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:4470:28
     |
4470 |                       } else {
     |  ____________________________^
4471 | |                         if 10 as libc::c_int == 0 as libc::c_int {
4472 | |                             0 as libc::c_int
4473 | |                         } else {
...    |
4588 | |                         }
4589 | |                     }) != 0
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
4470 ~                     } else if 10 as libc::c_int == 0 as libc::c_int {
4471 +                         0 as libc::c_int
4472 +                     } else {
4473 +                         if n_units < 0 as libc::c_int as libc::c_long {
4474 +                             if (if (if ((if 1 as libc::c_int != 0 {
4475 +                                 0 as libc::c_int as libc::c_long
4476 +                             } else {
4477 +                                 (if 1 as libc::c_int != 0 {
4478 +                                     0 as libc::c_int as libc::c_long
4479 +                                 } else {
4480 +                                     n_units
4481 +                                 }) + 0 as libc::c_int as intmax_t
4482 +                             }) - 1 as libc::c_int as libc::c_long)
4483 +                                 < 0 as libc::c_int as libc::c_long
4484 +                             {
4485 +                                 !(((((if 1 as libc::c_int != 0 {
4486 +                                     0 as libc::c_int as libc::c_long
4487 +                                 } else {
4488 +                                     (if 1 as libc::c_int != 0 {
4489 +                                         0 as libc::c_int as libc::c_long
4490 +                                     } else {
4491 +                                         n_units
4492 +                                     }) + 0 as libc::c_int as intmax_t
4493 +                                 }) + 1 as libc::c_int as libc::c_long)
4494 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4495 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4496 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4497 +                                     - 1 as libc::c_int as libc::c_long)
4498 +                                     * 2 as libc::c_int as libc::c_long
4499 +                                     + 1 as libc::c_int as libc::c_long)
4500 +                             } else {
4501 +                                 (if 1 as libc::c_int != 0 {
4502 +                                     0 as libc::c_int as libc::c_long
4503 +                                 } else {
4504 +                                     (if 1 as libc::c_int != 0 {
4505 +                                         0 as libc::c_int as libc::c_long
4506 +                                     } else {
4507 +                                         n_units
4508 +                                     }) + 0 as libc::c_int as intmax_t
4509 +                                 }) + 0 as libc::c_int as libc::c_long
4510 +                             }) < 0 as libc::c_int as libc::c_long
4511 +                             {
4512 +                                 (((if 1 as libc::c_int != 0 {
4513 +                                     0 as libc::c_int as libc::c_long
4514 +                                 } else {
4515 +                                     n_units
4516 +                                 }) + 0 as libc::c_int as intmax_t)
4517 +                                     < -(if ((if 1 as libc::c_int != 0 {
4518 +                                         0 as libc::c_int as libc::c_long
4519 +                                     } else {
4520 +                                         (if 1 as libc::c_int != 0 {
4521 +                                             0 as libc::c_int as libc::c_long
4522 +                                         } else {
4523 +                                             n_units
4524 +                                         }) + 0 as libc::c_int as intmax_t
4525 +                                     }) - 1 as libc::c_int as libc::c_long)
4526 +                                         < 0 as libc::c_int as libc::c_long
4527 +                                     {
4528 +                                         ((((if 1 as libc::c_int != 0 {
4529 +                                             0 as libc::c_int as libc::c_long
4530 +                                         } else {
4531 +                                             (if 1 as libc::c_int != 0 {
4532 +                                                 0 as libc::c_int as libc::c_long
4533 +                                             } else {
4534 +                                                 n_units
4535 +                                             }) + 0 as libc::c_int as intmax_t
4536 +                                         }) + 1 as libc::c_int as libc::c_long)
4537 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4538 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4539 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4540 +                                             - 1 as libc::c_int as libc::c_long)
4541 +                                             * 2 as libc::c_int as libc::c_long
4542 +                                             + 1 as libc::c_int as libc::c_long
4543 +                                     } else {
4544 +                                         (if 1 as libc::c_int != 0 {
4545 +                                             0 as libc::c_int as libc::c_long
4546 +                                         } else {
4547 +                                             (if 1 as libc::c_int != 0 {
4548 +                                                 0 as libc::c_int as libc::c_long
4549 +                                             } else {
4550 +                                                 n_units
4551 +                                             }) + 0 as libc::c_int as intmax_t
4552 +                                         }) - 1 as libc::c_int as libc::c_long
4553 +                                     })) as libc::c_int
4554 +                             } else {
4555 +                                 ((0 as libc::c_int as libc::c_long)
4556 +                                     < (if 1 as libc::c_int != 0 {
4557 +                                         0 as libc::c_int as libc::c_long
4558 +                                     } else {
4559 +                                         n_units
4560 +                                     }) + 0 as libc::c_int as intmax_t) as libc::c_int
4561 +                             }) != 0 && n_units == -(1 as libc::c_int) as libc::c_long
4562 +                             {
4563 +                                 if ((if 1 as libc::c_int != 0 {
4564 +                                     0 as libc::c_int
4565 +                                 } else {
4566 +                                     10 as libc::c_int
4567 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
4568 +                                 {
4569 +                                     ((0 as libc::c_int as libc::c_long)
4570 +                                         < 10 as libc::c_int as libc::c_long
4571 +                                             + 0 as libc::c_int as intmax_t) as libc::c_int
4572 +                                 } else {
4573 +                                     ((-(1 as libc::c_int) as libc::c_long
4574 +                                         - 0 as libc::c_int as intmax_t)
4575 +                                         < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
4576 +                                         as libc::c_int
4577 +                                 }
4578 +                             } else {
4579 +                                 (0 as libc::c_int as intmax_t / n_units
4580 +                                     < 10 as libc::c_int as libc::c_long) as libc::c_int
4581 +                             }
4582 +                         } else {
4583 +                             ((-(1 as libc::c_int) as intmax_t
4584 +                                 / 10 as libc::c_int as libc::c_long) < n_units)
4585 +                                 as libc::c_int
4586 +                         }
4587 ~                     }) != 0
     |

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:4358:32
     |
4358 |                           } else {
     |  ________________________________^
4359 | |                             if (if (if ((if 1 as libc::c_int != 0 {
4360 | |                                 0 as libc::c_int as libc::c_long
4361 | |                             } else {
...    |
4468 | |                             }
4469 | |                         }
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
4358 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
4359 +                             0 as libc::c_int as libc::c_long
4360 +                         } else {
4361 +                             (if 1 as libc::c_int != 0 {
4362 +                                 0 as libc::c_int
4363 +                             } else {
4364 +                                 10 as libc::c_int
4365 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
4366 +                         }) - 1 as libc::c_int as libc::c_long)
4367 +                             < 0 as libc::c_int as libc::c_long
4368 +                         {
4369 +                             !(((((if 1 as libc::c_int != 0 {
4370 +                                 0 as libc::c_int as libc::c_long
4371 +                             } else {
4372 +                                 (if 1 as libc::c_int != 0 {
4373 +                                     0 as libc::c_int
4374 +                                 } else {
4375 +                                     10 as libc::c_int
4376 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
4377 +                             }) + 1 as libc::c_int as libc::c_long)
4378 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4379 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4380 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4381 +                                 - 1 as libc::c_int as libc::c_long)
4382 +                                 * 2 as libc::c_int as libc::c_long
4383 +                                 + 1 as libc::c_int as libc::c_long)
4384 +                         } else {
4385 +                             (if 1 as libc::c_int != 0 {
4386 +                                 0 as libc::c_int as libc::c_long
4387 +                             } else {
4388 +                                 (if 1 as libc::c_int != 0 {
4389 +                                     0 as libc::c_int
4390 +                                 } else {
4391 +                                     10 as libc::c_int
4392 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
4393 +                             }) + 0 as libc::c_int as libc::c_long
4394 +                         }) < 0 as libc::c_int as libc::c_long
4395 +                         {
4396 +                             (((if 1 as libc::c_int != 0 {
4397 +                                 0 as libc::c_int
4398 +                             } else {
4399 +                                 10 as libc::c_int
4400 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t)
4401 +                                 < -(if ((if 1 as libc::c_int != 0 {
4402 +                                     0 as libc::c_int as libc::c_long
4403 +                                 } else {
4404 +                                     (if 1 as libc::c_int != 0 {
4405 +                                         0 as libc::c_int
4406 +                                     } else {
4407 +                                         10 as libc::c_int
4408 +                                     }) as libc::c_long + 0 as libc::c_int as intmax_t
4409 +                                 }) - 1 as libc::c_int as libc::c_long)
4410 +                                     < 0 as libc::c_int as libc::c_long
4411 +                                 {
4412 +                                     ((((if 1 as libc::c_int != 0 {
4413 +                                         0 as libc::c_int as libc::c_long
4414 +                                     } else {
4415 +                                         (if 1 as libc::c_int != 0 {
4416 +                                             0 as libc::c_int
4417 +                                         } else {
4418 +                                             10 as libc::c_int
4419 +                                         }) as libc::c_long + 0 as libc::c_int as intmax_t
4420 +                                     }) + 1 as libc::c_int as libc::c_long)
4421 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4422 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4423 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4424 +                                         - 1 as libc::c_int as libc::c_long)
4425 +                                         * 2 as libc::c_int as libc::c_long
4426 +                                         + 1 as libc::c_int as libc::c_long
4427 +                                 } else {
4428 +                                     (if 1 as libc::c_int != 0 {
4429 +                                         0 as libc::c_int as libc::c_long
4430 +                                     } else {
4431 +                                         (if 1 as libc::c_int != 0 {
4432 +                                             0 as libc::c_int
4433 +                                         } else {
4434 +                                             10 as libc::c_int
4435 +                                         }) as libc::c_long + 0 as libc::c_int as intmax_t
4436 +                                     }) - 1 as libc::c_int as libc::c_long
4437 +                                 })) as libc::c_int
4438 +                         } else {
4439 +                             ((0 as libc::c_int as libc::c_long)
4440 +                                 < (if 1 as libc::c_int != 0 {
4441 +                                     0 as libc::c_int
4442 +                                 } else {
4443 +                                     10 as libc::c_int
4444 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t)
4445 +                                 as libc::c_int
4446 +                         }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
4447 +                         {
4448 +                             if ((if 1 as libc::c_int != 0 {
4449 +                                 0 as libc::c_int as libc::c_long
4450 +                             } else {
4451 +                                 n_units
4452 +                             }) - 1 as libc::c_int as libc::c_long)
4453 +                                 < 0 as libc::c_int as libc::c_long
4454 +                             {
4455 +                                 ((0 as libc::c_int as libc::c_long)
4456 +                                     < n_units + 0 as libc::c_int as intmax_t) as libc::c_int
4457 +                             } else {
4458 +                                 ((0 as libc::c_int as libc::c_long) < n_units
4459 +                                     && (-(1 as libc::c_int) as libc::c_long
4460 +                                         - 0 as libc::c_int as intmax_t)
4461 +                                         < n_units - 1 as libc::c_int as libc::c_long) as libc::c_int
4462 +                             }
4463 +                         } else {
4464 +                             ((0 as libc::c_int as intmax_t
4465 +                                 / 10 as libc::c_int as libc::c_long) < n_units)
4466 +                                 as libc::c_int
4467 +                         }
     |

warning: operator precedence can trip the unwary
    --> src/split.rs:4344:37
     |
4344 | / ...                   (if 1 as libc::c_int != 0 {
4345 | | ...                       0 as libc::c_int
4346 | | ...                   } else {
4347 | | ...                       10 as libc::c_int
...    |
4350 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4351 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     | |______________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
     |
4344 ~                                     ((if 1 as libc::c_int != 0 {
4345 +                                         0 as libc::c_int
4346 +                                     } else {
4347 +                                         10 as libc::c_int
4348 +                                     }) as libc::c_long + -(1 as libc::c_int) as intmax_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4349 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4350 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |

warning: this `else { if .. }` block can be collapsed
    --> src/split.rs:4473:32
     |
4473 |                           } else {
     |  ________________________________^
4474 | |                             if n_units < 0 as libc::c_int as libc::c_long {
4475 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
4476 | |                                     0 as libc::c_int as libc::c_long
...    |
4587 | |                             }
4588 | |                         }
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
4473 ~                         } else if n_units < 0 as libc::c_int as libc::c_long {
4474 +                             if (if (if ((if 1 as libc::c_int != 0 {
4475 +                                 0 as libc::c_int as libc::c_long
4476 +                             } else {
4477 +                                 (if 1 as libc::c_int != 0 {
4478 +                                     0 as libc::c_int as libc::c_long
4479 +                                 } else {
4480 +                                     n_units
4481 +                                 }) + 0 as libc::c_int as intmax_t
4482 +                             }) - 1 as libc::c_int as libc::c_long)
4483 +                                 < 0 as libc::c_int as libc::c_long
4484 +                             {
4485 +                                 !(((((if 1 as libc::c_int != 0 {
4486 +                                     0 as libc::c_int as libc::c_long
4487 +                                 } else {
4488 +                                     (if 1 as libc::c_int != 0 {
4489 +                                         0 as libc::c_int as libc::c_long
4490 +                                     } else {
4491 +                                         n_units
4492 +                                     }) + 0 as libc::c_int as intmax_t
4493 +                                 }) + 1 as libc::c_int as libc::c_long)
4494 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4495 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4496 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4497 +                                     - 1 as libc::c_int as libc::c_long)
4498 +                                     * 2 as libc::c_int as libc::c_long
4499 +                                     + 1 as libc::c_int as libc::c_long)
4500 +                             } else {
4501 +                                 (if 1 as libc::c_int != 0 {
4502 +                                     0 as libc::c_int as libc::c_long
4503 +                                 } else {
4504 +                                     (if 1 as libc::c_int != 0 {
4505 +                                         0 as libc::c_int as libc::c_long
4506 +                                     } else {
4507 +                                         n_units
4508 +                                     }) + 0 as libc::c_int as intmax_t
4509 +                                 }) + 0 as libc::c_int as libc::c_long
4510 +                             }) < 0 as libc::c_int as libc::c_long
4511 +                             {
4512 +                                 (((if 1 as libc::c_int != 0 {
4513 +                                     0 as libc::c_int as libc::c_long
4514 +                                 } else {
4515 +                                     n_units
4516 +                                 }) + 0 as libc::c_int as intmax_t)
4517 +                                     < -(if ((if 1 as libc::c_int != 0 {
4518 +                                         0 as libc::c_int as libc::c_long
4519 +                                     } else {
4520 +                                         (if 1 as libc::c_int != 0 {
4521 +                                             0 as libc::c_int as libc::c_long
4522 +                                         } else {
4523 +                                             n_units
4524 +                                         }) + 0 as libc::c_int as intmax_t
4525 +                                     }) - 1 as libc::c_int as libc::c_long)
4526 +                                         < 0 as libc::c_int as libc::c_long
4527 +                                     {
4528 +                                         ((((if 1 as libc::c_int != 0 {
4529 +                                             0 as libc::c_int as libc::c_long
4530 +                                         } else {
4531 +                                             (if 1 as libc::c_int != 0 {
4532 +                                                 0 as libc::c_int as libc::c_long
4533 +                                             } else {
4534 +                                                 n_units
4535 +                                             }) + 0 as libc::c_int as intmax_t
4536 +                                         }) + 1 as libc::c_int as libc::c_long)
4537 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4538 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4539 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4540 +                                             - 1 as libc::c_int as libc::c_long)
4541 +                                             * 2 as libc::c_int as libc::c_long
4542 +                                             + 1 as libc::c_int as libc::c_long
4543 +                                     } else {
4544 +                                         (if 1 as libc::c_int != 0 {
4545 +                                             0 as libc::c_int as libc::c_long
4546 +                                         } else {
4547 +                                             (if 1 as libc::c_int != 0 {
4548 +                                                 0 as libc::c_int as libc::c_long
4549 +                                             } else {
4550 +                                                 n_units
4551 +                                             }) + 0 as libc::c_int as intmax_t
4552 +                                         }) - 1 as libc::c_int as libc::c_long
4553 +                                     })) as libc::c_int
4554 +                             } else {
4555 +                                 ((0 as libc::c_int as libc::c_long)
4556 +                                     < (if 1 as libc::c_int != 0 {
4557 +                                         0 as libc::c_int as libc::c_long
4558 +                                     } else {
4559 +                                         n_units
4560 +                                     }) + 0 as libc::c_int as intmax_t) as libc::c_int
4561 +                             }) != 0 && n_units == -(1 as libc::c_int) as libc::c_long
4562 +                             {
4563 +                                 if ((if 1 as libc::c_int != 0 {
4564 +                                     0 as libc::c_int
4565 +                                 } else {
4566 +                                     10 as libc::c_int
4567 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
4568 +                                 {
4569 +                                     ((0 as libc::c_int as libc::c_long)
4570 +                                         < 10 as libc::c_int as libc::c_long
4571 +                                             + 0 as libc::c_int as intmax_t) as libc::c_int
4572 +                                 } else {
4573 +                                     ((-(1 as libc::c_int) as libc::c_long
4574 +                                         - 0 as libc::c_int as intmax_t)
4575 +                                         < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
4576 +                                         as libc::c_int
4577 +                                 }
4578 +                             } else {
4579 +                                 (0 as libc::c_int as intmax_t / n_units
4580 +                                     < 10 as libc::c_int as libc::c_long) as libc::c_int
4581 +                             }
4582 +                         } else {
4583 +                             ((-(1 as libc::c_int) as intmax_t
4584 +                                 / 10 as libc::c_int as libc::c_long) < n_units)
4585 +                                 as libc::c_int
4586 +                         }
     |

warning: long literal lacking separators
    --> src/split.rs:4605:31
     |
4605 |                     n_units = 9223372036854775807 as libc::c_long;
     |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4712:32
     |
4712 |                         < (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                                ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4713:31
     |
4713 | ...                   < 18446744073709551615 as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4715:29
     |
4715 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4717:29
     |
4717 | ...                   18446744073709551615 as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4723:30
     |
4723 |                         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                              ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4724:31
     |
4724 | ...                   < 18446744073709551615 as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4726:29
     |
4726 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/split.rs:4728:29
     |
4728 | ...                   18446744073709551615 as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `if` statement can be collapsed
    --> src/split.rs:4903:1
     |
4903 | / if unsafe { strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) } != 0 {
4904 | |     if fd_reopen(0, infile, 0, 0) < 0 {
4905 | |         let open_error = format!("cannot open {}", unsafe { CStr::from_ptr(infile).to_string_lossy() });
4906 | |         error(1, *__errno_location(), gettext(open_error.as_ptr() as *const libc::c_char));
4907 | |     }
4908 | | }
     | |_^
     |
     = note: `-W clippy::collapsible-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
4903 + if unsafe { strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) } != 0 && fd_reopen(0, infile, 0, 0) < 0 {
4904 +     let open_error = format!("cannot open {}", unsafe { CStr::from_ptr(infile).to_string_lossy() });
4905 +     error(1, *__errno_location(), gettext(open_error.as_ptr() as *const libc::c_char));
4906 + }
     |

warning: binding's name is too similar to existing binding
    --> src/split.rs:5200:13
     |
5200 |     let mut argv: Vec<*mut libc::c_char> = args.iter()
     |             ^^^^
     |
note: existing binding defined here
    --> src/split.rs:5196:9
     |
5196 |     let args: Vec<CString> = ::std::env::args()
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: unreachable statement
    --> src/split.rs:5126:13
     |
5116 | /             __assert_fail(
5117 | |                 b"0\0" as *const u8 as *const libc::c_char,
5118 | |                 b"split.c\0" as *const u8 as *const libc::c_char,
5119 | |                 1686 as libc::c_int as libc::c_uint,
...    |
5124 | |                     .as_ptr(),
5125 | |             );
     | |_____________- any code following this expression is unreachable
5126 | /             'c_16295: {
5127 | |                 __assert_fail(
5128 | |                     b"0\0" as *const u8 as *const libc::c_char,
5129 | |                     b"split.c\0" as *const u8 as *const libc::c_char,
...    |
5136 | |                 );
5137 | |             };
     | |______________^ unreachable statement
     |
     = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `fd`
   --> src/split.rs:647:17
    |
647 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
    |                 ^^ help: if this is intentional, prefix it with an underscore: `_fd`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `mode`
   --> src/split.rs:647:26
    |
647 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
    |                          ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unnecessary `unsafe` block
   --> src/split.rs:655:5
    |
655 |     unsafe { __gl_setmode(fd, mode) }
    |     ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

warning: unnecessary `unsafe` block
    --> src/split.rs:2954:25
     |
2928 | / unsafe extern "C" fn lines_chunk_split(
2929 | |     mut k: intmax_t,
2930 | |     mut n: intmax_t,
2931 | |     mut buf: *mut libc::c_char,
...    |
2934 | |     mut file_size: off_t,
2935 | | ) {
     | |_- because it's nested under this `unsafe` fn
...
2954 |           let buf_slice = unsafe { std::slice::from_raw_parts_mut(buf, bufsize as usize) };
     |                           ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`
     = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default

warning: unnecessary `unsafe` block
    --> src/split.rs:2961:27
     |
2928 | / unsafe extern "C" fn lines_chunk_split(
2929 | |     mut k: intmax_t,
2930 | |     mut n: intmax_t,
2931 | |     mut buf: *mut libc::c_char,
...    |
2934 | |     mut file_size: off_t,
2935 | | ) {
     | |_- because it's nested under this `unsafe` fn
...
2961 |                   let err = unsafe { *libc::__errno_location() };
     |                             ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:3266:22
     |
3144 | / unsafe extern "C" fn bytes_chunk_extract(
3145 | |     mut k: intmax_t,
3146 | |     mut n: intmax_t,
3147 | |     mut buf: *mut libc::c_char,
...    |
3150 | |     mut file_size: off_t,
3151 | | ) {
     | |_- because it's nested under this `unsafe` fn
...
3266 |           let buffer = unsafe { std::slice::from_raw_parts_mut(buf as *mut u8, bufsize as usize) };
     |                        ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:3286:18
     |
3144 | / unsafe extern "C" fn bytes_chunk_extract(
3145 | |     mut k: intmax_t,
3146 | |     mut n: intmax_t,
3147 | |     mut buf: *mut libc::c_char,
...    |
3150 | |     mut file_size: off_t,
3151 | | ) {
     | |_- because it's nested under this `unsafe` fn
...
3286 |       let buffer = unsafe { std::slice::from_raw_parts(buf as *mut u8, bufsize as usize) };
     |                    ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:3999:27
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
3999 |            let suffix_len = unsafe { CStr::from_ptr(optarg).to_bytes().len() as i32 };
     |                             ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4000:18
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4000 |   let optarg_str = unsafe { CStr::from_ptr(optarg).to_str().unwrap() };
     |                    ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4022:13
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4022 |               unsafe { gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char) },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4032:13
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4032 |               unsafe { gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char) },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4042:13
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4042 |               unsafe { gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char) },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4051:11
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4051 |   n_units = unsafe {
     |             ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4136:24
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4136 |   let mut local_optarg = unsafe { std::ffi::CStr::from_ptr(optarg).to_string_lossy() };
     |                          ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4161:27
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4161 |            let optarg_str = unsafe { std::ffi::CStr::from_ptr(optarg) }.to_string_lossy();
     |                             ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4748:5
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4748 |       unsafe { stdout },
     |       ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4892:59
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4892 |       let extra_operand_error = format!("extra operand {}", unsafe { CStr::from_ptr(*argv.offset(optind as isize)).to_string_lossy() });
     |                                                             ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4903:4
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4903 |   if unsafe { strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) } != 0 {
     |      ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/split.rs:4905:52
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
4905 |           let open_error = format!("cannot open {}", unsafe { CStr::from_ptr(infile).to_string_lossy() });
     |                                                      ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary structure name repetition
   --> src/split.rs:277:22
    |
277 |     pub _chain: *mut _IO_FILE,
    |                      ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src/split.rs:288:29
    |
288 |     pub _freeres_list: *mut _IO_FILE,
    |                             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this could be a `const fn`
   --> src/split.rs:404:1
    |
404 | / fn to_uchar(ch: i8) -> u8 {
405 | |     ch as u8
406 | | }
    | |_^
    |
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/split.rs:405:5
    |
405 |     ch as u8
    |     ^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/split.rs:409:1
    |
409 | / fn psame_inode(a: &stat, b: &stat) -> bool {
410 | |     (*a).st_dev == (*b).st_dev && (*a).st_ino == (*b).st_ino
411 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: deref which would be done by auto-deref
   --> src/split.rs:410:5
    |
410 |     (*a).st_dev == (*b).st_dev && (*a).st_ino == (*b).st_ino
    |     ^^^^ help: try this: `a`
    |
    = note: `-W clippy::explicit-auto-deref` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref

warning: deref which would be done by auto-deref
   --> src/split.rs:410:20
    |
410 |     (*a).st_dev == (*b).st_dev && (*a).st_ino == (*b).st_ino
    |                    ^^^^ help: try this: `b`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref

warning: deref which would be done by auto-deref
   --> src/split.rs:410:35
    |
410 |     (*a).st_dev == (*b).st_dev && (*a).st_ino == (*b).st_ino
    |                                   ^^^^ help: try this: `a`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref

warning: deref which would be done by auto-deref
   --> src/split.rs:410:50
    |
410 |     (*a).st_dev == (*b).st_dev && (*a).st_ino == (*b).st_ino
    |                                                  ^^^^ help: try this: `b`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:416:47
    |
416 |     let translated_message = unsafe { gettext(message.as_ptr() as *const libc::c_char) };
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `message.as_ptr().cast::<i8>()`
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: non-binding `let` on a type that implements `Drop`
   --> src/split.rs:438:5
    |
438 |     let _ = handle.write_all(message.as_bytes());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::let-underscore-drop` implied by `-W clippy::pedantic`
    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: this loop could be written as a `for` loop
   --> src/split.rs:456:5
    |
456 |     while let Some(&(prog, ref n)) = map_prog.next() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for &(prog, ref n) in map_prog`
    |
    = note: `-W clippy::while-let-on-iterator` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator

warning: use of `writeln!(stdout(), ...).unwrap()`
   --> src/split.rs:476:9
    |
476 | / ...   writeln!(
477 | | ...       std::io::stdout(),
478 | | ...       "{}",
479 | | ...       CStr::from_bytes_with_nul(b"Report any translation bugs to <https://translationproject.org/team/>\n\0").unwrap().to_str().unwrap()
480 | | ...   ).unwrap();
    | |________________^
    |
    = note: `-W clippy::explicit-write` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write
help: try this
    |
476 ~         println!("{}",
477 ~             CStr::from_bytes_with_nul(b"Report any translation bugs to <https://translationproject.org/team/>\n\0").unwrap().to_str().unwrap());
    |

warning: this pattern creates a reference to a reference
   --> src/split.rs:456:28
    |
456 |     while let Some(&(prog, ref n)) = map_prog.next() {
    |                            ^^^^^ help: try this: `n`
    |
    = note: `-W clippy::needless-borrow` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: this could be a `const fn`
   --> src/split.rs:507:1
    |
507 | / fn usable_st_size(sb: *const stat) -> bool {
508 | |     let sb = unsafe { &*sb };
509 | |     (sb.st_mode & 0o170000) == 0o100000
510 | |         || (sb.st_mode & 0o170000) == 0o120000
511 | |         || (sb.st_mode.wrapping_sub(sb.st_mode) != 0) || (0 != 0)
512 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: equal expressions as operands to `!=`
   --> src/split.rs:511:58
    |
511 |         || (sb.st_mode.wrapping_sub(sb.st_mode) != 0) || (0 != 0)
    |                                                          ^^^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: non-binding `let` on a type that implements `Drop`
   --> src/split.rs:517:5
    |
517 |     let _ = std::io::stdout().flush();
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: non-binding `let` on a type that implements `Drop`
   --> src/split.rs:518:5
    |
518 |     let _ = std::io::stdout().lock().flush();
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:535:13
    |
535 |             let __errstatus = 1;
    |             ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:548:13
    |
548 |             let __errstatus = 1;
    |             ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: this could be a `const fn`
   --> src/split.rs:564:1
    |
564 | / fn __gl_stdbit_clzll(n: u64) -> i32 {
565 | |     if n != 0 {
566 | |         n.leading_zeros() as i32
567 | |     } else {
568 | |         (8 * std::mem::size_of::<u64>() as u32) as i32
569 | |     }
570 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unnecessary `!=` operation
   --> src/split.rs:565:5
    |
565 | /     if n != 0 {
566 | |         n.leading_zeros() as i32
567 | |     } else {
568 | |         (8 * std::mem::size_of::<u64>() as u32) as i32
569 | |     }
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:566:9
    |
566 |         n.leading_zeros() as i32
    |         ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:568:9
    |
568 |         (8 * std::mem::size_of::<u64>() as u32) as i32
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> src/split.rs:568:14
    |
568 |         (8 * std::mem::size_of::<u64>() as u32) as i32
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unneeded `return` statement
   --> src/split.rs:575:1
    |
575 | return result;
    | ^^^^^^^^^^^^^^ help: remove `return`: `result`
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:574:23
    |
574 |     let result: u32 = __gl_stdbit_clzll(n) as u32;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/split.rs:623:5
    |
623 | /     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
624 | |         < 18446744073709551615 as libc::c_ulong
625 | |     {
626 | |         9223372036854775807 as libc::c_long as libc::c_ulong
...   |
643 | |         blocksize as libc::c_ulong
644 | |     }) as idx_t;
    | |________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
623 ~     (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
624 +         < 18446744073709551615 as libc::c_ulong
625 +     {
626 +         9223372036854775807 as libc::c_long as libc::c_ulong
627 +     } else {
628 +         18446744073709551615 as libc::c_ulong
629 +     })
630 +         .wrapping_div(2 as libc::c_int as libc::c_ulong)
631 +         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
632 +     {
633 +         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
634 +             < 18446744073709551615 as libc::c_ulong
635 +         {
636 +             9223372036854775807 as libc::c_long as libc::c_ulong
637 +         } else {
638 +             18446744073709551615 as libc::c_ulong
639 +         })
640 +             .wrapping_div(2 as libc::c_int as libc::c_ulong)
641 +             .wrapping_add(1 as libc::c_int as libc::c_ulong)
642 +     } else {
643 +         blocksize as libc::c_ulong
644 +     }) as idx_t
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:579:32
    |
579 |       let mut blocksize: idx_t = (if (if (0 as libc::c_int) < (*st).st_blksize
    |  ________________________________^
580 | |         && (*st).st_blksize as libc::c_ulong
581 | |             <= (-(1 as libc::c_int) as size_t)
582 | |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
...   |
599 | |         512 as libc::c_int
600 | |     }) as idx_t;
    | |_______________^
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
579 ~     let mut blocksize: idx_t = i64::from((if (if (0 as libc::c_int) < (*st).st_blksize
580 +         && (*st).st_blksize as libc::c_ulong
581 +             <= (-(1 as libc::c_int) as size_t)
582 +                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
583 +                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
584 +     {
585 +         (*st).st_blksize
586 +     } else {
587 +         512 as libc::c_int
588 +     }) <= 0 as libc::c_int
589 +     {
590 +         IO_BUFSIZE as libc::c_int
591 +     } else if (0 as libc::c_int) < (*st).st_blksize
592 +         && (*st).st_blksize as libc::c_ulong
593 +             <= (-(1 as libc::c_int) as size_t)
594 +                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
595 +                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
596 +     {
597 +         (*st).st_blksize
598 +     } else {
599 +         512 as libc::c_int
600 ~     }));
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:580:12
    |
580 |         && (*st).st_blksize as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:581:16
    |
581 |             <= (-(1 as libc::c_int) as size_t)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:582:31
    |
582 |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:583:31
    |
583 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:590:9
    |
590 |         IO_BUFSIZE as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:592:12
    |
592 |         && (*st).st_blksize as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:593:16
    |
593 |             <= (-(1 as libc::c_int) as size_t)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:594:31
    |
594 |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:595:31
    |
595 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:602:12
    |
602 |         += (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(IO_BUFSIZE as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:602:13
    |
602 |         += (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:603:15
    |
603 |             - (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long % blocksize;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(IO_BUFSIZE as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:603:16
    |
603 |             - (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long % blocksize;
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:604:24
    |
604 |     if (*st).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:605:12
    |
605 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:606:36
    |
606 |         && blocksize & blocksize - 1 as libc::c_int as libc::c_long != 0
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:608:46
    |
608 |           let mut leading_zeros: libc::c_int = stdc_leading_zeros_ull(
    |  ______________________________________________^
609 | |             blocksize as libc::c_ulonglong,
610 | |         ) as libc::c_int;
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:609:13
    |
609 |             blocksize as libc::c_ulonglong,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:611:12
    |
611 |         if (9223372036854775807 as libc::c_long as libc::c_ulonglong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:612:15
    |
612 |             < (9223372036854775807 as libc::c_longlong as libc::c_ulonglong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:618:25
    |
618 |             if power <= 9223372036854775807 as libc::c_long as libc::c_ulonglong {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
   --> src/split.rs:619:29
    |
619 |                 blocksize = power as idx_t;
    |                             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
   --> src/split.rs:623:12
    |
623 |       return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |  ____________^
624 | |         < 18446744073709551615 as libc::c_ulong
625 | |     {
626 | |         9223372036854775807 as libc::c_long as libc::c_ulong
...   |
643 | |         blocksize as libc::c_ulong
644 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:623:20
    |
623 |     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:626:9
    |
626 |         9223372036854775807 as libc::c_long as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:630:23
    |
630 |         .wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:631:23
    |
631 |         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:631:60
    |
631 |         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:633:13
    |
633 |         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:636:13
    |
636 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:640:27
    |
640 |             .wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/split.rs:641:27
    |
641 |             .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/split.rs:643:9
    |
643 |         blocksize as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/split.rs:647:1
    |
647 | / fn __gl_setmode(fd: i32, mode: i32) -> i32 {
648 | |     return 0;
649 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/split.rs:648:5
    |
648 |     return 0;
    |     ^^^^^^^^^ help: remove `return`: `0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
   --> src/split.rs:659:1
    |
659 | unsafe extern "C" fn xset_binary_mode_error() {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:681:51
    |
681 |   static mut suffix_alphabet: *const libc::c_char = b"abcdefghijklmnopqrstuvwxyz\0"
    |  ___________________________________________________^
682 | |     as *const u8 as *const libc::c_char;
    | |_______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"abcdefghijklmnopqrstuvwxyz\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:717:9
    |
711 | /         let mut init = option {
712 | |             name: b"bytes\0" as *const u8 as *const libc::c_char,
713 | |             has_arg: 1 as libc::c_int,
714 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
715 | |             val: 'b' as i32,
716 | |         };
    | |__________- unnecessary `let` binding
717 |           init
    |           ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
711 ~         
712 ~         option {
713 +             name: b"bytes\0" as *const u8 as *const libc::c_char,
714 +             has_arg: 1 as libc::c_int,
715 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
716 +             val: 'b' as i32,
717 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:712:19
    |
712 |             name: b"bytes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"bytes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:726:9
    |
720 | /         let mut init = option {
721 | |             name: b"lines\0" as *const u8 as *const libc::c_char,
722 | |             has_arg: 1 as libc::c_int,
723 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
724 | |             val: 'l' as i32,
725 | |         };
    | |__________- unnecessary `let` binding
726 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
720 ~         
721 ~         option {
722 +             name: b"lines\0" as *const u8 as *const libc::c_char,
723 +             has_arg: 1 as libc::c_int,
724 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
725 +             val: 'l' as i32,
726 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:721:19
    |
721 |             name: b"lines\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lines\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:735:9
    |
729 | /         let mut init = option {
730 | |             name: b"line-bytes\0" as *const u8 as *const libc::c_char,
731 | |             has_arg: 1 as libc::c_int,
732 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
733 | |             val: 'C' as i32,
734 | |         };
    | |__________- unnecessary `let` binding
735 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
729 ~         
730 ~         option {
731 +             name: b"line-bytes\0" as *const u8 as *const libc::c_char,
732 +             has_arg: 1 as libc::c_int,
733 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
734 +             val: 'C' as i32,
735 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:730:19
    |
730 |             name: b"line-bytes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"line-bytes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:744:9
    |
738 | /         let mut init = option {
739 | |             name: b"number\0" as *const u8 as *const libc::c_char,
740 | |             has_arg: 1 as libc::c_int,
741 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
742 | |             val: 'n' as i32,
743 | |         };
    | |__________- unnecessary `let` binding
744 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
738 ~         
739 ~         option {
740 +             name: b"number\0" as *const u8 as *const libc::c_char,
741 +             has_arg: 1 as libc::c_int,
742 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
743 +             val: 'n' as i32,
744 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:739:19
    |
739 |             name: b"number\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"number\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:753:9
    |
747 | /         let mut init = option {
748 | |             name: b"elide-empty-files\0" as *const u8 as *const libc::c_char,
749 | |             has_arg: 0 as libc::c_int,
750 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
751 | |             val: 'e' as i32,
752 | |         };
    | |__________- unnecessary `let` binding
753 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
747 ~         
748 ~         option {
749 +             name: b"elide-empty-files\0" as *const u8 as *const libc::c_char,
750 +             has_arg: 0 as libc::c_int,
751 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
752 +             val: 'e' as i32,
753 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:748:19
    |
748 |             name: b"elide-empty-files\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"elide-empty-files\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:762:9
    |
756 | /         let mut init = option {
757 | |             name: b"unbuffered\0" as *const u8 as *const libc::c_char,
758 | |             has_arg: 0 as libc::c_int,
759 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
760 | |             val: 'u' as i32,
761 | |         };
    | |__________- unnecessary `let` binding
762 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
756 ~         
757 ~         option {
758 +             name: b"unbuffered\0" as *const u8 as *const libc::c_char,
759 +             has_arg: 0 as libc::c_int,
760 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
761 +             val: 'u' as i32,
762 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:757:19
    |
757 |             name: b"unbuffered\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"unbuffered\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:771:9
    |
765 | /         let mut init = option {
766 | |             name: b"suffix-length\0" as *const u8 as *const libc::c_char,
767 | |             has_arg: 1 as libc::c_int,
768 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
769 | |             val: 'a' as i32,
770 | |         };
    | |__________- unnecessary `let` binding
771 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
765 ~         
766 ~         option {
767 +             name: b"suffix-length\0" as *const u8 as *const libc::c_char,
768 +             has_arg: 1 as libc::c_int,
769 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
770 +             val: 'a' as i32,
771 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:766:19
    |
766 |             name: b"suffix-length\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"suffix-length\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:780:9
    |
774 | /         let mut init = option {
775 | |             name: b"additional-suffix\0" as *const u8 as *const libc::c_char,
776 | |             has_arg: 1 as libc::c_int,
777 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
778 | |             val: ADDITIONAL_SUFFIX_OPTION as libc::c_int,
779 | |         };
    | |__________- unnecessary `let` binding
780 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
774 ~         
775 ~         option {
776 +             name: b"additional-suffix\0" as *const u8 as *const libc::c_char,
777 +             has_arg: 1 as libc::c_int,
778 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
779 +             val: ADDITIONAL_SUFFIX_OPTION as libc::c_int,
780 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:775:19
    |
775 |             name: b"additional-suffix\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"additional-suffix\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:778:18
    |
778 |             val: ADDITIONAL_SUFFIX_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:789:9
    |
783 | /         let mut init = option {
784 | |             name: b"numeric-suffixes\0" as *const u8 as *const libc::c_char,
785 | |             has_arg: 2 as libc::c_int,
786 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
787 | |             val: 'd' as i32,
788 | |         };
    | |__________- unnecessary `let` binding
789 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
783 ~         
784 ~         option {
785 +             name: b"numeric-suffixes\0" as *const u8 as *const libc::c_char,
786 +             has_arg: 2 as libc::c_int,
787 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
788 +             val: 'd' as i32,
789 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:784:19
    |
784 |             name: b"numeric-suffixes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"numeric-suffixes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:798:9
    |
792 | /         let mut init = option {
793 | |             name: b"hex-suffixes\0" as *const u8 as *const libc::c_char,
794 | |             has_arg: 2 as libc::c_int,
795 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
796 | |             val: 'x' as i32,
797 | |         };
    | |__________- unnecessary `let` binding
798 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
792 ~         
793 ~         option {
794 +             name: b"hex-suffixes\0" as *const u8 as *const libc::c_char,
795 +             has_arg: 2 as libc::c_int,
796 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
797 +             val: 'x' as i32,
798 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:793:19
    |
793 |             name: b"hex-suffixes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"hex-suffixes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:807:9
    |
801 | /         let mut init = option {
802 | |             name: b"filter\0" as *const u8 as *const libc::c_char,
803 | |             has_arg: 1 as libc::c_int,
804 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
805 | |             val: FILTER_OPTION as libc::c_int,
806 | |         };
    | |__________- unnecessary `let` binding
807 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
801 ~         
802 ~         option {
803 +             name: b"filter\0" as *const u8 as *const libc::c_char,
804 +             has_arg: 1 as libc::c_int,
805 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
806 +             val: FILTER_OPTION as libc::c_int,
807 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:802:19
    |
802 |             name: b"filter\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"filter\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:805:18
    |
805 |             val: FILTER_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:816:9
    |
810 | /         let mut init = option {
811 | |             name: b"verbose\0" as *const u8 as *const libc::c_char,
812 | |             has_arg: 0 as libc::c_int,
813 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
814 | |             val: VERBOSE_OPTION as libc::c_int,
815 | |         };
    | |__________- unnecessary `let` binding
816 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
810 ~         
811 ~         option {
812 +             name: b"verbose\0" as *const u8 as *const libc::c_char,
813 +             has_arg: 0 as libc::c_int,
814 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
815 +             val: VERBOSE_OPTION as libc::c_int,
816 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:811:19
    |
811 |             name: b"verbose\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"verbose\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:814:18
    |
814 |             val: VERBOSE_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:825:9
    |
819 | /         let mut init = option {
820 | |             name: b"separator\0" as *const u8 as *const libc::c_char,
821 | |             has_arg: 1 as libc::c_int,
822 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
823 | |             val: 't' as i32,
824 | |         };
    | |__________- unnecessary `let` binding
825 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
819 ~         
820 ~         option {
821 +             name: b"separator\0" as *const u8 as *const libc::c_char,
822 +             has_arg: 1 as libc::c_int,
823 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
824 +             val: 't' as i32,
825 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:820:19
    |
820 |             name: b"separator\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"separator\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:834:9
    |
828 | /         let mut init = option {
829 | |             name: b"-io-blksize\0" as *const u8 as *const libc::c_char,
830 | |             has_arg: 1 as libc::c_int,
831 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
832 | |             val: IO_BLKSIZE_OPTION as libc::c_int,
833 | |         };
    | |__________- unnecessary `let` binding
834 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
828 ~         
829 ~         option {
830 +             name: b"-io-blksize\0" as *const u8 as *const libc::c_char,
831 +             has_arg: 1 as libc::c_int,
832 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
833 +             val: IO_BLKSIZE_OPTION as libc::c_int,
834 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:829:19
    |
829 |             name: b"-io-blksize\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-io-blksize\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:832:18
    |
832 |             val: IO_BLKSIZE_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/split.rs:843:9
    |
837 | /         let mut init = option {
838 | |             name: b"help\0" as *const u8 as *const libc::c_char,
839 | |             has_arg: 0 as libc::c_int,
840 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
841 | |             val: GETOPT_HELP_CHAR as libc::c_int,
842 | |         };
    | |__________- unnecessary `let` binding
843 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
837 ~         
838 ~         option {
839 +             name: b"help\0" as *const u8 as *const libc::c_char,
840 +             has_arg: 0 as libc::c_int,
841 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
842 +             val: GETOPT_HELP_CHAR as libc::c_int,
843 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:838:19
    |
838 |             name: b"help\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"help\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:852:9
    |
846 | /         let mut init = option {
847 | |             name: b"version\0" as *const u8 as *const libc::c_char,
848 | |             has_arg: 0 as libc::c_int,
849 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
850 | |             val: GETOPT_VERSION_CHAR as libc::c_int,
851 | |         };
    | |__________- unnecessary `let` binding
852 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
846 ~         
847 ~         option {
848 +             name: b"version\0" as *const u8 as *const libc::c_char,
849 +             has_arg: 0 as libc::c_int,
850 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
851 +             val: GETOPT_VERSION_CHAR as libc::c_int,
852 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:847:19
    |
847 |             name: b"version\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"version\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/split.rs:861:9
    |
855 | /         let mut init = option {
856 | |             name: 0 as *const libc::c_char,
857 | |             has_arg: 0 as libc::c_int,
858 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
859 | |             val: 0 as libc::c_int,
860 | |         };
    | |__________- unnecessary `let` binding
861 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
855 ~         
856 ~         option {
857 +             name: 0 as *const libc::c_char,
858 +             has_arg: 0 as libc::c_int,
859 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
860 +             val: 0 as libc::c_int,
861 +         }
    |

warning: this boolean expression can be simplified
   --> src/split.rs:907:16
    |
907 |             if !(n_units_end != 0) {
    |                ^^^^^^^^^^^^^^^^^^^ help: try: `n_units_end == 0`
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/split.rs:964:9
    |
964 |         return;
    |         ^^^^^^^ help: remove `return`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:878:38
    |
878 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:878:38
    |
878 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:879:42
    |
879 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:879:42
    |
879 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:880:42
    |
880 |         || split_type as libc::c_uint == type_rr as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:880:42
    |
880 |         || split_type as libc::c_uint == type_rr as libc::c_int as libc::c_uint
    |                                          ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:882:51
    |
882 |         let mut n_units_end: intmax_t = n_units - 1 as libc::c_int as libc::c_long;
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/split.rs:887:17
    |
887 |                 0 as *mut *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:890:17
    |
890 |                 b"\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/split.rs:892:37
    |
892 |             if e as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/split.rs:892:37
    |
892 |             if e as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: borrow as raw pointer
   --> src/split.rs:896:18
    |
896 |                 *(&mut n_units_end as *mut intmax_t) = fresh0;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units_end)`
    |
    = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `u64` to `i64` may wrap around the value
   --> src/split.rs:902:39
    |
902 |         let mut alphabet_len: idx_t = strlen(suffix_alphabet) as idx_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/split.rs:905:13
    |
905 |             suffix_length_needed;
    |             ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary `!=` operation
   --> src/split.rs:913:5
    |
913 | /     if suffix_length != 0 {
914 | |         if suffix_length < suffix_length_needed as libc::c_long {
915 | |             if 0 != 0 {
916 | |                 error(
...   |
970 | |         }) as idx_t;
971 | |     };
    | |_____^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:914:28
    |
914 |         if suffix_length < suffix_length_needed as libc::c_long {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(suffix_length_needed)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/split.rs:915:13
    |
915 | /             if 0 != 0 {
916 | |                 error(
917 | |                     1 as libc::c_int,
918 | |                     0 as libc::c_int,
...   |
960 | |                 });
961 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/split.rs:915:16
    |
915 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:920:25
    |
920 | /                         b"the suffix length needs to be at least %d\0" as *const u8
921 | |                             as *const libc::c_char,
    | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"the suffix length needs to be at least %d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:925:17
    |
925 | /                 if 1 as libc::c_int != 0 as libc::c_int {
926 | |                     unreachable!();
927 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:930:21
    |
930 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:935:29
    |
935 | / ...                   b"the suffix length needs to be at least %d\0" as *const u8
936 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"the suffix length needs to be at least %d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:940:21
    |
940 | /                     if __errstatus != 0 as libc::c_int {
941 | |                         unreachable!();
942 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/split.rs:946:21
    |
946 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:951:29
    |
951 | / ...                   b"the suffix length needs to be at least %d\0" as *const u8
952 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"the suffix length needs to be at least %d\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/split.rs:956:21
    |
956 | /                     if __errstatus != 0 as libc::c_int {
957 | |                         unreachable!();
958 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/split.rs:966:25
    |
966 |           suffix_length = (if 2 as libc::c_int > suffix_length_needed {
    |  _________________________^
967 | |             2 as libc::c_int
968 | |         } else {
969 | |             suffix_length_needed
970 | |         }) as idx_t;
    | |___________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
966 ~         suffix_length = i64::from((if 2 as libc::c_int > suffix_length_needed {
967 +             2 as libc::c_int
968 +         } else {
969 +             suffix_length_needed
970 ~         }));
    |

warning: unsafe function's docs miss `# Safety` section
    --> src/split.rs:974:1
     |
974  | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
975  | |     if status != 0 as libc::c_int {
976  | |         fprintf(
977  | |             stderr,
...    |
1040 | |     exit(status);
1041 | | }
     | |_^
     |
     = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
    --> src/split.rs:974:1
     |
974  | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
975  | |     if status != 0 as libc::c_int {
976  | |         fprintf(
977  | |             stderr,
...    |
1040 | |     exit(status);
1041 | | }
     | |_^
     |
     = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
note: first possible panic found here
    --> src/split.rs:1038:29
     |
1038 |         emit_ancillary_info(CStr::from_bytes_with_nul(b"split\0").unwrap());
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unnecessary `!=` operation
    --> src/split.rs:975:5
     |
975  | /     if status != 0 as libc::c_int {
976  | |         fprintf(
977  | |             stderr,
978  | |             gettext(
...    |
1038 | |         emit_ancillary_info(CStr::from_bytes_with_nul(b"split\0").unwrap());
1039 | |     }
     | |_____^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:979:17
    |
979 | /                 b"Try '%s --help' for more information.\n\0" as *const u8
980 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Try '%s --help' for more information.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:987:17
    |
987 | /                 b"Usage: %s [OPTION]... [FILE [PREFIX]]\n\0" as *const u8
988 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Usage: %s [OPTION]... [FILE [PREFIX]]\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/split.rs:994:17
    |
994 | /                 b"Output pieces of FILE to PREFIXaa, PREFIXab, ...;\ndefault size is 1000 lines, and default PREFIX is 'x'.\n\0"
995 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Output pieces of FILE to PREFIXaa, PREFIXab, ...;\ndefault size is 1000 lines, and default PREFIX is 'x'.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1004:17
     |
1004 | /                 b"  -a, --suffix-length=N   generate suffixes of length N (default %d)\n      --additional-suffix=SUFFIX  append an addit...
1005 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -a, --suffix-length=N   generate suffixes of length N (default %d)\n      --additional-suffix=SUFFIX  append an additional SUFFIX to file names\n  -b, --bytes=SIZE        put SIZE bytes per output file\n  -C, --line-bytes=SIZE   put at most SIZE bytes of records per output file\n  -d                      use numeric suffixes starting at 0, not alphabetic\n      --numeric-suffixes[=FROM]  same as -d, but allow setting the start value\n  -x                      use hex suffixes starting at 0, not alphabetic\n      --hex-suffixes[=FROM]  same as -x, but allow setting the start value\n  -e, --elide-empty-files  do not generate empty output files with '-n'\n      --filter=COMMAND    write to shell COMMAND; file name is $FILE\n  -l, --lines=NUMBER      put NUMBER lines/records per output file\n  -n, --number=CHUNKS     generate CHUNKS output files; see explanation below\n  -t, --separator=SEP     use SEP instead of newline as the record separator;\n                            '\\0' (zero) specifies the NUL character\n  -u, --unbuffered        immediately copy input to output with '-n r/...'\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1011:17
     |
1011 | /                 b"      --verbose           print a diagnostic just before each\n                            output file is opened\n\0"
1012 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --verbose           print a diagnostic just before each\n                            output file is opened\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1018:17
     |
1018 | /                 b"      --help        display this help and exit\n\0" as *const u8
1019 | |                     as *const libc::c_char,
     | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --help        display this help and exit\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1025:17
     |
1025 | /                 b"      --version     output version information and exit\n\0"
1026 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --version     output version information and exit\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1033:17
     |
1033 | /                 b"\nCHUNKS may be:\n  N       split into N files based on size of input\n  K/N     output Kth of N to stdout\n  l/N     s...
1034 | |                     as *const u8 as *const libc::c_char,
     | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nCHUNKS may be:\n  N       split into N files based on size of input\n  K/N     output Kth of N to stdout\n  l/N     split into N files without splitting lines/records\n  l/K/N   output Kth of N to stdout without splitting lines/records\n  r/N     like 'l' but use round robin distribution\n  r/K/N   likewise but only output Kth of N to stdout\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
    --> src/split.rs:1055:12
     |
1055 |         if !((0 as libc::c_int as libc::c_long) < r) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(0 as libc::c_int as libc::c_long) >= r`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/split.rs:1084:5
     |
1084 |     return copied;
     |     ^^^^^^^^^^^^^^ help: remove `return`: `copied`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/split.rs:1047:30
     |
1047 |     let mut tmp: *mut FILE = 0 as *mut FILE;
     |                              ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:1048:31
     |
1048 |     if !temp_stream(&mut tmp, 0 as *mut *mut libc::c_char) {
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1049:16
     |
1049 |         return -(1 as libc::c_int) as off_t;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1051:29
     |
1051 |     let mut copied: off_t = 0 as libc::c_int as off_t;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1054:22
     |
1054 |         r = read(fd, buf as *mut libc::c_void, bufsize as size_t);
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1054:48
     |
1054 |         r = read(fd, buf as *mut libc::c_void, bufsize as size_t);
     |                                                ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1055:14
     |
1055 |         if !((0 as libc::c_int as libc::c_long) < r) {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1060:13
     |
1060 |             1 as libc::c_int as size_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1061:13
     |
1061 |             r as size_t,
     |             ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1063:14
     |
1063 |         ) != r as libc::c_ulong
     |              ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1065:20
     |
1065 |             return -(1 as libc::c_int) as off_t;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:1068:10
     |
1068 |         *(&mut copied as *mut off_t) = fresh2;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(copied)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1071:20
     |
1071 |             return -(1 as libc::c_int) as off_t;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1074:12
     |
1074 |     if r < 0 as libc::c_int as libc::c_long {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1077:9
     |
1077 |     r = dup2(fileno(tmp), fd) as off_t;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(dup2(fileno(tmp), fd))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1078:12
     |
1078 |     if r < 0 as libc::c_int as libc::c_long {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1082:16
     |
1082 |         return -(1 as libc::c_int) as off_t;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:1103:12
     |
1103 |         if !(size < bufsize) {
     |            ^^^^^^^^^^^^^^^^^ help: try: `size >= bufsize`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
    --> src/split.rs:1155:5
     |
1155 |     return size;
     |     ^^^^^^^^^^^^ help: remove `return`: `size`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1092:27
     |
1092 |     let mut size: off_t = 0 as libc::c_int as off_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1096:13
     |
1096 |             buf.offset(size as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.offset(size as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1096:24
     |
1096 |             buf.offset(size as isize) as *mut libc::c_void,
     |                        ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1097:13
     |
1097 |             (bufsize - size) as size_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1099:22
     |
1099 |         if n_read <= 0 as libc::c_int as libc::c_long {
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1100:32
     |
1100 |             return if n_read < 0 as libc::c_int as libc::c_long { n_read } else { size };
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1109:8
     |
1109 |     if usable_st_size(st) as libc::c_int != 0 && (*st).st_size < size
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(usable_st_size(st))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1111:29
     |
1111 |             cur = lseek(fd, 0 as libc::c_int as __off_t, 1 as libc::c_int);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1112:19
     |
1112 |             cur < 0 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1115:29
     |
1115 |             end = lseek(fd, 0 as libc::c_int as __off_t, 2 as libc::c_int);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1116:19
     |
1116 |             end < 0 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1119:45
     |
1119 |           let mut tmpbuf: *mut libc::c_char = xmalloc(bufsize as size_t)
     |  _____________________________________________^
1120 | |             as *mut libc::c_char;
     | |________________________________^ help: try `pointer::cast`, a safer alternative: `xmalloc(bufsize as size_t).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1119:53
     |
1119 |         let mut tmpbuf: *mut libc::c_char = xmalloc(bufsize as size_t)
     |                                                     ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1122:14
     |
1122 |         free(tmpbuf as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tmpbuf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1123:18
     |
1123 |         if end < 0 as libc::c_int as libc::c_long {
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1126:15
     |
1126 |         cur = 0 as libc::c_int as off_t;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1129:16
     |
1129 |         == (if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1129:46
     |
1129 |         == (if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
     |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1130:13
     |
1130 |             -(1 as libc::c_int) as off_t
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1132:15
     |
1132 |             (((1 as libc::c_int as off_t)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1134:35
     |
1134 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1135:35
     |
1135 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1136:19
     |
1136 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1136:55
     |
1136 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1137:19
     |
1137 |                 + 1 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:1142:18
     |
1142 |                 *(&mut size as *mut off_t) = fresh4;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(size)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1143:17
     |
1143 |                 fresh5 as libc::c_int != 0
     |                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh5)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1147:16
     |
1147 |         return -(1 as libc::c_int) as off_t;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1151:16
     |
1151 |         if r < 0 as libc::c_int as libc::c_long {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:1174:16
     |
1174 |             if !(fresh13 != 0 as libc::c_int as libc::c_long) {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `fresh13 == 0 as libc::c_int as libc::c_long`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/split.rs:1358:24
     |
1358 |                     if !(fresh12 != 0 as libc::c_int as libc::c_long) {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `fresh12 == 0 as libc::c_int as libc::c_long`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (209/100)
    --> src/split.rs:1157:1
     |
1157 | / unsafe extern "C" fn next_file_name() {
1158 | |     static mut sufindex: *mut idx_t = 0 as *const idx_t as *mut idx_t;
1159 | |     static mut outbase_length: idx_t = 0;
1160 | |     static mut outfile_length: idx_t = 0;
...    |
1368 | |     };
1369 | | }
     | |_^
     |
     = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: manual implementation of an assign operation
    --> src/split.rs:1173:13
     |
1173 |             i_0 = i_0 - 1;
     |             ^^^^^^^^^^^^^ help: replace it with: `i_0 -= 1`
     |
     = note: `-W clippy::assign-op-pattern` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1174:29
     |
1174 |             if !(fresh13 != 0 as libc::c_int as libc::c_long) {
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:1178:17
     |
1178 |             let ref mut fresh14 = *sufindex.offset(i_0 as isize);
     |             ----^^^^^^^^^^^^^^^---------------------------------- help: try: `let fresh14 = &mut (*sufindex.offset(i_0 as isize));`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1178:52
     |
1178 |             let ref mut fresh14 = *sufindex.offset(i_0 as isize);
     |                                                    ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1181:16
     |
1181 |             if suffix_auto as libc::c_int != 0 && i_0 == 0 as libc::c_int as libc::c_long
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(suffix_auto)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1181:58
     |
1181 |             if suffix_auto as libc::c_int != 0 && i_0 == 0 as libc::c_int as libc::c_long
     |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1184:25
     |
1184 | /                         (*sufindex.offset(0 as libc::c_int as isize)
1185 | |                             + 1 as libc::c_int as libc::c_long) as isize,
     | |________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1185:31
     |
1185 | ...                   + 1 as libc::c_int as libc::c_long) as isize,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1194:45
     |
1194 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1194:62
     |
1194 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                                              ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1193:21
     |
1193 |                     i_0 as isize,
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1195:36
     |
1195 |             if *outfile_mid.offset(i_0 as isize) != 0 {
     |                                    ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1198:46
     |
1198 |             *sufindex.offset(i_0 as isize) = 0 as libc::c_int as idx_t;
     |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1198:30
     |
1198 |             *sufindex.offset(i_0 as isize) = 0 as libc::c_int as idx_t;
     |                              ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1202:45
     |
1202 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1202:62
     |
1202 |                 ) = *suffix_alphabet.offset(*sufindex.offset(i_0 as isize) as isize);
     |                                                              ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1201:21
     |
1201 |                     i_0 as isize,
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/split.rs:1204:9
     |
1204 | /         match current_block_37 {
1205 | |             9769017674192345533 => {}
1206 | |             _ => {
1207 | |                 if 0 != 0 {
...    |
1252 | |             }
1253 | |         }
     | |_________^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1204 ~         if current_block_37 == 9769017674192345533 {} else {
1205 +             if 0 != 0 {
1206 +                 error(
1207 +                     1 as libc::c_int,
1208 +                     0 as libc::c_int,
1209 +                     gettext(
1210 +                         b"output file suffixes exhausted\0" as *const u8
1211 +                             as *const libc::c_char,
1212 +                     ),
1213 +                 );
1214 +                 if 1 as libc::c_int != 0 as libc::c_int {
1215 +                     unreachable!();
1216 +                 } else {};
1217 +             } else {
1218 +                 ({
1219 +                     let __errstatus: libc::c_int = 1 as libc::c_int;
1220 +                     error(
1221 +                         __errstatus,
1222 +                         0 as libc::c_int,
1223 +                         gettext(
1224 +                             b"output file suffixes exhausted\0" as *const u8
1225 +                                 as *const libc::c_char,
1226 +                         ),
1227 +                     );
1228 +                     if __errstatus != 0 as libc::c_int {
1229 +                         unreachable!();
1230 +                     } else {};
1231 +                     
1232 +                 });
1233 +                 ({
1234 +                     let __errstatus: libc::c_int = 1 as libc::c_int;
1235 +                     error(
1236 +                         __errstatus,
1237 +                         0 as libc::c_int,
1238 +                         gettext(
1239 +                             b"output file suffixes exhausted\0" as *const u8
1240 +                                 as *const libc::c_char,
1241 +                         ),
1242 +                     );
1243 +                     if __errstatus != 0 as libc::c_int {
1244 +                         unreachable!();
1245 +                     } else {};
1246 +                     
1247 +                 });
1248 +             };
1249 +             current_block_37 = 2873832966593178012;
1250 +         }
     |

warning: unnecessary `!=` operation
    --> src/split.rs:1207:17
     |
1207 | /                 if 0 != 0 {
1208 | |                     error(
1209 | |                         1 as libc::c_int,
1210 | |                         0 as libc::c_int,
...    |
1249 | |                     });
1250 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1207:20
     |
1207 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1212:29
     |
1212 | / ...                   b"output file suffixes exhausted\0" as *const u8
1213 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"output file suffixes exhausted\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1216:21
     |
1216 | /                     if 1 as libc::c_int != 0 as libc::c_int {
1217 | |                         unreachable!();
1218 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1221:25
     |
1221 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1226:33
     |
1226 | / ...                   b"output file suffixes exhausted\0" as *const u8
1227 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"output file suffixes exhausted\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1230:25
     |
1230 | /                         if __errstatus != 0 as libc::c_int {
1231 | |                             unreachable!();
1232 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1236:25
     |
1236 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1241:33
     |
1241 | / ...                   b"output file suffixes exhausted\0" as *const u8
1242 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"output file suffixes exhausted\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1245:25
     |
1245 | /                         if __errstatus != 0 as libc::c_int {
1246 | |                             unreachable!();
1247 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/split.rs:1255:5
     |
1255 | /     match current_block_37 {
1256 | |         9769017674192345533 => {
1257 | |             widen = outfile_length != 0;
1258 | |             if !widen {
...    |
1367 | |         _ => {}
1368 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1255 ~     if current_block_37 == 9769017674192345533 {
1256 +         widen = outfile_length != 0;
1257 +         if !widen {
1258 +             outbase_length = strlen(outbase) as idx_t;
1259 +             addsuf_length = (if !additional_suffix.is_null() {
1260 +                 strlen(additional_suffix)
1261 +             } else {
1262 +                 0 as libc::c_int as libc::c_ulong
1263 +             }) as idx_t;
1264 +             let (fresh6, fresh7) = (outbase_length + addsuf_length)
1265 +                 .overflowing_add(suffix_length);
1266 +             *(&mut outfile_length as *mut idx_t) = fresh6;
1267 +             overflow = fresh7;
1268 +         } else {
1269 +             let (fresh8, fresh9) = outfile_length.overflowing_add((2 as libc::c_int).into());
1270 +             *(&mut outfile_length as *mut idx_t) = fresh8;
1271 +             overflow = fresh9;
1272 +             suffix_length += 1;
1273 +             suffix_length;
1274 +         }
1275 +         let mut outfile_size: idx_t = 0;
1276 +         let (fresh10, fresh11) = outfile_length.overflowing_add((1 as libc::c_int).into());
1277 +         *(&mut outfile_size as *mut idx_t) = fresh10;
1278 +         overflow = (overflow as libc::c_int | fresh11 as libc::c_int) != 0;
1279 +         if overflow {
1280 +             xalloc_die();
1281 +         }
1282 +         outfile = xirealloc(outfile as *mut libc::c_void, outfile_size)
1283 +             as *mut libc::c_char;
1284 +         if !widen {
1285 +             memcpy(
1286 +                 outfile as *mut libc::c_void,
1287 +                 outbase as *const libc::c_void,
1288 +                 outbase_length as libc::c_ulong,
1289 +             );
1290 +         } else {
1291 +             *outfile
1292 +                 .offset(
1293 +                     outbase_length as isize,
1294 +                 ) = *suffix_alphabet
1295 +                 .offset(*sufindex.offset(0 as libc::c_int as isize) as isize);
1296 +             outbase_length += 1;
1297 +             outbase_length;
1298 +         }
1299 +         outfile_mid = outfile.offset(outbase_length as isize);
1300 +         memset(
1301 +             outfile_mid as *mut libc::c_void,
1302 +             *suffix_alphabet.offset(0 as libc::c_int as isize) as libc::c_int,
1303 +             suffix_length as libc::c_ulong,
1304 +         );
1305 +         if !additional_suffix.is_null() {
1306 +             memcpy(
1307 +                 outfile_mid.offset(suffix_length as isize) as *mut libc::c_void,
1308 +                 additional_suffix as *const libc::c_void,
1309 +                 addsuf_length as libc::c_ulong,
1310 +             );
1311 +         }
1312 +         *outfile.offset(outfile_length as isize) = 0 as libc::c_int as libc::c_char;
1313 +         free(sufindex as *mut libc::c_void);
1314 +         sufindex = xicalloc(
1315 +             suffix_length,
1316 +             ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
1317 +         ) as *mut idx_t;
1318 +         if !numeric_suffix_start.is_null() {
1319 +             if !widen {} else {
1320 +                 __assert_fail(
1321 +                     b"! widen\0" as *const u8 as *const libc::c_char,
1322 +                     b"split.c\0" as *const u8 as *const libc::c_char,
1323 +                     423 as libc::c_int as libc::c_uint,
1324 +                     (*::core::mem::transmute::<
1325 +                         &[u8; 26],
1326 +                         &[libc::c_char; 26],
1327 +                     >(b"void next_file_name(void)\0"))
1328 +                         .as_ptr(),
1329 +                 );
1330 +             }
1331 +             'c_9037: {
1332 +                 if !widen {} else {
1333 +                     __assert_fail(
1334 +                         b"! widen\0" as *const u8 as *const libc::c_char,
1335 +                         b"split.c\0" as *const u8 as *const libc::c_char,
1336 +                         423 as libc::c_int as libc::c_uint,
1337 +                         (*::core::mem::transmute::<
1338 +                             &[u8; 26],
1339 +                             &[libc::c_char; 26],
1340 +                         >(b"void next_file_name(void)\0"))
1341 +                             .as_ptr(),
1342 +                     );
1343 +                 }
1344 +             };
1345 +             let mut i: idx_t = strlen(numeric_suffix_start) as idx_t;
1346 +             memcpy(
1347 +                 outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
1348 +                     as *mut libc::c_void,
1349 +                 numeric_suffix_start as *const libc::c_void,
1350 +                 i as libc::c_ulong,
1351 +             );
1352 +             let mut sufindex_end: *mut idx_t = sufindex
1353 +                 .offset(suffix_length as isize);
1354 +             loop {
1355 +                 let fresh12 = i;
1356 +                 i = i - 1;
1357 +                 if !(fresh12 != 0 as libc::c_int as libc::c_long) {
1358 +                     break;
1359 +                 }
1360 +                 sufindex_end = sufindex_end.offset(-1);
1361 +                 *sufindex_end = (*numeric_suffix_start.offset(i as isize)
1362 +                     as libc::c_int - '0' as i32) as idx_t;
1363 +             }
1364 +         }
1365 ~     };
     |

warning: unnecessary boolean `not` operation
    --> src/split.rs:1258:13
     |
1258 | /             if !widen {
1259 | |                 outbase_length = strlen(outbase) as idx_t;
1260 | |                 addsuf_length = (if !additional_suffix.is_null() {
1261 | |                     strlen(additional_suffix)
...    |
1274 | |                 suffix_length;
1275 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1259:34
     |
1259 |                 outbase_length = strlen(outbase) as idx_t;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1260:33
     |
1260 |                   addsuf_length = (if !additional_suffix.is_null() {
     |  _________________________________^
1261 | |                     strlen(additional_suffix)
1262 | |                 } else {
1263 | |                     0 as libc::c_int as libc::c_ulong
1264 | |                 }) as idx_t;
     | |___________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary boolean `not` operation
    --> src/split.rs:1260:33
     |
1260 |                   addsuf_length = (if !additional_suffix.is_null() {
     |  _________________________________^
1261 | |                     strlen(additional_suffix)
1262 | |                 } else {
1263 | |                     0 as libc::c_int as libc::c_ulong
1264 | |                 }) as idx_t;
     | |__________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:1263:21
     |
1263 |                     0 as libc::c_int as libc::c_ulong
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
    --> src/split.rs:1267:18
     |
1267 |                 *(&mut outfile_length as *mut idx_t) = fresh6;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(outfile_length)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
    --> src/split.rs:1271:18
     |
1271 |                 *(&mut outfile_length as *mut idx_t) = fresh8;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(outfile_length)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: statement with no effect
    --> src/split.rs:1274:17
     |
1274 |                 suffix_length;
     |                 ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: borrow as raw pointer
    --> src/split.rs:1278:14
     |
1278 |             *(&mut outfile_size as *mut idx_t) = fresh10;
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(outfile_size)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1279:25
     |
1279 |             overflow = (overflow as libc::c_int | fresh11 as libc::c_int) != 0;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(overflow)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:1279:51
     |
1279 |             overflow = (overflow as libc::c_int | fresh11 as libc::c_int) != 0;
     |                                                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1283:23
     |
1283 |               outfile = xirealloc(outfile as *mut libc::c_void, outfile_size)
     |  _______________________^
1284 | |                 as *mut libc::c_char;
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `xirealloc(outfile as *mut libc::c_void, outfile_size).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1283:33
     |
1283 |             outfile = xirealloc(outfile as *mut libc::c_void, outfile_size)
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
    --> src/split.rs:1285:13
     |
1285 | /             if !widen {
1286 | |                 memcpy(
1287 | |                     outfile as *mut libc::c_void,
1288 | |                     outbase as *const libc::c_void,
...    |
1298 | |                 outbase_length;
1299 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1287:21
     |
1287 |                     outfile as *mut libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1288:21
     |
1288 |                     outbase as *const libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outbase.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1289:21
     |
1289 |                     outbase_length as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1296:29
     |
1296 |                     .offset(*sufindex.offset(0 as libc::c_int as isize) as isize);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1294:25
     |
1294 |                         outbase_length as isize,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
    --> src/split.rs:1298:17
     |
1298 |                 outbase_length;
     |                 ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1300:42
     |
1300 |             outfile_mid = outfile.offset(outbase_length as isize);
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1302:17
     |
1302 |                 outfile_mid as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile_mid.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:1303:17
     |
1303 |                 *suffix_alphabet.offset(0 as libc::c_int as isize) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*suffix_alphabet.offset(0 as libc::c_int as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1304:17
     |
1304 |                 suffix_length as libc::c_ulong,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1308:21
     |
1308 |                     outfile_mid.offset(suffix_length as isize) as *mut libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outfile_mid.offset(suffix_length as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1308:40
     |
1308 |                     outfile_mid.offset(suffix_length as isize) as *mut libc::c_void,
     |                                        ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1309:21
     |
1309 |                     additional_suffix as *const libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `additional_suffix.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1310:21
     |
1310 |                     addsuf_length as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:1313:56
     |
1313 |             *outfile.offset(outfile_length as isize) = 0 as libc::c_int as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1313:29
     |
1313 |             *outfile.offset(outfile_length as isize) = 0 as libc::c_int as libc::c_char;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1314:18
     |
1314 |             free(sufindex as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sufindex.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1315:24
     |
1315 |               sufindex = xicalloc(
     |  ________________________^
1316 | |                 suffix_length,
1317 | |                 ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
1318 | |             ) as *mut idx_t;
     | |___________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1315 ~             sufindex = xicalloc(
1316 +                 suffix_length,
1317 +                 ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
1318 ~             ).cast::<i64>();
     |

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1317:17
     |
1317 |                 ::core::mem::size_of::<idx_t>() as libc::c_ulong as idx_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary boolean `not` operation
    --> src/split.rs:1320:17
     |
1320 | /                 if !widen {} else {
1321 | |                     __assert_fail(
1322 | |                         b"! widen\0" as *const u8 as *const libc::c_char,
1323 | |                         b"split.c\0" as *const u8 as *const libc::c_char,
...    |
1330 | |                     );
1331 | |                 }
     | |_________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1322:25
     |
1322 |                         b"! widen\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"! widen\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1323:25
     |
1323 |                         b"split.c\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1324:25
     |
1324 |                         423 as libc::c_int as libc::c_uint,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:1325:27
     |
1325 |                           (*::core::mem::transmute::<
     |  ___________________________^
1326 | |                             &[u8; 26],
1327 | |                             &[libc::c_char; 26],
1328 | |                         >(b"void next_file_name(void)\0"))
     | |_________________________________________________________^ help: try: `&*(b"void next_file_name(void)\0" as *const [u8; 26] as *const [i8; 26])`
     |
     = note: `-W clippy::transmute-ptr-to-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
    --> src/split.rs:1332:17
     |
1332 | /                 'c_9037: {
1333 | |                     if !widen {} else {
1334 | |                         __assert_fail(
1335 | |                             b"! widen\0" as *const u8 as *const libc::c_char,
...    |
1344 | |                     }
1345 | |                 };
     | |__________________^
     |
     = note: `-W clippy::unnecessary-operation` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
     |
1332 ~                 if !widen {} else {
1333 +                         __assert_fail(
1334 +                             b"! widen\0" as *const u8 as *const libc::c_char,
1335 +                             b"split.c\0" as *const u8 as *const libc::c_char,
1336 +                             423 as libc::c_int as libc::c_uint,
1337 +                             (*::core::mem::transmute::<
1338 +                                 &[u8; 26],
1339 +                                 &[libc::c_char; 26],
1340 +                             >(b"void next_file_name(void)\0"))
1341 +                                 .as_ptr(),
1342 +                         );
1343 +                     };
     |

warning: unnecessary boolean `not` operation
    --> src/split.rs:1333:21
     |
1333 | /                     if !widen {} else {
1334 | |                         __assert_fail(
1335 | |                             b"! widen\0" as *const u8 as *const libc::c_char,
1336 | |                             b"split.c\0" as *const u8 as *const libc::c_char,
...    |
1343 | |                         );
1344 | |                     }
     | |_____________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1335:29
     |
1335 | ...                   b"! widen\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"! widen\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1336:29
     |
1336 | ...                   b"split.c\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1337:29
     |
1337 | ...                   423 as libc::c_int as libc::c_uint,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:1338:31
     |
1338 |   ...                   (*::core::mem::transmute::<
     |  _________________________^
1339 | | ...                       &[u8; 26],
1340 | | ...                       &[libc::c_char; 26],
1341 | | ...                   >(b"void next_file_name(void)\0"))
     | |_______________________________________________________^ help: try: `&*(b"void next_file_name(void)\0" as *const [u8; 26] as *const [i8; 26])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:1346:36
     |
1346 |                 let mut i: idx_t = strlen(numeric_suffix_start) as idx_t;
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1348:21
     |
1348 | /                     outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
1349 | |                         as *mut libc::c_void,
     | |____________________________________________^ help: try `pointer::cast`, a safer alternative: `outfile_mid.offset(suffix_length as isize).offset(-(i as isize)).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1348:40
     |
1348 |                     outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
     |                                        ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1348:72
     |
1348 |                     outfile_mid.offset(suffix_length as isize).offset(-(i as isize))
     |                                                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1350:21
     |
1350 |                     numeric_suffix_start as *const libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `numeric_suffix_start.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:1351:21
     |
1351 |                     i as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1354:29
     |
1354 |                     .offset(suffix_length as isize);
     |                             ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: manual implementation of an assign operation
    --> src/split.rs:1357:21
     |
1357 |                     i = i - 1;
     |                     ^^^^^^^^^ help: replace it with: `i -= 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1358:37
     |
1358 |                     if !(fresh12 != 0 as libc::c_int as libc::c_long) {
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1362:37
     |
1362 |                       *sufindex_end = (*numeric_suffix_start.offset(i as isize)
     |  _____________________________________^
1363 | |                         as libc::c_int - '0' as i32) as idx_t;
     | |_____________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1362 ~                     *sufindex_end = i64::from(*numeric_suffix_start.offset(i as isize)
1363 ~                         as libc::c_int - '0' as i32);
     |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:1362:38
     |
1362 |                       *sufindex_end = (*numeric_suffix_start.offset(i as isize)
     |  ______________________________________^
1363 | |                         as libc::c_int - '0' as i32) as idx_t;
     | |______________________________________^ help: try: `i32::from(*numeric_suffix_start.offset(i as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:1362:67
     |
1362 |                     *sufindex_end = (*numeric_suffix_start.offset(i as isize)
     |                                                                   ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function has a cognitive complexity of (70/25)
    --> src/split.rs:1370:22
     |
1370 | unsafe extern "C" fn create(mut name: *const libc::c_char) -> libc::c_int {
     |                      ^^^^^^
     |
     = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (656/100)
    --> src/split.rs:1370:1
     |
1370 | / unsafe extern "C" fn create(mut name: *const libc::c_char) -> libc::c_int {
1371 | |     if filter_command.is_null() {
1372 | |         if verbose {
1373 | |             fprintf(
...    |
2050 | |     };
2051 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/split.rs:1578:9
     |
1578 |         return fd;
     |         ^^^^^^^^^^ help: remove `return`: `fd`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
    --> src/split.rs:2049:9
     |
2049 |         return fd_pair[1 as libc::c_int as usize];
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fd_pair[1 as libc::c_int as usize]`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1375:25
     |
1375 |                 gettext(b"creating file %s\n\0" as *const u8 as *const libc::c_char),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"creating file %s\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1424:13
     |
1424 | /             if 0 != 0 {
1425 | |                 error(
1426 | |                     1 as libc::c_int,
1427 | |                     *__errno_location(),
...    |
1464 | |                 });
1465 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1424:16
     |
1424 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1428:29
     |
1428 |                     gettext(b"failed to stat %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to stat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1431:17
     |
1431 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1432 | |                     unreachable!();
1433 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1436:21
     |
1436 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1441:29
     |
1441 | ...                   b"failed to stat %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to stat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1445:21
     |
1445 | /                     if __errstatus != 0 as libc::c_int {
1446 | |                         unreachable!();
1447 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1451:21
     |
1451 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1456:29
     |
1456 | ...                   b"failed to stat %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to stat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1460:21
     |
1460 | /                     if __errstatus != 0 as libc::c_int {
1461 | |                         unreachable!();
1462 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: the function `psame_inode` doesn't need a mutable reference
    --> src/split.rs:1467:24
     |
1467 |         if psame_inode(&mut in_stat_buf, &mut out_stat_buf) {
     |                        ^^^^^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `psame_inode` doesn't need a mutable reference
    --> src/split.rs:1467:42
     |
1467 |         if psame_inode(&mut in_stat_buf, &mut out_stat_buf) {
     |                                          ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unnecessary `!=` operation
    --> src/split.rs:1468:13
     |
1468 | /             if 0 != 0 {
1469 | |                 error(
1470 | |                     1 as libc::c_int,
1471 | |                     0 as libc::c_int,
...    |
1513 | |                 });
1514 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1468:16
     |
1468 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1473:25
     |
1473 | /                         b"%s would overwrite input; aborting\0" as *const u8
1474 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s would overwrite input; aborting\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1478:17
     |
1478 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1479 | |                     unreachable!();
1480 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1483:21
     |
1483 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1488:29
     |
1488 | / ...                   b"%s would overwrite input; aborting\0" as *const u8
1489 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s would overwrite input; aborting\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1493:21
     |
1493 | /                     if __errstatus != 0 as libc::c_int {
1494 | |                         unreachable!();
1495 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1499:21
     |
1499 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1504:29
     |
1504 | / ...                   b"%s would overwrite input; aborting\0" as *const u8
1505 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s would overwrite input; aborting\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1509:21
     |
1509 | /                     if __errstatus != 0 as libc::c_int {
1510 | |                         unreachable!();
1511 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:1516:26
     |
1516 |         if ftruncate(fd, 0 as libc::c_int as __off_t) < 0 as libc::c_int
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1517:40
     |
1517 |             && (out_stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:1518:20
     |
1518 |                 == 0o100000 as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1521:13
     |
1521 | /             if 0 != 0 {
1522 | |                 error(
1523 | |                     1 as libc::c_int,
1524 | |                     *__errno_location(),
...    |
1575 | |                 });
1576 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1521:16
     |
1521 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1526:25
     |
1526 |                         b"%s: error truncating\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: error truncating\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1534:17
     |
1534 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1535 | |                     unreachable!();
1536 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1539:21
     |
1539 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1544:29
     |
1544 | ...                   b"%s: error truncating\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: error truncating\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1552:21
     |
1552 | /                     if __errstatus != 0 as libc::c_int {
1553 | |                         unreachable!();
1554 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1558:21
     |
1558 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1563:29
     |
1563 | ...                   b"%s: error truncating\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: error truncating\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1571:21
     |
1571 | /                     if __errstatus != 0 as libc::c_int {
1572 | |                         unreachable!();
1573 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1583:13
     |
1583 |             b"SHELL\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"SHELL\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1586:26
     |
1586 |             shell_prog = b"/bin/sh\0" as *const u8 as *const libc::c_char;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/bin/sh\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1588:19
     |
1588 |         if setenv(b"FILE\0" as *const u8 as *const libc::c_char, name, 1 as libc::c_int)
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"FILE\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1591:13
     |
1591 | /             if 0 != 0 {
1592 | |                 error(
1593 | |                     1 as libc::c_int,
1594 | |                     *__errno_location(),
...    |
1633 | |                 });
1634 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1591:16
     |
1591 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1596:25
     |
1596 | /                         b"failed to set FILE environment variable\0" as *const u8
1597 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to set FILE environment variable\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1600:17
     |
1600 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1601 | |                     unreachable!();
1602 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1605:21
     |
1605 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1610:29
     |
1610 | / ...                   b"failed to set FILE environment variable\0" as *const u8
1611 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to set FILE environment variable\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1614:21
     |
1614 | /                     if __errstatus != 0 as libc::c_int {
1615 | |                         unreachable!();
1616 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1620:21
     |
1620 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1625:29
     |
1625 | / ...                   b"failed to set FILE environment variable\0" as *const u8
1626 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to set FILE environment variable\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1629:21
     |
1629 | /                     if __errstatus != 0 as libc::c_int {
1630 | |                         unreachable!();
1631 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1640:21
     |
1640 |                     b"executing with FILE=%s\n\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"executing with FILE=%s\n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1650:13
     |
1650 | /             if 0 != 0 {
1651 | |                 error(
1652 | |                     1 as libc::c_int,
1653 | |                     *__errno_location(),
...    |
1691 | |                 });
1692 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1650:16
     |
1650 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1655:25
     |
1655 |                         b"failed to create pipe\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to create pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1658:17
     |
1658 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1659 | |                     unreachable!();
1660 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1663:21
     |
1663 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1668:29
     |
1668 | / ...                   b"failed to create pipe\0" as *const u8
1669 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to create pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1672:21
     |
1672 | /                     if __errstatus != 0 as libc::c_int {
1673 | |                         unreachable!();
1674 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1678:21
     |
1678 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1683:29
     |
1683 | / ...                   b"failed to create pipe\0" as *const u8
1684 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to create pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1687:21
     |
1687 | /                     if __errstatus != 0 as libc::c_int {
1688 | |                         unreachable!();
1689 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:1700:21
     |
1700 | /                     if 0 != 0 {
1701 | |                         error(
1702 | |                             1 as libc::c_int,
1703 | |                             *__errno_location(),
...    |
1739 | |                         });
1740 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1700:24
     |
1700 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1705:33
     |
1705 | ...                   b"closing prior pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing prior pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1708:25
     |
1708 | /                         if 1 as libc::c_int != 0 as libc::c_int {
1709 | |                             unreachable!();
1710 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1713:29
     |
1713 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1718:37
     |
1718 | ...                   b"closing prior pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing prior pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1721:29
     |
1721 | / ...                   if __errstatus != 0 as libc::c_int {
1722 | | ...                       unreachable!();
1723 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1727:29
     |
1727 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1732:37
     |
1732 | ...                   b"closing prior pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing prior pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1735:29
     |
1735 | / ...                   if __errstatus != 0 as libc::c_int {
1736 | | ...                       unreachable!();
1737 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:1743:17
     |
1743 |                 j;
     |                 ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1745:30
     |
1745 |             if close(fd_pair[1 as libc::c_int as usize]) != 0 {
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1746:17
     |
1746 | /                 if 0 != 0 {
1747 | |                     error(
1748 | |                         1 as libc::c_int,
1749 | |                         *__errno_location(),
...    |
1785 | |                     });
1786 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1746:20
     |
1746 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1751:29
     |
1751 | ...                   b"closing output pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing output pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1754:21
     |
1754 | /                     if 1 as libc::c_int != 0 as libc::c_int {
1755 | |                         unreachable!();
1756 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1759:25
     |
1759 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1764:33
     |
1764 | ...                   b"closing output pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing output pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1767:25
     |
1767 | /                         if __errstatus != 0 as libc::c_int {
1768 | |                             unreachable!();
1769 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1773:25
     |
1773 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1778:33
     |
1778 | ...                   b"closing output pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing output pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1781:25
     |
1781 | /                         if __errstatus != 0 as libc::c_int {
1782 | |                             unreachable!();
1783 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1788:24
     |
1788 |             if fd_pair[0 as libc::c_int as usize] != 0 as libc::c_int {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1789:33
     |
1789 |                 if dup2(fd_pair[0 as libc::c_int as usize], 0 as libc::c_int)
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1792:21
     |
1792 | /                     if 0 != 0 {
1793 | |                         error(
1794 | |                             1 as libc::c_int,
1795 | |                             *__errno_location(),
...    |
1831 | |                         });
1832 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1792:24
     |
1792 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1797:33
     |
1797 | ...                   b"moving input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"moving input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1800:25
     |
1800 | /                         if 1 as libc::c_int != 0 as libc::c_int {
1801 | |                             unreachable!();
1802 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1805:29
     |
1805 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1810:37
     |
1810 | ...                   b"moving input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"moving input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1813:29
     |
1813 | / ...                   if __errstatus != 0 as libc::c_int {
1814 | | ...                       unreachable!();
1815 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1819:29
     |
1819 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1824:37
     |
1824 | ...                   b"moving input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"moving input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1827:29
     |
1827 | / ...                   if __errstatus != 0 as libc::c_int {
1828 | | ...                       unreachable!();
1829 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1834:34
     |
1834 |                 if close(fd_pair[0 as libc::c_int as usize]) != 0 as libc::c_int {
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1835:21
     |
1835 | /                     if 0 != 0 {
1836 | |                         error(
1837 | |                             1 as libc::c_int,
1838 | |                             *__errno_location(),
...    |
1874 | |                         });
1875 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1835:24
     |
1835 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1840:33
     |
1840 | ...                   b"closing input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1843:25
     |
1843 | /                         if 1 as libc::c_int != 0 as libc::c_int {
1844 | |                             unreachable!();
1845 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1848:29
     |
1848 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1853:37
     |
1853 | ...                   b"closing input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1856:29
     |
1856 | / ...                   if __errstatus != 0 as libc::c_int {
1857 | | ...                       unreachable!();
1858 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1862:29
     |
1862 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1867:37
     |
1867 | ...                   b"closing input pipe\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1870:29
     |
1870 | / ...                   if __errstatus != 0 as libc::c_int {
1871 | | ...                       unreachable!();
1872 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1884:17
     |
1884 |                 b"-c\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1886:17
     |
1886 |                 0 as *mut libc::c_void as *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(0 as *mut libc::c_void).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:1886:17
     |
1886 |                 0 as *mut libc::c_void as *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1888:13
     |
1888 | /             if 0 != 0 {
1889 | |                 error(
1890 | |                     1 as libc::c_int,
1891 | |                     *__errno_location(),
...    |
1936 | |                 });
1937 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1888:16
     |
1888 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1893:25
     |
1893 | /                         b"failed to run command: \"%s -c %s\"\0" as *const u8
1894 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to run command: \"%s -c %s\"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1899:17
     |
1899 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1900 | |                     unreachable!();
1901 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1904:21
     |
1904 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1909:29
     |
1909 | / ...                   b"failed to run command: \"%s -c %s\"\0" as *const u8
1910 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to run command: \"%s -c %s\"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1915:21
     |
1915 | /                     if __errstatus != 0 as libc::c_int {
1916 | |                         unreachable!();
1917 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1921:21
     |
1921 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1926:29
     |
1926 | / ...                   b"failed to run command: \"%s -c %s\"\0" as *const u8
1927 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to run command: \"%s -c %s\"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1932:21
     |
1932 | /                     if __errstatus != 0 as libc::c_int {
1933 | |                         unreachable!();
1934 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:1940:13
     |
1940 | /             if 0 != 0 {
1941 | |                 error(
1942 | |                     1 as libc::c_int,
1943 | |                     *__errno_location(),
...    |
1981 | |                 });
1982 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1940:16
     |
1940 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1945:25
     |
1945 |                         b"fork system call failed\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"fork system call failed\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1948:17
     |
1948 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1949 | |                     unreachable!();
1950 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1953:21
     |
1953 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1958:29
     |
1958 | / ...                   b"fork system call failed\0" as *const u8
1959 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"fork system call failed\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1962:21
     |
1962 | /                     if __errstatus != 0 as libc::c_int {
1963 | |                         unreachable!();
1964 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1968:21
     |
1968 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1973:29
     |
1973 | / ...                   b"fork system call failed\0" as *const u8
1974 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"fork system call failed\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1977:21
     |
1977 | /                     if __errstatus != 0 as libc::c_int {
1978 | |                         unreachable!();
1979 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:1984:26
     |
1984 |         if close(fd_pair[0 as libc::c_int as usize]) != 0 as libc::c_int {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:1985:13
     |
1985 | /             if 0 != 0 {
1986 | |                 error(
1987 | |                     1 as libc::c_int,
1988 | |                     *__errno_location(),
...    |
2027 | |                 });
2028 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:1985:16
     |
1985 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:1990:25
     |
1990 | /                         b"failed to close input pipe\0" as *const u8
1991 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to close input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:1994:17
     |
1994 | /                 if 1 as libc::c_int != 0 as libc::c_int {
1995 | |                     unreachable!();
1996 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:1999:21
     |
1999 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2004:29
     |
2004 | / ...                   b"failed to close input pipe\0" as *const u8
2005 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to close input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2008:21
     |
2008 | /                     if __errstatus != 0 as libc::c_int {
2009 | |                         unreachable!();
2010 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2014:21
     |
2014 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2019:29
     |
2019 | / ...                   b"failed to close input pipe\0" as *const u8
2020 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"failed to close input pipe\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2023:21
     |
2023 | /                     if __errstatus != 0 as libc::c_int {
2024 | |                         unreachable!();
2025 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2031:12
     |
2031 |         if n_open_pipes as libc::c_long == open_pipes_alloc {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n_open_pipes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2032:26
     |
2032 |               open_pipes = xpalloc(
     |  __________________________^
2033 | |                 open_pipes as *mut libc::c_void,
2034 | |                 &mut open_pipes_alloc,
2035 | |                 1 as libc::c_int as idx_t,
...    |
2043 | |                 ::core::mem::size_of::<libc::c_int>() as libc::c_ulong as idx_t,
2044 | |             ) as *mut libc::c_int;
     | |_________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
2032 ~             open_pipes = xpalloc(
2033 +                 open_pipes as *mut libc::c_void,
2034 +                 &mut open_pipes_alloc,
2035 +                 1 as libc::c_int as idx_t,
2036 +                 if (2147483647 as libc::c_int as libc::c_long)
2037 +                     < 9223372036854775807 as libc::c_long
2038 +                 {
2039 +                     2147483647 as libc::c_int as libc::c_long
2040 +                 } else {
2041 +                     9223372036854775807 as libc::c_long
2042 +                 },
2043 +                 ::core::mem::size_of::<libc::c_int>() as libc::c_ulong as idx_t,
2044 ~             ).cast::<i32>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2033:17
     |
2033 |                 open_pipes as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `open_pipes.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2035:17
     |
2035 |                 1 as libc::c_int as idx_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2036:20
     |
2036 |                 if (2147483647 as libc::c_int as libc::c_long)
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2039:21
     |
2039 |                     2147483647 as libc::c_int as libc::c_long
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:2043:17
     |
2043 |                 ::core::mem::size_of::<libc::c_int>() as libc::c_ulong as idx_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: manual implementation of an assign operation
    --> src/split.rs:2047:9
     |
2047 |         n_open_pipes = n_open_pipes + 1;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace it with: `n_open_pipes += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:2048:56
     |
2048 |         *open_pipes.offset(fresh15 as isize) = fd_pair[1 as libc::c_int as usize];
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/split.rs:2049:24
     |
2049 |         return fd_pair[1 as libc::c_int as usize];
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function has a cognitive complexity of (37/25)
    --> src/split.rs:2052:22
     |
2052 | unsafe extern "C" fn closeout(
     |                      ^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (355/100)
    --> src/split.rs:2052:1
     |
2052 | / unsafe extern "C" fn closeout(
2053 | |     mut fp: *mut FILE,
2054 | |     mut fd: libc::c_int,
2055 | |     mut pid: pid_t,
...    |
2424 | |     }
2425 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary `!=` operation
    --> src/split.rs:2061:9
     |
2061 | /         if 0 != 0 {
2062 | |             error(
2063 | |                 1 as libc::c_int,
2064 | |                 *__errno_location(),
...    |
2109 | |             });
2110 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2061:12
     |
2061 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2065:17
     |
2065 |                 b"%s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2072:13
     |
2072 | /             if 1 as libc::c_int != 0 as libc::c_int {
2073 | |                 unreachable!();
2074 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2077:17
     |
2077 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2081:21
     |
2081 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2088:17
     |
2088 | /                 if __errstatus != 0 as libc::c_int {
2089 | |                     unreachable!();
2090 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2094:17
     |
2094 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2098:21
     |
2098 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2105:17
     |
2105 | /                 if __errstatus != 0 as libc::c_int {
2106 | |                     unreachable!();
2107 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:2114:13
     |
2114 | /             if 0 != 0 {
2115 | |                 error(
2116 | |                     1 as libc::c_int,
2117 | |                     *__errno_location(),
...    |
2162 | |                 });
2163 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2114:16
     |
2114 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2118:21
     |
2118 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2125:17
     |
2125 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2126 | |                     unreachable!();
2127 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2130:21
     |
2130 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2134:25
     |
2134 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2141:21
     |
2141 | /                     if __errstatus != 0 as libc::c_int {
2142 | |                         unreachable!();
2143 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2147:21
     |
2147 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2151:25
     |
2151 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2158:21
     |
2158 | /                     if __errstatus != 0 as libc::c_int {
2159 | |                         unreachable!();
2160 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:2175:17
     |
2175 |                 j;
     |                 ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary `!=` operation
    --> src/split.rs:2182:13
     |
2182 | /             if 0 != 0 {
2183 | |                 error(
2184 | |                     1 as libc::c_int,
2185 | |                     *__errno_location(),
...    |
2224 | |                 });
2225 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2182:16
     |
2182 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2187:25
     |
2187 | /                         b"waiting for child process\0" as *const u8
2188 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"waiting for child process\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2191:17
     |
2191 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2192 | |                     unreachable!();
2193 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2196:21
     |
2196 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2201:29
     |
2201 | / ...                   b"waiting for child process\0" as *const u8
2202 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"waiting for child process\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2205:21
     |
2205 | /                     if __errstatus != 0 as libc::c_int {
2206 | |                         unreachable!();
2207 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2211:21
     |
2211 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2216:29
     |
2216 | / ...                   b"waiting for child process\0" as *const u8
2217 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"waiting for child process\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2220:21
     |
2220 | /                     if __errstatus != 0 as libc::c_int {
2221 | |                         unreachable!();
2222 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:2226:19
     |
2226 |           } else if ((wstatus & 0x7f as libc::c_int) + 1 as libc::c_int) as libc::c_schar
     |  ___________________^
2227 | |             as libc::c_int >> 1 as libc::c_int > 0 as libc::c_int
     | |__________________________^ help: try: `i32::from(((wstatus & 0x7f as libc::c_int) + 1 as libc::c_int) as libc::c_schar)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:2226:19
     |
2226 |         } else if ((wstatus & 0x7f as libc::c_int) + 1 as libc::c_int) as libc::c_schar
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2235:25
     |
2235 |                         b"%d\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%d\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2239:17
     |
2239 | /                 if 0 != 0 {
2240 | |                     error(
2241 | |                         sig + 128 as libc::c_int,
2242 | |                         0 as libc::c_int,
...    |
2302 | |                     });
2303 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2239:20
     |
2239 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2244:29
     |
2244 | / ...                   b"with FILE=%s, signal %s from command: %s\0" as *const u8
2245 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, signal %s from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2255:21
     |
2255 | /                     if sig + 128 as libc::c_int != 0 as libc::c_int {
2256 | |                         unreachable!();
2257 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2260:25
     |
2260 |                         let __errstatus: libc::c_int = sig + 128 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2265:33
     |
2265 | / ...                   b"with FILE=%s, signal %s from command: %s\0" as *const u8
2266 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, signal %s from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2276:25
     |
2276 | /                         if __errstatus != 0 as libc::c_int {
2277 | |                             unreachable!();
2278 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2282:25
     |
2282 |                         let __errstatus: libc::c_int = sig + 128 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2287:33
     |
2287 | / ...                   b"with FILE=%s, signal %s from command: %s\0" as *const u8
2288 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, signal %s from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2298:25
     |
2298 | /                         if __errstatus != 0 as libc::c_int {
2299 | |                             unreachable!();
2300 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:2309:17
     |
2309 | /                 if 0 != 0 {
2310 | |                     error(
2311 | |                         ex,
2312 | |                         0 as libc::c_int,
...    |
2372 | |                     });
2373 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2309:20
     |
2309 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2314:29
     |
2314 | / ...                   b"with FILE=%s, exit %d from command: %s\0" as *const u8
2315 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, exit %d from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2325:21
     |
2325 | /                     if ex != 0 as libc::c_int {
2326 | |                         unreachable!();
2327 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2330:25
     |
2330 |                         let __errstatus: libc::c_int = ex;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2335:33
     |
2335 | / ...                   b"with FILE=%s, exit %d from command: %s\0" as *const u8
2336 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, exit %d from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2346:25
     |
2346 | /                         if __errstatus != 0 as libc::c_int {
2347 | |                             unreachable!();
2348 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2352:25
     |
2352 |                         let __errstatus: libc::c_int = ex;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2357:33
     |
2357 | / ...                   b"with FILE=%s, exit %d from command: %s\0" as *const u8
2358 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"with FILE=%s, exit %d from command: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2368:25
     |
2368 | /                         if __errstatus != 0 as libc::c_int {
2369 | |                             unreachable!();
2370 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:2376:13
     |
2376 | /             if 0 != 0 {
2377 | |                 error(
2378 | |                     1 as libc::c_int,
2379 | |                     0 as libc::c_int,
...    |
2421 | |                 });
2422 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2376:16
     |
2376 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2381:25
     |
2381 | /                         b"unknown status from command (0x%X)\0" as *const u8
2382 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"unknown status from command (0x%X)\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2384:21
     |
2384 |                     (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2386:17
     |
2386 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2387 | |                     unreachable!();
2388 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2391:21
     |
2391 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2396:29
     |
2396 | / ...                   b"unknown status from command (0x%X)\0" as *const u8
2397 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"unknown status from command (0x%X)\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2399:25
     |
2399 |                         (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2401:21
     |
2401 | /                     if __errstatus != 0 as libc::c_int {
2402 | |                         unreachable!();
2403 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2407:21
     |
2407 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2412:29
     |
2412 | / ...                   b"unknown status from command (0x%X)\0" as *const u8
2413 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"unknown status from command (0x%X)\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:2415:25
     |
2415 |                         (wstatus as libc::c_uint).wrapping_add(0 as libc::c_uint),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2417:21
     |
2417 | /                     if __errstatus != 0 as libc::c_int {
2418 | |                         unreachable!();
2419 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this function has too many lines (117/100)
    --> src/split.rs:2426:1
     |
2426 | / unsafe extern "C" fn cwrite(
2427 | |     mut new_file_flag: bool,
2428 | |     mut bp: *const libc::c_char,
2429 | |     mut bytes: idx_t,
...    |
2551 | |     };
2552 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/split.rs:2496:9
     |
2496 |         return 1 as libc::c_int != 0
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
    --> src/split.rs:2550:9
     |
2550 |         return 0 as libc::c_int != 0;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2432:37
     |
2432 |         if bp.is_null() && bytes == 0 as libc::c_int as libc::c_long
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2433:16
     |
2433 |             && elide_empty_files as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_empty_files)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:2437:18
     |
2437 |         closeout(0 as *mut FILE, output_desc, filter_pid, outfile);
     |                  ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2441:13
     |
2441 | /             if 0 != 0 {
2442 | |                 error(
2443 | |                     1 as libc::c_int,
2444 | |                     *__errno_location(),
...    |
2489 | |                 });
2490 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2441:16
     |
2441 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2445:21
     |
2445 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2452:17
     |
2452 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2453 | |                     unreachable!();
2454 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2457:21
     |
2457 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2461:25
     |
2461 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2468:21
     |
2468 | /                     if __errstatus != 0 as libc::c_int {
2469 | |                         unreachable!();
2470 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2474:21
     |
2474 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2478:25
     |
2478 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2485:21
     |
2485 | /                     if __errstatus != 0 as libc::c_int {
2486 | |                         unreachable!();
2487 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2493:32
     |
2493 |     if full_write(output_desc, bp as *const libc::c_void, bytes as size_t)
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `bp.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2493:59
     |
2493 |     if full_write(output_desc, bp as *const libc::c_void, bytes as size_t)
     |                                                           ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2494:12
     |
2494 |         == bytes as libc::c_ulong
     |            ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:2499:13
     |
2499 | /             if 0 != 0 {
2500 | |                 error(
2501 | |                     1 as libc::c_int,
2502 | |                     *__errno_location(),
...    |
2547 | |                 });
2548 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2499:16
     |
2499 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2503:21
     |
2503 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2510:17
     |
2510 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2511 | |                     unreachable!();
2512 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2515:21
     |
2515 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2519:25
     |
2519 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2526:21
     |
2526 | /                     if __errstatus != 0 as libc::c_int {
2527 | |                         unreachable!();
2528 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2532:21
     |
2532 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2536:25
     |
2536 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2543:21
     |
2543 | /                     if __errstatus != 0 as libc::c_int {
2544 | |                         unreachable!();
2545 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this boolean expression can be simplified
    --> src/split.rs:2656:12
     |
2656 |         if !((0 as libc::c_int as libc::c_long) < n_read) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(0 as libc::c_int as libc::c_long) >= n_read`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/split.rs:2672:12
     |
2672 |         if !(fresh16 < max_files) {
     |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `fresh16 >= max_files`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (118/100)
    --> src/split.rs:2553:1
     |
2553 | / unsafe extern "C" fn bytes_split(
2554 | |     mut n_bytes: intmax_t,
2555 | |     mut rem_bytes: intmax_t,
2556 | |     mut buf: *mut libc::c_char,
...    |
2680 | |     };
2681 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2563:32
     |
2563 |     let mut opened: intmax_t = 0 as libc::c_int as intmax_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2565:11
     |
2565 |           + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |  ___________^
2566 | |             as libc::c_long;
     | |___________________________^ help: try: `i64::from(((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2565:11
     |
2565 |         + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2565:12
     |
2565 |         + ((0 as libc::c_int as libc::c_long) < rem_bytes) as libc::c_int
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2570:12
     |
2570 |         if 0 as libc::c_int as libc::c_long <= initial_read {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2572:28
     |
2572 |             initial_read = -(1 as libc::c_int) as ssize_t;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2576:20
     |
2576 |                 && 0 as libc::c_int as libc::c_long
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2580:23
     |
2580 |                       + ((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
     |  _______________________^
2581 | |                         as libc::c_int as libc::c_long;
     | |______________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
2580 ~                     + i64::from(((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
2581 ~                         as libc::c_int);
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2580:23
     |
2580 |                       + ((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
     |  _______________________^
2581 | |                         as libc::c_int as libc::c_long;
     | |______________________________________^ help: try: `i32::from((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2580:34
     |
2580 |                     + ((opened + 1 as libc::c_int as libc::c_long) < rem_bytes)
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2584:45
     |
2584 |             n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2584:71
     |
2584 |             n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                                                       ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2585:25
     |
2585 |             if n_read < 0 as libc::c_int as libc::c_long {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:2586:17
     |
2586 | /                 if 0 != 0 {
2587 | |                     error(
2588 | |                         1 as libc::c_int,
2589 | |                         *__errno_location(),
...    |
2634 | |                     });
2635 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2586:20
     |
2586 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2590:25
     |
2590 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2597:21
     |
2597 | /                     if 1 as libc::c_int != 0 as libc::c_int {
2598 | |                         unreachable!();
2599 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2602:25
     |
2602 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2606:29
     |
2606 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2613:25
     |
2613 | /                         if __errstatus != 0 as libc::c_int {
2614 | |                             unreachable!();
2615 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2619:25
     |
2619 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2623:29
     |
2623 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2630:25
     |
2630 | /                         if __errstatus != 0 as libc::c_int {
2631 | |                             unreachable!();
2632 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2637:29
     |
2637 |             eof = n_read == 0 as libc::c_int as libc::c_long;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2640:15
     |
2640 |         while (0 as libc::c_int as libc::c_long) < to_write && to_write <= n_read {
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2641:16
     |
2641 |             if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(filter_ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2641:49
     |
2641 |             if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`
    --> src/split.rs:2644:23
     |
2644 |             opened += new_file_flag as libc::c_long;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2647:26
     |
2647 |                 n_read = 0 as libc::c_int as ssize_t;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2651:40
     |
2651 |                 bp_out = bp_out.offset(to_write as isize);
     |                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2653:38
     |
2653 |                 to_write = n_bytes + (opened < rem_bytes) as libc::c_int as libc::c_long;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((opened < rem_bytes) as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2653:38
     |
2653 |                 to_write = n_bytes + (opened < rem_bytes) as libc::c_int as libc::c_long;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(opened < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2656:14
     |
2656 |         if !((0 as libc::c_int as libc::c_long) < n_read) {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2659:12
     |
2659 |         if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(filter_ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:2659:45
     |
2659 |         if filter_ok as libc::c_int != 0 || new_file_flag as libc::c_int != 0 {
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`
    --> src/split.rs:2662:19
     |
2662 |         opened += new_file_flag as libc::c_long;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: manual implementation of an assign operation
    --> src/split.rs:2671:9
     |
2671 |         opened = opened + 1;
     |         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `opened += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: `0 as *const _` detected
    --> src/split.rs:2677:13
     |
2677 |             0 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2678:13
     |
2678 |             0 as libc::c_int as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:2776:12
     |
2776 |         if !(n_read != 0) {
     |            ^^^^^^^^^^^^^^ help: try: `n_read == 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: `0 as *mut _` detected
    --> src/split.rs:2688:37
     |
2688 |     let mut bp: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:2689:41
     |
2689 |     let mut bp_out: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:2690:38
     |
2690 |     let mut eob: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2692:27
     |
2692 |     let mut n: intmax_t = 0 as libc::c_int as intmax_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2694:41
     |
2694 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2694:67
     |
2694 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                                                   ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2695:21
     |
2695 |         if n_read < 0 as libc::c_int as libc::c_long {
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:2696:13
     |
2696 | /             if 0 != 0 {
2697 | |                 error(
2698 | |                     1 as libc::c_int,
2699 | |                     *__errno_location(),
...    |
2744 | |                 });
2745 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2696:16
     |
2696 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2700:21
     |
2700 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2707:17
     |
2707 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2708 | |                     unreachable!();
2709 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2712:21
     |
2712 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2716:25
     |
2716 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2723:21
     |
2723 | /                     if __errstatus != 0 as libc::c_int {
2724 | |                         unreachable!();
2725 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2729:21
     |
2729 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2733:25
     |
2733 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2740:21
     |
2740 | /                     if __errstatus != 0 as libc::c_int {
2741 | |                         unreachable!();
2742 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2749:25
     |
2749 |         eob = bp.offset(n_read as isize);
     |                         ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:2750:16
     |
2750 |         *eob = eolchar as libc::c_char;
     |                ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2752:18
     |
2752 |             bp = rawmemchr(bp as *const libc::c_void, eolchar) as *mut libc::c_char;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `rawmemchr(bp as *const libc::c_void, eolchar).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: statement with no effect
    --> src/split.rs:2762:17
     |
2762 |                 bp;
     |                 ^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2772:25
     |
2772 |                     n = 0 as libc::c_int as intmax_t;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
    --> src/split.rs:2919:12
     |
2919 |         if !(n_read != 0) {
     |            ^^^^^^^^^^^^^^ help: try: `n_read == 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (139/100)
    --> src/split.rs:2781:1
     |
2781 | / unsafe extern "C" fn line_bytes_split(
2782 | |     mut n_bytes: intmax_t,
2783 | |     mut buf: *mut libc::c_char,
2784 | |     mut bufsize: idx_t,
...    |
2926 | |     free(hold as *mut libc::c_void);
2927 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2787:31
     |
2787 |     let mut n_out: intmax_t = 0 as libc::c_int as intmax_t;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2788:29
     |
2788 |     let mut n_hold: idx_t = 0 as libc::c_int as idx_t;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:2789:39
     |
2789 |     let mut hold: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2790:32
     |
2790 |     let mut hold_size: idx_t = 0 as libc::c_int as idx_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2793:41
     |
2793 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2793:67
     |
2793 |         n_read = read(0 as libc::c_int, buf as *mut libc::c_void, bufsize as size_t);
     |                                                                   ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2794:21
     |
2794 |         if n_read < 0 as libc::c_int as libc::c_long {
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:2795:13
     |
2795 | /             if 0 != 0 {
2796 | |                 error(
2797 | |                     1 as libc::c_int,
2798 | |                     *__errno_location(),
...    |
2843 | |                 });
2844 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2795:16
     |
2795 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2799:21
     |
2799 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2806:17
     |
2806 | /                 if 1 as libc::c_int != 0 as libc::c_int {
2807 | |                     unreachable!();
2808 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2811:21
     |
2811 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2815:25
     |
2815 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2822:21
     |
2822 | /                     if __errstatus != 0 as libc::c_int {
2823 | |                         unreachable!();
2824 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:2828:21
     |
2828 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2832:25
     |
2832 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:2839:21
     |
2839 | /                     if __errstatus != 0 as libc::c_int {
2840 | |                         unreachable!();
2841 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `if _ { .. } else { .. }` is an expression
    --> src/split.rs:2851:13
     |
2851 | /             let mut eol: *mut libc::c_char = 0 as *mut libc::c_char;
2852 | |             if n_bytes - n_out - n_hold <= n_left {
2853 | |                 split_rest = n_bytes - n_out - n_hold;
2854 | |                 eoc = sob
...    |
2861 | |                     as *mut libc::c_char;
2862 | |             }
     | |_____________^
     |
     = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
     = note: you might not need `mut` at all
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
     |
2851 ~             let <mut> eol = if n_bytes - n_out - n_hold <= n_left { ..; memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t)
2852 +                     as *mut libc::c_char } else { memrchr(sob as *const libc::c_void, eolchar, n_left as size_t)
2853 +                     as *mut libc::c_char };
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2849:41
     |
2849 |             let mut split_rest: idx_t = 0 as libc::c_int as idx_t;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:2850:46
     |
2850 |             let mut eoc: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:2851:46
     |
2851 |             let mut eol: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2855:29
     |
2855 |                     .offset(split_rest as isize)
     |                             ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2857:23
     |
2857 |                   eol = memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t)
     |  _______________________^
2858 | |                     as *mut libc::c_char;
     | |________________________________________^ help: try `pointer::cast`, a safer alternative: `memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2857:68
     |
2857 |                 eol = memrchr(sob as *const libc::c_void, eolchar, split_rest as size_t)
     |                                                                    ^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2860:23
     |
2860 |                   eol = memrchr(sob as *const libc::c_void, eolchar, n_left as size_t)
     |  _______________________^
2861 | |                     as *mut libc::c_char;
     | |________________________________________^ help: try `pointer::cast`, a safer alternative: `memrchr(sob as *const libc::c_void, eolchar, n_left as size_t).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2860:68
     |
2860 |                 eol = memrchr(sob as *const libc::c_void, eolchar, n_left as size_t)
     |                                                                    ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2864:33
     |
2864 |                 cwrite(n_out == 0 as libc::c_int as libc::c_long, hold, n_hold);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2866:26
     |
2866 |                 n_hold = 0 as libc::c_int as idx_t;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2871:23
     |
2871 |                     + 1 as libc::c_int as libc::c_long;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2872:33
     |
2872 |                 cwrite(n_out == 0 as libc::c_int as libc::c_long, sob, n_write);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2875:34
     |
2875 |                 sob = sob.offset(n_write as isize);
     |                                  ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary boolean `not` operation
    --> src/split.rs:2881:44
     |
2881 |                   let mut n_write_0: idx_t = if !eoc.is_null() {
     |  ____________________________________________^
2882 | |                     split_rest
2883 | |                 } else {
2884 | |                     n_left
2885 | |                 };
     | |_________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2886:33
     |
2886 |                 cwrite(n_out == 0 as libc::c_int as libc::c_long, sob, n_write_0);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2889:34
     |
2889 |                 sob = sob.offset(n_write_0 as isize);
     |                                  ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary boolean `not` operation
    --> src/split.rs:2895:40
     |
2895 |                 let mut n_buf: idx_t = if !eoc.is_null() { split_rest } else { n_left };
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2897:28
     |
2897 |                       hold = xpalloc(
     |  ____________________________^
2898 | |                         hold as *mut libc::c_void,
2899 | |                         &mut hold_size,
2900 | |                         n_buf - (hold_size - n_hold),
2901 | |                         -(1 as libc::c_int) as ptrdiff_t,
2902 | |                         ::core::mem::size_of::<libc::c_char>() as libc::c_ulong as idx_t,
2903 | |                     ) as *mut libc::c_char;
     | |__________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
2897 ~                     hold = xpalloc(
2898 +                         hold as *mut libc::c_void,
2899 +                         &mut hold_size,
2900 +                         n_buf - (hold_size - n_hold),
2901 +                         -(1 as libc::c_int) as ptrdiff_t,
2902 +                         ::core::mem::size_of::<libc::c_char>() as libc::c_ulong as idx_t,
2903 ~                     ).cast::<i8>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2898:25
     |
2898 |                         hold as *mut libc::c_void,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `hold.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2901:25
     |
2901 |                         -(1 as libc::c_int) as ptrdiff_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:2902:25
     |
2902 |                         ::core::mem::size_of::<libc::c_char>() as libc::c_ulong as idx_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2906:21
     |
2906 |                     hold.offset(n_hold as isize) as *mut libc::c_void,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `hold.offset(n_hold as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2906:33
     |
2906 |                     hold.offset(n_hold as isize) as *mut libc::c_void,
     |                                 ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2908:21
     |
2908 |                     n_buf as libc::c_ulong,
     |                     ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2912:34
     |
2912 |                 sob = sob.offset(n_buf as isize);
     |                                  ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2915:25
     |
2915 |                 n_out = 0 as libc::c_int as intmax_t;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2924:25
     |
2924 |         cwrite(n_out == 0 as libc::c_int as libc::c_long, hold, n_hold);
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2926:10
     |
2926 |     free(hold as *mut libc::c_void);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `hold.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: the function has a cognitive complexity of (33/25)
    --> src/split.rs:2928:22
     |
2928 | unsafe extern "C" fn lines_chunk_split(
     |                      ^^^^^^^^^^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (196/100)
    --> src/split.rs:2928:1
     |
2928 | / unsafe extern "C" fn lines_chunk_split(
2929 | |     mut k: intmax_t,
2930 | |     mut n: intmax_t,
2931 | |     mut buf: *mut libc::c_char,
...    |
3142 | |
3143 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2954:70
     |
2954 |         let buf_slice = unsafe { std::slice::from_raw_parts_mut(buf, bufsize as usize) };
     |                                                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:2954:70
     |
2954 |         let buf_slice = unsafe { std::slice::from_raw_parts_mut(buf, bufsize as usize) };
     |                                                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2955:31
     |
2955 |         buf_slice.copy_within(start as usize..initial_read as usize, 0);
     |                               ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:2955:31
     |
2955 |         buf_slice.copy_within(start as usize..initial_read as usize, 0);
     |                               ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:2955:47
     |
2955 |         buf_slice.copy_within(start as usize..initial_read as usize, 0);
     |                                               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:2955:47
     |
2955 |         buf_slice.copy_within(start as usize..initial_read as usize, 0);
     |                                               ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2962:31
     |
2962 |                 error(1, err, b"Error seeking file: %s\0".as_ptr() as *const i8, quotearg_n_style_colon(0, shell_escape_quoting_style, in...
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Error seeking file: %s\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/split.rs:2976:42
     |
2976 |         let mut eob: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2978:12
     |
2978 |         if 0 as libc::c_int as libc::c_long <= initial_read {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2980:28
     |
2980 |             initial_read = -(1 as libc::c_int) as ssize_t;
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2984:17
     |
2984 |                 buf as *mut libc::c_void,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:2985:17
     |
2985 | /                 (if bufsize < file_size - n_written {
2986 | |                     bufsize
2987 | |                 } else {
2988 | |                     file_size - n_written
2989 | |                 }) as size_t,
     | |____________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:2991:25
     |
2991 |             if n_read < 0 as libc::c_int as libc::c_long {
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:2992:17
     |
2992 | /                 if 0 != 0 {
2993 | |                     error(
2994 | |                         1 as libc::c_int,
2995 | |                         *__errno_location(),
...    |
3040 | |                     });
3041 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:2992:20
     |
2992 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:2996:25
     |
2996 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3003:21
     |
3003 | /                     if 1 as libc::c_int != 0 as libc::c_int {
3004 | |                         unreachable!();
3005 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3008:25
     |
3008 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3012:29
     |
3012 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3019:25
     |
3019 | /                         if __errstatus != 0 as libc::c_int {
3020 | |                             unreachable!();
3021 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3025:25
     |
3025 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3029:29
     |
3029 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3036:25
     |
3036 | /                         if __errstatus != 0 as libc::c_int {
3037 | |                             unreachable!();
3038 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3044:22
     |
3044 |         if n_read == 0 as libc::c_int as libc::c_long {
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3048:26
     |
3048 |         eob = buf.offset(n_read as isize);
     |                          ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3053:23
     |
3053 |                 < (if 0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3054:35
     |
3054 |                     > chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3056:21
     |
3056 |                     0 as libc::c_int as libc::c_long
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3058:33
     |
3058 |                     chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3062:23
     |
3062 |             } else if 0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3063:31
     |
3063 |                 > chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3065:17
     |
3065 |                 0 as libc::c_int as libc::c_long
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3067:29
     |
3067 |                 chunk_end - 1 as libc::c_int as libc::c_long - n_written
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3069:49
     |
3069 |               let mut bp_out: *mut libc::c_char = memchr(
     |  _________________________________________________^
3070 | |                 bp.offset(skip as isize) as *const libc::c_void,
3071 | |                 eolchar,
3072 | |                 (n_read - skip) as libc::c_ulong,
3073 | |             ) as *mut libc::c_char;
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
3069 ~             let mut bp_out: *mut libc::c_char = memchr(
3070 +                 bp.offset(skip as isize) as *const libc::c_void,
3071 +                 eolchar,
3072 +                 (n_read - skip) as libc::c_ulong,
3073 ~             ).cast::<i8>();
     |

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3070:27
     |
3070 |                 bp.offset(skip as isize) as *const libc::c_void,
     |                           ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3072:17
     |
3072 |                 (n_read - skip) as libc::c_ulong,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary boolean `not` operation
    --> src/split.rs:3074:13
     |
3074 | /             if !bp_out.is_null() {
3075 | |                 bp_out = bp_out.offset(1);
3076 | |                 bp_out;
3077 | |                 next = 1 as libc::c_int != 0;
3078 | |             } else {
3079 | |                 bp_out = eob;
3080 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:3076:17
     |
3076 |                 bp_out;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3086:21
     |
3086 |                     to_write as size_t,
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3087:22
     |
3087 |                 ) != to_write as libc::c_ulong
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3095:28
     |
3095 |             bp = bp.offset(to_write as isize);
     |                            ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3098:19
     |
3098 |             while next as libc::c_int != 0 || chunk_end <= n_written {
     |                   ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(next)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3108:31
     |
3108 | ...                   + (chunk_no < rem_bytes) as libc::c_int as libc::c_long;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((chunk_no < rem_bytes) as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3108:31
     |
3108 | ...                   + (chunk_no < rem_bytes) as libc::c_int as libc::c_long;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(chunk_no < rem_bytes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
    --> src/split.rs:3110:21
     |
3110 |                     chunk_no;
     |                     ^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *const _` detected
    --> src/split.rs:3115:33
     |
3115 | ...                   0 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3116:33
     |
3116 | ...                   0 as libc::c_int as idx_t,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3139:16
     |
3139 |         cwrite(new_file_flag as i32 != 0, 0 as *const i8, 0);
     |                ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_file_flag)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *const _` detected
    --> src/split.rs:3139:43
     |
3139 |         cwrite(new_file_flag as i32 != 0, 0 as *const i8, 0);
     |                                           ^^^^^^^^^^^^^^ help: try: `std::ptr::null::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: this function has too many lines (143/100)
    --> src/split.rs:3144:1
     |
3144 | / unsafe extern "C" fn bytes_chunk_extract(
3145 | |     mut k: intmax_t,
3146 | |     mut n: intmax_t,
3147 | |     mut buf: *mut libc::c_char,
...    |
3300 | |
3301 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3154:8
     |
3154 |     if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3156:13
     |
3156 |             b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0 < k && k <= n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3157:13
     |
3157 |             b"split.c\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:3158:13
     |
3158 |             1009 as libc::c_int as libc::c_uint,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:3159:15
     |
3159 |               (*::core::mem::transmute::<
     |  _______________^
3160 | |                 &[u8; 76],
3161 | |                 &[libc::c_char; 76],
3162 | |             >(
3163 | |                 b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
3164 | |             ))
     | |_____________^ help: try: `&*(b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0" as *const [u8; 76] as *const [i8; 76])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
    --> src/split.rs:3168:5
     |
3168 | /     'c_14132: {
3169 | |         if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
3170 | |             __assert_fail(
3171 | |                 b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
...    |
3182 | |         }
3183 | |     };
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
     |
3168 ~     if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
3169 +             __assert_fail(
3170 +                 b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
3171 +                 b"split.c\0" as *const u8 as *const libc::c_char,
3172 +                 1009 as libc::c_int as libc::c_uint,
3173 +                 (*::core::mem::transmute::<
3174 +                     &[u8; 76],
3175 +                     &[libc::c_char; 76],
3176 +                 >(
3177 +                     b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
3178 +                 ))
3179 +                     .as_ptr(),
3180 +             );
3181 +         };
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3169:12
     |
3169 |         if (0 as libc::c_int as libc::c_long) < k && k <= n {} else {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3171:17
     |
3171 |                 b"0 < k && k <= n\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0 < k && k <= n\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3172:17
     |
3172 |                 b"split.c\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:3173:17
     |
3173 |                 1009 as libc::c_int as libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:3174:19
     |
3174 |                   (*::core::mem::transmute::<
     |  ___________________^
3175 | |                     &[u8; 76],
3176 | |                     &[libc::c_char; 76],
3177 | |                 >(
3178 | |                     b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0",
3179 | |                 ))
     | |_________________^ help: try: `&*(b"void bytes_chunk_extract(intmax_t, intmax_t, char *, idx_t, ssize_t, off_t)\0" as *const [u8; 76] as *const [i8; 76])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3184:18
     |
3184 |     start = (k - 1 as libc::c_int as libc::c_long) * (file_size / n)
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3185:20
     |
3185 |         + (if (k - 1 as libc::c_int as libc::c_long) < file_size % n {
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3186:17
     |
3186 |             k - 1 as libc::c_int as libc::c_long
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3197:13
     |
3197 |             buf as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3198:24
     |
3198 |             buf.offset(start as isize) as *const libc::c_void,
     |                        ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3199:13
     |
3199 |             (initial_read - start) as libc::c_ulong,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3205:19
     |
3205 |                 < 0 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3207:13
     |
3207 | /             if 0 != 0 {
3208 | |                 error(
3209 | |                     1 as libc::c_int,
3210 | |                     *__errno_location(),
...    |
3255 | |                 });
3256 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3207:16
     |
3207 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3211:21
     |
3211 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3218:17
     |
3218 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3219 | |                     unreachable!();
3220 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3223:21
     |
3223 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3227:25
     |
3227 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3234:21
     |
3234 | /                     if __errstatus != 0 as libc::c_int {
3235 | |                         unreachable!();
3236 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3240:21
     |
3240 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3244:25
     |
3244 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3251:21
     |
3251 | /                     if __errstatus != 0 as libc::c_int {
3252 | |                         unreachable!();
3253 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3258:24
     |
3258 |         initial_read = -(1 as libc::c_int) as ssize_t;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3266:62
     |
3266 |         let buffer = unsafe { std::slice::from_raw_parts_mut(buf as *mut u8, bufsize as usize) };
     |                                                              ^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3266:78
     |
3266 |         let buffer = unsafe { std::slice::from_raw_parts_mut(buf as *mut u8, bufsize as usize) };
     |                                                                              ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:3266:78
     |
3266 |         let buffer = unsafe { std::slice::from_raw_parts_mut(buf as *mut u8, bufsize as usize) };
     |                                                                              ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3267:58
     |
3267 |         n_read = match std::io::stdin().read(&mut buffer[start as usize..end as usize]) {
     |                                                          ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:3267:58
     |
3267 |         n_read = match std::io::stdin().read(&mut buffer[start as usize..end as usize]) {
     |                                                          ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3267:74
     |
3267 |         n_read = match std::io::stdin().read(&mut buffer[start as usize..end as usize]) {
     |                                                                          ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:3267:74
     |
3267 |         n_read = match std::io::stdin().read(&mut buffer[start as usize..end as usize]) {
     |                                                                          ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3273:21
     |
3273 |                     b"%s\0" as *const u8 as *const i8,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3286:54
     |
3286 |     let buffer = unsafe { std::slice::from_raw_parts(buf as *mut u8, bufsize as usize) };
     |                                                      ^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3286:70
     |
3286 |     let buffer = unsafe { std::slice::from_raw_parts(buf as *mut u8, bufsize as usize) };
     |                                                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:3286:70
     |
3286 |     let buffer = unsafe { std::slice::from_raw_parts(buf as *mut u8, bufsize as usize) };
     |                                                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3287:51
     |
3287 |     let written = std::io::stdout().write(&buffer[start as usize..(start + n_read) as usize] as &[u8]);
     |                                                   ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:3287:51
     |
3287 |     let written = std::io::stdout().write(&buffer[start as usize..(start + n_read) as usize] as &[u8]);
     |                                                   ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3287:67
     |
3287 |     let written = std::io::stdout().write(&buffer[start as usize..(start + n_read) as usize] as &[u8]);
     |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/split.rs:3287:67
     |
3287 |     let written = std::io::stdout().write(&buffer[start as usize..(start + n_read) as usize] as &[u8]);
     |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3292:13
     |
3292 |             b"%s\0" as *const u8 as *const i8,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3293:67
     |
3293 |             quotearg_n_style_colon(0, shell_escape_quoting_style, b"-\0" as *const u8 as *const i8),
     |                                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this function has too many lines (171/100)
    --> src/split.rs:3302:1
     |
3302 | / unsafe extern "C" fn ofile_open(
3303 | |     mut files: *mut of_t,
3304 | |     mut i_check: idx_t,
3305 | |     mut nfiles: idx_t,
...    |
3487 | |     return file_limit;
3488 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/split.rs:3487:5
     |
3487 |     return file_limit;
     |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `file_limit`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3308:23
     |
3308 |     if (*files.offset(i_check as isize)).ofd <= OFD_NEW as libc::c_int {
     |                       ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3310:35
     |
3310 |           let mut i_reopen: idx_t = if i_check != 0 {
     |  ___________________________________^
3311 | |             i_check - 1 as libc::c_int as libc::c_long
3312 | |         } else {
3313 | |             nfiles - 1 as libc::c_int as libc::c_long
3314 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3311:23
     |
3311 |             i_check - 1 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3313:22
     |
3313 |             nfiles - 1 as libc::c_int as libc::c_long
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3316:31
     |
3316 |             if (*files.offset(i_check as isize)).ofd == OFD_NEW {
     |                               ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3317:32
     |
3317 |     fd = create((*files.offset(i_check as isize)).of_name);
     |                                ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3320:24
     |
3320 |         (*files.offset(i_check as isize)).of_name,
     |                        ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3334:9
     |
3334 |         "%s\0".as_ptr() as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"%s\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3338:28
     |
3338 |             (*files.offset(i_check as isize)).of_name,
     |                            ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3346:22
     |
3346 | while (*files.offset(i_reopen as isize)).ofd < 0 {
     |                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3347:16
     |
3347 |       i_reopen = if i_reopen != 0 {
     |  ________________^
3348 | |         i_reopen - 1
3349 | |     } else {
3350 | |         nfiles - 1
3351 | |     };
     | |_____^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3358:13
     |
3358 |             "%s\0".as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"%s\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3362:32
     |
3362 |                 (*files.offset(i_check as isize)).of_name,
     |                                ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3369:42
     |
3369 |             if rpl_fclose((*files.offset(i_reopen as isize)).ofile) != 0 as libc::c_int {
     |                                          ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3370:17
     |
3370 | /                 if 0 != 0 {
3371 | |                     error(
3372 | |                         1 as libc::c_int,
3373 | |                         *__errno_location(),
...    |
3418 | |                     });
3419 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3370:20
     |
3370 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3374:25
     |
3374 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3378:44
     |
3378 | ...                   (*files.offset(i_reopen as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3381:21
     |
3381 | /                     if 1 as libc::c_int != 0 as libc::c_int {
3382 | |                         unreachable!();
3383 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3386:25
     |
3386 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3390:29
     |
3390 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3394:48
     |
3394 | ...                   (*files.offset(i_reopen as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3397:25
     |
3397 | /                         if __errstatus != 0 as libc::c_int {
3398 | |                             unreachable!();
3399 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3403:25
     |
3403 |                         let __errstatus: libc::c_int = 1 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3407:29
     |
3407 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3411:48
     |
3411 | ...                   (*files.offset(i_reopen as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3414:25
     |
3414 | /                         if __errstatus != 0 as libc::c_int {
3415 | |                             unreachable!();
3416 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3421:17
     |
3421 |             let ref mut fresh18 = (*files.offset(i_reopen as isize)).ofile;
     |             ----^^^^^^^^^^^^^^^-------------------------------------------- help: try: `let fresh18 = &mut (*files.offset(i_reopen as isize)).ofile;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3421:50
     |
3421 |             let ref mut fresh18 = (*files.offset(i_reopen as isize)).ofile;
     |                                                  ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `0 as *mut _` detected
    --> src/split.rs:3422:24
     |
3422 |             *fresh18 = 0 as *mut FILE;
     |                        ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3423:28
     |
3423 |             (*files.offset(i_reopen as isize)).ofd = OFD_APPEND as libc::c_int;
     |                            ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3425:24
     |
3425 |         (*files.offset(i_check as isize)).ofd = fd;
     |                        ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3428:13
     |
3428 |             b"a\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"a\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3431:13
     |
3431 | /             if 0 != 0 {
3432 | |                 error(
3433 | |                     1 as libc::c_int,
3434 | |                     *__errno_location(),
...    |
3479 | |                 });
3480 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3431:16
     |
3431 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3435:21
     |
3435 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3439:40
     |
3439 |                         (*files.offset(i_check as isize)).of_name,
     |                                        ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3442:17
     |
3442 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3443 | |                     unreachable!();
3444 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3447:21
     |
3447 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3451:25
     |
3451 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3455:44
     |
3455 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3458:21
     |
3458 | /                     if __errstatus != 0 as libc::c_int {
3459 | |                         unreachable!();
3460 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3464:21
     |
3464 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3468:25
     |
3468 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3472:44
     |
3472 | ...                   (*files.offset(i_check as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3475:21
     |
3475 | /                     if __errstatus != 0 as libc::c_int {
3476 | |                         unreachable!();
3477 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3482:13
     |
3482 |         let ref mut fresh19 = (*files.offset(i_check as isize)).ofile;
     |         ----^^^^^^^^^^^^^^^------------------------------------------- help: try: `let fresh19 = &mut (*files.offset(i_check as isize)).ofile;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3482:46
     |
3482 |         let ref mut fresh19 = (*files.offset(i_check as isize)).ofile;
     |                                              ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3484:24
     |
3484 |         (*files.offset(i_check as isize)).opid = filter_pid;
     |                        ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function has a cognitive complexity of (40/25)
    --> src/split.rs:3489:22
     |
3489 | unsafe extern "C" fn lines_rr(
     |                      ^^^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (304/100)
    --> src/split.rs:3489:1
     |
3489 | / unsafe extern "C" fn lines_rr(
3490 | |     mut k: intmax_t,
3491 | |     mut n: intmax_t,
3492 | |     mut buf: *mut libc::c_char,
...    |
3807 | |     }
3808 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: `if _ { .. } else { .. }` is an expression
    --> src/split.rs:3501:5
     |
3501 | /     let mut line_no: intmax_t = 0;
3502 | |     if k != 0 {
3503 | |         line_no = 1 as libc::c_int as intmax_t;
3504 | |     } else {
...    |
3524 | |         file_limit = 0 as libc::c_int != 0;
3525 | |     }
     | |_____^ help: it is more idiomatic to write: `let <mut> line_no = if k != 0 { 1 as libc::c_int as intmax_t } else { ..; 0 };`
     |
     = note: you might not need `mut` at all
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq

warning: `0 as *mut _` detected
    --> src/split.rs:3500:32
     |
3500 |     let mut files: *mut of_t = 0 as *mut of_t;
     |                                ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<of_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3502:5
     |
3502 | /     if k != 0 {
3503 | |         line_no = 1 as libc::c_int as intmax_t;
3504 | |     } else {
3505 | |         if (9223372036854775807 as libc::c_long) < n {
...    |
3524 | |         file_limit = 0 as libc::c_int != 0;
3525 | |     }
     | |_____^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3503:19
     |
3503 |         line_no = 1 as libc::c_int as intmax_t;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3508:19
     |
3508 |           *filesp = xinmalloc(n, ::core::mem::size_of::<of_t>() as libc::c_ulong as idx_t)
     |  ___________________^
3509 | |             as *mut of_t;
     | |________________________^ help: try `pointer::cast`, a safer alternative: `xinmalloc(n, ::core::mem::size_of::<of_t>() as libc::c_ulong as idx_t).cast::<of_info>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:3508:32
     |
3508 |         *filesp = xinmalloc(n, ::core::mem::size_of::<of_t>() as libc::c_ulong as idx_t)
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3511:18
     |
3511 |         i_file = 0 as libc::c_int as idx_t;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3514:17
     |
3514 |             let ref mut fresh20 = (*files.offset(i_file as isize)).of_name;
     |             ----^^^^^^^^^^^^^^^-------------------------------------------- help: try: `let fresh20 = &mut (*files.offset(i_file as isize)).of_name;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3514:50
     |
3514 |             let ref mut fresh20 = (*files.offset(i_file as isize)).of_name;
     |                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3516:28
     |
3516 |             (*files.offset(i_file as isize)).ofd = OFD_NEW as libc::c_int;
     |                            ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/split.rs:3517:17
     |
3517 |             let ref mut fresh21 = (*files.offset(i_file as isize)).ofile;
     |             ----^^^^^^^^^^^^^^^------------------------------------------ help: try: `let fresh21 = &mut (*files.offset(i_file as isize)).ofile;`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3517:50
     |
3517 |             let ref mut fresh21 = (*files.offset(i_file as isize)).ofile;
     |                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `0 as *mut _` detected
    --> src/split.rs:3518:24
     |
3518 |             *fresh21 = 0 as *mut FILE;
     |                        ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3519:28
     |
3519 |             (*files.offset(i_file as isize)).opid = 0 as libc::c_int;
     |                            ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
    --> src/split.rs:3521:13
     |
3521 |             i_file;
     |             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3523:18
     |
3523 |         i_file = 0 as libc::c_int as idx_t;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:3528:42
     |
3528 |         let mut eob: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3531:13
     |
3531 |             buf as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3532:13
     |
3532 |             bufsize as size_t,
     |             ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `if` chain can be rewritten with `match`
    --> src/split.rs:3534:9
     |
3534 | /         if n_read < 0 as libc::c_int as libc::c_long {
3535 | |             if 0 != 0 {
3536 | |                 error(
3537 | |                     1 as libc::c_int,
...    |
3586 | |             break;
3587 | |         }
     | |_________^
     |
     = note: `-W clippy::comparison-chain` implied by `-W clippy::all`
     = help: consider rewriting the `if` chain to use `cmp` and `match`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3534:21
     |
3534 |         if n_read < 0 as libc::c_int as libc::c_long {
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3535:13
     |
3535 | /             if 0 != 0 {
3536 | |                 error(
3537 | |                     1 as libc::c_int,
3538 | |                     *__errno_location(),
...    |
3583 | |                 });
3584 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3535:16
     |
3535 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3539:21
     |
3539 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3546:17
     |
3546 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3547 | |                     unreachable!();
3548 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3551:21
     |
3551 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3555:25
     |
3555 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3562:21
     |
3562 | /                     if __errstatus != 0 as libc::c_int {
3563 | |                         unreachable!();
3564 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3568:21
     |
3568 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3572:25
     |
3572 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3579:21
     |
3579 | /                     if __errstatus != 0 as libc::c_int {
3580 | |                         unreachable!();
3581 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3585:29
     |
3585 |         } else if n_read == 0 as libc::c_int as libc::c_long {
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3588:26
     |
3588 |         eob = buf.offset(n_read as isize);
     |                          ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3592:49
     |
3592 |               let mut bp_out: *mut libc::c_char = memchr(
     |  _________________________________________________^
3593 | |                 bp as *const libc::c_void,
3594 | |                 eolchar,
3595 | |                 eob.offset_from(bp) as libc::c_long as libc::c_ulong,
3596 | |             ) as *mut libc::c_char;
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
3592 ~             let mut bp_out: *mut libc::c_char = memchr(
3593 +                 bp as *const libc::c_void,
3594 +                 eolchar,
3595 +                 eob.offset_from(bp) as libc::c_long as libc::c_ulong,
3596 ~             ).cast::<i8>();
     |

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3595:17
     |
3595 |                 eob.offset_from(bp) as libc::c_long as libc::c_ulong,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary boolean `not` operation
    --> src/split.rs:3597:13
     |
3597 | /             if !bp_out.is_null() {
3598 | |                 bp_out = bp_out.offset(1);
3599 | |                 bp_out;
3600 | |                 next = 1 as libc::c_int != 0;
3601 | |             } else {
3602 | |                 bp_out = eob;
3603 | |             }
     | |_____________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/split.rs:3599:17
     |
3599 |                 bp_out;
     |                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unnecessary `!=` operation
    --> src/split.rs:3605:13
     |
3605 | /             if k != 0 {
3606 | |                 if line_no == k && unbuffered as libc::c_int != 0 {
3607 | |                     if full_write(
3608 | |                         1 as libc::c_int,
...    |
3782 | |
3783 | |             }
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3606:36
     |
3606 |                 if line_no == k && unbuffered as libc::c_int != 0 {
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(unbuffered)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3610:25
     |
3610 |                         to_write as size_t,
     |                         ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3611:26
     |
3611 |                     ) != to_write as libc::c_ulong
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3618:25
     |
3618 |                         to_write as size_t,
     |                         ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3619:25
     |
3619 |                         1 as libc::c_int as size_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3621:26
     |
3621 |                     ) != 1 as libc::c_int as libc::c_ulong
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3627:25
     |
3627 |                         1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3629:35
     |
3629 |                         line_no + 1 as libc::c_int as libc::c_long
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3633:31
     |
3633 |                 file_limit = (file_limit as libc::c_int
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(file_limit)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3634:23
     |
3634 |                     | ofile_open(files, i_file, n) as libc::c_int) != 0;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ofile_open(files, i_file, n))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3637:40
     |
3637 |                         (*files.offset(i_file as isize)).ofd,
     |                                        ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3639:25
     |
3639 |                         to_write as size_t,
     |                         ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3640:26
     |
3640 |                     ) != to_write as libc::c_ulong && !ignorable(*__errno_location())
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3642:25
     |
3642 | /                         if 0 != 0 {
3643 | |                             error(
3644 | |                                 1 as libc::c_int,
3645 | |                                 *__errno_location(),
...    |
3690 | |                             });
3691 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3642:28
     |
3642 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3646:33
     |
3646 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3650:52
     |
3650 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3653:29
     |
3653 | / ...                   if 1 as libc::c_int != 0 as libc::c_int {
3654 | | ...                       unreachable!();
3655 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3658:33
     |
3658 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3662:37
     |
3662 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3666:56
     |
3666 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3669:33
     |
3669 | / ...                   if __errstatus != 0 as libc::c_int {
3670 | | ...                       unreachable!();
3671 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3675:33
     |
3675 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3679:37
     |
3679 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3683:56
     |
3683 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3686:33
     |
3686 | / ...                   if __errstatus != 0 as libc::c_int {
3687 | | ...                       unreachable!();
3688 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3695:21
     |
3695 |                     to_write as size_t,
     |                     ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3696:21
     |
3696 |                     1 as libc::c_int as size_t,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3697:36
     |
3697 |                     (*files.offset(i_file as isize)).ofile,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3698:22
     |
3698 |                 ) != 1 as libc::c_int as libc::c_ulong && !ignorable(*__errno_location())
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3700:21
     |
3700 | /                     if 0 != 0 {
3701 | |                         error(
3702 | |                             1 as libc::c_int,
3703 | |                             *__errno_location(),
...    |
3748 | |                         });
3749 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3700:24
     |
3700 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3704:29
     |
3704 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3708:48
     |
3708 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3711:25
     |
3711 | /                         if 1 as libc::c_int != 0 as libc::c_int {
3712 | |                             unreachable!();
3713 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3716:29
     |
3716 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3720:33
     |
3720 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3724:52
     |
3724 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3727:29
     |
3727 | / ...                   if __errstatus != 0 as libc::c_int {
3728 | | ...                       unreachable!();
3729 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3733:29
     |
3733 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3737:33
     |
3737 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3741:52
     |
3741 | ...                   (*files.offset(i_file as isize)).of_name,
     |                                      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3744:29
     |
3744 | / ...                   if __errstatus != 0 as libc::c_int {
3745 | | ...                       unreachable!();
3746 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3755:34
     |
3755 |     if rpl_fclose((*files.offset(i_file as isize)).ofile) != 0 {
     |                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3760:13
     |
3760 |             b"%s\0".as_ptr() as *const i8,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3761:82
     |
3761 |             quotearg_n_style_colon(0, shell_escape_quoting_style, (*files.offset(i_file as isize)).of_name),
     |                                                                                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3767:20
     |
3767 |     (*files.offset(i_file as isize)).ofile = std::ptr::null_mut();
     |                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3768:20
     |
3768 |     (*files.offset(i_file as isize)).ofd = OFD_APPEND;
     |                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/split.rs:3788:34
     |
3788 |         let mut ceiling: idx_t = if wrapped as libc::c_int != 0 { n } else { i_file };
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3788:37
     |
3788 |         let mut ceiling: idx_t = if wrapped as libc::c_int != 0 { n } else { i_file };
     |                                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(wrapped)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3789:18
     |
3789 |         i_file = 0 as libc::c_int as idx_t;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3792:31
     |
3792 |                 file_limit = (file_limit as libc::c_int
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(file_limit)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:3793:23
     |
3793 |                     | ofile_open(files, i_file, n) as libc::c_int) != 0;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ofile_open(files, i_file, n))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3795:31
     |
3795 |             if (*files.offset(i_file as isize)).ofd >= 0 as libc::c_int {
     |                               ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3797:36
     |
3797 |                     (*files.offset(i_file as isize)).ofile,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3798:36
     |
3798 |                     (*files.offset(i_file as isize)).ofd,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3799:36
     |
3799 |                     (*files.offset(i_file as isize)).opid,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3800:36
     |
3800 |                     (*files.offset(i_file as isize)).of_name,
     |                                    ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/split.rs:3803:28
     |
3803 |             (*files.offset(i_file as isize)).ofd = OFD_APPEND as libc::c_int;
     |                            ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
    --> src/split.rs:3805:13
     |
3805 |             i_file;
     |             ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3820:13
     |
3820 |             b"%s: %s\0".as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"%s: %s\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3821:13
     |
3821 |             msgid_str.as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `msgid_str.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3822:13
     |
3822 |             arg_str.as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg_str.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
    --> src/split.rs:3848:5
     |
3848 |     return n;
     |     ^^^^^^^^^ help: remove `return`: `n`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:3837:8
     |
3837 |     if (LONGINT_OVERFLOW as libc::c_int as libc::c_uint)
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:3837:9
     |
3837 |     if (LONGINT_OVERFLOW as libc::c_int as libc::c_uint)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/split.rs:3840:13
     |
3840 |             0 as *mut *mut libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3844:34
     |
3844 |         ) as libc::c_uint || n < 1 as libc::c_int as libc::c_long
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:3855:41
     |
3855 |     let mut argend: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3861:9
     |
3861 |         b"\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:3863:29
     |
3863 |     if e as libc::c_uint == LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:3863:29
     |
3863 |     if e as libc::c_uint == LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:3864:12
     |
3864 |         && *argend as libc::c_int == '/' as i32
     |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*argend)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3869:13
     |
3869 |             b"\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3870:13
     |
3870 |             b"invalid number of chunks\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of chunks\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3872:14
     |
3872 |         if !((0 as libc::c_int as libc::c_long) < *k_units && *k_units <= *n_units) {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:3873:13
     |
3873 | /             if 0 != 0 {
3874 | |                 error(
3875 | |                     1 as libc::c_int,
3876 | |                     0 as libc::c_int,
...    |
3918 | |                 });
3919 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:3873:16
     |
3873 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3877:21
     |
3877 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3879:25
     |
3879 |                         b"invalid chunk number\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid chunk number\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3881:36
     |
3881 |                     quote_mem(arg, argend.offset_from(arg) as libc::c_long as size_t),
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3883:17
     |
3883 | /                 if 1 as libc::c_int != 0 as libc::c_int {
3884 | |                     unreachable!();
3885 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3888:21
     |
3888 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3892:25
     |
3892 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3894:29
     |
3894 | ...                   b"invalid chunk number\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid chunk number\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3896:40
     |
3896 |                         quote_mem(arg, argend.offset_from(arg) as libc::c_long as size_t),
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3898:21
     |
3898 | /                     if __errstatus != 0 as libc::c_int {
3899 | |                         unreachable!();
3900 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:3904:21
     |
3904 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3908:25
     |
3908 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3910:29
     |
3910 | ...                   b"invalid chunk number\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid chunk number\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:3912:40
     |
3912 |                         quote_mem(arg, argend.offset_from(arg) as libc::c_long as size_t),
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:3914:21
     |
3914 | /                     if __errstatus != 0 as libc::c_int {
3915 | |                         unreachable!();
3916 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:3921:38
     |
3921 |     } else if !(e as libc::c_uint <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:3921:38
     |
3921 |     } else if !(e as libc::c_uint <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3922:12
     |
3922 |         && (0 as libc::c_int as libc::c_long) < *n_units)
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3925:5
     |
3925 |     b"invalid number of chunks\0" as *const u8 as *const libc::c_char,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of chunks\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: the function has a cognitive complexity of (151/25)
    --> src/split.rs:3930:11
     |
3930 | unsafe fn main_0(
     |           ^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (1205/100)
    --> src/split.rs:3930:1
     |
3930 | / unsafe fn main_0(
3931 | |     mut argc: libc::c_int,
3932 | |     mut argv: *mut *mut libc::c_char,
3933 | | ) -> libc::c_int {
...    |
5193 | |     exit(0 as libc::c_int);
5194 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: `if _ { .. } else { .. }` is an expression
    --> src/split.rs:4980:5
     |
4980 | /     let mut initial_read: ssize_t = -(1 as libc::c_int) as ssize_t;
4981 | |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
4982 | |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
4983 | |     {
...    |
5051 | |         initial_read = if file_size < in_blk_size { file_size } else { in_blk_size };
5052 | |     }
     | |_____^
     |
     = note: you might not need `mut` at all
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
     |
4980 ~     let <mut> initial_read = if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
4981 +         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint { ..; if file_size < in_blk_size { file_size } else { in_blk_size } } else { -(1 as libc::c_int) as ssize_t };
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3935:34
     |
3935 |     let mut in_blk_size: idx_t = 0 as libc::c_int as idx_t;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3936:32
     |
3936 |     let mut page_size: idx_t = getpagesize() as idx_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(getpagesize())`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3937:33
     |
3937 |     let mut k_units: intmax_t = 0 as libc::c_int as intmax_t;
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3938:33
     |
3938 |     let mut n_units: intmax_t = 0 as libc::c_int as intmax_t;
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3944:35
     |
3944 |     let mut file_size: off_t = if (0 as libc::c_int as off_t)
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3945:11
     |
3945 |         < -(1 as libc::c_int) as off_t
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3947:9
     |
3947 |         -(1 as libc::c_int) as off_t
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3949:11
     |
3949 |         (((1 as libc::c_int as off_t)
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3951:31
     |
3951 |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:3952:31
     |
3952 |                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3953:15
     |
3953 |             - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3953:51
     |
3953 |             - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:3954:15
     |
3954 |             + 1 as libc::c_int as libc::c_long
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3957:33
     |
3957 |     setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3959:9
     |
3959 |         b"coreutils\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3960:9
     |
3960 |         b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/usr/local/share/locale\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3962:16
     |
3962 |     textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3964:14
     |
3964 |     infile = b"-\0" as *const u8 as *const libc::c_char;
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3965:15
     |
3965 |     outbase = b"x\0" as *const u8 as *const libc::c_char;
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"x\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:3967:32
     |
3967 |           let this_optind: i32 = if optind != 0 {
     |  ________________________________^
3968 | |     optind
3969 | | } else {
3970 | |     1
3971 | | };
     | |_^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:3976:5
     |
3976 |     b"0123456789C:a:b:del:n:t:ux\0" as *const u8 as *const i8,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0123456789C:a:b:del:n:t:ux\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
    --> src/split.rs:3999:36
     |
3999 |          let suffix_len = unsafe { CStr::from_ptr(optarg).to_bytes().len() as i32 };
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
    --> src/split.rs:3999:36
     |
3999 |          let suffix_len = unsafe { CStr::from_ptr(optarg).to_bytes().len() as i32 };
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4007:17
     |
4007 |         gettext(b"invalid suffix %s, contains directory separator\0".as_ptr() as *const libc::c_char),
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"invalid suffix %s, contains directory separator\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4022:30
     |
4022 |             unsafe { gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char) },
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4032:30
     |
4032 |             unsafe { gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char) },
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4042:30
     |
4042 |             unsafe { gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char) },
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4055:9
     |
4055 |         b"invalid number of bytes\0".as_ptr() as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"invalid number of bytes\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4064:29
     |
4064 |         error(0, 0, gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char));
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4068:37
     |
4068 |         error(errstatus, 0, gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char));
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4074:37
     |
4074 |         error(errstatus, 0, gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char));
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4084:5
     |
4084 |     b"\0".as_ptr() as *const libc::c_char,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4085:5
     |
4085 |     b"invalid number of lines\0".as_ptr() as *const libc::c_char,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"invalid number of lines\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4096:21
     |
4096 |             gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char),
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4104:21
     |
4104 |             gettext(b"cannot split in more than one way\0".as_ptr() as *const libc::c_char),
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4116:5
     |
4116 |     b"invalid number of lines\0".as_ptr() as *const libc::c_char,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"invalid number of lines\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4124:29
     |
4124 |         error(0, 0, gettext("cannot split in more than one way\0".as_ptr() as *const libc::c_char));
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4128:37
     |
4128 |         error(errstatus, 0, gettext("cannot split in more than one way\0".as_ptr() as *const libc::c_char));
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"cannot split in more than one way\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: redundant closure
    --> src/split.rs:4139:51
     |
4139 | while trimmed_optarg.chars().next().map_or(false, |c| c.is_whitespace()) {
     |                                                   ^^^^^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `char::is_whitespace`
     |
     = note: `-W clippy::redundant-closure-for-method-calls` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4153:41
     |
4153 | parse_chunk(&mut k_units, &mut n_units, trimmed_optarg.as_ptr() as *const libc::c_char);
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `trimmed_optarg.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4169:17
     |
4169 |         gettext("empty record separator\0".as_ptr() as *const libc::c_char),
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"empty record separator\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/split.rs:4176:18
     |
4176 |         neweol = '\0' as i32 as i8;
     |                  ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4182:21
     |
4182 |             gettext("multi-character separator %s\0".as_ptr() as *const libc::c_char),
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"multi-character separator %s\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4183:19
     |
4183 |             quote(optarg_str.as_ptr() as *const libc::c_char),
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `optarg_str.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4189:20
     |
4189 | if 0 <= eolchar && neweol as i32 != eolchar {
     |                    ^^^^^^^^^^^^^ help: try: `i32::from(neweol)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4194:17
     |
4194 |         gettext("multiple separator characters specified\0".as_ptr() as *const libc::c_char),
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `"multiple separator characters specified\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4199:11
     |
4199 | eolchar = neweol as i32;
     |           ^^^^^^^^^^^^^ help: try: `i32::from(neweol)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4205:24
     |
4205 |                     == type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4205:24
     |
4205 |                     == type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4208:31
     |
4208 |                     n_units = 0 as libc::c_int as intmax_t;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4211:24
     |
4211 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4211:24
     |
4211 |                     != type_undef as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4213:28
     |
4213 |                         != type_digits as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4213:28
     |
4213 |                         != type_digits as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/split.rs:4215:21
     |
4215 | /                     if 0 != 0 {
4216 | |                         error(
4217 | |                             0 as libc::c_int,
4218 | |                             0 as libc::c_int,
...    |
4257 | |                         });
4258 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4215:24
     |
4215 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4220:33
     |
4220 | / ...                   b"cannot split in more than one way\0" as *const u8
4221 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4224:25
     |
4224 | /                         if 0 as libc::c_int != 0 as libc::c_int {
4225 | |                             unreachable!();
4226 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4224:28
     |
4224 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4229:29
     |
4229 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4234:37
     |
4234 | / ...                   b"cannot split in more than one way\0" as *const u8
4235 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4238:29
     |
4238 | / ...                   if __errstatus != 0 as libc::c_int {
4239 | | ...                       unreachable!();
4240 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4244:29
     |
4244 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4249:37
     |
4249 | / ...                   b"cannot split in more than one way\0" as *const u8
4250 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot split in more than one way\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4253:29
     |
4253 | / ...                   if __errstatus != 0 as libc::c_int {
4254 | | ...                       unreachable!();
4255 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4262:31
     |
4262 |                     n_units = 0 as libc::c_int as intmax_t;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4265:24
     |
4265 |                 if (if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4265:57
     |
4265 |                 if (if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
     |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4266:25
     |
4266 |                       && ((if 1 as libc::c_int != 0 {
     |  _________________________^
4267 | |                         0 as libc::c_int as libc::c_long
4268 | |                     } else {
4269 | |                         n_units
4270 | |                     }) - 1 as libc::c_int as libc::c_long)
     | |______________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4267:25
     |
4267 |                         0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4270:26
     |
4270 |                     }) - 1 as libc::c_int as libc::c_long)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4271:27
     |
4271 |                         < 0 as libc::c_int as libc::c_long
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4272:25
     |
4272 |                       && ((if 1 as libc::c_int != 0 {
     |  _________________________^
4273 | |                         0 as libc::c_int
4274 | |                     } else {
4275 | |                         10 as libc::c_int
4276 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
     | |______________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4278:38
     |
4278 |                         if n_units < 0 as libc::c_int as libc::c_long {
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4279:33
     |
4279 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
4280 | | ...                       0 as libc::c_int as libc::c_long
4281 | | ...                   } else {
4282 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4286 | | ...                       }) + 10 as libc::c_int as libc::c_long
4287 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4280:33
     |
4280 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4282:33
     |
4282 | / ...                   (if 1 as libc::c_int != 0 {
4283 | | ...                       0 as libc::c_int as libc::c_long
4284 | | ...                   } else {
4285 | | ...                       -(1 as libc::c_int) as intmax_t
4286 | | ...                   }) + 10 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4283:37
     |
4283 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4285:37
     |
4285 | ...                   -(1 as libc::c_int) as intmax_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4286:38
     |
4286 | ...                   }) + 10 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4287:34
     |
4287 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4288:35
     |
4288 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4290:33
     |
4290 | / ...                   (n_units
4291 | | ...                       < -(1 as libc::c_int) as intmax_t
4292 | | ...                           / 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4290 ~                                 i32::from(n_units
4291 +                                     < -(1 as libc::c_int) as intmax_t
4292 +                                         / 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4291:39
     |
4291 | ...                   < -(1 as libc::c_int) as intmax_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4292:43
     |
4292 | ...                   / 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4294:33
     |
4294 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
4295 | | ...                       0 as libc::c_int
4296 | | ...                   } else {
4297 | | ...                       10 as libc::c_int
...    |
4355 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n_units)
4356 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4294 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
4295 +                                     0 as libc::c_int
4296 +                                 } else {
4297 +                                     10 as libc::c_int
4298 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
4299 +                                 {
4300 +                                     !(((((if 1 as libc::c_int != 0 {
4301 +                                         0 as libc::c_int
4302 +                                     } else {
4303 +                                         10 as libc::c_int
4304 +                                     }) + 1 as libc::c_int)
4305 +                                         << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4306 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4307 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4308 +                                         - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
4309 +                                 } else {
4310 +                                     (if 1 as libc::c_int != 0 {
4311 +                                         0 as libc::c_int
4312 +                                     } else {
4313 +                                         10 as libc::c_int
4314 +                                     }) + 0 as libc::c_int
4315 +                                 }) < 0 as libc::c_int
4316 +                                 {
4317 +                                     ((10 as libc::c_int)
4318 +                                         < -(if ((if 1 as libc::c_int != 0 {
4319 +                                             0 as libc::c_int
4320 +                                         } else {
4321 +                                             10 as libc::c_int
4322 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
4323 +                                         {
4324 +                                             ((((if 1 as libc::c_int != 0 {
4325 +                                                 0 as libc::c_int
4326 +                                             } else {
4327 +                                                 10 as libc::c_int
4328 +                                             }) + 1 as libc::c_int)
4329 +                                                 << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4330 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4331 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4332 +                                                 - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
4333 +                                         } else {
4334 +                                             (if 1 as libc::c_int != 0 {
4335 +                                                 0 as libc::c_int
4336 +                                             } else {
4337 +                                                 10 as libc::c_int
4338 +                                             }) - 1 as libc::c_int
4339 +                                         })) as libc::c_int
4340 +                                 } else {
4341 +                                     ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
4342 +                                 }) != 0
4343 +                                 {
4344 +                                     (if 1 as libc::c_int != 0 {
4345 +                                         0 as libc::c_int
4346 +                                     } else {
4347 +                                         10 as libc::c_int
4348 +                                     }) as libc::c_long + -(1 as libc::c_int) as intmax_t
4349 +                                         >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4350 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4351 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
4352 +                                 } else {
4353 +                                     -(1 as libc::c_int) as intmax_t
4354 +                                         / -(10 as libc::c_int) as libc::c_long
4355 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n_units)
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4294:34
     |
4294 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  ________________________^
4295 | | ...                       0 as libc::c_int
4296 | | ...                   } else {
4297 | | ...                       10 as libc::c_int
...    |
4354 | | ...                           / -(10 as libc::c_int) as libc::c_long
4355 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n_units)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:4294:47
     |
4294 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  _____________________________________^
4295 | | ...                       0 as libc::c_int
4296 | | ...                   } else {
4297 | | ...                       10 as libc::c_int
4298 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:4300:42
     |
4300 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
4301 | | ...                       0 as libc::c_int
4302 | | ...                   } else {
4303 | | ...                       10 as libc::c_int
4304 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4306:59
     |
4306 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4307:59
     |
4307 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4310:37
     |
4310 | / ...                   (if 1 as libc::c_int != 0 {
4311 | | ...                       0 as libc::c_int
4312 | | ...                   } else {
4313 | | ...                       10 as libc::c_int
4314 | | ...                   }) + 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4317:37
     |
4317 | / ...                   ((10 as libc::c_int)
4318 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
4319 | | ...                           0 as libc::c_int
4320 | | ...                       } else {
...    |
4338 | | ...                           }) - 1 as libc::c_int
4339 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4317 ~                                     i32::from((10 as libc::c_int)
4318 +                                         < -(if ((if 1 as libc::c_int != 0 {
4319 +                                             0 as libc::c_int
4320 +                                         } else {
4321 +                                             10 as libc::c_int
4322 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
4323 +                                         {
4324 +                                             ((((if 1 as libc::c_int != 0 {
4325 +                                                 0 as libc::c_int
4326 +                                             } else {
4327 +                                                 10 as libc::c_int
4328 +                                             }) + 1 as libc::c_int)
4329 +                                                 << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
4330 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4331 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4332 +                                                 - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
4333 +                                         } else {
4334 +                                             (if 1 as libc::c_int != 0 {
4335 +                                                 0 as libc::c_int
4336 +                                             } else {
4337 +                                                 10 as libc::c_int
4338 +                                             }) - 1 as libc::c_int
4339 +                                         }))
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4318:49
     |
4318 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
4319 | | ...                       0 as libc::c_int
4320 | | ...                   } else {
4321 | | ...                       10 as libc::c_int
4322 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:4324:48
     |
4324 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
4325 | | ...                       0 as libc::c_int
4326 | | ...                   } else {
4327 | | ...                       10 as libc::c_int
4328 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4330:67
     |
4330 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4331:67
     |
4331 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/split.rs:4334:45
     |
4334 | / ...                   (if 1 as libc::c_int != 0 {
4335 | | ...                       0 as libc::c_int
4336 | | ...                   } else {
4337 | | ...                       10 as libc::c_int
4338 | | ...                   }) - 1 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4341:37
     |
4341 | ...                   ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < 10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4344:37
     |
4344 | / ...                   (if 1 as libc::c_int != 0 {
4345 | | ...                       0 as libc::c_int
4346 | | ...                   } else {
4347 | | ...                       10 as libc::c_int
4348 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4344 ~                                     i64::from((if 1 as libc::c_int != 0 {
4345 +                                         0 as libc::c_int
4346 +                                     } else {
4347 +                                         10 as libc::c_int
4348 ~                                     })) + -(1 as libc::c_int) as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4344:37
     |
4344 | / ...                   (if 1 as libc::c_int != 0 {
4345 | | ...                       0 as libc::c_int
4346 | | ...                   } else {
4347 | | ...                       10 as libc::c_int
4348 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4348:58
     |
4348 | ...                   }) as libc::c_long + -(1 as libc::c_int) as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4350:59
     |
4350 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4351:59
     |
4351 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4353:37
     |
4353 | ...                   -(1 as libc::c_int) as intmax_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4354:43
     |
4354 | ...                   / -(10 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(10 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4355:39
     |
4355 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n_units)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4359:41
     |
4359 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
4360 | | ...                       0 as libc::c_int as libc::c_long
4361 | | ...                   } else {
4362 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4366 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4367 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4360:33
     |
4360 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4362:33
     |
4362 | / ...                   (if 1 as libc::c_int != 0 {
4363 | | ...                       0 as libc::c_int
4364 | | ...                   } else {
4365 | | ...                       10 as libc::c_int
4366 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4362 ~                                 i64::from((if 1 as libc::c_int != 0 {
4363 +                                     0 as libc::c_int
4364 +                                 } else {
4365 +                                     10 as libc::c_int
4366 ~                                 })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4362:33
     |
4362 | / ...                   (if 1 as libc::c_int != 0 {
4363 | | ...                       0 as libc::c_int
4364 | | ...                   } else {
4365 | | ...                       10 as libc::c_int
4366 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4366:54
     |
4366 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4367:34
     |
4367 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4368:35
     |
4368 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4370:38
     |
4370 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
4371 | | ...                       0 as libc::c_int as libc::c_long
4372 | | ...                   } else {
4373 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4377 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4378 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4371:37
     |
4371 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4373:37
     |
4373 | / ...                   (if 1 as libc::c_int != 0 {
4374 | | ...                       0 as libc::c_int
4375 | | ...                   } else {
4376 | | ...                       10 as libc::c_int
4377 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4373 ~                                     i64::from((if 1 as libc::c_int != 0 {
4374 +                                         0 as libc::c_int
4375 +                                     } else {
4376 +                                         10 as libc::c_int
4377 ~                                     })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4373:37
     |
4373 | / ...                   (if 1 as libc::c_int != 0 {
4374 | | ...                       0 as libc::c_int
4375 | | ...                   } else {
4376 | | ...                       10 as libc::c_int
4377 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4377:58
     |
4377 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4378:38
     |
4378 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4380:55
     |
4380 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4381:55
     |
4381 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4382:39
     |
4382 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4383:39
     |
4383 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4384:39
     |
4384 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4386:33
     |
4386 | / ...                   (if 1 as libc::c_int != 0 {
4387 | | ...                       0 as libc::c_int as libc::c_long
4388 | | ...                   } else {
4389 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4393 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4394 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4387:37
     |
4387 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4389:37
     |
4389 | / ...                   (if 1 as libc::c_int != 0 {
4390 | | ...                       0 as libc::c_int
4391 | | ...                   } else {
4392 | | ...                       10 as libc::c_int
4393 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4389 ~                                     i64::from((if 1 as libc::c_int != 0 {
4390 +                                         0 as libc::c_int
4391 +                                     } else {
4392 +                                         10 as libc::c_int
4393 ~                                     })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4389:37
     |
4389 | / ...                   (if 1 as libc::c_int != 0 {
4390 | | ...                       0 as libc::c_int
4391 | | ...                   } else {
4392 | | ...                       10 as libc::c_int
4393 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4393:58
     |
4393 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4394:38
     |
4394 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4395:34
     |
4395 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4397:33
     |
4397 | / ...                   (((if 1 as libc::c_int != 0 {
4398 | | ...                       0 as libc::c_int
4399 | | ...                   } else {
4400 | | ...                       10 as libc::c_int
...    |
4437 | | ...                           }) - 1 as libc::c_int as libc::c_long
4438 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4397 ~                                 i32::from(((if 1 as libc::c_int != 0 {
4398 +                                     0 as libc::c_int
4399 +                                 } else {
4400 +                                     10 as libc::c_int
4401 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t)
4402 +                                     < -(if ((if 1 as libc::c_int != 0 {
4403 +                                         0 as libc::c_int as libc::c_long
4404 +                                     } else {
4405 +                                         (if 1 as libc::c_int != 0 {
4406 +                                             0 as libc::c_int
4407 +                                         } else {
4408 +                                             10 as libc::c_int
4409 +                                         }) as libc::c_long + 0 as libc::c_int as intmax_t
4410 +                                     }) - 1 as libc::c_int as libc::c_long)
4411 +                                         < 0 as libc::c_int as libc::c_long
4412 +                                     {
4413 +                                         ((((if 1 as libc::c_int != 0 {
4414 +                                             0 as libc::c_int as libc::c_long
4415 +                                         } else {
4416 +                                             (if 1 as libc::c_int != 0 {
4417 +                                                 0 as libc::c_int
4418 +                                             } else {
4419 +                                                 10 as libc::c_int
4420 +                                             }) as libc::c_long + 0 as libc::c_int as intmax_t
4421 +                                         }) + 1 as libc::c_int as libc::c_long)
4422 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4423 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4424 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4425 +                                             - 1 as libc::c_int as libc::c_long)
4426 +                                             * 2 as libc::c_int as libc::c_long
4427 +                                             + 1 as libc::c_int as libc::c_long
4428 +                                     } else {
4429 +                                         (if 1 as libc::c_int != 0 {
4430 +                                             0 as libc::c_int as libc::c_long
4431 +                                         } else {
4432 +                                             (if 1 as libc::c_int != 0 {
4433 +                                                 0 as libc::c_int
4434 +                                             } else {
4435 +                                                 10 as libc::c_int
4436 +                                             }) as libc::c_long + 0 as libc::c_int as intmax_t
4437 +                                         }) - 1 as libc::c_int as libc::c_long
4438 +                                     }))
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4397:35
     |
4397 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
4398 | | ...                       0 as libc::c_int
4399 | | ...                   } else {
4400 | | ...                       10 as libc::c_int
4401 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4397 ~                                 ((i64::from((if 1 as libc::c_int != 0 {
4398 +                                     0 as libc::c_int
4399 +                                 } else {
4400 +                                     10 as libc::c_int
4401 ~                                 })) + 0 as libc::c_int as intmax_t)
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4397:35
     |
4397 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
4398 | | ...                       0 as libc::c_int
4399 | | ...                   } else {
4400 | | ...                       10 as libc::c_int
4401 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4401:54
     |
4401 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4402:45
     |
4402 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
4403 | | ...                       0 as libc::c_int as libc::c_long
4404 | | ...                   } else {
4405 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4409 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4410 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4403:41
     |
4403 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4405:41
     |
4405 | / ...                   (if 1 as libc::c_int != 0 {
4406 | | ...                       0 as libc::c_int
4407 | | ...                   } else {
4408 | | ...                       10 as libc::c_int
4409 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4405 ~                                         i64::from((if 1 as libc::c_int != 0 {
4406 +                                             0 as libc::c_int
4407 +                                         } else {
4408 +                                             10 as libc::c_int
4409 ~                                         })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4405:41
     |
4405 | / ...                   (if 1 as libc::c_int != 0 {
4406 | | ...                       0 as libc::c_int
4407 | | ...                   } else {
4408 | | ...                       10 as libc::c_int
4409 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4409:62
     |
4409 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4410:42
     |
4410 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4411:43
     |
4411 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4413:44
     |
4413 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
4414 | | ...                       0 as libc::c_int as libc::c_long
4415 | | ...                   } else {
4416 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4420 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4421 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4414:45
     |
4414 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4416:45
     |
4416 | / ...                   (if 1 as libc::c_int != 0 {
4417 | | ...                       0 as libc::c_int
4418 | | ...                   } else {
4419 | | ...                       10 as libc::c_int
4420 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4416 ~                                             i64::from((if 1 as libc::c_int != 0 {
4417 +                                                 0 as libc::c_int
4418 +                                             } else {
4419 +                                                 10 as libc::c_int
4420 ~                                             })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4416:45
     |
4416 | / ...                   (if 1 as libc::c_int != 0 {
4417 | | ...                       0 as libc::c_int
4418 | | ...                   } else {
4419 | | ...                       10 as libc::c_int
4420 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4420:66
     |
4420 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4421:46
     |
4421 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4423:63
     |
4423 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4424:63
     |
4424 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4425:47
     |
4425 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4426:47
     |
4426 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4427:47
     |
4427 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4429:41
     |
4429 | / ...                   (if 1 as libc::c_int != 0 {
4430 | | ...                       0 as libc::c_int as libc::c_long
4431 | | ...                   } else {
4432 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4436 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
4437 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4430:45
     |
4430 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4432:45
     |
4432 | / ...                   (if 1 as libc::c_int != 0 {
4433 | | ...                       0 as libc::c_int
4434 | | ...                   } else {
4435 | | ...                       10 as libc::c_int
4436 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4432 ~                                             i64::from((if 1 as libc::c_int != 0 {
4433 +                                                 0 as libc::c_int
4434 +                                             } else {
4435 +                                                 10 as libc::c_int
4436 ~                                             })) + 0 as libc::c_int as intmax_t
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4432:45
     |
4432 | / ...                   (if 1 as libc::c_int != 0 {
4433 | | ...                       0 as libc::c_int
4434 | | ...                   } else {
4435 | | ...                       10 as libc::c_int
4436 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4436:66
     |
4436 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4437:46
     |
4437 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4440:33
     |
4440 | / ...                   ((0 as libc::c_int as libc::c_long)
4441 | | ...                       < (if 1 as libc::c_int != 0 {
4442 | | ...                           0 as libc::c_int
4443 | | ...                       } else {
4444 | | ...                           10 as libc::c_int
4445 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t)
4446 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4440 ~                                 i32::from((0 as libc::c_int as libc::c_long)
4441 +                                     < (if 1 as libc::c_int != 0 {
4442 +                                         0 as libc::c_int
4443 +                                     } else {
4444 +                                         10 as libc::c_int
4445 +                                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4440:34
     |
4440 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4441:39
     |
4441 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
4442 | | ...                       0 as libc::c_int
4443 | | ...                   } else {
4444 | | ...                       10 as libc::c_int
4445 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4441 ~                                     < i64::from((if 1 as libc::c_int != 0 {
4442 +                                         0 as libc::c_int
4443 +                                     } else {
4444 +                                         10 as libc::c_int
4445 ~                                     })) + 0 as libc::c_int as intmax_t)
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4441:39
     |
4441 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
4442 | | ...                       0 as libc::c_int
4443 | | ...                   } else {
4444 | | ...                       10 as libc::c_int
4445 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4445:58
     |
4445 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4449:37
     |
4449 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
4450 | | ...                       0 as libc::c_int as libc::c_long
4451 | | ...                   } else {
4452 | | ...                       n_units
4453 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4450:37
     |
4450 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4453:38
     |
4453 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4454:39
     |
4454 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4456:37
     |
4456 | / ...                   ((0 as libc::c_int as libc::c_long)
4457 | | ...                       < n_units + 0 as libc::c_int as intmax_t) as libc::c_int
     | |__________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4456 ~                                     i32::from((0 as libc::c_int as libc::c_long)
4457 +                                         < n_units + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4456:38
     |
4456 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4457:53
     |
4457 | ...                   < n_units + 0 as libc::c_int as intmax_t) as libc::c_int
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4459:37
     |
4459 | / ...                   ((0 as libc::c_int as libc::c_long) < n_units
4460 | | ...                       && (-(1 as libc::c_int) as libc::c_long
4461 | | ...                           - 0 as libc::c_int as intmax_t)
4462 | | ...                           < n_units - 1 as libc::c_int as libc::c_long) as libc::c_int
     | |__________________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4459 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n_units
4460 +                                         && (-(1 as libc::c_int) as libc::c_long
4461 +                                             - 0 as libc::c_int as intmax_t)
4462 +                                             < n_units - 1 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4459:38
     |
4459 | ...                   ((0 as libc::c_int as libc::c_long) < n_units
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4460:45
     |
4460 | ...                   && (-(1 as libc::c_int) as libc::c_long
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4461:47
     |
4461 | ...                   - 0 as libc::c_int as intmax_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4462:57
     |
4462 | ...                   < n_units - 1 as libc::c_int as libc::c_long) as libc::c_int
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4465:33
     |
4465 | / ...                   ((0 as libc::c_int as intmax_t
4466 | | ...                       / 10 as libc::c_int as libc::c_long) < n_units)
4467 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4465 ~                                 i32::from((0 as libc::c_int as intmax_t
4466 +                                     / 10 as libc::c_int as libc::c_long) < n_units)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4465:35
     |
4465 | ...                   ((0 as libc::c_int as intmax_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4466:39
     |
4466 | ...                   / 10 as libc::c_int as libc::c_long) < n_units)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4474:42
     |
4474 | ...                   if n_units < 0 as libc::c_int as libc::c_long {
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4475:45
     |
4475 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
4476 | | ...                       0 as libc::c_int as libc::c_long
4477 | | ...                   } else {
4478 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4482 | | ...                       }) + 0 as libc::c_int as intmax_t
4483 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4476:37
     |
4476 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4478:37
     |
4478 | / ...                   (if 1 as libc::c_int != 0 {
4479 | | ...                       0 as libc::c_int as libc::c_long
4480 | | ...                   } else {
4481 | | ...                       n_units
4482 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4479:41
     |
4479 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4482:42
     |
4482 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4483:38
     |
4483 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4484:39
     |
4484 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4486:42
     |
4486 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
4487 | | ...                       0 as libc::c_int as libc::c_long
4488 | | ...                   } else {
4489 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4493 | | ...                       }) + 0 as libc::c_int as intmax_t
4494 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4487:41
     |
4487 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4489:41
     |
4489 | / ...                   (if 1 as libc::c_int != 0 {
4490 | | ...                       0 as libc::c_int as libc::c_long
4491 | | ...                   } else {
4492 | | ...                       n_units
4493 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4490:45
     |
4490 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4493:46
     |
4493 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4494:42
     |
4494 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4496:59
     |
4496 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4497:59
     |
4497 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4498:43
     |
4498 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4499:43
     |
4499 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4500:43
     |
4500 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4502:37
     |
4502 | / ...                   (if 1 as libc::c_int != 0 {
4503 | | ...                       0 as libc::c_int as libc::c_long
4504 | | ...                   } else {
4505 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4509 | | ...                       }) + 0 as libc::c_int as intmax_t
4510 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4503:41
     |
4503 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4505:41
     |
4505 | / ...                   (if 1 as libc::c_int != 0 {
4506 | | ...                       0 as libc::c_int as libc::c_long
4507 | | ...                   } else {
4508 | | ...                       n_units
4509 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4506:45
     |
4506 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4509:46
     |
4509 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4510:42
     |
4510 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4511:38
     |
4511 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4513:37
     |
4513 | / ...                   (((if 1 as libc::c_int != 0 {
4514 | | ...                       0 as libc::c_int as libc::c_long
4515 | | ...                   } else {
4516 | | ...                       n_units
...    |
4553 | | ...                           }) - 1 as libc::c_int as libc::c_long
4554 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4513 ~                                     i32::from(((if 1 as libc::c_int != 0 {
4514 +                                         0 as libc::c_int as libc::c_long
4515 +                                     } else {
4516 +                                         n_units
4517 +                                     }) + 0 as libc::c_int as intmax_t)
4518 +                                         < -(if ((if 1 as libc::c_int != 0 {
4519 +                                             0 as libc::c_int as libc::c_long
4520 +                                         } else {
4521 +                                             (if 1 as libc::c_int != 0 {
4522 +                                                 0 as libc::c_int as libc::c_long
4523 +                                             } else {
4524 +                                                 n_units
4525 +                                             }) + 0 as libc::c_int as intmax_t
4526 +                                         }) - 1 as libc::c_int as libc::c_long)
4527 +                                             < 0 as libc::c_int as libc::c_long
4528 +                                         {
4529 +                                             ((((if 1 as libc::c_int != 0 {
4530 +                                                 0 as libc::c_int as libc::c_long
4531 +                                             } else {
4532 +                                                 (if 1 as libc::c_int != 0 {
4533 +                                                     0 as libc::c_int as libc::c_long
4534 +                                                 } else {
4535 +                                                     n_units
4536 +                                                 }) + 0 as libc::c_int as intmax_t
4537 +                                             }) + 1 as libc::c_int as libc::c_long)
4538 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
4539 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
4540 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
4541 +                                                 - 1 as libc::c_int as libc::c_long)
4542 +                                                 * 2 as libc::c_int as libc::c_long
4543 +                                                 + 1 as libc::c_int as libc::c_long
4544 +                                         } else {
4545 +                                             (if 1 as libc::c_int != 0 {
4546 +                                                 0 as libc::c_int as libc::c_long
4547 +                                             } else {
4548 +                                                 (if 1 as libc::c_int != 0 {
4549 +                                                     0 as libc::c_int as libc::c_long
4550 +                                                 } else {
4551 +                                                     n_units
4552 +                                                 }) + 0 as libc::c_int as intmax_t
4553 +                                             }) - 1 as libc::c_int as libc::c_long
4554 +                                         }))
     |

warning: unnecessary `!=` operation
    --> src/split.rs:4513:39
     |
4513 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
4514 | | ...                       0 as libc::c_int as libc::c_long
4515 | | ...                   } else {
4516 | | ...                       n_units
4517 | | ...                   }) + 0 as libc::c_int as intmax_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4514:41
     |
4514 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4517:42
     |
4517 | ...                   }) + 0 as libc::c_int as intmax_t)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4518:49
     |
4518 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
4519 | | ...                       0 as libc::c_int as libc::c_long
4520 | | ...                   } else {
4521 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4525 | | ...                       }) + 0 as libc::c_int as intmax_t
4526 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4519:45
     |
4519 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4521:45
     |
4521 | / ...                   (if 1 as libc::c_int != 0 {
4522 | | ...                       0 as libc::c_int as libc::c_long
4523 | | ...                   } else {
4524 | | ...                       n_units
4525 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4522:49
     |
4522 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4525:50
     |
4525 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4526:46
     |
4526 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4527:47
     |
4527 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4529:48
     |
4529 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
4530 | | ...                       0 as libc::c_int as libc::c_long
4531 | | ...                   } else {
4532 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4536 | | ...                       }) + 0 as libc::c_int as intmax_t
4537 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4530:49
     |
4530 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4532:49
     |
4532 | / ...                   (if 1 as libc::c_int != 0 {
4533 | | ...                       0 as libc::c_int as libc::c_long
4534 | | ...                   } else {
4535 | | ...                       n_units
4536 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4533:53
     |
4533 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4536:54
     |
4536 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4537:50
     |
4537 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4539:67
     |
4539 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4540:67
     |
4540 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4541:51
     |
4541 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4542:51
     |
4542 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4543:51
     |
4543 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4545:45
     |
4545 | / ...                   (if 1 as libc::c_int != 0 {
4546 | | ...                       0 as libc::c_int as libc::c_long
4547 | | ...                   } else {
4548 | | ...                       (if 1 as libc::c_int != 0 {
...    |
4552 | | ...                       }) + 0 as libc::c_int as intmax_t
4553 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4546:49
     |
4546 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4548:49
     |
4548 | / ...                   (if 1 as libc::c_int != 0 {
4549 | | ...                       0 as libc::c_int as libc::c_long
4550 | | ...                   } else {
4551 | | ...                       n_units
4552 | | ...                   }) + 0 as libc::c_int as intmax_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4549:53
     |
4549 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4552:54
     |
4552 | ...                   }) + 0 as libc::c_int as intmax_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4553:50
     |
4553 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4556:37
     |
4556 | / ...                   ((0 as libc::c_int as libc::c_long)
4557 | | ...                       < (if 1 as libc::c_int != 0 {
4558 | | ...                           0 as libc::c_int as libc::c_long
4559 | | ...                       } else {
4560 | | ...                           n_units
4561 | | ...                       }) + 0 as libc::c_int as intmax_t) as libc::c_int
     | |___________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4556 ~                                     i32::from((0 as libc::c_int as libc::c_long)
4557 +                                         < (if 1 as libc::c_int != 0 {
4558 +                                             0 as libc::c_int as libc::c_long
4559 +                                         } else {
4560 +                                             n_units
4561 +                                         }) + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4556:38
     |
4556 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4557:43
     |
4557 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
4558 | | ...                       0 as libc::c_int as libc::c_long
4559 | | ...                   } else {
4560 | | ...                       n_units
4561 | | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4558:45
     |
4558 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4561:46
     |
4561 | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4562:55
     |
4562 | ...                   }) != 0 && n_units == -(1 as libc::c_int) as libc::c_long
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4564:41
     |
4564 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
4565 | | ...                       0 as libc::c_int
4566 | | ...                   } else {
4567 | | ...                       10 as libc::c_int
4568 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4570:41
     |
4570 | / ...                   ((0 as libc::c_int as libc::c_long)
4571 | | ...                       < 10 as libc::c_int as libc::c_long
4572 | | ...                           + 0 as libc::c_int as intmax_t) as libc::c_int
     | |____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4570 ~                                         i32::from((0 as libc::c_int as libc::c_long)
4571 +                                             < 10 as libc::c_int as libc::c_long
4572 +                                                 + 0 as libc::c_int as intmax_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4570:42
     |
4570 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4571:47
     |
4571 | ...                   < 10 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4572:51
     |
4572 | ...                   + 0 as libc::c_int as intmax_t) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4574:41
     |
4574 | / ...                   ((-(1 as libc::c_int) as libc::c_long
4575 | | ...                       - 0 as libc::c_int as intmax_t)
4576 | | ...                       < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
4577 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4574 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
4575 +                                             - 0 as libc::c_int as intmax_t)
4576 +                                             < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4574:43
     |
4574 | ...                   ((-(1 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4575:47
     |
4575 | ...                   - 0 as libc::c_int as intmax_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4576:47
     |
4576 | ...                   < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int - 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4580:37
     |
4580 | / ...                   (0 as libc::c_int as intmax_t / n_units
4581 | | ...                       < 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4580 ~                                     i32::from(0 as libc::c_int as intmax_t / n_units
4581 +                                         < 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4580:38
     |
4580 | ...                   (0 as libc::c_int as intmax_t / n_units
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4581:43
     |
4581 | ...                   < 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4584:33
     |
4584 | / ...                   ((-(1 as libc::c_int) as intmax_t
4585 | | ...                       / 10 as libc::c_int as libc::c_long) < n_units)
4586 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
4584 ~                                 i32::from((-(1 as libc::c_int) as intmax_t
4585 +                                     / 10 as libc::c_int as libc::c_long) < n_units)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4584:35
     |
4584 | ...                   ((-(1 as libc::c_int) as intmax_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4585:39
     |
4585 | ...                   / 10 as libc::c_int as libc::c_long) < n_units)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:4592:22
     |
4592 |                     *(&mut n_units as *mut intmax_t) = fresh27;
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
    --> src/split.rs:4596:22
     |
4596 |                     *(&mut n_units as *mut intmax_t) = fresh29;
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4597:21
     |
4597 |                     fresh30 as libc::c_int
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh30)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/split.rs:4601:26
     |
4601 |                         *(&mut n_units as *mut intmax_t) = fresh31;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_units)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/split.rs:4602:25
     |
4602 |                         fresh32 as libc::c_int != 0
     |                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh32)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4611:39
     |
4611 |                       suffix_alphabet = b"0123456789\0" as *const u8
     |  _______________________________________^
4612 | |                         as *const libc::c_char;
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0123456789\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4614:39
     |
4614 |                       suffix_alphabet = b"0123456789abcdef\0" as *const u8
     |  _______________________________________^
4615 | |                         as *const libc::c_char;
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0123456789abcdef\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4618:21
     |
4618 | /                     if strlen(optarg) != strspn(optarg, suffix_alphabet) {
4619 | |                         if 0 != 0 {
4620 | |                             error(
4621 | |                                 0 as libc::c_int,
...    |
4696 | |                         numeric_suffix_start = optarg;
4697 | |                     }
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/split.rs:4619:25
     |
4619 | /                         if 0 != 0 {
4620 | |                             error(
4621 | |                                 0 as libc::c_int,
4622 | |                                 0 as libc::c_int,
...    |
4685 | |                             });
4686 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4619:28
     |
4619 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4625:41
     |
4625 | / ...                   b"%s: invalid start value for numerical suffix\0"
4626 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for numerical suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4630:41
     |
4630 | / ...                   b"%s: invalid start value for hexadecimal suffix\0"
4631 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for hexadecimal suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4636:29
     |
4636 | / ...                   if 0 as libc::c_int != 0 as libc::c_int {
4637 | | ...                       unreachable!();
4638 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4636:32
     |
4636 | ...                   if 0 as libc::c_int != 0 as libc::c_int {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4641:33
     |
4641 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4647:45
     |
4647 | / ...                   b"%s: invalid start value for numerical suffix\0"
4648 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for numerical suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4652:45
     |
4652 | / ...                   b"%s: invalid start value for hexadecimal suffix\0"
4653 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for hexadecimal suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4658:33
     |
4658 | / ...                   if __errstatus != 0 as libc::c_int {
4659 | | ...                       unreachable!();
4660 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4664:33
     |
4664 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4670:45
     |
4670 | / ...                   b"%s: invalid start value for numerical suffix\0"
4671 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for numerical suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4675:45
     |
4675 | / ...                   b"%s: invalid start value for hexadecimal suffix\0"
4676 | | ...                       as *const u8 as *const libc::c_char,
     | |_____________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: invalid start value for hexadecimal suffix\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4681:33
     |
4681 | / ...                   if __errstatus != 0 as libc::c_int {
4682 | | ...                       unreachable!();
4683 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4689:31
     |
4689 |                         while *optarg as libc::c_int == '0' as i32
     |                               ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*optarg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/split.rs:4690:32
     |
4690 | ...                   && *optarg.offset(1 as libc::c_int as isize) as libc::c_int
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*optarg.offset(1 as libc::c_int as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
    --> src/split.rs:4694:29
     |
4694 | ...                   optarg;
     |                       ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u64` to `i64` may wrap around the value
    --> src/split.rs:4708:24
     |
4708 |            in_blk_size = xdectoumax(
     |  ________________________^
4709 | |                     optarg,
4710 | |                     1 as libc::c_int as uintmax_t,
4711 | |                     if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong)
...    |
4736 | |                     0 as libc::c_int,
4737 | |                 ) as idx_t;
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4710:21
     |
4710 |                     1 as libc::c_int as uintmax_t,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4711:24
     |
4711 |                     if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4711:25
     |
4711 |                     if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4712:31
     |
4712 |                         < (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4715:29
     |
4715 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4719:43
     |
4719 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4721:25
     |
4721 |                         SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4721:25
     |
4721 |                         SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4723:29
     |
4723 |                         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4726:29
     |
4726 | ...                   9223372036854775807 as libc::c_long as libc::c_ulong
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/split.rs:4730:43
     |
4730 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4734:25
     |
4734 |                         b"invalid IO block size\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid IO block size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4749:5
     |
4749 |     b"split\0".as_ptr() as *const libc::c_char,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"split\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4750:5
     |
4750 |     b"GNU coreutils\0".as_ptr() as *const libc::c_char,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"GNU coreutils\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4753:9
     |
4753 |         b"Torbjorn Granlund\0".as_ptr() as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Torbjorn Granlund\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4754:9
     |
4754 |         b"Torbj\xF6rn Granlund\0".as_ptr() as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Torbj\xF6rn Granlund\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4757:9
     |
4757 |         b"Richard M. Stallman\0".as_ptr() as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Richard M. Stallman\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4758:9
     |
4758 |         b"Richard M. Stallman\0".as_ptr() as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Richard M. Stallman\0".as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4777:19
     |
4777 |     if k_units != 0 as libc::c_int as libc::c_long && !filter_command.is_null() {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4778:9
     |
4778 | /         if 0 != 0 {
4779 | |             error(
4780 | |                 0 as libc::c_int,
4781 | |                 0 as libc::c_int,
...    |
4820 | |             });
4821 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4778:12
     |
4778 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4783:21
     |
4783 | /                     b"--filter does not process a chunk extracted to stdout\0"
4784 | |                         as *const u8 as *const libc::c_char,
     | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--filter does not process a chunk extracted to stdout\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4787:13
     |
4787 | /             if 0 as libc::c_int != 0 as libc::c_int {
4788 | |                 unreachable!();
4789 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4787:16
     |
4787 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4792:17
     |
4792 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4797:25
     |
4797 | /                         b"--filter does not process a chunk extracted to stdout\0"
4798 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--filter does not process a chunk extracted to stdout\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4801:17
     |
4801 | /                 if __errstatus != 0 as libc::c_int {
4802 | |                     unreachable!();
4803 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4807:17
     |
4807 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4812:25
     |
4812 | /                         b"--filter does not process a chunk extracted to stdout\0"
4813 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--filter does not process a chunk extracted to stdout\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4816:17
     |
4816 | /                 if __errstatus != 0 as libc::c_int {
4817 | |                     unreachable!();
4818 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4824:38
     |
4824 |     if split_type as libc::c_uint == type_undef as libc::c_int as libc::c_uint {
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4824:38
     |
4824 |     if split_type as libc::c_uint == type_undef as libc::c_int as libc::c_uint {
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4826:19
     |
4826 |         n_units = 1000 as libc::c_int as intmax_t;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1000 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4828:19
     |
4828 |     if n_units == 0 as libc::c_int as libc::c_long {
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4829:9
     |
4829 | /         if 0 != 0 {
4830 | |             error(
4831 | |                 0 as libc::c_int,
4832 | |                 0 as libc::c_int,
...    |
4873 | |             });
4874 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4829:12
     |
4829 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4834:21
     |
4834 |                     b"invalid number of lines: %s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4836:23
     |
4836 |                 quote(b"0\0" as *const u8 as *const libc::c_char),
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4838:13
     |
4838 | /             if 0 as libc::c_int != 0 as libc::c_int {
4839 | |                 unreachable!();
4840 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4838:16
     |
4838 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4843:17
     |
4843 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4848:25
     |
4848 | /                         b"invalid number of lines: %s\0" as *const u8
4849 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4851:27
     |
4851 |                     quote(b"0\0" as *const u8 as *const libc::c_char),
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4853:17
     |
4853 | /                 if __errstatus != 0 as libc::c_int {
4854 | |                     unreachable!();
4855 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4859:17
     |
4859 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4864:25
     |
4864 | /                         b"invalid number of lines: %s\0" as *const u8
4865 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4867:27
     |
4867 |                     quote(b"0\0" as *const u8 as *const libc::c_char),
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4869:17
     |
4869 | /                 if __errstatus != 0 as libc::c_int {
4870 | |                     unreachable!();
4871 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: manual implementation of an assign operation
    --> src/split.rs:4883:9
     |
4883 |         optind = optind + 1;
     |         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `optind += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/split.rs:4888:9
     |
4888 |         optind = optind + 1;
     |         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `optind += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4893:25
     |
4893 |     error(0, 0, gettext(extra_operand_error.as_ptr() as *const libc::c_char));
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `extra_operand_error.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/split.rs:4897:70
     |
4897 | if !numeric_suffix_start.is_null() && strlen(numeric_suffix_start) > suffix_length as libc::c_ulong {
     |                                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4899:25
     |
4899 |     error(0, 0, gettext(suffix_error.as_ptr() as *const libc::c_char));
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `suffix_error.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4903:28
     |
4903 | if unsafe { strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) } != 0 {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4906:47
     |
4906 |         error(1, *__errno_location(), gettext(open_error.as_ptr() as *const libc::c_char));
     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `open_error.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4914:9
     |
4914 |         0 as libc::c_int as off_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4915:9
     |
4915 |         0 as libc::c_int as off_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4919:9
     |
4919 | /         if 0 != 0 {
4920 | |             error(
4921 | |                 1 as libc::c_int,
4922 | |                 *__errno_location(),
...    |
4967 | |             });
4968 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4919:12
     |
4919 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4923:17
     |
4923 |                 b"%s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4930:13
     |
4930 | /             if 1 as libc::c_int != 0 as libc::c_int {
4931 | |                 unreachable!();
4932 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4935:17
     |
4935 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4939:21
     |
4939 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4946:17
     |
4946 | /                 if __errstatus != 0 as libc::c_int {
4947 | |                     unreachable!();
4948 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:4952:17
     |
4952 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4956:21
     |
4956 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:4963:17
     |
4963 | /                 if __errstatus != 0 as libc::c_int {
4964 | |                     unreachable!();
4965 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4970:23
     |
4970 |     if in_blk_size == 0 as libc::c_int as libc::c_long {
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: the function `io_blksize` doesn't need a mutable reference
    --> src/split.rs:4971:34
     |
4971 |         in_blk_size = io_blksize(&mut in_stat_buf);
     |                                  ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4972:12
     |
4972 |         if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_long) < in_blk_size {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(SYS_BUFSIZE_MAX as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4972:13
     |
4972 |         if (SYS_BUFSIZE_MAX as libc::c_int as libc::c_long) < in_blk_size {
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4973:27
     |
4973 |             in_blk_size = SYS_BUFSIZE_MAX as libc::c_int as idx_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(SYS_BUFSIZE_MAX as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4973:27
     |
4973 |             in_blk_size = SYS_BUFSIZE_MAX as libc::c_int as idx_t;
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4976:38
     |
4976 |       let mut buf: *mut libc::c_char = xalignalloc(
     |  ______________________________________^
4977 | |         page_size,
4978 | |         in_blk_size + 1 as libc::c_int as libc::c_long,
4979 | |     ) as *mut libc::c_char;
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
4976 ~     let mut buf: *mut libc::c_char = xalignalloc(
4977 +         page_size,
4978 +         in_blk_size + 1 as libc::c_int as libc::c_long,
4979 ~     ).cast::<i8>();
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4978:23
     |
4978 |         in_blk_size + 1 as libc::c_int as libc::c_long,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4980:37
     |
4980 |     let mut initial_read: ssize_t = -(1 as libc::c_int) as ssize_t;
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4981:38
     |
4981 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4981:38
     |
4981 |     if split_type as libc::c_uint == type_chunk_bytes as libc::c_int as libc::c_uint
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:4982:42
     |
4982 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/split.rs:4982:42
     |
4982 |         || split_type as libc::c_uint == type_chunk_lines as libc::c_int as libc::c_uint
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: the function `input_file_size` doesn't need a mutable reference
    --> src/split.rs:4986:13
     |
4986 |             &mut in_stat_buf,
     |             ^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:4990:24
     |
4990 |         if file_size < 0 as libc::c_int as libc::c_long {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/split.rs:4991:13
     |
4991 | /             if 0 != 0 {
4992 | |                 error(
4993 | |                     1 as libc::c_int,
4994 | |                     *__errno_location(),
...    |
5048 | |                 });
5049 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:4991:16
     |
4991 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:4996:25
     |
4996 | /                         b"%s: cannot determine file size\0" as *const u8
4997 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot determine file size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5005:17
     |
5005 | /                 if 1 as libc::c_int != 0 as libc::c_int {
5006 | |                     unreachable!();
5007 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5010:21
     |
5010 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5015:29
     |
5015 | / ...                   b"%s: cannot determine file size\0" as *const u8
5016 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot determine file size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5024:21
     |
5024 | /                     if __errstatus != 0 as libc::c_int {
5025 | |                         unreachable!();
5026 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5030:21
     |
5030 |                     let __errstatus: libc::c_int = 1 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5035:29
     |
5035 | / ...                   b"%s: cannot determine file size\0" as *const u8
5036 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot determine file size\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5044:21
     |
5044 | /                     if __errstatus != 0 as libc::c_int {
5045 | |                         unreachable!();
5046 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5070:17
     |
5070 |                 0 as libc::c_int as intmax_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5073:17
     |
5073 |                 -(1 as libc::c_int) as ssize_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5074:17
     |
5074 |                 0 as libc::c_int as intmax_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/split.rs:5081:27
     |
5081 |             if k_units == 0 as libc::c_int as libc::c_long {
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/split.rs:5112:40
     |
5112 |             let mut files: *mut of_t = 0 as *mut of_t;
     |                                        ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<of_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5117:17
     |
5117 |                 b"0\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5118:17
     |
5118 |                 b"split.c\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5119:17
     |
5119 |                 1686 as libc::c_int as libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:5120:19
     |
5120 |                   (*::core::mem::transmute::<
     |  ___________________^
5121 | |                     &[u8; 23],
5122 | |                     &[libc::c_char; 23],
5123 | |                 >(b"int main(int, char **)\0"))
     | |______________________________________________^ help: try: `&*(b"int main(int, char **)\0" as *const [u8; 23] as *const [i8; 23])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5128:21
     |
5128 |                     b"0\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5129:21
     |
5129 |                     b"split.c\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"split.c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/split.rs:5130:21
     |
5130 |                     1686 as libc::c_int as libc::c_uint,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
    --> src/split.rs:5131:23
     |
5131 |                       (*::core::mem::transmute::<
     |  _______________________^
5132 | |                         &[u8; 23],
5133 | |                         &[libc::c_char; 23],
5134 | |                     >(b"int main(int, char **)\0"))
     | |__________________________________________________^ help: try: `&*(b"int main(int, char **)\0" as *const [u8; 23] as *const [i8; 23])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5141:9
     |
5141 | /         if 0 != 0 {
5142 | |             error(
5143 | |                 1 as libc::c_int,
5144 | |                 *__errno_location(),
...    |
5189 | |             });
5190 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/split.rs:5141:12
     |
5141 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5145:17
     |
5145 |                 b"%s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5152:13
     |
5152 | /             if 1 as libc::c_int != 0 as libc::c_int {
5153 | |                 unreachable!();
5154 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5157:17
     |
5157 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5161:21
     |
5161 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5168:17
     |
5168 | /                 if __errstatus != 0 as libc::c_int {
5169 | |                     unreachable!();
5170 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/split.rs:5174:17
     |
5174 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/split.rs:5178:21
     |
5178 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/split.rs:5185:17
     |
5185 | /                 if __errstatus != 0 as libc::c_int {
5186 | |                     unreachable!();
5187 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `0 as *mut _` detected
    --> src/split.rs:5192:14
     |
5192 |     closeout(0 as *mut FILE, output_desc, filter_pid, outfile);
     |              ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
    --> src/split.rs:5207:37
     |
5207 |         ::std::process::exit(main_0((argv.len() - 1) as libc::c_int, argv.as_mut_ptr()) as i32);
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
    --> src/split.rs:5207:37
     |
5207 |         ::std::process::exit(main_0((argv.len() - 1) as libc::c_int, argv.as_mut_ptr()) as i32);
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: path statement with no effect
   --> src/split.rs:905:13
    |
905 |             suffix_length_needed;
    |             ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
    --> src/split.rs:1274:17
     |
1274 |                 suffix_length;
     |                 ^^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:1298:17
     |
1298 |                 outbase_length;
     |                 ^^^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:1743:17
     |
1743 |                 j;
     |                 ^^

warning: path statement with no effect
    --> src/split.rs:2175:17
     |
2175 |                 j;
     |                 ^^

warning: path statement with no effect
    --> src/split.rs:2762:17
     |
2762 |                 bp;
     |                 ^^^

warning: path statement with no effect
    --> src/split.rs:3076:17
     |
3076 |                 bp_out;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3110:21
     |
3110 |                     chunk_no;
     |                     ^^^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3521:13
     |
3521 |             i_file;
     |             ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3599:17
     |
3599 |                 bp_out;
     |                 ^^^^^^^

warning: path statement with no effect
    --> src/split.rs:3805:13
     |
3805 |             i_file;
     |             ^^^^^^^

warning: getting the inner pointer of a temporary `CString`
    --> src/split.rs:3992:86
     |
3992 |                     gettext(std::ffi::CString::new("invalid suffix length").unwrap().as_ptr()),
     |                             -------------------------------------------------------- ^^^^^^ this pointer will be invalid
     |                             |
     |                             this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime
     |
     = note: `#[warn(temporary_cstring_as_ptr)]` on by default
     = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned
     = help: for more information, see https://doc.rust-lang.org/reference/destructors.html

warning: path statement with no effect
    --> src/split.rs:4694:29
     |
4694 | ...                   optarg;
     |                       ^^^^^^^

warning: `rust` (bin "split") generated 1431 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 32.87s
