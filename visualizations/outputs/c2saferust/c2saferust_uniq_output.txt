   Compiling rust v0.0.0 (/mnt/c/Users/sebir/Documents/summer/code_translation/c2saferrust/coreutils/src/uniq/rust_WIP)
warning: literal with an empty format string
   --> src/version_etc.rs:321:9
    |
321 |         "https://www.gnu.org/gethelp/"
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::print-literal` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
320 -         "General help using GNU software: <{}>",
320 +         "General help using GNU software: <https://www.gnu.org/gethelp/>"
    |

warning: unused import: `std::ffi::CStr`
 --> src/argmatch.rs:2:5
  |
2 | use std::ffi::CStr;
  |     ^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `::libc`
  --> src/c_ctype.rs:16:5
   |
16 | use ::libc;
   |     ^^^^^^

warning: unused import: `std::char`
 --> src/c_strcasecmp.rs:2:5
  |
2 | use std::char;
  |     ^^^^^^^^^

warning: unused import: `std::ffi::CString`
 --> src/closeout.rs:2:5
  |
2 | use std::ffi::CString;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::fs::OpenOptions`
 --> src/freopen_safer.rs:1:5
  |
1 | use std::fs::OpenOptions;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::os::raw::c_int`
 --> src/fseeko.rs:1:5
  |
1 | use std::os::raw::c_int;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::os::raw::c_char`
 --> src/linebuffer.rs:2:5
  |
2 | use std::os::raw::c_char;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::mem`
 --> src/mbszero.rs:1:5
  |
1 | use std::mem;
  |     ^^^^^^^^

warning: unused import: `std::ffi::CStr`
 --> src/mcel.rs:8:5
  |
8 | use std::ffi::CStr;
  |     ^^^^^^^^^^^^^^

warning: unnecessary parentheses around block return value
   --> src/mcel.rs:113:5
    |
113 |     (0 <= c && c < MCEL_ERR_MIN as i8)
    |     ^                                ^
    |
    = note: `#[warn(unused_parens)]` on by default
help: remove these parentheses
    |
113 -     (0 <= c && c < MCEL_ERR_MIN as i8)
113 +     0 <= c && c < MCEL_ERR_MIN as i8
    |

warning: unused import: `std::cmp::Ordering`
 --> src/memcasecmp.rs:1:5
  |
1 | use std::cmp::Ordering;
  |     ^^^^^^^^^^^^^^^^^^

warning: unused import: `std::env`
 --> src/posixver.rs:1:5
  |
1 | use std::env;
  |     ^^^^^^^^

warning: unused import: `std::os::raw::c_int`
  --> src/quotearg.rs:29:5
   |
29 | use std::os::raw::c_int;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::slice`
 --> src/setlocale_null.rs:2:5
  |
2 | use std::slice;
  |     ^^^^^^^^^^

warning: unused import: `std::slice`
 --> src/setlocale_null_unlocked.rs:1:5
  |
1 | use std::slice;
  |     ^^^^^^^^^^

warning: unnecessary parentheses around block return value
   --> src/skipchars.rs:147:5
    |
147 |     (0 <= c as i32 && (c as i32) < MCEL_ERR_MIN as i32)
    |     ^                                                 ^
    |
help: remove these parentheses
    |
147 -     (0 <= c as i32 && (c as i32) < MCEL_ERR_MIN as i32)
147 +     0 <= c as i32 && (c as i32) < MCEL_ERR_MIN as i32
    |

warning: unused import: `std::slice`
  --> src/xmalloc.rs:19:5
   |
19 | use std::slice;
   |     ^^^^^^^^^^

warning: unused import: `std::mem`
  --> src/xmalloc.rs:21:5
   |
21 | use std::mem;
   |     ^^^^^^^^

warning: unused import: `std::ffi::CStr`
   --> src/xstrtoimax.rs:424:9
    |
424 |     use std::ffi::CStr;
    |         ^^^^^^^^^^^^^^

warning: unused import: `std::str`
   --> src/xstrtoimax.rs:426:5
    |
426 | use std::str;
    |     ^^^^^^^^

warning: this `else { if .. }` block can be collapsed
   --> src/closeout.rs:134:16
    |
134 |           } else {
    |  ________________^
135 | |             if 0 != 0 {
136 | |                 error(
137 | |                     0 as libc::c_int,
...   |
172 | |             };
173 | |         }
    | |_________^
    |
    = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
134 ~         } else if 0 != 0 {
135 +             error(
136 +                 0 as libc::c_int,
137 +                 *__errno_location(),
138 +                 b"%s\0" as *const u8 as *const libc::c_char,
139 +                 write_error,
140 +             );
141 +             if 0 as libc::c_int != 0 as libc::c_int {
142 +                 unreachable!();
143 +             } else {};
144 +         } else {
145 +             ({
146 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
147 +                 error(
148 +                     __errstatus,
149 +                     *__errno_location(),
150 +                     b"%s\0" as *const u8 as *const libc::c_char,
151 +                     write_error,
152 +                 );
153 +                 if __errstatus != 0 as libc::c_int {
154 +                     unreachable!();
155 +                 } else {};
156 +                 
157 +             });
158 +             ({
159 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
160 +                 error(
161 +                     __errstatus,
162 +                     *__errno_location(),
163 +                     b"%s\0" as *const u8 as *const libc::c_char,
164 +                     write_error,
165 +                 );
166 +                 if __errstatus != 0 as libc::c_int {
167 +                     unreachable!();
168 +                 } else {};
169 +                 
170 +             });
171 +         }
    |

warning: long literal lacking separators
  --> src/freopen_safer.rs:97:31
   |
97 |             current_block_8 = 8409498848974359248;
   |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `8_409_498_848_974_359_248`
   |
   = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:100:31
    |
100 |             current_block_8 = 878006807312935268;
    |                               ^^^^^^^^^^^^^^^^^^ help: consider: `878_006_807_312_935_268`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:103:31
    |
103 |             current_block_8 = 2868539653012386629;
    |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `2_868_539_653_012_386_629`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:109:31
    |
109 |             current_block_8 = 8409498848974359248;
    |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `8_409_498_848_974_359_248`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:113:9
    |
113 |         8409498848974359248 => {
    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `8_409_498_848_974_359_248`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:117:31
    |
117 |             current_block_8 = 878006807312935268;
    |                               ^^^^^^^^^^^^^^^^^^ help: consider: `878_006_807_312_935_268`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:122:9
    |
122 |         878006807312935268 => {
    |         ^^^^^^^^^^^^^^^^^^ help: consider: `878_006_807_312_935_268`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/ialloc.rs:43:12
   |
43 |       } else {
   |  ____________^
44 | |         return None; // Assuming _gl_alloc_nomem() returns a null pointer, we return None here.
45 | |     }
   | |_____^
   |
   = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
 --> src/localcharset.rs:8:36
  |
8 | pub const _NL_NUM: C2RustUnnamed = 786449;
  |                                    ^^^^^^ help: consider: `786_449`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:9:54
  |
9 | pub const _NL_NUM_LC_IDENTIFICATION: C2RustUnnamed = 786448;
  |                                                      ^^^^^^ help: consider: `786_448`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:10:55
   |
10 | pub const _NL_IDENTIFICATION_CODESET: C2RustUnnamed = 786447;
   |                                                       ^^^^^^ help: consider: `786_447`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:11:56
   |
11 | pub const _NL_IDENTIFICATION_CATEGORY: C2RustUnnamed = 786446;
   |                                                        ^^^^^^ help: consider: `786_446`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:12:52
   |
12 | pub const _NL_IDENTIFICATION_DATE: C2RustUnnamed = 786445;
   |                                                    ^^^^^^ help: consider: `786_445`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:13:56
   |
13 | pub const _NL_IDENTIFICATION_REVISION: C2RustUnnamed = 786444;
   |                                                        ^^^^^^ help: consider: `786_444`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:14:60
   |
14 | pub const _NL_IDENTIFICATION_ABBREVIATION: C2RustUnnamed = 786443;
   |                                                            ^^^^^^ help: consider: `786_443`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:15:59
   |
15 | pub const _NL_IDENTIFICATION_APPLICATION: C2RustUnnamed = 786442;
   |                                                           ^^^^^^ help: consider: `786_442`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:16:56
   |
16 | pub const _NL_IDENTIFICATION_AUDIENCE: C2RustUnnamed = 786441;
   |                                                        ^^^^^^ help: consider: `786_441`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:17:57
   |
17 | pub const _NL_IDENTIFICATION_TERRITORY: C2RustUnnamed = 786440;
   |                                                         ^^^^^^ help: consider: `786_440`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:18:56
   |
18 | pub const _NL_IDENTIFICATION_LANGUAGE: C2RustUnnamed = 786439;
   |                                                        ^^^^^^ help: consider: `786_439`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:19:51
   |
19 | pub const _NL_IDENTIFICATION_FAX: C2RustUnnamed = 786438;
   |                                                   ^^^^^^ help: consider: `786_438`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:20:51
   |
20 | pub const _NL_IDENTIFICATION_TEL: C2RustUnnamed = 786437;
   |                                                   ^^^^^^ help: consider: `786_437`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:21:53
   |
21 | pub const _NL_IDENTIFICATION_EMAIL: C2RustUnnamed = 786436;
   |                                                     ^^^^^^ help: consider: `786_436`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:22:55
   |
22 | pub const _NL_IDENTIFICATION_CONTACT: C2RustUnnamed = 786435;
   |                                                       ^^^^^^ help: consider: `786_435`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:23:55
   |
23 | pub const _NL_IDENTIFICATION_ADDRESS: C2RustUnnamed = 786434;
   |                                                       ^^^^^^ help: consider: `786_434`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:24:54
   |
24 | pub const _NL_IDENTIFICATION_SOURCE: C2RustUnnamed = 786433;
   |                                                      ^^^^^^ help: consider: `786_433`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:25:53
   |
25 | pub const _NL_IDENTIFICATION_TITLE: C2RustUnnamed = 786432;
   |                                                     ^^^^^^ help: consider: `786_432`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:26:51
   |
26 | pub const _NL_NUM_LC_MEASUREMENT: C2RustUnnamed = 720898;
   |                                                   ^^^^^^ help: consider: `720_898`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:27:52
   |
27 | pub const _NL_MEASUREMENT_CODESET: C2RustUnnamed = 720897;
   |                                                    ^^^^^^ help: consider: `720_897`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:28:56
   |
28 | pub const _NL_MEASUREMENT_MEASUREMENT: C2RustUnnamed = 720896;
   |                                                        ^^^^^^ help: consider: `720_896`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:29:49
   |
29 | pub const _NL_NUM_LC_TELEPHONE: C2RustUnnamed = 655365;
   |                                                 ^^^^^^ help: consider: `655_365`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:30:50
   |
30 | pub const _NL_TELEPHONE_CODESET: C2RustUnnamed = 655364;
   |                                                  ^^^^^^ help: consider: `655_364`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:31:53
   |
31 | pub const _NL_TELEPHONE_INT_PREFIX: C2RustUnnamed = 655363;
   |                                                     ^^^^^^ help: consider: `655_363`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:32:53
   |
32 | pub const _NL_TELEPHONE_INT_SELECT: C2RustUnnamed = 655362;
   |                                                     ^^^^^^ help: consider: `655_362`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:33:54
   |
33 | pub const _NL_TELEPHONE_TEL_DOM_FMT: C2RustUnnamed = 655361;
   |                                                      ^^^^^^ help: consider: `655_361`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:34:54
   |
34 | pub const _NL_TELEPHONE_TEL_INT_FMT: C2RustUnnamed = 655360;
   |                                                      ^^^^^^ help: consider: `655_360`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:35:47
   |
35 | pub const _NL_NUM_LC_ADDRESS: C2RustUnnamed = 589837;
   |                                               ^^^^^^ help: consider: `589_837`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:36:48
   |
36 | pub const _NL_ADDRESS_CODESET: C2RustUnnamed = 589836;
   |                                                ^^^^^^ help: consider: `589_836`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:37:49
   |
37 | pub const _NL_ADDRESS_LANG_LIB: C2RustUnnamed = 589835;
   |                                                 ^^^^^^ help: consider: `589_835`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:38:50
   |
38 | pub const _NL_ADDRESS_LANG_TERM: C2RustUnnamed = 589834;
   |                                                  ^^^^^^ help: consider: `589_834`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:39:48
   |
39 | pub const _NL_ADDRESS_LANG_AB: C2RustUnnamed = 589833;
   |                                                ^^^^^^ help: consider: `589_833`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:40:50
   |
40 | pub const _NL_ADDRESS_LANG_NAME: C2RustUnnamed = 589832;
   |                                                  ^^^^^^ help: consider: `589_832`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:41:53
   |
41 | pub const _NL_ADDRESS_COUNTRY_ISBN: C2RustUnnamed = 589831;
   |                                                     ^^^^^^ help: consider: `589_831`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:42:52
   |
42 | pub const _NL_ADDRESS_COUNTRY_NUM: C2RustUnnamed = 589830;
   |                                                    ^^^^^^ help: consider: `589_830`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:43:52
   |
43 | pub const _NL_ADDRESS_COUNTRY_CAR: C2RustUnnamed = 589829;
   |                                                    ^^^^^^ help: consider: `589_829`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:44:52
   |
44 | pub const _NL_ADDRESS_COUNTRY_AB3: C2RustUnnamed = 589828;
   |                                                    ^^^^^^ help: consider: `589_828`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:45:52
   |
45 | pub const _NL_ADDRESS_COUNTRY_AB2: C2RustUnnamed = 589827;
   |                                                    ^^^^^^ help: consider: `589_827`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:46:53
   |
46 | pub const _NL_ADDRESS_COUNTRY_POST: C2RustUnnamed = 589826;
   |                                                     ^^^^^^ help: consider: `589_826`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:47:53
   |
47 | pub const _NL_ADDRESS_COUNTRY_NAME: C2RustUnnamed = 589825;
   |                                                     ^^^^^^ help: consider: `589_825`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:48:51
   |
48 | pub const _NL_ADDRESS_POSTAL_FMT: C2RustUnnamed = 589824;
   |                                                   ^^^^^^ help: consider: `589_824`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:49:44
   |
49 | pub const _NL_NUM_LC_NAME: C2RustUnnamed = 524295;
   |                                            ^^^^^^ help: consider: `524_295`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:50:45
   |
50 | pub const _NL_NAME_CODESET: C2RustUnnamed = 524294;
   |                                             ^^^^^^ help: consider: `524_294`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:51:45
   |
51 | pub const _NL_NAME_NAME_MS: C2RustUnnamed = 524293;
   |                                             ^^^^^^ help: consider: `524_293`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:52:47
   |
52 | pub const _NL_NAME_NAME_MISS: C2RustUnnamed = 524292;
   |                                               ^^^^^^ help: consider: `524_292`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:53:46
   |
53 | pub const _NL_NAME_NAME_MRS: C2RustUnnamed = 524291;
   |                                              ^^^^^^ help: consider: `524_291`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:54:45
   |
54 | pub const _NL_NAME_NAME_MR: C2RustUnnamed = 524290;
   |                                             ^^^^^^ help: consider: `524_290`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:55:46
   |
55 | pub const _NL_NAME_NAME_GEN: C2RustUnnamed = 524289;
   |                                              ^^^^^^ help: consider: `524_289`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:56:46
   |
56 | pub const _NL_NAME_NAME_FMT: C2RustUnnamed = 524288;
   |                                              ^^^^^^ help: consider: `524_288`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:57:45
   |
57 | pub const _NL_NUM_LC_PAPER: C2RustUnnamed = 458755;
   |                                             ^^^^^^ help: consider: `458_755`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:58:46
   |
58 | pub const _NL_PAPER_CODESET: C2RustUnnamed = 458754;
   |                                              ^^^^^^ help: consider: `458_754`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:59:44
   |
59 | pub const _NL_PAPER_WIDTH: C2RustUnnamed = 458753;
   |                                            ^^^^^^ help: consider: `458_753`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:60:45
   |
60 | pub const _NL_PAPER_HEIGHT: C2RustUnnamed = 458752;
   |                                             ^^^^^^ help: consider: `458_752`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:61:48
   |
61 | pub const _NL_NUM_LC_MESSAGES: C2RustUnnamed = 327685;
   |                                                ^^^^^^ help: consider: `327_685`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:62:49
   |
62 | pub const _NL_MESSAGES_CODESET: C2RustUnnamed = 327684;
   |                                                 ^^^^^^ help: consider: `327_684`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:63:36
   |
63 | pub const __NOSTR: C2RustUnnamed = 327683;
   |                                    ^^^^^^ help: consider: `327_683`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:64:37
   |
64 | pub const __YESSTR: C2RustUnnamed = 327682;
   |                                     ^^^^^^ help: consider: `327_682`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:65:37
   |
65 | pub const __NOEXPR: C2RustUnnamed = 327681;
   |                                     ^^^^^^ help: consider: `327_681`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:66:38
   |
66 | pub const __YESEXPR: C2RustUnnamed = 327680;
   |                                      ^^^^^^ help: consider: `327_680`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:76:48
   |
76 | pub const _NL_NUM_LC_MONETARY: C2RustUnnamed = 262190;
   |                                                ^^^^^^ help: consider: `262_190`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:77:49
   |
77 | pub const _NL_MONETARY_CODESET: C2RustUnnamed = 262189;
   |                                                 ^^^^^^ help: consider: `262_189`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:78:58
   |
78 | pub const _NL_MONETARY_THOUSANDS_SEP_WC: C2RustUnnamed = 262188;
   |                                                          ^^^^^^ help: consider: `262_188`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:79:58
   |
79 | pub const _NL_MONETARY_DECIMAL_POINT_WC: C2RustUnnamed = 262187;
   |                                                          ^^^^^^ help: consider: `262_187`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:80:57
   |
80 | pub const _NL_MONETARY_CONVERSION_RATE: C2RustUnnamed = 262186;
   |                                                         ^^^^^^ help: consider: `262_186`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:81:54
   |
81 | pub const _NL_MONETARY_DUO_VALID_TO: C2RustUnnamed = 262185;
   |                                                      ^^^^^^ help: consider: `262_185`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:82:56
   |
82 | pub const _NL_MONETARY_DUO_VALID_FROM: C2RustUnnamed = 262184;
   |                                                        ^^^^^^ help: consider: `262_184`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:83:54
   |
83 | pub const _NL_MONETARY_UNO_VALID_TO: C2RustUnnamed = 262183;
   |                                                      ^^^^^^ help: consider: `262_183`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:84:56
   |
84 | pub const _NL_MONETARY_UNO_VALID_FROM: C2RustUnnamed = 262182;
   |                                                        ^^^^^^ help: consider: `262_182`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:85:61
   |
85 | pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: C2RustUnnamed = 262181;
   |                                                             ^^^^^^ help: consider: `262_181`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:86:61
   |
86 | pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: C2RustUnnamed = 262180;
   |                                                             ^^^^^^ help: consider: `262_180`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:87:57
   |
87 | pub const _NL_MONETARY_DUO_N_SIGN_POSN: C2RustUnnamed = 262179;
   |                                                         ^^^^^^ help: consider: `262_179`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:88:57
   |
88 | pub const _NL_MONETARY_DUO_P_SIGN_POSN: C2RustUnnamed = 262178;
   |                                                         ^^^^^^ help: consider: `262_178`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:89:64
   |
89 | pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: C2RustUnnamed = 262177;
   |                                                                ^^^^^^ help: consider: `262_177`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:90:63
   |
90 | pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: C2RustUnnamed = 262176;
   |                                                               ^^^^^^ help: consider: `262_176`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:91:64
   |
91 | pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: C2RustUnnamed = 262175;
   |                                                                ^^^^^^ help: consider: `262_175`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:92:63
   |
92 | pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: C2RustUnnamed = 262174;
   |                                                               ^^^^^^ help: consider: `262_174`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:93:60
   |
93 | pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: C2RustUnnamed = 262173;
   |                                                            ^^^^^^ help: consider: `262_173`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:94:59
   |
94 | pub const _NL_MONETARY_DUO_N_CS_PRECEDES: C2RustUnnamed = 262172;
   |                                                           ^^^^^^ help: consider: `262_172`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:95:60
   |
95 | pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: C2RustUnnamed = 262171;
   |                                                            ^^^^^^ help: consider: `262_171`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:96:59
   |
96 | pub const _NL_MONETARY_DUO_P_CS_PRECEDES: C2RustUnnamed = 262170;
   |                                                           ^^^^^^ help: consider: `262_170`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:97:57
   |
97 | pub const _NL_MONETARY_DUO_FRAC_DIGITS: C2RustUnnamed = 262169;
   |                                                         ^^^^^^ help: consider: `262_169`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:98:61
   |
98 | pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: C2RustUnnamed = 262168;
   |                                                             ^^^^^^ help: consider: `262_168`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:99:61
   |
99 | pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: C2RustUnnamed = 262167;
   |                                                             ^^^^^^ help: consider: `262_167`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:100:61
    |
100 | pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: C2RustUnnamed = 262166;
    |                                                             ^^^^^^ help: consider: `262_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:101:46
    |
101 | pub const __INT_N_SIGN_POSN: C2RustUnnamed = 262165;
    |                                              ^^^^^^ help: consider: `262_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:102:46
    |
102 | pub const __INT_P_SIGN_POSN: C2RustUnnamed = 262164;
    |                                              ^^^^^^ help: consider: `262_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:103:49
    |
103 | pub const __INT_N_SEP_BY_SPACE: C2RustUnnamed = 262163;
    |                                                 ^^^^^^ help: consider: `262_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:104:48
    |
104 | pub const __INT_N_CS_PRECEDES: C2RustUnnamed = 262162;
    |                                                ^^^^^^ help: consider: `262_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:105:49
    |
105 | pub const __INT_P_SEP_BY_SPACE: C2RustUnnamed = 262161;
    |                                                 ^^^^^^ help: consider: `262_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:106:48
    |
106 | pub const __INT_P_CS_PRECEDES: C2RustUnnamed = 262160;
    |                                                ^^^^^^ help: consider: `262_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:107:50
    |
107 | pub const _NL_MONETARY_CRNCYSTR: C2RustUnnamed = 262159;
    |                                                  ^^^^^^ help: consider: `262_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:108:42
    |
108 | pub const __N_SIGN_POSN: C2RustUnnamed = 262158;
    |                                          ^^^^^^ help: consider: `262_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:109:42
    |
109 | pub const __P_SIGN_POSN: C2RustUnnamed = 262157;
    |                                          ^^^^^^ help: consider: `262_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:110:45
    |
110 | pub const __N_SEP_BY_SPACE: C2RustUnnamed = 262156;
    |                                             ^^^^^^ help: consider: `262_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:111:44
    |
111 | pub const __N_CS_PRECEDES: C2RustUnnamed = 262155;
    |                                            ^^^^^^ help: consider: `262_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:112:45
    |
112 | pub const __P_SEP_BY_SPACE: C2RustUnnamed = 262154;
    |                                             ^^^^^^ help: consider: `262_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:113:44
    |
113 | pub const __P_CS_PRECEDES: C2RustUnnamed = 262153;
    |                                            ^^^^^^ help: consider: `262_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:114:42
    |
114 | pub const __FRAC_DIGITS: C2RustUnnamed = 262152;
    |                                          ^^^^^^ help: consider: `262_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:115:46
    |
115 | pub const __INT_FRAC_DIGITS: C2RustUnnamed = 262151;
    |                                              ^^^^^^ help: consider: `262_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:116:44
    |
116 | pub const __NEGATIVE_SIGN: C2RustUnnamed = 262150;
    |                                            ^^^^^^ help: consider: `262_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:117:44
    |
117 | pub const __POSITIVE_SIGN: C2RustUnnamed = 262149;
    |                                            ^^^^^^ help: consider: `262_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:118:43
    |
118 | pub const __MON_GROUPING: C2RustUnnamed = 262148;
    |                                           ^^^^^^ help: consider: `262_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:119:48
    |
119 | pub const __MON_THOUSANDS_SEP: C2RustUnnamed = 262147;
    |                                                ^^^^^^ help: consider: `262_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:120:48
    |
120 | pub const __MON_DECIMAL_POINT: C2RustUnnamed = 262146;
    |                                                ^^^^^^ help: consider: `262_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:121:46
    |
121 | pub const __CURRENCY_SYMBOL: C2RustUnnamed = 262145;
    |                                              ^^^^^^ help: consider: `262_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:122:46
    |
122 | pub const __INT_CURR_SYMBOL: C2RustUnnamed = 262144;
    |                                              ^^^^^^ help: consider: `262_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:210:47
    |
210 | pub const _NL_NUM_LC_COLLATE: C2RustUnnamed = 196627;
    |                                               ^^^^^^ help: consider: `196_627`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:211:48
    |
211 | pub const _NL_COLLATE_CODESET: C2RustUnnamed = 196626;
    |                                                ^^^^^^ help: consider: `196_626`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:212:50
    |
212 | pub const _NL_COLLATE_COLLSEQWC: C2RustUnnamed = 196625;
    |                                                  ^^^^^^ help: consider: `196_625`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:213:50
    |
213 | pub const _NL_COLLATE_COLLSEQMB: C2RustUnnamed = 196624;
    |                                                  ^^^^^^ help: consider: `196_624`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:214:53
    |
214 | pub const _NL_COLLATE_SYMB_EXTRAMB: C2RustUnnamed = 196623;
    |                                                     ^^^^^^ help: consider: `196_623`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:215:53
    |
215 | pub const _NL_COLLATE_SYMB_TABLEMB: C2RustUnnamed = 196622;
    |                                                     ^^^^^^ help: consider: `196_622`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:216:57
    |
216 | pub const _NL_COLLATE_SYMB_HASH_SIZEMB: C2RustUnnamed = 196621;
    |                                                         ^^^^^^ help: consider: `196_621`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:217:51
    |
217 | pub const _NL_COLLATE_INDIRECTWC: C2RustUnnamed = 196620;
    |                                                   ^^^^^^ help: consider: `196_620`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:218:48
    |
218 | pub const _NL_COLLATE_EXTRAWC: C2RustUnnamed = 196619;
    |                                                ^^^^^^ help: consider: `196_619`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:219:49
    |
219 | pub const _NL_COLLATE_WEIGHTWC: C2RustUnnamed = 196618;
    |                                                 ^^^^^^ help: consider: `196_618`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:220:48
    |
220 | pub const _NL_COLLATE_TABLEWC: C2RustUnnamed = 196617;
    |                                                ^^^^^^ help: consider: `196_617`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:221:45
    |
221 | pub const _NL_COLLATE_GAP3: C2RustUnnamed = 196616;
    |                                             ^^^^^^ help: consider: `196_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:222:45
    |
222 | pub const _NL_COLLATE_GAP2: C2RustUnnamed = 196615;
    |                                             ^^^^^^ help: consider: `196_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:223:45
    |
223 | pub const _NL_COLLATE_GAP1: C2RustUnnamed = 196614;
    |                                             ^^^^^^ help: consider: `196_614`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:224:51
    |
224 | pub const _NL_COLLATE_INDIRECTMB: C2RustUnnamed = 196613;
    |                                                   ^^^^^^ help: consider: `196_613`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:225:48
    |
225 | pub const _NL_COLLATE_EXTRAMB: C2RustUnnamed = 196612;
    |                                                ^^^^^^ help: consider: `196_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:226:49
    |
226 | pub const _NL_COLLATE_WEIGHTMB: C2RustUnnamed = 196611;
    |                                                 ^^^^^^ help: consider: `196_611`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:227:48
    |
227 | pub const _NL_COLLATE_TABLEMB: C2RustUnnamed = 196610;
    |                                                ^^^^^^ help: consider: `196_610`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:228:49
    |
228 | pub const _NL_COLLATE_RULESETS: C2RustUnnamed = 196609;
    |                                                 ^^^^^^ help: consider: `196_609`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:229:47
    |
229 | pub const _NL_COLLATE_NRULES: C2RustUnnamed = 196608;
    |                                               ^^^^^^ help: consider: `196_608`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:230:44
    |
230 | pub const _NL_NUM_LC_TIME: C2RustUnnamed = 131231;
    |                                            ^^^^^^ help: consider: `131_231`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:231:45
    |
231 | pub const _NL_WABALTMON_12: C2RustUnnamed = 131230;
    |                                             ^^^^^^ help: consider: `131_230`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:232:45
    |
232 | pub const _NL_WABALTMON_11: C2RustUnnamed = 131229;
    |                                             ^^^^^^ help: consider: `131_229`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:233:45
    |
233 | pub const _NL_WABALTMON_10: C2RustUnnamed = 131228;
    |                                             ^^^^^^ help: consider: `131_228`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:234:44
    |
234 | pub const _NL_WABALTMON_9: C2RustUnnamed = 131227;
    |                                            ^^^^^^ help: consider: `131_227`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:235:44
    |
235 | pub const _NL_WABALTMON_8: C2RustUnnamed = 131226;
    |                                            ^^^^^^ help: consider: `131_226`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:236:44
    |
236 | pub const _NL_WABALTMON_7: C2RustUnnamed = 131225;
    |                                            ^^^^^^ help: consider: `131_225`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:237:44
    |
237 | pub const _NL_WABALTMON_6: C2RustUnnamed = 131224;
    |                                            ^^^^^^ help: consider: `131_224`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:238:44
    |
238 | pub const _NL_WABALTMON_5: C2RustUnnamed = 131223;
    |                                            ^^^^^^ help: consider: `131_223`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:239:44
    |
239 | pub const _NL_WABALTMON_4: C2RustUnnamed = 131222;
    |                                            ^^^^^^ help: consider: `131_222`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:240:44
    |
240 | pub const _NL_WABALTMON_3: C2RustUnnamed = 131221;
    |                                            ^^^^^^ help: consider: `131_221`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:241:44
    |
241 | pub const _NL_WABALTMON_2: C2RustUnnamed = 131220;
    |                                            ^^^^^^ help: consider: `131_220`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:242:44
    |
242 | pub const _NL_WABALTMON_1: C2RustUnnamed = 131219;
    |                                            ^^^^^^ help: consider: `131_219`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:243:44
    |
243 | pub const _NL_ABALTMON_12: C2RustUnnamed = 131218;
    |                                            ^^^^^^ help: consider: `131_218`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:244:44
    |
244 | pub const _NL_ABALTMON_11: C2RustUnnamed = 131217;
    |                                            ^^^^^^ help: consider: `131_217`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:245:44
    |
245 | pub const _NL_ABALTMON_10: C2RustUnnamed = 131216;
    |                                            ^^^^^^ help: consider: `131_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:246:43
    |
246 | pub const _NL_ABALTMON_9: C2RustUnnamed = 131215;
    |                                           ^^^^^^ help: consider: `131_215`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:247:43
    |
247 | pub const _NL_ABALTMON_8: C2RustUnnamed = 131214;
    |                                           ^^^^^^ help: consider: `131_214`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:248:43
    |
248 | pub const _NL_ABALTMON_7: C2RustUnnamed = 131213;
    |                                           ^^^^^^ help: consider: `131_213`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:249:43
    |
249 | pub const _NL_ABALTMON_6: C2RustUnnamed = 131212;
    |                                           ^^^^^^ help: consider: `131_212`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:250:43
    |
250 | pub const _NL_ABALTMON_5: C2RustUnnamed = 131211;
    |                                           ^^^^^^ help: consider: `131_211`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:251:43
    |
251 | pub const _NL_ABALTMON_4: C2RustUnnamed = 131210;
    |                                           ^^^^^^ help: consider: `131_210`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:252:43
    |
252 | pub const _NL_ABALTMON_3: C2RustUnnamed = 131209;
    |                                           ^^^^^^ help: consider: `131_209`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:253:43
    |
253 | pub const _NL_ABALTMON_2: C2RustUnnamed = 131208;
    |                                           ^^^^^^ help: consider: `131_208`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:254:43
    |
254 | pub const _NL_ABALTMON_1: C2RustUnnamed = 131207;
    |                                           ^^^^^^ help: consider: `131_207`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:255:43
    |
255 | pub const _NL_WALTMON_12: C2RustUnnamed = 131206;
    |                                           ^^^^^^ help: consider: `131_206`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:256:43
    |
256 | pub const _NL_WALTMON_11: C2RustUnnamed = 131205;
    |                                           ^^^^^^ help: consider: `131_205`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:257:43
    |
257 | pub const _NL_WALTMON_10: C2RustUnnamed = 131204;
    |                                           ^^^^^^ help: consider: `131_204`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:258:42
    |
258 | pub const _NL_WALTMON_9: C2RustUnnamed = 131203;
    |                                          ^^^^^^ help: consider: `131_203`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:259:42
    |
259 | pub const _NL_WALTMON_8: C2RustUnnamed = 131202;
    |                                          ^^^^^^ help: consider: `131_202`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:260:42
    |
260 | pub const _NL_WALTMON_7: C2RustUnnamed = 131201;
    |                                          ^^^^^^ help: consider: `131_201`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:261:42
    |
261 | pub const _NL_WALTMON_6: C2RustUnnamed = 131200;
    |                                          ^^^^^^ help: consider: `131_200`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:262:42
    |
262 | pub const _NL_WALTMON_5: C2RustUnnamed = 131199;
    |                                          ^^^^^^ help: consider: `131_199`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:263:42
    |
263 | pub const _NL_WALTMON_4: C2RustUnnamed = 131198;
    |                                          ^^^^^^ help: consider: `131_198`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:264:42
    |
264 | pub const _NL_WALTMON_3: C2RustUnnamed = 131197;
    |                                          ^^^^^^ help: consider: `131_197`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:265:42
    |
265 | pub const _NL_WALTMON_2: C2RustUnnamed = 131196;
    |                                          ^^^^^^ help: consider: `131_196`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:266:42
    |
266 | pub const _NL_WALTMON_1: C2RustUnnamed = 131195;
    |                                          ^^^^^^ help: consider: `131_195`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:267:40
    |
267 | pub const __ALTMON_12: C2RustUnnamed = 131194;
    |                                        ^^^^^^ help: consider: `131_194`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:268:40
    |
268 | pub const __ALTMON_11: C2RustUnnamed = 131193;
    |                                        ^^^^^^ help: consider: `131_193`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:269:40
    |
269 | pub const __ALTMON_10: C2RustUnnamed = 131192;
    |                                        ^^^^^^ help: consider: `131_192`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:270:39
    |
270 | pub const __ALTMON_9: C2RustUnnamed = 131191;
    |                                       ^^^^^^ help: consider: `131_191`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:271:39
    |
271 | pub const __ALTMON_8: C2RustUnnamed = 131190;
    |                                       ^^^^^^ help: consider: `131_190`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:272:39
    |
272 | pub const __ALTMON_7: C2RustUnnamed = 131189;
    |                                       ^^^^^^ help: consider: `131_189`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:273:39
    |
273 | pub const __ALTMON_6: C2RustUnnamed = 131188;
    |                                       ^^^^^^ help: consider: `131_188`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:274:39
    |
274 | pub const __ALTMON_5: C2RustUnnamed = 131187;
    |                                       ^^^^^^ help: consider: `131_187`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:275:39
    |
275 | pub const __ALTMON_4: C2RustUnnamed = 131186;
    |                                       ^^^^^^ help: consider: `131_186`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:276:39
    |
276 | pub const __ALTMON_3: C2RustUnnamed = 131185;
    |                                       ^^^^^^ help: consider: `131_185`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:277:39
    |
277 | pub const __ALTMON_2: C2RustUnnamed = 131184;
    |                                       ^^^^^^ help: consider: `131_184`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:278:39
    |
278 | pub const __ALTMON_1: C2RustUnnamed = 131183;
    |                                       ^^^^^^ help: consider: `131_183`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:279:45
    |
279 | pub const _NL_TIME_CODESET: C2RustUnnamed = 131182;
    |                                             ^^^^^^ help: consider: `131_182`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:280:43
    |
280 | pub const _NL_W_DATE_FMT: C2RustUnnamed = 131181;
    |                                           ^^^^^^ help: consider: `131_181`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:281:38
    |
281 | pub const _DATE_FMT: C2RustUnnamed = 131180;
    |                                      ^^^^^^ help: consider: `131_180`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:282:46
    |
282 | pub const _NL_TIME_TIMEZONE: C2RustUnnamed = 131179;
    |                                              ^^^^^^ help: consider: `131_179`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:283:51
    |
283 | pub const _NL_TIME_CAL_DIRECTION: C2RustUnnamed = 131178;
    |                                                   ^^^^^^ help: consider: `131_178`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:284:51
    |
284 | pub const _NL_TIME_FIRST_WORKDAY: C2RustUnnamed = 131177;
    |                                                   ^^^^^^ help: consider: `131_177`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:285:51
    |
285 | pub const _NL_TIME_FIRST_WEEKDAY: C2RustUnnamed = 131176;
    |                                                   ^^^^^^ help: consider: `131_176`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:286:50
    |
286 | pub const _NL_TIME_WEEK_1STWEEK: C2RustUnnamed = 131175;
    |                                                  ^^^^^^ help: consider: `131_175`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:287:49
    |
287 | pub const _NL_TIME_WEEK_1STDAY: C2RustUnnamed = 131174;
    |                                                 ^^^^^^ help: consider: `131_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:288:48
    |
288 | pub const _NL_TIME_WEEK_NDAYS: C2RustUnnamed = 131173;
    |                                                ^^^^^^ help: consider: `131_173`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:289:43
    |
289 | pub const _NL_WERA_T_FMT: C2RustUnnamed = 131172;
    |                                           ^^^^^^ help: consider: `131_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:290:45
    |
290 | pub const _NL_WERA_D_T_FMT: C2RustUnnamed = 131171;
    |                                             ^^^^^^ help: consider: `131_171`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:291:44
    |
291 | pub const _NL_WALT_DIGITS: C2RustUnnamed = 131170;
    |                                            ^^^^^^ help: consider: `131_170`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:292:43
    |
292 | pub const _NL_WERA_D_FMT: C2RustUnnamed = 131169;
    |                                           ^^^^^^ help: consider: `131_169`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:293:42
    |
293 | pub const _NL_WERA_YEAR: C2RustUnnamed = 131168;
    |                                          ^^^^^^ help: consider: `131_168`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:294:44
    |
294 | pub const _NL_WT_FMT_AMPM: C2RustUnnamed = 131167;
    |                                            ^^^^^^ help: consider: `131_167`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:295:39
    |
295 | pub const _NL_WT_FMT: C2RustUnnamed = 131166;
    |                                       ^^^^^^ help: consider: `131_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:296:39
    |
296 | pub const _NL_WD_FMT: C2RustUnnamed = 131165;
    |                                       ^^^^^^ help: consider: `131_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:297:41
    |
297 | pub const _NL_WD_T_FMT: C2RustUnnamed = 131164;
    |                                         ^^^^^^ help: consider: `131_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:298:40
    |
298 | pub const _NL_WPM_STR: C2RustUnnamed = 131163;
    |                                        ^^^^^^ help: consider: `131_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:299:40
    |
299 | pub const _NL_WAM_STR: C2RustUnnamed = 131162;
    |                                        ^^^^^^ help: consider: `131_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:300:40
    |
300 | pub const _NL_WMON_12: C2RustUnnamed = 131161;
    |                                        ^^^^^^ help: consider: `131_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:301:40
    |
301 | pub const _NL_WMON_11: C2RustUnnamed = 131160;
    |                                        ^^^^^^ help: consider: `131_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:302:40
    |
302 | pub const _NL_WMON_10: C2RustUnnamed = 131159;
    |                                        ^^^^^^ help: consider: `131_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:303:39
    |
303 | pub const _NL_WMON_9: C2RustUnnamed = 131158;
    |                                       ^^^^^^ help: consider: `131_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:304:39
    |
304 | pub const _NL_WMON_8: C2RustUnnamed = 131157;
    |                                       ^^^^^^ help: consider: `131_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:305:39
    |
305 | pub const _NL_WMON_7: C2RustUnnamed = 131156;
    |                                       ^^^^^^ help: consider: `131_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:306:39
    |
306 | pub const _NL_WMON_6: C2RustUnnamed = 131155;
    |                                       ^^^^^^ help: consider: `131_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:307:39
    |
307 | pub const _NL_WMON_5: C2RustUnnamed = 131154;
    |                                       ^^^^^^ help: consider: `131_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:308:39
    |
308 | pub const _NL_WMON_4: C2RustUnnamed = 131153;
    |                                       ^^^^^^ help: consider: `131_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:309:39
    |
309 | pub const _NL_WMON_3: C2RustUnnamed = 131152;
    |                                       ^^^^^^ help: consider: `131_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:310:39
    |
310 | pub const _NL_WMON_2: C2RustUnnamed = 131151;
    |                                       ^^^^^^ help: consider: `131_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:311:39
    |
311 | pub const _NL_WMON_1: C2RustUnnamed = 131150;
    |                                       ^^^^^^ help: consider: `131_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:312:42
    |
312 | pub const _NL_WABMON_12: C2RustUnnamed = 131149;
    |                                          ^^^^^^ help: consider: `131_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:313:42
    |
313 | pub const _NL_WABMON_11: C2RustUnnamed = 131148;
    |                                          ^^^^^^ help: consider: `131_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:314:42
    |
314 | pub const _NL_WABMON_10: C2RustUnnamed = 131147;
    |                                          ^^^^^^ help: consider: `131_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:315:41
    |
315 | pub const _NL_WABMON_9: C2RustUnnamed = 131146;
    |                                         ^^^^^^ help: consider: `131_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:316:41
    |
316 | pub const _NL_WABMON_8: C2RustUnnamed = 131145;
    |                                         ^^^^^^ help: consider: `131_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:317:41
    |
317 | pub const _NL_WABMON_7: C2RustUnnamed = 131144;
    |                                         ^^^^^^ help: consider: `131_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:318:41
    |
318 | pub const _NL_WABMON_6: C2RustUnnamed = 131143;
    |                                         ^^^^^^ help: consider: `131_143`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:319:41
    |
319 | pub const _NL_WABMON_5: C2RustUnnamed = 131142;
    |                                         ^^^^^^ help: consider: `131_142`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:320:41
    |
320 | pub const _NL_WABMON_4: C2RustUnnamed = 131141;
    |                                         ^^^^^^ help: consider: `131_141`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:321:41
    |
321 | pub const _NL_WABMON_3: C2RustUnnamed = 131140;
    |                                         ^^^^^^ help: consider: `131_140`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:322:41
    |
322 | pub const _NL_WABMON_2: C2RustUnnamed = 131139;
    |                                         ^^^^^^ help: consider: `131_139`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:323:41
    |
323 | pub const _NL_WABMON_1: C2RustUnnamed = 131138;
    |                                         ^^^^^^ help: consider: `131_138`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:324:39
    |
324 | pub const _NL_WDAY_7: C2RustUnnamed = 131137;
    |                                       ^^^^^^ help: consider: `131_137`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:325:39
    |
325 | pub const _NL_WDAY_6: C2RustUnnamed = 131136;
    |                                       ^^^^^^ help: consider: `131_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:326:39
    |
326 | pub const _NL_WDAY_5: C2RustUnnamed = 131135;
    |                                       ^^^^^^ help: consider: `131_135`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:327:39
    |
327 | pub const _NL_WDAY_4: C2RustUnnamed = 131134;
    |                                       ^^^^^^ help: consider: `131_134`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:328:39
    |
328 | pub const _NL_WDAY_3: C2RustUnnamed = 131133;
    |                                       ^^^^^^ help: consider: `131_133`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:329:39
    |
329 | pub const _NL_WDAY_2: C2RustUnnamed = 131132;
    |                                       ^^^^^^ help: consider: `131_132`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:330:39
    |
330 | pub const _NL_WDAY_1: C2RustUnnamed = 131131;
    |                                       ^^^^^^ help: consider: `131_131`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:331:41
    |
331 | pub const _NL_WABDAY_7: C2RustUnnamed = 131130;
    |                                         ^^^^^^ help: consider: `131_130`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:332:41
    |
332 | pub const _NL_WABDAY_6: C2RustUnnamed = 131129;
    |                                         ^^^^^^ help: consider: `131_129`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:333:41
    |
333 | pub const _NL_WABDAY_5: C2RustUnnamed = 131128;
    |                                         ^^^^^^ help: consider: `131_128`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:334:41
    |
334 | pub const _NL_WABDAY_4: C2RustUnnamed = 131127;
    |                                         ^^^^^^ help: consider: `131_127`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:335:41
    |
335 | pub const _NL_WABDAY_3: C2RustUnnamed = 131126;
    |                                         ^^^^^^ help: consider: `131_126`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:336:41
    |
336 | pub const _NL_WABDAY_2: C2RustUnnamed = 131125;
    |                                         ^^^^^^ help: consider: `131_125`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:337:41
    |
337 | pub const _NL_WABDAY_1: C2RustUnnamed = 131124;
    |                                         ^^^^^^ help: consider: `131_124`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:338:49
    |
338 | pub const _NL_TIME_ERA_ENTRIES: C2RustUnnamed = 131123;
    |                                                 ^^^^^^ help: consider: `131_123`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:339:53
    |
339 | pub const _NL_TIME_ERA_NUM_ENTRIES: C2RustUnnamed = 131122;
    |                                                     ^^^^^^ help: consider: `131_122`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:340:38
    |
340 | pub const ERA_T_FMT: C2RustUnnamed = 131121;
    |                                      ^^^^^^ help: consider: `131_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:341:40
    |
341 | pub const ERA_D_T_FMT: C2RustUnnamed = 131120;
    |                                        ^^^^^^ help: consider: `131_120`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:342:39
    |
342 | pub const ALT_DIGITS: C2RustUnnamed = 131119;
    |                                       ^^^^^^ help: consider: `131_119`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:343:38
    |
343 | pub const ERA_D_FMT: C2RustUnnamed = 131118;
    |                                      ^^^^^^ help: consider: `131_118`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:344:39
    |
344 | pub const __ERA_YEAR: C2RustUnnamed = 131117;
    |                                       ^^^^^^ help: consider: `131_117`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:345:32
    |
345 | pub const ERA: C2RustUnnamed = 131116;
    |                                ^^^^^^ help: consider: `131_116`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:346:39
    |
346 | pub const T_FMT_AMPM: C2RustUnnamed = 131115;
    |                                       ^^^^^^ help: consider: `131_115`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:347:34
    |
347 | pub const T_FMT: C2RustUnnamed = 131114;
    |                                  ^^^^^^ help: consider: `131_114`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:348:34
    |
348 | pub const D_FMT: C2RustUnnamed = 131113;
    |                                  ^^^^^^ help: consider: `131_113`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:349:36
    |
349 | pub const D_T_FMT: C2RustUnnamed = 131112;
    |                                    ^^^^^^ help: consider: `131_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:350:35
    |
350 | pub const PM_STR: C2RustUnnamed = 131111;
    |                                   ^^^^^^ help: consider: `131_111`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:351:35
    |
351 | pub const AM_STR: C2RustUnnamed = 131110;
    |                                   ^^^^^^ help: consider: `131_110`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:352:35
    |
352 | pub const MON_12: C2RustUnnamed = 131109;
    |                                   ^^^^^^ help: consider: `131_109`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:353:35
    |
353 | pub const MON_11: C2RustUnnamed = 131108;
    |                                   ^^^^^^ help: consider: `131_108`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:354:35
    |
354 | pub const MON_10: C2RustUnnamed = 131107;
    |                                   ^^^^^^ help: consider: `131_107`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:355:34
    |
355 | pub const MON_9: C2RustUnnamed = 131106;
    |                                  ^^^^^^ help: consider: `131_106`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:356:34
    |
356 | pub const MON_8: C2RustUnnamed = 131105;
    |                                  ^^^^^^ help: consider: `131_105`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:357:34
    |
357 | pub const MON_7: C2RustUnnamed = 131104;
    |                                  ^^^^^^ help: consider: `131_104`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:358:34
    |
358 | pub const MON_6: C2RustUnnamed = 131103;
    |                                  ^^^^^^ help: consider: `131_103`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:359:34
    |
359 | pub const MON_5: C2RustUnnamed = 131102;
    |                                  ^^^^^^ help: consider: `131_102`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:360:34
    |
360 | pub const MON_4: C2RustUnnamed = 131101;
    |                                  ^^^^^^ help: consider: `131_101`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:361:34
    |
361 | pub const MON_3: C2RustUnnamed = 131100;
    |                                  ^^^^^^ help: consider: `131_100`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:362:34
    |
362 | pub const MON_2: C2RustUnnamed = 131099;
    |                                  ^^^^^^ help: consider: `131_099`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:363:34
    |
363 | pub const MON_1: C2RustUnnamed = 131098;
    |                                  ^^^^^^ help: consider: `131_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:364:37
    |
364 | pub const ABMON_12: C2RustUnnamed = 131097;
    |                                     ^^^^^^ help: consider: `131_097`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:365:37
    |
365 | pub const ABMON_11: C2RustUnnamed = 131096;
    |                                     ^^^^^^ help: consider: `131_096`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:366:37
    |
366 | pub const ABMON_10: C2RustUnnamed = 131095;
    |                                     ^^^^^^ help: consider: `131_095`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:367:36
    |
367 | pub const ABMON_9: C2RustUnnamed = 131094;
    |                                    ^^^^^^ help: consider: `131_094`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:368:36
    |
368 | pub const ABMON_8: C2RustUnnamed = 131093;
    |                                    ^^^^^^ help: consider: `131_093`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:369:36
    |
369 | pub const ABMON_7: C2RustUnnamed = 131092;
    |                                    ^^^^^^ help: consider: `131_092`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:370:36
    |
370 | pub const ABMON_6: C2RustUnnamed = 131091;
    |                                    ^^^^^^ help: consider: `131_091`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:371:36
    |
371 | pub const ABMON_5: C2RustUnnamed = 131090;
    |                                    ^^^^^^ help: consider: `131_090`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:372:36
    |
372 | pub const ABMON_4: C2RustUnnamed = 131089;
    |                                    ^^^^^^ help: consider: `131_089`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:373:36
    |
373 | pub const ABMON_3: C2RustUnnamed = 131088;
    |                                    ^^^^^^ help: consider: `131_088`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:374:36
    |
374 | pub const ABMON_2: C2RustUnnamed = 131087;
    |                                    ^^^^^^ help: consider: `131_087`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:375:36
    |
375 | pub const ABMON_1: C2RustUnnamed = 131086;
    |                                    ^^^^^^ help: consider: `131_086`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:376:34
    |
376 | pub const DAY_7: C2RustUnnamed = 131085;
    |                                  ^^^^^^ help: consider: `131_085`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:377:34
    |
377 | pub const DAY_6: C2RustUnnamed = 131084;
    |                                  ^^^^^^ help: consider: `131_084`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:378:34
    |
378 | pub const DAY_5: C2RustUnnamed = 131083;
    |                                  ^^^^^^ help: consider: `131_083`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:379:34
    |
379 | pub const DAY_4: C2RustUnnamed = 131082;
    |                                  ^^^^^^ help: consider: `131_082`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:380:34
    |
380 | pub const DAY_3: C2RustUnnamed = 131081;
    |                                  ^^^^^^ help: consider: `131_081`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:381:34
    |
381 | pub const DAY_2: C2RustUnnamed = 131080;
    |                                  ^^^^^^ help: consider: `131_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:382:34
    |
382 | pub const DAY_1: C2RustUnnamed = 131079;
    |                                  ^^^^^^ help: consider: `131_079`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:383:36
    |
383 | pub const ABDAY_7: C2RustUnnamed = 131078;
    |                                    ^^^^^^ help: consider: `131_078`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:384:36
    |
384 | pub const ABDAY_6: C2RustUnnamed = 131077;
    |                                    ^^^^^^ help: consider: `131_077`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:385:36
    |
385 | pub const ABDAY_5: C2RustUnnamed = 131076;
    |                                    ^^^^^^ help: consider: `131_076`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:386:36
    |
386 | pub const ABDAY_4: C2RustUnnamed = 131075;
    |                                    ^^^^^^ help: consider: `131_075`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:387:36
    |
387 | pub const ABDAY_3: C2RustUnnamed = 131074;
    |                                    ^^^^^^ help: consider: `131_074`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:388:36
    |
388 | pub const ABDAY_2: C2RustUnnamed = 131073;
    |                                    ^^^^^^ help: consider: `131_073`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:389:36
    |
389 | pub const ABDAY_1: C2RustUnnamed = 131072;
    |                                    ^^^^^^ help: consider: `131_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/mcel.rs:40:44
   |
40 | pub const MCEL_CHAR_MAX: C2RustUnnamed_1 = 1114111;
   |                                            ^^^^^^^ help: consider: `1_114_111`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/mcel.rs:125:9
    |
125 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int) != 0 {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(c1.err as libc::c_int - c2.err as libc::c_int) | (cmp == 0) as libc::c_int`
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: long literal lacking separators
  --> src/posixver.rs:14:31
   |
14 |     let mut v: libc::c_long = 200809;
   |                               ^^^^^^ help: consider: `200_809`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:20:23
   |
20 |     return (if v < (-(2147483647) - 1) {
   |                       ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:21:12
   |
21 |         (-(2147483647) - 1) as libc::c_long
   |            ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:22:19
   |
22 |     } else if v < 2147483647 {
   |                   ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:25:9
   |
25 |         2147483647
   |         ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:227:5
    |
227 |     o: Option<&mut quoting_options>,
    |     ^
228 |     c: char,
    |     ^
229 |     i: i32,
    |     ^
...
239 |     let p = &mut options.quote_these_too[index];
    |         ^
240 |     let r = (*p >> shift) & 1;
    |         ^
    |
    = note: `-W clippy::many-single-char-names` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: redundant else block
   --> src/quotearg.rs:328:12
    |
328 |       } else {
    |  ____________^
329 | |         return "'".to_string();
330 | |     }
    | |_____^
    |
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:346:13
    |
346 |     let mut i: size_t = 0;
    |             ^
...
477 |             let mut c: u8 = 0;
    |                     ^
...
816 |          let mut m: size_t = 0;
    |                  ^
...
835 |                         let mut w: char32_t = 0;
    |                                 ^
...
860 |                                     let mut j: size_t = 0;
    |                                             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: long literal lacking separators
   --> src/quotearg.rs:365:36
    |
365 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:368:36
    |
368 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:373:36
    |
373 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:403:36
    |
403 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:407:36
    |
407 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:410:36
    |
410 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:413:36
    |
413 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:416:36
    |
416 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:420:36
    |
420 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:427:13
    |
427 |             1283995450065962895 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:438:36
    |
438 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:440:13
    |
440 |             2694013637280298776 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:442:36
    |
442 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:447:13
    |
447 |             2266290538919981374 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:451:36
    |
451 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:456:13
    |
456 |             14141891332124833771 => {
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:471:29
    |
471 |         while if argsize == 18446744073709551615 as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:497:25
    |
497 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:509:25
    |
509 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:546:21
    |
546 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:548:21
    |
548 |     current_block = 13619784596304402172;
    |                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_619_784_596_304_402_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:550:21
    |
550 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:558:45
    |
558 | ...                   current_block = 17954593875197965021;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:560:33
    |
560 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:562:57
    |
562 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:582:69
    |
582 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:618:45
    |
618 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:621:45
    |
621 | ...                   current_block = 14514781131754033399;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_514_781_131_754_033_399`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:623:33
    |
623 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:625:57
    |
625 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:645:69
    |
645 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:681:45
    |
681 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:684:45
    |
684 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:691:25
    |
691 |         current_block = 1190876092451756080;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:695:25
    |
695 |         current_block = 1190876092451756080;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:699:25
    |
699 |         current_block = 1190876092451756080;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:703:25
    |
703 |         current_block = 9215498979640025612;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:707:25
    |
707 |         current_block = 9215498979640025612;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:711:25
    |
711 |         current_block = 9215498979640025612;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:715:25
    |
715 |         current_block = 1190876092451756080;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:721:25
    |
721 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:724:21
    |
724 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:726:21
    |
726 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:728:21
    |
728 |     current_block = 9215498979640025612;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:739:21
    |
739 |     current_block = 16442922512115311366;
    |                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:741:21
    |
741 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:747:25
    |
747 |         current_block = 16442922512115311366;
    |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:750:25
    |
750 |         current_block = 4634307283396172174;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:753:25
    |
753 |         current_block = 7549413860336125482;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:756:25
    |
756 |         current_block = 13059411171234995867;
    |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:759:25
    |
759 |         current_block = 16620298045565028098;
    |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:762:25
    |
762 |         current_block = 15155215915847730705;
    |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:770:25
    |
770 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:799:21
    |
799 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:801:21
    |
801 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:813:25
    |
813 |         current_block = 253337042034819032;
    |                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:832:39
    |
832 |                         if argsize == 18446744073709551615 as libc::c_ulong {
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:868:65
    |
868 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:893:33
    |
893 |                 current_block = 7928555609993211441;
    |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:953:21
    |
953 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:955:21
    |
955 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:963:5
    |
963 |     16442922512115311366 => {
    |     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:965:29
    |
965 |             current_block = 253337042034819032;
    |                             ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:967:29
    |
967 |             current_block = 4634307283396172174;
    |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:970:5
    |
970 |     9215498979640025612 => {
    |     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:972:29
    |
972 |             current_block = 7928555609993211441;
    |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:975:25
    |
975 |         current_block = 1190876092451756080;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:981:5
    |
981 |     1190876092451756080 => {
    |     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:984:29
    |
984 |             current_block = 3173013908131212616;
    |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:986:29
    |
986 |             current_block = 253337042034819032;
    |                             ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:989:5
    |
989 |     4634307283396172174 => {
    |     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:991:25
    |
991 |         current_block = 7549413860336125482;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:997:5
    |
997 |     7549413860336125482 => {
    |     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:998:25
    |
998 |         current_block = 13059411171234995867;
    |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1004:5
     |
1004 |     13059411171234995867 => {
     |     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1005:25
     |
1005 |         current_block = 16620298045565028098;
     |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1011:5
     |
1011 |     16620298045565028098 => {
     |     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1012:9
     |
1012 |         15155215915847730705
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1018:5
     |
1018 |     15155215915847730705 => {
     |     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1022:9
     |
1022 |         253337042034819032
     |         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1028:5
     |
1028 |     253337042034819032 => {
     |     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1033:13
     |
1033 |             4476262310586904498
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1035:13
     |
1035 |             3173013908131212616
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1042:5
     |
1042 |     3173013908131212616 => {
     |     ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1066:9
     |
1066 |         4476262310586904498
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1072:5
     |
1072 |     4476262310586904498 => {
     |     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1104:29
     |
1104 |             current_block = 7928555609993211441;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1111:29
     |
1111 |             current_block = 6412618891452676311;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/quotearg.rs:1126:8
     |
1126 |   } else {
     |  ________^
1127 | |     if !(buffersize == 0 && orig_buffersize != 0) {
1128 | |         current_block = 6412618891452676311;
1129 | |         break;
...    |
1132 | |     len = 0;
1133 | | }
     | |_^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/quotearg.rs:1128:25
     |
1128 |         current_block = 6412618891452676311;
     |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1137:9
     |
1137 |         7928555609993211441 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/quotearg.rs:1348:13
     |
1348 |     let mut qsize: size_t = quotearg_buffer_restyled(
     |             ^^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/quotearg.rs:1345:13
     |
1345 |     let mut size: size_t = (*sv.offset(n as isize)).size;
     |             ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/quotearg.rs:1312:44
     |
1312 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                            ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1313:11
     |
1313 |         < 9223372036854775807 as libc::c_long
     |           ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1315:9
     |
1315 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1317:9
     |
1317 |         9223372036854775807 as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1391:9
     |
1391 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1430:39
     |
1430 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1627:32
     |
1627 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |                                ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:39:12
   |
39 |       } else {
   |  ____________^
40 | |         let length: usize = unsafe { strlen(result) } as usize;
41 | |         if length < buf.len() {
42 | |             buf[..length].copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, length) });
...  |
52 | |         }
53 | |     }
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:45:16
   |
45 |           } else {
   |  ________________^
46 | |             if !buf.is_empty() {
47 | |                 let copy_length = buf.len() - 1;
48 | |                 buf.copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, copy_length) });
...  |
51 | |             return 34; // ERANGE
52 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/skipchars.rs:35:44
   |
35 | pub const MCEL_CHAR_MAX: C2RustUnnamed_1 = 1114111;
   |                                            ^^^^^^^ help: consider: `1_114_111`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:622:18
    |
622 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                  ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:268:10
    |
268 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |          ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:622:27
    |
622 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                           ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:268:18
    |
268 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |                  ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
   --> src/xmalloc.rs:271:13
    |
271 |         n = 9223372036854775807 as libc::c_long;
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:473:16
    |
473 |           } else {
    |  ________________^
474 | |             if s == 0 as libc::c_int as libc::c_long {
475 | |                 0 as libc::c_int
476 | |             } else {
...   |
587 | |             }
588 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
473 ~         } else if s == 0 as libc::c_int as libc::c_long {
474 +             0 as libc::c_int
475 +         } else {
476 +             if n < 0 as libc::c_int as libc::c_long {
477 +                 if (if (if ((if 1 as libc::c_int != 0 {
478 +                     0 as libc::c_int as libc::c_long
479 +                 } else {
480 +                     (if 1 as libc::c_int != 0 {
481 +                         0 as libc::c_int as libc::c_long
482 +                     } else {
483 +                         n
484 +                     }) + 0 as libc::c_int as idx_t
485 +                 }) - 1 as libc::c_int as libc::c_long)
486 +                     < 0 as libc::c_int as libc::c_long
487 +                 {
488 +                     !(((((if 1 as libc::c_int != 0 {
489 +                         0 as libc::c_int as libc::c_long
490 +                     } else {
491 +                         (if 1 as libc::c_int != 0 {
492 +                             0 as libc::c_int as libc::c_long
493 +                         } else {
494 +                             n
495 +                         }) + 0 as libc::c_int as idx_t
496 +                     }) + 1 as libc::c_int as libc::c_long)
497 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
498 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
499 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
500 +                         - 1 as libc::c_int as libc::c_long)
501 +                         * 2 as libc::c_int as libc::c_long
502 +                         + 1 as libc::c_int as libc::c_long)
503 +                 } else {
504 +                     (if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         (if 1 as libc::c_int != 0 {
508 +                             0 as libc::c_int as libc::c_long
509 +                         } else {
510 +                             n
511 +                         }) + 0 as libc::c_int as idx_t
512 +                     }) + 0 as libc::c_int as libc::c_long
513 +                 }) < 0 as libc::c_int as libc::c_long
514 +                 {
515 +                     (((if 1 as libc::c_int != 0 {
516 +                         0 as libc::c_int as libc::c_long
517 +                     } else {
518 +                         n
519 +                     }) + 0 as libc::c_int as idx_t)
520 +                         < -(if ((if 1 as libc::c_int != 0 {
521 +                             0 as libc::c_int as libc::c_long
522 +                         } else {
523 +                             (if 1 as libc::c_int != 0 {
524 +                                 0 as libc::c_int as libc::c_long
525 +                             } else {
526 +                                 n
527 +                             }) + 0 as libc::c_int as idx_t
528 +                         }) - 1 as libc::c_int as libc::c_long)
529 +                             < 0 as libc::c_int as libc::c_long
530 +                         {
531 +                             ((((if 1 as libc::c_int != 0 {
532 +                                 0 as libc::c_int as libc::c_long
533 +                             } else {
534 +                                 (if 1 as libc::c_int != 0 {
535 +                                     0 as libc::c_int as libc::c_long
536 +                                 } else {
537 +                                     n
538 +                                 }) + 0 as libc::c_int as idx_t
539 +                             }) + 1 as libc::c_int as libc::c_long)
540 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
541 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
542 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
543 +                                 - 1 as libc::c_int as libc::c_long)
544 +                                 * 2 as libc::c_int as libc::c_long
545 +                                 + 1 as libc::c_int as libc::c_long
546 +                         } else {
547 +                             (if 1 as libc::c_int != 0 {
548 +                                 0 as libc::c_int as libc::c_long
549 +                             } else {
550 +                                 (if 1 as libc::c_int != 0 {
551 +                                     0 as libc::c_int as libc::c_long
552 +                                 } else {
553 +                                     n
554 +                                 }) + 0 as libc::c_int as idx_t
555 +                             }) - 1 as libc::c_int as libc::c_long
556 +                         })) as libc::c_int
557 +                 } else {
558 +                     ((0 as libc::c_int as libc::c_long)
559 +                         < (if 1 as libc::c_int != 0 {
560 +                             0 as libc::c_int as libc::c_long
561 +                         } else {
562 +                             n
563 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
564 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
565 +                 {
566 +                     if ((if 1 as libc::c_int != 0 {
567 +                         0 as libc::c_int as libc::c_long
568 +                     } else {
569 +                         s
570 +                     }) - 1 as libc::c_int as libc::c_long)
571 +                         < 0 as libc::c_int as libc::c_long
572 +                     {
573 +                         ((0 as libc::c_int as libc::c_long)
574 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
575 +                     } else {
576 +                         ((-(1 as libc::c_int) as libc::c_long
577 +                             - 0 as libc::c_int as idx_t)
578 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
579 +                     }
580 +                 } else {
581 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
582 +                 }
583 +             } else {
584 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
585 +             }
586 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:365:20
    |
365 |               } else {
    |  ____________________^
366 | |                 if (if (if ((if 1 as libc::c_int != 0 {
367 | |                     0 as libc::c_int as libc::c_long
368 | |                 } else {
...   |
471 | |                 }
472 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
365 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
366 +                 0 as libc::c_int as libc::c_long
367 +             } else {
368 +                 (if 1 as libc::c_int != 0 {
369 +                     0 as libc::c_int as libc::c_long
370 +                 } else {
371 +                     s
372 +                 }) + 0 as libc::c_int as idx_t
373 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
374 +             {
375 +                 !(((((if 1 as libc::c_int != 0 {
376 +                     0 as libc::c_int as libc::c_long
377 +                 } else {
378 +                     (if 1 as libc::c_int != 0 {
379 +                         0 as libc::c_int as libc::c_long
380 +                     } else {
381 +                         s
382 +                     }) + 0 as libc::c_int as idx_t
383 +                 }) + 1 as libc::c_int as libc::c_long)
384 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
385 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
386 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
387 +                     - 1 as libc::c_int as libc::c_long)
388 +                     * 2 as libc::c_int as libc::c_long
389 +                     + 1 as libc::c_int as libc::c_long)
390 +             } else {
391 +                 (if 1 as libc::c_int != 0 {
392 +                     0 as libc::c_int as libc::c_long
393 +                 } else {
394 +                     (if 1 as libc::c_int != 0 {
395 +                         0 as libc::c_int as libc::c_long
396 +                     } else {
397 +                         s
398 +                     }) + 0 as libc::c_int as idx_t
399 +                 }) + 0 as libc::c_int as libc::c_long
400 +             }) < 0 as libc::c_int as libc::c_long
401 +             {
402 +                 (((if 1 as libc::c_int != 0 {
403 +                     0 as libc::c_int as libc::c_long
404 +                 } else {
405 +                     s
406 +                 }) + 0 as libc::c_int as idx_t)
407 +                     < -(if ((if 1 as libc::c_int != 0 {
408 +                         0 as libc::c_int as libc::c_long
409 +                     } else {
410 +                         (if 1 as libc::c_int != 0 {
411 +                             0 as libc::c_int as libc::c_long
412 +                         } else {
413 +                             s
414 +                         }) + 0 as libc::c_int as idx_t
415 +                     }) - 1 as libc::c_int as libc::c_long)
416 +                         < 0 as libc::c_int as libc::c_long
417 +                     {
418 +                         ((((if 1 as libc::c_int != 0 {
419 +                             0 as libc::c_int as libc::c_long
420 +                         } else {
421 +                             (if 1 as libc::c_int != 0 {
422 +                                 0 as libc::c_int as libc::c_long
423 +                             } else {
424 +                                 s
425 +                             }) + 0 as libc::c_int as idx_t
426 +                         }) + 1 as libc::c_int as libc::c_long)
427 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
428 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
429 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
430 +                             - 1 as libc::c_int as libc::c_long)
431 +                             * 2 as libc::c_int as libc::c_long
432 +                             + 1 as libc::c_int as libc::c_long
433 +                     } else {
434 +                         (if 1 as libc::c_int != 0 {
435 +                             0 as libc::c_int as libc::c_long
436 +                         } else {
437 +                             (if 1 as libc::c_int != 0 {
438 +                                 0 as libc::c_int as libc::c_long
439 +                             } else {
440 +                                 s
441 +                             }) + 0 as libc::c_int as idx_t
442 +                         }) - 1 as libc::c_int as libc::c_long
443 +                     })) as libc::c_int
444 +             } else {
445 +                 ((0 as libc::c_int as libc::c_long)
446 +                     < (if 1 as libc::c_int != 0 {
447 +                         0 as libc::c_int as libc::c_long
448 +                     } else {
449 +                         s
450 +                     }) + 0 as libc::c_int as idx_t) as libc::c_int
451 +             }) != 0 && s == -(1 as libc::c_int) as libc::c_long
452 +             {
453 +                 if ((if 1 as libc::c_int != 0 {
454 +                     0 as libc::c_int as libc::c_long
455 +                 } else {
456 +                     n
457 +                 }) - 1 as libc::c_int as libc::c_long)
458 +                     < 0 as libc::c_int as libc::c_long
459 +                 {
460 +                     ((0 as libc::c_int as libc::c_long)
461 +                         < n + 0 as libc::c_int as idx_t) as libc::c_int
462 +                 } else {
463 +                     ((0 as libc::c_int as libc::c_long) < n
464 +                         && (-(1 as libc::c_int) as libc::c_long
465 +                             - 0 as libc::c_int as idx_t)
466 +                             < n - 1 as libc::c_int as libc::c_long) as libc::c_int
467 +                 }
468 +             } else {
469 +                 (0 as libc::c_int as idx_t / s < n) as libc::c_int
470 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:353:25
    |
353 | /                         (if 1 as libc::c_int != 0 {
354 | |                             0 as libc::c_int as libc::c_long
355 | |                         } else {
356 | |                             s
...   |
359 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
360 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
353 ~                         ((if 1 as libc::c_int != 0 {
354 +                             0 as libc::c_int as libc::c_long
355 +                         } else {
356 +                             s
357 +                         }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
358 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
359 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:476:20
    |
476 |               } else {
    |  ____________________^
477 | |                 if n < 0 as libc::c_int as libc::c_long {
478 | |                     if (if (if ((if 1 as libc::c_int != 0 {
479 | |                         0 as libc::c_int as libc::c_long
...   |
586 | |                 }
587 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
476 ~             } else if n < 0 as libc::c_int as libc::c_long {
477 +                 if (if (if ((if 1 as libc::c_int != 0 {
478 +                     0 as libc::c_int as libc::c_long
479 +                 } else {
480 +                     (if 1 as libc::c_int != 0 {
481 +                         0 as libc::c_int as libc::c_long
482 +                     } else {
483 +                         n
484 +                     }) + 0 as libc::c_int as idx_t
485 +                 }) - 1 as libc::c_int as libc::c_long)
486 +                     < 0 as libc::c_int as libc::c_long
487 +                 {
488 +                     !(((((if 1 as libc::c_int != 0 {
489 +                         0 as libc::c_int as libc::c_long
490 +                     } else {
491 +                         (if 1 as libc::c_int != 0 {
492 +                             0 as libc::c_int as libc::c_long
493 +                         } else {
494 +                             n
495 +                         }) + 0 as libc::c_int as idx_t
496 +                     }) + 1 as libc::c_int as libc::c_long)
497 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
498 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
499 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
500 +                         - 1 as libc::c_int as libc::c_long)
501 +                         * 2 as libc::c_int as libc::c_long
502 +                         + 1 as libc::c_int as libc::c_long)
503 +                 } else {
504 +                     (if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         (if 1 as libc::c_int != 0 {
508 +                             0 as libc::c_int as libc::c_long
509 +                         } else {
510 +                             n
511 +                         }) + 0 as libc::c_int as idx_t
512 +                     }) + 0 as libc::c_int as libc::c_long
513 +                 }) < 0 as libc::c_int as libc::c_long
514 +                 {
515 +                     (((if 1 as libc::c_int != 0 {
516 +                         0 as libc::c_int as libc::c_long
517 +                     } else {
518 +                         n
519 +                     }) + 0 as libc::c_int as idx_t)
520 +                         < -(if ((if 1 as libc::c_int != 0 {
521 +                             0 as libc::c_int as libc::c_long
522 +                         } else {
523 +                             (if 1 as libc::c_int != 0 {
524 +                                 0 as libc::c_int as libc::c_long
525 +                             } else {
526 +                                 n
527 +                             }) + 0 as libc::c_int as idx_t
528 +                         }) - 1 as libc::c_int as libc::c_long)
529 +                             < 0 as libc::c_int as libc::c_long
530 +                         {
531 +                             ((((if 1 as libc::c_int != 0 {
532 +                                 0 as libc::c_int as libc::c_long
533 +                             } else {
534 +                                 (if 1 as libc::c_int != 0 {
535 +                                     0 as libc::c_int as libc::c_long
536 +                                 } else {
537 +                                     n
538 +                                 }) + 0 as libc::c_int as idx_t
539 +                             }) + 1 as libc::c_int as libc::c_long)
540 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
541 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
542 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
543 +                                 - 1 as libc::c_int as libc::c_long)
544 +                                 * 2 as libc::c_int as libc::c_long
545 +                                 + 1 as libc::c_int as libc::c_long
546 +                         } else {
547 +                             (if 1 as libc::c_int != 0 {
548 +                                 0 as libc::c_int as libc::c_long
549 +                             } else {
550 +                                 (if 1 as libc::c_int != 0 {
551 +                                     0 as libc::c_int as libc::c_long
552 +                                 } else {
553 +                                     n
554 +                                 }) + 0 as libc::c_int as idx_t
555 +                             }) - 1 as libc::c_int as libc::c_long
556 +                         })) as libc::c_int
557 +                 } else {
558 +                     ((0 as libc::c_int as libc::c_long)
559 +                         < (if 1 as libc::c_int != 0 {
560 +                             0 as libc::c_int as libc::c_long
561 +                         } else {
562 +                             n
563 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
564 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
565 +                 {
566 +                     if ((if 1 as libc::c_int != 0 {
567 +                         0 as libc::c_int as libc::c_long
568 +                     } else {
569 +                         s
570 +                     }) - 1 as libc::c_int as libc::c_long)
571 +                         < 0 as libc::c_int as libc::c_long
572 +                     {
573 +                         ((0 as libc::c_int as libc::c_long)
574 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
575 +                     } else {
576 +                         ((-(1 as libc::c_int) as libc::c_long
577 +                             - 0 as libc::c_int as idx_t)
578 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
579 +                     }
580 +                 } else {
581 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
582 +                 }
583 +             } else {
584 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
585 +             }
    |

warning: long literal lacking separators
   --> src/xmalloc.rs:599:13
    |
599 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:600:15
    |
600 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:602:13
    |
602 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:604:13
    |
604 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:832:28
    |
832 |                       } else {
    |  ____________________________^
833 | |                         if s == 0 as libc::c_int as libc::c_long {
834 | |                             0 as libc::c_int
835 | |                         } else {
...   |
946 | |                         }
947 | |                     }) != 0
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
832 ~                     } else if s == 0 as libc::c_int as libc::c_long {
833 +                         0 as libc::c_int
834 +                     } else {
835 +                         if n < 0 as libc::c_int as libc::c_long {
836 +                             if (if (if ((if 1 as libc::c_int != 0 {
837 +                                 0 as libc::c_int as libc::c_long
838 +                             } else {
839 +                                 (if 1 as libc::c_int != 0 {
840 +                                     0 as libc::c_int as libc::c_long
841 +                                 } else {
842 +                                     n
843 +                                 }) + 0 as libc::c_int as idx_t
844 +                             }) - 1 as libc::c_int as libc::c_long)
845 +                                 < 0 as libc::c_int as libc::c_long
846 +                             {
847 +                                 !(((((if 1 as libc::c_int != 0 {
848 +                                     0 as libc::c_int as libc::c_long
849 +                                 } else {
850 +                                     (if 1 as libc::c_int != 0 {
851 +                                         0 as libc::c_int as libc::c_long
852 +                                     } else {
853 +                                         n
854 +                                     }) + 0 as libc::c_int as idx_t
855 +                                 }) + 1 as libc::c_int as libc::c_long)
856 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
857 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
858 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
859 +                                     - 1 as libc::c_int as libc::c_long)
860 +                                     * 2 as libc::c_int as libc::c_long
861 +                                     + 1 as libc::c_int as libc::c_long)
862 +                             } else {
863 +                                 (if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     (if 1 as libc::c_int != 0 {
867 +                                         0 as libc::c_int as libc::c_long
868 +                                     } else {
869 +                                         n
870 +                                     }) + 0 as libc::c_int as idx_t
871 +                                 }) + 0 as libc::c_int as libc::c_long
872 +                             }) < 0 as libc::c_int as libc::c_long
873 +                             {
874 +                                 (((if 1 as libc::c_int != 0 {
875 +                                     0 as libc::c_int as libc::c_long
876 +                                 } else {
877 +                                     n
878 +                                 }) + 0 as libc::c_int as idx_t)
879 +                                     < -(if ((if 1 as libc::c_int != 0 {
880 +                                         0 as libc::c_int as libc::c_long
881 +                                     } else {
882 +                                         (if 1 as libc::c_int != 0 {
883 +                                             0 as libc::c_int as libc::c_long
884 +                                         } else {
885 +                                             n
886 +                                         }) + 0 as libc::c_int as idx_t
887 +                                     }) - 1 as libc::c_int as libc::c_long)
888 +                                         < 0 as libc::c_int as libc::c_long
889 +                                     {
890 +                                         ((((if 1 as libc::c_int != 0 {
891 +                                             0 as libc::c_int as libc::c_long
892 +                                         } else {
893 +                                             (if 1 as libc::c_int != 0 {
894 +                                                 0 as libc::c_int as libc::c_long
895 +                                             } else {
896 +                                                 n
897 +                                             }) + 0 as libc::c_int as idx_t
898 +                                         }) + 1 as libc::c_int as libc::c_long)
899 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
900 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
901 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
902 +                                             - 1 as libc::c_int as libc::c_long)
903 +                                             * 2 as libc::c_int as libc::c_long
904 +                                             + 1 as libc::c_int as libc::c_long
905 +                                     } else {
906 +                                         (if 1 as libc::c_int != 0 {
907 +                                             0 as libc::c_int as libc::c_long
908 +                                         } else {
909 +                                             (if 1 as libc::c_int != 0 {
910 +                                                 0 as libc::c_int as libc::c_long
911 +                                             } else {
912 +                                                 n
913 +                                             }) + 0 as libc::c_int as idx_t
914 +                                         }) - 1 as libc::c_int as libc::c_long
915 +                                     })) as libc::c_int
916 +                             } else {
917 +                                 ((0 as libc::c_int as libc::c_long)
918 +                                     < (if 1 as libc::c_int != 0 {
919 +                                         0 as libc::c_int as libc::c_long
920 +                                     } else {
921 +                                         n
922 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
923 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
924 +                             {
925 +                                 if ((if 1 as libc::c_int != 0 {
926 +                                     0 as libc::c_int as libc::c_long
927 +                                 } else {
928 +                                     s
929 +                                 }) - 1 as libc::c_int as libc::c_long)
930 +                                     < 0 as libc::c_int as libc::c_long
931 +                                 {
932 +                                     ((0 as libc::c_int as libc::c_long)
933 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
934 +                                 } else {
935 +                                     ((-(1 as libc::c_int) as libc::c_long
936 +                                         - 0 as libc::c_int as idx_t)
937 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
938 +                                 }
939 +                             } else {
940 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
941 +                             }
942 +                         } else {
943 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
944 +                         }
945 ~                     }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:723:32
    |
723 |                           } else {
    |  ________________________________^
724 | |                             if (if (if ((if 1 as libc::c_int != 0 {
725 | |                                 0 as libc::c_int as libc::c_long
726 | |                             } else {
...   |
830 | |                             }
831 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
723 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
724 +                             0 as libc::c_int as libc::c_long
725 +                         } else {
726 +                             (if 1 as libc::c_int != 0 {
727 +                                 0 as libc::c_int as libc::c_long
728 +                             } else {
729 +                                 s
730 +                             }) + 0 as libc::c_int as idx_t
731 +                         }) - 1 as libc::c_int as libc::c_long)
732 +                             < 0 as libc::c_int as libc::c_long
733 +                         {
734 +                             !(((((if 1 as libc::c_int != 0 {
735 +                                 0 as libc::c_int as libc::c_long
736 +                             } else {
737 +                                 (if 1 as libc::c_int != 0 {
738 +                                     0 as libc::c_int as libc::c_long
739 +                                 } else {
740 +                                     s
741 +                                 }) + 0 as libc::c_int as idx_t
742 +                             }) + 1 as libc::c_int as libc::c_long)
743 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
744 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
745 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
746 +                                 - 1 as libc::c_int as libc::c_long)
747 +                                 * 2 as libc::c_int as libc::c_long
748 +                                 + 1 as libc::c_int as libc::c_long)
749 +                         } else {
750 +                             (if 1 as libc::c_int != 0 {
751 +                                 0 as libc::c_int as libc::c_long
752 +                             } else {
753 +                                 (if 1 as libc::c_int != 0 {
754 +                                     0 as libc::c_int as libc::c_long
755 +                                 } else {
756 +                                     s
757 +                                 }) + 0 as libc::c_int as idx_t
758 +                             }) + 0 as libc::c_int as libc::c_long
759 +                         }) < 0 as libc::c_int as libc::c_long
760 +                         {
761 +                             (((if 1 as libc::c_int != 0 {
762 +                                 0 as libc::c_int as libc::c_long
763 +                             } else {
764 +                                 s
765 +                             }) + 0 as libc::c_int as idx_t)
766 +                                 < -(if ((if 1 as libc::c_int != 0 {
767 +                                     0 as libc::c_int as libc::c_long
768 +                                 } else {
769 +                                     (if 1 as libc::c_int != 0 {
770 +                                         0 as libc::c_int as libc::c_long
771 +                                     } else {
772 +                                         s
773 +                                     }) + 0 as libc::c_int as idx_t
774 +                                 }) - 1 as libc::c_int as libc::c_long)
775 +                                     < 0 as libc::c_int as libc::c_long
776 +                                 {
777 +                                     ((((if 1 as libc::c_int != 0 {
778 +                                         0 as libc::c_int as libc::c_long
779 +                                     } else {
780 +                                         (if 1 as libc::c_int != 0 {
781 +                                             0 as libc::c_int as libc::c_long
782 +                                         } else {
783 +                                             s
784 +                                         }) + 0 as libc::c_int as idx_t
785 +                                     }) + 1 as libc::c_int as libc::c_long)
786 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
787 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
788 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
789 +                                         - 1 as libc::c_int as libc::c_long)
790 +                                         * 2 as libc::c_int as libc::c_long
791 +                                         + 1 as libc::c_int as libc::c_long
792 +                                 } else {
793 +                                     (if 1 as libc::c_int != 0 {
794 +                                         0 as libc::c_int as libc::c_long
795 +                                     } else {
796 +                                         (if 1 as libc::c_int != 0 {
797 +                                             0 as libc::c_int as libc::c_long
798 +                                         } else {
799 +                                             s
800 +                                         }) + 0 as libc::c_int as idx_t
801 +                                     }) - 1 as libc::c_int as libc::c_long
802 +                                 })) as libc::c_int
803 +                         } else {
804 +                             ((0 as libc::c_int as libc::c_long)
805 +                                 < (if 1 as libc::c_int != 0 {
806 +                                     0 as libc::c_int as libc::c_long
807 +                                 } else {
808 +                                     s
809 +                                 }) + 0 as libc::c_int as idx_t) as libc::c_int
810 +                         }) != 0 && s == -(1 as libc::c_int) as libc::c_long
811 +                         {
812 +                             if ((if 1 as libc::c_int != 0 {
813 +                                 0 as libc::c_int as libc::c_long
814 +                             } else {
815 +                                 n
816 +                             }) - 1 as libc::c_int as libc::c_long)
817 +                                 < 0 as libc::c_int as libc::c_long
818 +                             {
819 +                                 ((0 as libc::c_int as libc::c_long)
820 +                                     < n + 0 as libc::c_int as idx_t) as libc::c_int
821 +                             } else {
822 +                                 ((0 as libc::c_int as libc::c_long) < n
823 +                                     && (-(1 as libc::c_int) as libc::c_long
824 +                                         - 0 as libc::c_int as idx_t)
825 +                                         < n - 1 as libc::c_int as libc::c_long) as libc::c_int
826 +                             }
827 +                         } else {
828 +                             (0 as libc::c_int as idx_t / s < n) as libc::c_int
829 +                         }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:710:37
    |
710 | / ...                   (if 1 as libc::c_int != 0 {
711 | | ...                       0 as libc::c_int as libc::c_long
712 | | ...                   } else {
713 | | ...                       s
...   |
716 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
717 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
710 ~                                     ((if 1 as libc::c_int != 0 {
711 +                                         0 as libc::c_int as libc::c_long
712 +                                     } else {
713 +                                         s
714 +                                     }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
715 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
716 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:835:32
    |
835 |                           } else {
    |  ________________________________^
836 | |                             if n < 0 as libc::c_int as libc::c_long {
837 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
838 | |                                     0 as libc::c_int as libc::c_long
...   |
945 | |                             }
946 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
835 ~                         } else if n < 0 as libc::c_int as libc::c_long {
836 +                             if (if (if ((if 1 as libc::c_int != 0 {
837 +                                 0 as libc::c_int as libc::c_long
838 +                             } else {
839 +                                 (if 1 as libc::c_int != 0 {
840 +                                     0 as libc::c_int as libc::c_long
841 +                                 } else {
842 +                                     n
843 +                                 }) + 0 as libc::c_int as idx_t
844 +                             }) - 1 as libc::c_int as libc::c_long)
845 +                                 < 0 as libc::c_int as libc::c_long
846 +                             {
847 +                                 !(((((if 1 as libc::c_int != 0 {
848 +                                     0 as libc::c_int as libc::c_long
849 +                                 } else {
850 +                                     (if 1 as libc::c_int != 0 {
851 +                                         0 as libc::c_int as libc::c_long
852 +                                     } else {
853 +                                         n
854 +                                     }) + 0 as libc::c_int as idx_t
855 +                                 }) + 1 as libc::c_int as libc::c_long)
856 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
857 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
858 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
859 +                                     - 1 as libc::c_int as libc::c_long)
860 +                                     * 2 as libc::c_int as libc::c_long
861 +                                     + 1 as libc::c_int as libc::c_long)
862 +                             } else {
863 +                                 (if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     (if 1 as libc::c_int != 0 {
867 +                                         0 as libc::c_int as libc::c_long
868 +                                     } else {
869 +                                         n
870 +                                     }) + 0 as libc::c_int as idx_t
871 +                                 }) + 0 as libc::c_int as libc::c_long
872 +                             }) < 0 as libc::c_int as libc::c_long
873 +                             {
874 +                                 (((if 1 as libc::c_int != 0 {
875 +                                     0 as libc::c_int as libc::c_long
876 +                                 } else {
877 +                                     n
878 +                                 }) + 0 as libc::c_int as idx_t)
879 +                                     < -(if ((if 1 as libc::c_int != 0 {
880 +                                         0 as libc::c_int as libc::c_long
881 +                                     } else {
882 +                                         (if 1 as libc::c_int != 0 {
883 +                                             0 as libc::c_int as libc::c_long
884 +                                         } else {
885 +                                             n
886 +                                         }) + 0 as libc::c_int as idx_t
887 +                                     }) - 1 as libc::c_int as libc::c_long)
888 +                                         < 0 as libc::c_int as libc::c_long
889 +                                     {
890 +                                         ((((if 1 as libc::c_int != 0 {
891 +                                             0 as libc::c_int as libc::c_long
892 +                                         } else {
893 +                                             (if 1 as libc::c_int != 0 {
894 +                                                 0 as libc::c_int as libc::c_long
895 +                                             } else {
896 +                                                 n
897 +                                             }) + 0 as libc::c_int as idx_t
898 +                                         }) + 1 as libc::c_int as libc::c_long)
899 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
900 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
901 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
902 +                                             - 1 as libc::c_int as libc::c_long)
903 +                                             * 2 as libc::c_int as libc::c_long
904 +                                             + 1 as libc::c_int as libc::c_long
905 +                                     } else {
906 +                                         (if 1 as libc::c_int != 0 {
907 +                                             0 as libc::c_int as libc::c_long
908 +                                         } else {
909 +                                             (if 1 as libc::c_int != 0 {
910 +                                                 0 as libc::c_int as libc::c_long
911 +                                             } else {
912 +                                                 n
913 +                                             }) + 0 as libc::c_int as idx_t
914 +                                         }) - 1 as libc::c_int as libc::c_long
915 +                                     })) as libc::c_int
916 +                             } else {
917 +                                 ((0 as libc::c_int as libc::c_long)
918 +                                     < (if 1 as libc::c_int != 0 {
919 +                                         0 as libc::c_int as libc::c_long
920 +                                     } else {
921 +                                         n
922 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
923 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
924 +                             {
925 +                                 if ((if 1 as libc::c_int != 0 {
926 +                                     0 as libc::c_int as libc::c_long
927 +                                 } else {
928 +                                     s
929 +                                 }) - 1 as libc::c_int as libc::c_long)
930 +                                     < 0 as libc::c_int as libc::c_long
931 +                                 {
932 +                                     ((0 as libc::c_int as libc::c_long)
933 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
934 +                                 } else {
935 +                                     ((-(1 as libc::c_int) as libc::c_long
936 +                                         - 0 as libc::c_int as idx_t)
937 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
938 +                                 }
939 +                             } else {
940 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
941 +                             }
942 +                         } else {
943 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
944 +                         }
    |

warning: redundant else block
   --> src/xstrtoimax.rs:361:8
    |
361 |   } else {
    |  ________^
362 | |     let (result, overflowed) = (*x).overflowing_mul(scale_factor as i64);
363 | |     scaled = result;
364 | |     if overflowed {
365 | |         return 1;
366 | |     }
367 | | }
    | |_^
    |
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:237:12
    |
237 |       } else {
    |  ____________^
238 | |          if scale_factor == 0 as libc::c_int {
239 | |                 0 as libc::c_int
240 | |             } else {
...   |
355 | |         
356 | |     }) != 0
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
237 ~     } else if scale_factor == 0 as libc::c_int {
238 +         0 as libc::c_int
239 +     } else {
240 +         if *x < 0 as libc::c_int as libc::c_long {
241 +             if (if (if ((if 1 as libc::c_int != 0 {
242 +                 0 as libc::c_int as libc::c_long
243 +             } else {
244 +                 (if 1 as libc::c_int != 0 {
245 +                     0 as libc::c_int as libc::c_long
246 +                 } else {
247 +                     *x
248 +                 }) + 0 as libc::c_int as intmax_t
249 +             }) - 1 as libc::c_int as libc::c_long)
250 +                 < 0 as libc::c_int as libc::c_long
251 +             {
252 +                 !(((((if 1 as libc::c_int != 0 {
253 +                     0 as libc::c_int as libc::c_long
254 +                 } else {
255 +                     (if 1 as libc::c_int != 0 {
256 +                         0 as libc::c_int as libc::c_long
257 +                     } else {
258 +                         *x
259 +                     }) + 0 as libc::c_int as intmax_t
260 +                 }) + 1 as libc::c_int as libc::c_long)
261 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
262 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
263 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
264 +                     - 1 as libc::c_int as libc::c_long)
265 +                     * 2 as libc::c_int as libc::c_long
266 +                     + 1 as libc::c_int as libc::c_long)
267 +             } else {
268 +                 (if 1 as libc::c_int != 0 {
269 +                     0 as libc::c_int as libc::c_long
270 +                 } else {
271 +                     (if 1 as libc::c_int != 0 {
272 +                         0 as libc::c_int as libc::c_long
273 +                     } else {
274 +                         *x
275 +                     }) + 0 as libc::c_int as intmax_t
276 +                 }) + 0 as libc::c_int as libc::c_long
277 +             }) < 0 as libc::c_int as libc::c_long
278 +             {
279 +                 (((if 1 as libc::c_int != 0 {
280 +                     0 as libc::c_int as libc::c_long
281 +                 } else {
282 +                     *x
283 +                 }) + 0 as libc::c_int as intmax_t)
284 +                     < -(if ((if 1 as libc::c_int != 0 {
285 +                         0 as libc::c_int as libc::c_long
286 +                     } else {
287 +                         (if 1 as libc::c_int != 0 {
288 +                             0 as libc::c_int as libc::c_long
289 +                         } else {
290 +                             *x
291 +                         }) + 0 as libc::c_int as intmax_t
292 +                     }) - 1 as libc::c_int as libc::c_long)
293 +                         < 0 as libc::c_int as libc::c_long
294 +                     {
295 +                         ((((if 1 as libc::c_int != 0 {
296 +                             0 as libc::c_int as libc::c_long
297 +                         } else {
298 +                             (if 1 as libc::c_int != 0 {
299 +                                 0 as libc::c_int as libc::c_long
300 +                             } else {
301 +                                 *x
302 +                             }) + 0 as libc::c_int as intmax_t
303 +                         }) + 1 as libc::c_int as libc::c_long)
304 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
305 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
306 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
307 +                             - 1 as libc::c_int as libc::c_long)
308 +                             * 2 as libc::c_int as libc::c_long
309 +                             + 1 as libc::c_int as libc::c_long
310 +                     } else {
311 +                         (if 1 as libc::c_int != 0 {
312 +                             0 as libc::c_int as libc::c_long
313 +                         } else {
314 +                             (if 1 as libc::c_int != 0 {
315 +                                 0 as libc::c_int as libc::c_long
316 +                             } else {
317 +                                 *x
318 +                             }) + 0 as libc::c_int as intmax_t
319 +                         }) - 1 as libc::c_int as libc::c_long
320 +                     })) as libc::c_int
321 +             } else {
322 +                 ((0 as libc::c_int as libc::c_long)
323 +                     < (if 1 as libc::c_int != 0 {
324 +                         0 as libc::c_int as libc::c_long
325 +                     } else {
326 +                         *x
327 +                     }) + 0 as libc::c_int as intmax_t) as libc::c_int
328 +             }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
329 +             {
330 +                 if ((if 1 as libc::c_int != 0 {
331 +                     0 as libc::c_int
332 +                 } else {
333 +                     scale_factor
334 +                 }) - 1 as libc::c_int) < 0 as libc::c_int
335 +                 {
336 +                     ((0 as libc::c_int as libc::c_long)
337 +                         < scale_factor as libc::c_long
338 +                             + 0 as libc::c_int as intmax_t) as libc::c_int
339 +                 } else {
340 +                     ((-(1 as libc::c_int) as libc::c_long
341 +                         - 0 as libc::c_int as intmax_t)
342 +                         < (scale_factor - 1 as libc::c_int) as libc::c_long)
343 +                         as libc::c_int
344 +                 }
345 +             } else {
346 +                 (0 as libc::c_int as intmax_t / *x
347 +                     < scale_factor as libc::c_long) as libc::c_int
348 +             }
349 +         } else {
350 +             ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
351 +                 < *x) as libc::c_int
352 +         }
353 ~     }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:130:16
    |
130 |           } else {
    |  ________________^
131 | |              if (if (if ((if 1 as libc::c_int != 0 {
132 | |                     0 as libc::c_int as libc::c_long
133 | |                 } else {
...   |
235 | |             
236 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
130 ~         } else if (if (if ((if 1 as libc::c_int != 0 {
131 +             0 as libc::c_int as libc::c_long
132 +         } else {
133 +             (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
134 +                 as libc::c_long + 0 as libc::c_int as intmax_t
135 +         }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
136 +         {
137 +             !(((((if 1 as libc::c_int != 0 {
138 +                 0 as libc::c_int as libc::c_long
139 +             } else {
140 +                 (if 1 as libc::c_int != 0 {
141 +                     0 as libc::c_int
142 +                 } else {
143 +                     scale_factor
144 +                 }) as libc::c_long + 0 as libc::c_int as intmax_t
145 +             }) + 1 as libc::c_int as libc::c_long)
146 +                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
147 +                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
148 +                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
149 +                 - 1 as libc::c_int as libc::c_long)
150 +                 * 2 as libc::c_int as libc::c_long
151 +                 + 1 as libc::c_int as libc::c_long)
152 +         } else {
153 +             (if 1 as libc::c_int != 0 {
154 +                 0 as libc::c_int as libc::c_long
155 +             } else {
156 +                 (if 1 as libc::c_int != 0 {
157 +                     0 as libc::c_int
158 +                 } else {
159 +                     scale_factor
160 +                 }) as libc::c_long + 0 as libc::c_int as intmax_t
161 +             }) + 0 as libc::c_int as libc::c_long
162 +         }) < 0 as libc::c_int as libc::c_long
163 +         {
164 +             (((if 1 as libc::c_int != 0 {
165 +                 0 as libc::c_int
166 +             } else {
167 +                 scale_factor
168 +             }) as libc::c_long + 0 as libc::c_int as intmax_t)
169 +                 < -(if ((if 1 as libc::c_int != 0 {
170 +                     0 as libc::c_int as libc::c_long
171 +                 } else {
172 +                     (if 1 as libc::c_int != 0 {
173 +                         0 as libc::c_int
174 +                     } else {
175 +                         scale_factor
176 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t
177 +                 }) - 1 as libc::c_int as libc::c_long)
178 +                     < 0 as libc::c_int as libc::c_long
179 +                 {
180 +                     ((((if 1 as libc::c_int != 0 {
181 +                         0 as libc::c_int as libc::c_long
182 +                     } else {
183 +                         (if 1 as libc::c_int != 0 {
184 +                             0 as libc::c_int
185 +                         } else {
186 +                             scale_factor
187 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t
188 +                     }) + 1 as libc::c_int as libc::c_long)
189 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
190 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
191 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
192 +                         - 1 as libc::c_int as libc::c_long)
193 +                         * 2 as libc::c_int as libc::c_long
194 +                         + 1 as libc::c_int as libc::c_long
195 +                 } else {
196 +                     (if 1 as libc::c_int != 0 {
197 +                         0 as libc::c_int as libc::c_long
198 +                     } else {
199 +                         (if 1 as libc::c_int != 0 {
200 +                             0 as libc::c_int
201 +                         } else {
202 +                             scale_factor
203 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t
204 +                     }) - 1 as libc::c_int as libc::c_long
205 +                 })) as libc::c_int
206 +         } else {
207 +             ((0 as libc::c_int as libc::c_long)
208 +                 < (if 1 as libc::c_int != 0 {
209 +                     0 as libc::c_int
210 +                 } else {
211 +                     scale_factor
212 +                 }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
213 +         }) != 0 && scale_factor == -(1 as libc::c_int)
214 +         {
215 +             if ((if 1 as libc::c_int != 0 {
216 +                 0 as libc::c_int as libc::c_long
217 +             } else {
218 +                 *x
219 +             }) - 1 as libc::c_int as libc::c_long)
220 +                 < 0 as libc::c_int as libc::c_long
221 +             {
222 +                 ((0 as libc::c_int as libc::c_long)
223 +                     < *x + 0 as libc::c_int as intmax_t) as libc::c_int
224 +             } else {
225 +                 ((0 as libc::c_int as libc::c_long) < *x
226 +                     && (-(1 as libc::c_int) as libc::c_long
227 +                         - 0 as libc::c_int as intmax_t)
228 +                         < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
229 +             }
230 +         } else {
231 +             ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
232 +                 as libc::c_int
233 +         }
    |

warning: operator precedence can trip the unwary
   --> src/xstrtoimax.rs:117:25
    |
117 | /                         (if 1 as libc::c_int != 0 {
118 | |                             0 as libc::c_int
119 | |                         } else {
120 | |                             scale_factor
...   |
123 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
124 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
117 ~                         ((if 1 as libc::c_int != 0 {
118 +                             0 as libc::c_int
119 +                         } else {
120 +                             scale_factor
121 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
122 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
123 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:240:20
    |
240 |               } else {
    |  ____________________^
241 | |                 if *x < 0 as libc::c_int as libc::c_long {
242 | |                     if (if (if ((if 1 as libc::c_int != 0 {
243 | |                         0 as libc::c_int as libc::c_long
...   |
353 | |                 }
354 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
240 ~             } else if *x < 0 as libc::c_int as libc::c_long {
241 +                 if (if (if ((if 1 as libc::c_int != 0 {
242 +                     0 as libc::c_int as libc::c_long
243 +                 } else {
244 +                     (if 1 as libc::c_int != 0 {
245 +                         0 as libc::c_int as libc::c_long
246 +                     } else {
247 +                         *x
248 +                     }) + 0 as libc::c_int as intmax_t
249 +                 }) - 1 as libc::c_int as libc::c_long)
250 +                     < 0 as libc::c_int as libc::c_long
251 +                 {
252 +                     !(((((if 1 as libc::c_int != 0 {
253 +                         0 as libc::c_int as libc::c_long
254 +                     } else {
255 +                         (if 1 as libc::c_int != 0 {
256 +                             0 as libc::c_int as libc::c_long
257 +                         } else {
258 +                             *x
259 +                         }) + 0 as libc::c_int as intmax_t
260 +                     }) + 1 as libc::c_int as libc::c_long)
261 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
262 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
263 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
264 +                         - 1 as libc::c_int as libc::c_long)
265 +                         * 2 as libc::c_int as libc::c_long
266 +                         + 1 as libc::c_int as libc::c_long)
267 +                 } else {
268 +                     (if 1 as libc::c_int != 0 {
269 +                         0 as libc::c_int as libc::c_long
270 +                     } else {
271 +                         (if 1 as libc::c_int != 0 {
272 +                             0 as libc::c_int as libc::c_long
273 +                         } else {
274 +                             *x
275 +                         }) + 0 as libc::c_int as intmax_t
276 +                     }) + 0 as libc::c_int as libc::c_long
277 +                 }) < 0 as libc::c_int as libc::c_long
278 +                 {
279 +                     (((if 1 as libc::c_int != 0 {
280 +                         0 as libc::c_int as libc::c_long
281 +                     } else {
282 +                         *x
283 +                     }) + 0 as libc::c_int as intmax_t)
284 +                         < -(if ((if 1 as libc::c_int != 0 {
285 +                             0 as libc::c_int as libc::c_long
286 +                         } else {
287 +                             (if 1 as libc::c_int != 0 {
288 +                                 0 as libc::c_int as libc::c_long
289 +                             } else {
290 +                                 *x
291 +                             }) + 0 as libc::c_int as intmax_t
292 +                         }) - 1 as libc::c_int as libc::c_long)
293 +                             < 0 as libc::c_int as libc::c_long
294 +                         {
295 +                             ((((if 1 as libc::c_int != 0 {
296 +                                 0 as libc::c_int as libc::c_long
297 +                             } else {
298 +                                 (if 1 as libc::c_int != 0 {
299 +                                     0 as libc::c_int as libc::c_long
300 +                                 } else {
301 +                                     *x
302 +                                 }) + 0 as libc::c_int as intmax_t
303 +                             }) + 1 as libc::c_int as libc::c_long)
304 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
305 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
306 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
307 +                                 - 1 as libc::c_int as libc::c_long)
308 +                                 * 2 as libc::c_int as libc::c_long
309 +                                 + 1 as libc::c_int as libc::c_long
310 +                         } else {
311 +                             (if 1 as libc::c_int != 0 {
312 +                                 0 as libc::c_int as libc::c_long
313 +                             } else {
314 +                                 (if 1 as libc::c_int != 0 {
315 +                                     0 as libc::c_int as libc::c_long
316 +                                 } else {
317 +                                     *x
318 +                                 }) + 0 as libc::c_int as intmax_t
319 +                             }) - 1 as libc::c_int as libc::c_long
320 +                         })) as libc::c_int
321 +                 } else {
322 +                     ((0 as libc::c_int as libc::c_long)
323 +                         < (if 1 as libc::c_int != 0 {
324 +                             0 as libc::c_int as libc::c_long
325 +                         } else {
326 +                             *x
327 +                         }) + 0 as libc::c_int as intmax_t) as libc::c_int
328 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
329 +                 {
330 +                     if ((if 1 as libc::c_int != 0 {
331 +                         0 as libc::c_int
332 +                     } else {
333 +                         scale_factor
334 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
335 +                     {
336 +                         ((0 as libc::c_int as libc::c_long)
337 +                             < scale_factor as libc::c_long
338 +                                 + 0 as libc::c_int as intmax_t) as libc::c_int
339 +                     } else {
340 +                         ((-(1 as libc::c_int) as libc::c_long
341 +                             - 0 as libc::c_int as intmax_t)
342 +                             < (scale_factor - 1 as libc::c_int) as libc::c_long)
343 +                             as libc::c_int
344 +                     }
345 +                 } else {
346 +                     (0 as libc::c_int as intmax_t / *x
347 +                         < scale_factor as libc::c_long) as libc::c_int
348 +                 }
349 +             } else {
350 +                 ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
351 +                     < *x) as libc::c_int
352 +             }
    |

warning: attribute should be applied to a free function, impl method or static
  --> src/closeout.rs:74:1
   |
74 | #[no_mangle]
   | ^^^^^^^^^^^^
75 | use std::sync::atomic::{AtomicBool, Ordering};
   | ---------------------------------------------- not a free function, impl method or static
   |
   = note: `#[warn(unused_attributes)]` on by default
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!

warning: attribute should be applied to a free function, impl method or static
  --> src/closeout.rs:74:1
   |
74 | #[no_mangle]
   | ^^^^^^^^^^^^
75 | use std::sync::atomic::{AtomicBool, Ordering};
   |                         ---------- not a free function, impl method or static
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!

warning: attribute should be applied to a free function, impl method or static
  --> src/closeout.rs:74:1
   |
74 | #[no_mangle]
   | ^^^^^^^^^^^^
75 | use std::sync::atomic::{AtomicBool, Ordering};
   |                                     -------- not a free function, impl method or static
   |
   = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!

warning: unreachable statement
   --> src/xstrtoimax.rs:393:1
    |
390 |         return LONGINT_OVERFLOW;
    |         ----------------------- any code following this expression is unreachable
...
393 | *x = scaled;
    | ^^^^^^^^^^^^ unreachable statement
    |
    = note: `#[warn(unreachable_code)]` on by default

warning: unused variable: `res`
   --> src/argmatch.rs:270:5
    |
270 | let res = argmatch(
    |     ^^^ help: if this is intentional, prefix it with an underscore: `_res`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `res`
   --> src/argmatch.rs:286:5
    |
286 | let res = argmatch_exact(&arg_str, &arglist_slice);
    |     ^^^ help: if this is intentional, prefix it with an underscore: `_res`

warning: unused variable: `left_quote`
   --> src/quotearg.rs:379:25
    |
379 |                     let left_quote = gettext_quote(
    |                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_left_quote`

warning: unused variable: `right_quote`
   --> src/quotearg.rs:383:25
    |
383 |                     let right_quote = gettext_quote(
    |                         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_right_quote`

warning: unused variable: `result`
    --> src/quotearg.rs:1479:9
     |
1479 |     let result = set_char_quoting(Some(&mut options), ch as u8 as char, 1);
     |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: variable `scaled` is assigned to, but never used
  --> src/xstrtoimax.rs:48:14
   |
48 |      let mut scaled: i64 = 0;
   |              ^^^^^^
   |
   = note: consider using `_scaled` instead

warning: unused variable: `overflowed`
   --> src/xstrtoimax.rs:358:18
    |
358 |     let (result, overflowed) = (*x).overflowing_mul(scale_factor as i64);
    |                  ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_overflowed`

warning: unnecessary `unsafe` block
  --> src/argmatch.rs:97:49
   |
97 | pub static mut argmatch_die: argmatch_exit_fn = unsafe {
   |                                                 ^^^^^^ unnecessary `unsafe` block
   |
   = note: `#[warn(unused_unsafe)]` on by default

warning: unnecessary `unsafe` block
   --> src/argmatch.rs:260:23
    |
249 | / pub unsafe extern "C" fn __xargmatch_internal(
250 | |     mut context: *const libc::c_char,
251 | |     mut arg: *const libc::c_char,
252 | |     mut arglist: *const *const libc::c_char,
...   |
256 | |     mut allow_abbreviation: bool,
257 | | ) -> ptrdiff_t {
    | |______________- because it's nested under this `unsafe` fn
...
260 |           let arg_str = unsafe { std::ffi::CStr::from_ptr(arg).to_string_lossy().into_owned() };
    |                         ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`
    = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default

warning: unnecessary `unsafe` block
   --> src/argmatch.rs:261:32
    |
249 | / pub unsafe extern "C" fn __xargmatch_internal(
250 | |     mut context: *const libc::c_char,
251 | |     mut arg: *const libc::c_char,
252 | |     mut arglist: *const *const libc::c_char,
...   |
256 | |     mut allow_abbreviation: bool,
257 | | ) -> ptrdiff_t {
    | |______________- because it's nested under this `unsafe` fn
...
261 |   let arglist_slice: Vec<&str> = unsafe {
    |                                  ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/argmatch.rs:277:23
    |
249 | / pub unsafe extern "C" fn __xargmatch_internal(
250 | |     mut context: *const libc::c_char,
251 | |     mut arg: *const libc::c_char,
252 | |     mut arglist: *const *const libc::c_char,
...   |
256 | |     mut allow_abbreviation: bool,
257 | | ) -> ptrdiff_t {
    | |______________- because it's nested under this `unsafe` fn
...
277 |           let arg_str = unsafe { std::ffi::CStr::from_ptr(arg).to_string_lossy().into_owned() };
    |                         ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/argmatch.rs:280:8
    |
249 | / pub unsafe extern "C" fn __xargmatch_internal(
250 | |     mut context: *const libc::c_char,
251 | |     mut arg: *const libc::c_char,
252 | |     mut arglist: *const *const libc::c_char,
...   |
256 | |     mut allow_abbreviation: bool,
257 | | ) -> ptrdiff_t {
    | |______________- because it's nested under this `unsafe` fn
...
280 |   while !unsafe { *arglist.offset(i) }.is_null() {
    |          ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/argmatch.rs:281:16
    |
249 | / pub unsafe extern "C" fn __xargmatch_internal(
250 | |     mut context: *const libc::c_char,
251 | |     mut arg: *const libc::c_char,
252 | |     mut arglist: *const *const libc::c_char,
...   |
256 | |     mut allow_abbreviation: bool,
257 | | ) -> ptrdiff_t {
    | |______________- because it's nested under this `unsafe` fn
...
281 |       let item = unsafe { std::ffi::CStr::from_ptr(*arglist.offset(i)).to_string_lossy().into_owned() };
    |                  ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:483:17
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
483 |   let arg_slice = unsafe { std::ffi::CStr::from_ptr(arg).to_bytes() }; // Convert raw pointer to slice
    |                   ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:494:67
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
494 |       && &arg_slice[i as usize..(i + quote_string_len) as usize] == unsafe { std::ffi::CStr::from_ptr(quote_string).to_bytes() }
    |                                                                     ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:515:13
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
515 |               unsafe { *buffer.add(len as usize) = '\'' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:519:13
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
519 |               unsafe { *buffer.add(len as usize) = '$' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:523:13
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
523 |               unsafe { *buffer.add(len as usize) = '\'' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:529:9
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
529 |           unsafe { *buffer.add(len as usize) = '\\' as i8; }
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:534:26
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
534 |           && ('0' as i8 <= unsafe { *arg.add((i + 1) as usize) } && unsafe { *arg.add((i + 1) as usize) } <= '9' as i8)
    |                            ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:534:67
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
534 |           && ('0' as i8 <= unsafe { *arg.add((i + 1) as usize) } && unsafe { *arg.add((i + 1) as usize) } <= '9' as i8)
    |                                                                     ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:537:13
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
537 |               unsafe { *buffer.add(len as usize) = '0' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:541:13
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
541 |               unsafe { *buffer.add(len as usize) = '0' as i8; }
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:735:5
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
735 |       unsafe { *arg.offset(1) == '\0' as i8 }
    |       ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:778:9
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
778 |           unsafe {
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:785:9
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
785 |           unsafe {
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:792:9
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
792 |           unsafe {
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:889:24
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
889 |       let buffer_slice = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                          ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:951:13
    |
333 | / unsafe extern "C" fn quotearg_buffer_restyled(
334 | |     mut buffer: *mut libc::c_char,
335 | |     mut buffersize: size_t,
336 | |     mut arg: *const libc::c_char,
...   |
342 | |     mut right_quote: *const libc::c_char,
343 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
951 |           c = unsafe { *arg.offset(i as isize) } as u8;
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1031:17
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1031 |               && (unsafe { *quote_these_too.offset(c as isize / (std::mem::size_of::<libc::c_int>() * 8) as isize) } >> (c as usize % (std:...
     |                   ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1049:17
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1049 |                   unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                   ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1053:17
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1053 |                   unsafe { *buffer.offset(len as isize) = '$' as i8; }
     |                   ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1057:17
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1057 |                   unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                   ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1063:13
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1063 |               unsafe { *buffer.offset(len as isize) = '\\' as i8; }
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1075:17
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1075 |                   unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                   ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1079:17
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1079 |                   unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                   ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1085:13
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
342  | |     mut right_quote: *const libc::c_char,
343  | | ) -> size_t {
     | |___________- because it's nested under this `unsafe` fn
...
1085 |               unsafe { *buffer.offset(len as isize) = c as i8; }
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
  --> src/skipchars.rs:59:13
   |
59 |         g = unsafe { mcel_scan(s, lim_ptr) };
   |             ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/skipchars.rs:118:8
    |
118 |     if unsafe { mcel_isbasic(c) } {
    |        ^^^^^^ unnecessary `unsafe` block

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:438:18
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
438 |   let mut ch: u8 = unsafe { *q as u8 };
    |                    ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:440:7
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
440 |   while unsafe { *__ctype_b_loc() }.offset(ch as i32 as isize) as i32 & _ISspace as u16 as i32 != 0 {
    |         ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:441:9
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
441 |       q = unsafe { q.offset(1) };
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:442:10
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
442 |       ch = unsafe { *q as u8 };
    |            ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:457:11
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
457 |   } else if unsafe { *__errno_location() } != 0 {
    |             ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:458:8
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
458 |       if unsafe { *__errno_location() } != 34 {
    |          ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:474:30
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
474 |       let valid_suffixes_str = unsafe { std::ffi::CStr::from_ptr(valid_suffixes).to_string_lossy() };
    |                                ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:483:23
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
483 |                   match unsafe { *(*p).offset(1) } as u8 {
    |                         ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:485:28
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
485 |                           if unsafe { *(*p).offset(2) } as u8 == b'B' {
    |                              ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoimax.rs:550:10
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
421 | |     mut val: *mut intmax_t,
422 | |     mut valid_suffixes: *const libc::c_char,
423 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
550 |       *p = unsafe { (*p).offset(suffixes as isize) };
    |            ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary structure name repetition
  --> src/argmatch.rs:61:22
   |
61 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/argmatch.rs:72:29
   |
72 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item name starts with its containing module's name
  --> src/argmatch.rs:80:1
   |
80 | pub type argmatch_exit_fn = Option::<unsafe extern "C" fn() -> ()>;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
  --> src/argmatch.rs:97:1
   |
97 | / pub static mut argmatch_die: argmatch_exit_fn = unsafe {
98 | |     Some(__argmatch_die as unsafe extern "C" fn() -> ())
99 | | };
   | |__^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `usize` to `isize` may wrap around the value
   --> src/argmatch.rs:114:24
    |
114 |                 return i as isize;
    |                        ^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `isize` may wrap around the value
   --> src/argmatch.rs:116:28
    |
116 |                 matchind = i as isize;
    |                            ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `isize` to `usize` may lose the sign of the value
   --> src/argmatch.rs:118:30
    |
118 |                 if valsize * matchind as usize >= vallist.len() || valsize * i >= vallist.len() {
    |                              ^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: needlessly taken reference of both operands
   --> src/argmatch.rs:122:20
    |
122 |                   if &vallist[valsize * matchind as usize..valsize * matchind as usize + valsize] != 
    |  ____________________^
123 | |                    &vallist[valsize * i..valsize * i + valsize] {
    | |_______________________________________________________________^
    |
    = note: `-W clippy::op-ref` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#op_ref
help: use the values directly
    |
122 ~                 if vallist[valsize * matchind as usize..valsize * matchind as usize + valsize] != 
123 ~                    vallist[valsize * i..valsize * i + valsize] {
    |

warning: casting `isize` to `usize` may lose the sign of the value
   --> src/argmatch.rs:122:39
    |
122 |                 if &vallist[valsize * matchind as usize..valsize * matchind as usize + valsize] != 
    |                                       ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `usize` may lose the sign of the value
   --> src/argmatch.rs:122:68
    |
122 |                 if &vallist[valsize * matchind as usize..valsize * matchind as usize + valsize] != 
    |                                                                    ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: item name starts with its containing module's name
   --> src/argmatch.rs:140:1
    |
140 | / pub fn argmatch_exact(
141 | |     arg: &str,
142 | |     arglist: &[&str],
143 | | ) -> isize {
...   |
149 | |     return -1;
150 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/argmatch.rs:149:5
    |
149 |     return -1;
    |     ^^^^^^^^^^ help: remove `return`: `-1`
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `usize` to `isize` may wrap around the value
   --> src/argmatch.rs:146:20
    |
146 |             return i as isize;
    |                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:153:1
    |
153 | / pub unsafe extern "C" fn argmatch_invalid(
154 | |     mut context: *const libc::c_char,
155 | |     mut value: *const libc::c_char,
156 | |     mut problem: ptrdiff_t,
...   |
205 | |     };
206 | | }
    | |_^
    |
    = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/argmatch.rs:153:1
    |
153 | / pub unsafe extern "C" fn argmatch_invalid(
154 | |     mut context: *const libc::c_char,
155 | |     mut value: *const libc::c_char,
156 | |     mut problem: ptrdiff_t,
...   |
205 | |     };
206 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:159:12
    |
159 |         == -(1 as libc::c_int) as libc::c_long
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:161:17
    |
161 |         gettext(b"invalid argument %s for %s\0" as *const u8 as *const libc::c_char)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid argument %s for %s\0" as *const u8).cast::<i8>()`
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:163:17
    |
163 |         gettext(b"ambiguous argument %s for %s\0" as *const u8 as *const libc::c_char)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ambiguous argument %s for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/argmatch.rs:165:5
    |
165 | /     if 0 != 0 {
166 | |         error(
167 | |             0 as libc::c_int,
168 | |             0 as libc::c_int,
...   |
204 | |         });
205 | |     };
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/argmatch.rs:165:8
    |
165 |     if 0 != 0 {
    |        ^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: unnecessary `!=` operation
   --> src/argmatch.rs:173:9
    |
173 | /         if 0 as libc::c_int != 0 as libc::c_int {
174 | |             unreachable!();
175 | |         } else {};
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/argmatch.rs:173:12
    |
173 |         if 0 as libc::c_int != 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/argmatch.rs:178:13
    |
178 |             let __errstatus: libc::c_int = 0 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: unnecessary `!=` operation
   --> src/argmatch.rs:186:13
    |
186 | /             if __errstatus != 0 as libc::c_int {
187 | |                 unreachable!();
188 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/argmatch.rs:192:13
    |
192 |             let __errstatus: libc::c_int = 0 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: unnecessary `!=` operation
   --> src/argmatch.rs:200:13
    |
200 | /             if __errstatus != 0 as libc::c_int {
201 | |                 unreachable!();
202 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:208:1
    |
208 | / pub unsafe extern "C" fn argmatch_valid(
209 | |     mut arglist: *const *const libc::c_char,
210 | |     mut vallist: *const libc::c_void,
211 | |     mut valsize: size_t,
...   |
246 | |     putc_unlocked('\n' as i32, stderr);
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/argmatch.rs:208:1
    |
208 | / pub unsafe extern "C" fn argmatch_valid(
209 | |     mut arglist: *const *const libc::c_char,
210 | |     mut vallist: *const libc::c_void,
211 | |     mut valsize: size_t,
...   |
246 | |     putc_unlocked('\n' as i32, stderr);
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/argmatch.rs:214:45
    |
214 |     let mut last_val: *const libc::c_char = 0 as *const libc::c_char;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:216:17
    |
216 |         gettext(b"Valid arguments are:\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Valid arguments are:\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:219:9
    |
219 |     i = 0 as libc::c_int as size_t;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:220:29
    |
220 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:220:29
    |
220 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:221:17
    |
221 |         if i == 0 as libc::c_int as libc::c_ulong
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:223:17
    |
223 |                 last_val as *const libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `last_val.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:224:17
    |
224 | /                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
225 | |                     as *const libc::c_void,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:224:17
    |
224 |                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:224:57
    |
224 |                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:224:57
    |
224 |                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:231:17
    |
231 |                 b"\n  - %s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n  - %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:232:39
    |
232 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:232:39
    |
232 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:234:24
    |
234 |             last_val = (vallist as *const libc::c_char)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:235:25
    |
235 |                 .offset(valsize.wrapping_mul(i) as isize);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:235:25
    |
235 |                 .offset(valsize.wrapping_mul(i) as isize);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:239:17
    |
239 |                 b", %s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b", %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:240:39
    |
240 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:240:39
    |
240 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/argmatch.rs:244:9
    |
244 |         i;
    |         ^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:249:1
    |
249 | / pub unsafe extern "C" fn __xargmatch_internal(
250 | |     mut context: *const libc::c_char,
251 | |     mut arg: *const libc::c_char,
252 | |     mut arglist: *const *const libc::c_char,
...   |
295 | |     return -(1 as libc::c_int) as ptrdiff_t;
296 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/argmatch.rs:249:1
    |
249 | / pub unsafe extern "C" fn __xargmatch_internal(
250 | |     mut context: *const libc::c_char,
251 | |     mut arg: *const libc::c_char,
252 | |     mut arglist: *const *const libc::c_char,
...   |
295 | |     return -(1 as libc::c_int) as ptrdiff_t;
296 | | }
    | |_^
    |
    = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
note: first possible panic found here
   --> src/argmatch.rs:265:18
    |
265 |         vec.push(std::ffi::CStr::from_ptr(*arglist.offset(i as isize)).to_str().unwrap());
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unneeded `return` statement
   --> src/argmatch.rs:295:5
    |
295 |     return -(1 as libc::c_int) as ptrdiff_t;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `-(1 as libc::c_int) as ptrdiff_t`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: all if blocks contain the same code at the start
   --> src/argmatch.rs:259:5
    |
259 | /     if allow_abbreviation {
260 | |         let arg_str = unsafe { std::ffi::CStr::from_ptr(arg).to_string_lossy().into_owned() };
    | |______________________________________________________________________________________________^
    |
    = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements before the if
    |
259 ~     let arg_str = unsafe { std::ffi::CStr::from_ptr(arg).to_string_lossy().into_owned() };
260 +     if allow_abbreviation {
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:273:74
    |
273 |     if vallist.is_null() { None } else { Some(std::slice::from_raw_parts(vallist as *const u8, valsize.try_into().unwrap())) },
    |                                                                          ^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<u8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:274:5
    |
274 |     valsize as usize,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: redundant closure
   --> src/argmatch.rs:285:55
    |
285 | let arglist_slice: Vec<&str> = arglist_vec.iter().map(|s| s.as_str()).collect();
    |                                                       ^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::String::as_str`
    |
    = note: `-W clippy::redundant-closure-for-method-calls` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:288:15
    |
288 |     if res >= 0 as libc::c_int as libc::c_long {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:295:12
    |
295 |     return -(1 as libc::c_int) as ptrdiff_t;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:298:1
    |
298 | / pub unsafe extern "C" fn argmatch_to_argument(
299 | |     mut value: *const libc::c_void,
300 | |     mut arglist: *const *const libc::c_char,
301 | |     mut vallist: *const libc::c_void,
...   |
319 | |     return 0 as *const libc::c_char;
320 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/argmatch.rs:298:1
    |
298 | / pub unsafe extern "C" fn argmatch_to_argument(
299 | |     mut value: *const libc::c_void,
300 | |     mut arglist: *const *const libc::c_char,
301 | |     mut vallist: *const libc::c_void,
...   |
319 | |     return 0 as *const libc::c_char;
320 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/argmatch.rs:319:5
    |
319 |     return 0 as *const libc::c_char;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const libc::c_char`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:305:9
    |
305 |     i = 0 as libc::c_int as size_t;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:306:29
    |
306 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:306:29
    |
306 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:309:13
    |
309 | /             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
310 | |                 as *const libc::c_void,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:309:13
    |
309 |             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:309:53
    |
309 |             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:309:53
    |
309 |             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:314:36
    |
314 |             return *arglist.offset(i as isize);
    |                                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:314:36
    |
314 |             return *arglist.offset(i as isize);
    |                                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/argmatch.rs:317:9
    |
317 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *const _` detected
   --> src/argmatch.rs:319:12
    |
319 |     return 0 as *const libc::c_char;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: this could be a `const fn`
  --> src/c_ctype.rs:20:1
   |
20 | / pub fn c_isalnum(c: i32) -> bool {
21 | |     matches!(c, 48..=57 | 65..=90 | 97..=122)
22 | | }
   | |_^
   |
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_ctype.rs:27:1
   |
27 | / pub fn c_isalpha(c: i32) -> bool {
28 | |     (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:28:5
   |
28 |     (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
   |     ^^^^^^^^^^^^^^^^^^^^ help: use: `(65..=90).contains(&c)`
   |
   = note: `-W clippy::manual-range-contains` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: manual `RangeInclusive::contains` implementation
  --> src/c_ctype.rs:28:29
   |
28 |     (c >= 65 && c <= 90) || (c >= 97 && c <= 122)
   |                             ^^^^^^^^^^^^^^^^^^^^^ help: use: `(97..=122).contains(&c)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: this could be a `const fn`
  --> src/c_ctype.rs:41:1
   |
41 | / pub fn c_isblank(c: i32) -> bool {
42 | |     c == ' ' as i32 || c == '\t' as i32
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_ctype.rs:48:1
   |
48 | / pub fn c_iscntrl(c: i32) -> bool {
49 | |     match c {
50 | |         0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 
51 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => true,
52 | |         _ => false,
53 | |     }
54 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:49:5
   |
49 | /     match c {
50 | |         0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 
51 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => true,
52 | |         _ => false,
53 | |     }
   | |_____^
   |
   = note: `-W clippy::match-like-matches-macro` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
   |
49 ~     matches!(c, 0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 | 11 | 12 | 13 | 14 | 15 | 16 | 17 
50 +         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127)
   |

warning: this could be a `const fn`
  --> src/c_ctype.rs:59:1
   |
59 | / pub fn c_isdigit(c: i32) -> bool {
60 | |     match c {
61 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => true,
62 | |         _ => false,
63 | |     }
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:60:5
   |
60 | /     match c {
61 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => true,
62 | |         _ => false,
63 | |     }
   | |_____^ help: try this: `matches!(c, 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
  --> src/c_ctype.rs:69:1
   |
69 | / pub fn c_isgraph(c: i32) -> bool {
70 | |     match c {
71 | |         48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126 => true,
72 | |         _ => false,
73 | |     }
74 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:70:5
   |
70 | /     match c {
71 | |         48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126 => true,
72 | |         _ => false,
73 | |     }
   | |_____^ help: try this: `matches!(c, 48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
  --> src/c_ctype.rs:79:1
   |
79 | / pub fn c_islower(c: i32) -> bool {
80 | |     match c {
81 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
82 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => true,
83 | |         _ => false,
84 | |     }
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:80:5
   |
80 | /     match c {
81 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
82 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => true,
83 | |         _ => false,
84 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
   |
80 ~     matches!(c, 97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
81 +         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122)
   |

warning: this could be a `const fn`
   --> src/c_ctype.rs:90:1
    |
90  | / pub fn c_isprint(c: i32) -> bool {
91  | |     match c {
92  | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
93  | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
...   |
100 | |     }
101 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
   --> src/c_ctype.rs:91:5
    |
91  | /     match c {
92  | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
93  | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
94  | |         | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 33 | 34 | 35 | 36 | 37 | 38
...   |
99  | |         _ => false,
100 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
    |
91  ~     matches!(c, 32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
92  +         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
93  +         | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 33 | 34 | 35 | 36 | 37 | 38
94  +         | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58 | 59 | 60 | 61 | 62 | 63 | 64
95  +         | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125 | 126 | 65 | 66 | 67 | 68 | 69
96  +         | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85
97  +         | 86 | 87 | 88 | 89 | 90)
    |

warning: this could be a `const fn`
   --> src/c_ctype.rs:106:1
    |
106 | / pub fn c_ispunct(c: i32) -> bool {
107 | |     match c {
108 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
109 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
112 | |     }
113 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
   --> src/c_ctype.rs:107:5
    |
107 | /     match c {
108 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
109 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
110 | |         | 126 => true,
111 | |         _ => false,
112 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
    |
107 ~     matches!(c, 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
108 +         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
109 +         | 126)
    |

warning: this could be a `const fn`
   --> src/c_ctype.rs:118:1
    |
118 | / pub fn c_isspace(c: i32) -> bool {
119 | |     match c {
120 | |         32 | 9 | 10 | 11 | 12 | 13 => true,
121 | |         _ => false,
122 | |     }
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
   --> src/c_ctype.rs:119:5
    |
119 | /     match c {
120 | |         32 | 9 | 10 | 11 | 12 | 13 => true,
121 | |         _ => false,
122 | |     }
    | |_____^ help: try this: `matches!(c, 32 | 9 | 10 | 11 | 12 | 13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
   --> src/c_ctype.rs:128:1
    |
128 | / pub fn c_isupper(c: i32) -> bool {
129 | |     matches!(c, 65..=90)
130 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
   --> src/c_ctype.rs:135:1
    |
135 | / pub fn c_isxdigit(c: i32) -> bool {
136 | |     match c {
137 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
138 | |         | 65 | 66 | 67 | 68 | 69 | 70 => true,
139 | |         _ => false,
140 | |     }
141 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
   --> src/c_ctype.rs:136:5
    |
136 | /     match c {
137 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
138 | |         | 65 | 66 | 67 | 68 | 69 | 70 => true,
139 | |         _ => false,
140 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
    |
136 ~     matches!(c, 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
137 +         | 65 | 66 | 67 | 68 | 69 | 70)
    |

warning: this could be a `const fn`
   --> src/c_ctype.rs:146:1
    |
146 | / pub fn c_tolower(c: i32) -> i32 {
147 | |     match c {
148 | |         65..=90 => c + 32,
149 | |         _ => c,
150 | |     }
151 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
   --> src/c_ctype.rs:156:1
    |
156 | / pub fn c_toupper(c: i32) -> i32 {
157 | |     match c {
158 | |         97..=122 => c - ('a' as i32) + ('A' as i32),
159 | |         _ => c,
160 | |     }
161 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_strcasecmp.rs:6:1
   |
6  | / fn c_tolower(c: i32) -> i32 {
7  | |     match c {
8  | |         65..=90 => c - 'A' as i32 + 'a' as i32,
9  | |         _ => c,
10 | |     }
11 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> src/c_strcasecmp.rs:25:20
   |
25 |     let len_diff = s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> src/c_strcasecmp.rs:25:20
   |
25 |     let len_diff = s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> src/c_strcasecmp.rs:25:46
   |
25 |     let len_diff = s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> src/c_strcasecmp.rs:25:46
   |
25 |     let len_diff = s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary structure name repetition
  --> src/close_stream.rs:31:22
   |
31 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/close_stream.rs:42:29
   |
42 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:52:50
   |
52 |     let some_pending: bool = unsafe { __fpending(stream) != 0 };
   |                                                  ^^^^^^
   |
   = note: `-W clippy::not-unsafe-ptr-arg-deref` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:53:52
   |
53 |     let prev_fail: bool = unsafe { ferror_unlocked(stream) != 0 };
   |                                                    ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:54:49
   |
54 |     let fclose_fail: bool = unsafe { rpl_fclose(stream) != 0 };
   |                                                 ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: unneeded `return` statement
  --> src/close_stream.rs:64:5
   |
64 |     return 0;
   |     ^^^^^^^^^ help: remove `return`: `0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/closeout.rs:41:22
   |
41 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/closeout.rs:52:29
   |
52 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/closeout.rs:84:1
    |
84  | / pub unsafe extern "C" fn close_stdout() {
85  | |     if close_stream(stdout) != 0 as libc::c_int
86  | |         && !(ignore_EPIPE as libc::c_int != 0
87  | |             && *__errno_location() == 32 as libc::c_int)
...   |
178 | |     }
179 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/closeout.rs:86:14
   |
86 |         && !(ignore_EPIPE as libc::c_int != 0
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ignore_EPIPE)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:90:13
   |
90 |             b"write error\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
   --> src/closeout.rs:92:9
    |
92  | /         if !file_name.is_null() {
93  | |             if 0 != 0 {
94  | |                 error(
95  | |                     0 as libc::c_int,
...   |
172 | |             };
173 | |         }
    | |_________^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:93:13
    |
93  | /             if 0 != 0 {
94  | |                 error(
95  | |                     0 as libc::c_int,
96  | |                     *__errno_location(),
...   |
132 | |                 });
133 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:93:16
   |
93 |             if 0 != 0 {
   |                ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:97:21
   |
97 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:101:17
    |
101 | /                 if 0 as libc::c_int != 0 as libc::c_int {
102 | |                     unreachable!();
103 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:101:20
    |
101 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:106:21
    |
106 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:110:25
    |
110 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:114:21
    |
114 | /                     if __errstatus != 0 as libc::c_int {
115 | |                         unreachable!();
116 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:120:21
    |
120 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:124:25
    |
124 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:128:21
    |
128 | /                     if __errstatus != 0 as libc::c_int {
129 | |                         unreachable!();
130 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:135:13
    |
135 | /             if 0 != 0 {
136 | |                 error(
137 | |                     0 as libc::c_int,
138 | |                     *__errno_location(),
...   |
171 | |                 });
172 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:135:16
    |
135 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:139:21
    |
139 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:142:17
    |
142 | /                 if 0 as libc::c_int != 0 as libc::c_int {
143 | |                     unreachable!();
144 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:142:20
    |
142 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:147:21
    |
147 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:151:25
    |
151 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:154:21
    |
154 | /                     if __errstatus != 0 as libc::c_int {
155 | |                         unreachable!();
156 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:160:21
    |
160 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:164:25
    |
164 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:167:21
    |
167 | /                     if __errstatus != 0 as libc::c_int {
168 | |                         unreachable!();
169 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
   --> src/closeout.rs:176:8
    |
176 |     if SANITIZE_ADDRESS as libc::c_int == 0 && close_stream(stderr) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary structure name repetition
  --> src/fadvise.rs:36:22
   |
36 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fadvise.rs:47:29
   |
47 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: casting `u32` to `i32` may wrap around the value
  --> src/fadvise.rs:71:40
   |
71 |         posix_fadvise(fd, offset, len, advice as i32);
   |                                        ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary structure name repetition
  --> src/fclose.rs:33:22
   |
33 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fclose.rs:44:29
   |
44 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item name ends with its containing module's name
  --> src/fclose.rs:53:1
   |
53 | / pub fn rpl_fclose(fp: &mut FILE) -> libc::c_int {
54 | |     let mut saved_errno: libc::c_int = 0;
55 | |     
56 | |     // Unsafe block for operations that require raw pointers or FFI
...  |
77 | |     result
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unnecessary structure name repetition
  --> src/fflush.rs:30:22
   |
30 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fflush.rs:41:29
   |
41 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fflush.rs:51:26
   |
51 |     let flags = unsafe { (*fp)._flags }; // Accessing _flags from the raw pointer
   |                          ^^^^^^^^^^^^
   |
   = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unsafe function's docs miss `# Safety` section
  --> src/fflush.rs:60:1
   |
60 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
61 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
62 | |         return fflush(stream);
63 | |     }
64 | |     clear_ungetc_buffer_preserving_position(stream);
65 | |     return fflush(stream);
66 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fflush.rs:60:1
   |
60 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
61 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
62 | |         return fflush(stream);
63 | |     }
64 | |     clear_ungetc_buffer_preserving_position(stream);
65 | |     return fflush(stream);
66 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this boolean expression can be simplified
  --> src/fflush.rs:61:28
   |
61 |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `__freading(stream) == 0 as libc::c_int`
   |
   = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/fflush.rs:65:5
   |
65 |     return fflush(stream);
   |     ^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fflush(stream)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/fpurge.rs:27:22
   |
27 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fpurge.rs:38:29
   |
38 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fpurge.rs:47:1
   |
47 | / pub unsafe extern "C" fn fpurge(mut fp: *mut FILE) -> libc::c_int {
48 | |     __fpurge(fp);
49 | |     return 0 as libc::c_int;
50 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fpurge.rs:49:5
   |
49 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/freopen_safer.rs:39:22
   |
39 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/freopen_safer.rs:50:29
   |
50 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unneeded `return` statement
  --> src/freopen_safer.rs:76:13
   |
76 |             return true;
   |             ^^^^^^^^^^^^ help: remove `return`: `true`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/freopen_safer.rs:79:13
   |
79 |             return false;
   |             ^^^^^^^^^^^^^ help: remove `return`: `false`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/freopen_safer.rs:85:1
    |
85  | / pub unsafe extern "C" fn freopen_safer(
86  | |     mut name: *const libc::c_char,
87  | |     mut mode: *const libc::c_char,
88  | |     mut f: *mut FILE,
...   |
151 | |     return f;
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/freopen_safer.rs:151:5
    |
151 |     return f;
    |     ^^^^^^^^^ help: remove `return`: `f`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/freopen_safer.rs:112:5
    |
112 | /     match current_block_8 {
113 | |         8409498848974359248 => {
114 | |             if dup2(1 as libc::c_int, 1 as libc::c_int) != 1 as libc::c_int {
115 | |                 protect_out = 1 as libc::c_int != 0;
...   |
119 | |         _ => {}
120 | |     }
    | |_____^
    |
    = note: `-W clippy::single-match` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
112 ~     if current_block_8 == 8409498848974359248 {
113 +         if dup2(1 as libc::c_int, 1 as libc::c_int) != 1 as libc::c_int {
114 +             protect_out = 1 as libc::c_int != 0;
115 +         }
116 +         current_block_8 = 878006807312935268;
117 +     }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/freopen_safer.rs:121:5
    |
121 | /     match current_block_8 {
122 | |         878006807312935268 => {
123 | |             if dup2(0 as libc::c_int, 0 as libc::c_int) != 0 as libc::c_int {
124 | |                 protect_in = 1 as libc::c_int != 0;
...   |
127 | |         _ => {}
128 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
121 ~     if current_block_8 == 878006807312935268 {
122 +         if dup2(0 as libc::c_int, 0 as libc::c_int) != 0 as libc::c_int {
123 +             protect_in = 1 as libc::c_int != 0;
124 +         }
125 +     }
    |

warning: this `if` has identical blocks
   --> src/freopen_safer.rs:129:72
    |
129 |       if protect_in as libc::c_int != 0 && !protect_fd(0 as libc::c_int) {
    |  ________________________________________________________________________^
130 | |         f = 0 as *mut FILE;
131 | |     } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    | |_____^
    |
    = note: `-W clippy::if-same-then-else` implied by `-W clippy::all`
note: same as this
   --> src/freopen_safer.rs:131:80
    |
131 |       } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    |  ________________________________________________________________________________^
132 | |         f = 0 as *mut FILE;
133 | |     } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: this `if` has identical blocks
   --> src/freopen_safer.rs:131:80
    |
131 |       } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    |  ________________________________________________________________________________^
132 | |         f = 0 as *mut FILE;
133 | |     } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    | |_____^
    |
note: same as this
   --> src/freopen_safer.rs:133:80
    |
133 |       } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    |  ________________________________________________________________________________^
134 | |         f = 0 as *mut FILE;
135 | |     } else {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/freopen_safer.rs:129:8
    |
129 |     if protect_in as libc::c_int != 0 && !protect_fd(0 as libc::c_int) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(protect_in)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/freopen_safer.rs:130:13
    |
130 |         f = 0 as *mut FILE;
    |             ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/freopen_safer.rs:131:15
    |
131 |     } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(protect_out)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/freopen_safer.rs:132:13
    |
132 |         f = 0 as *mut FILE;
    |             ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/freopen_safer.rs:133:15
    |
133 |     } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(protect_err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/freopen_safer.rs:134:13
    |
134 |         f = 0 as *mut FILE;
    |             ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary structure name repetition
  --> src/fseeko.rs:31:22
   |
31 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fseeko.rs:42:29
   |
42 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item name ends with its containing module's name
  --> src/fseeko.rs:52:1
   |
52 | / pub fn rpl_fseeko(
53 | |     fp: &mut FILE,
54 | |     offset: off_t,
55 | |     whence: libc::c_int,
...  |
73 | |     }
74 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/fseeko.rs:72:9
   |
72 |         return fseeko(fp, offset, whence);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fseeko(fp, offset, whence)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: used binding `_IO_read_end` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:57:8
   |
57 |     if fp._IO_read_end == fp._IO_read_ptr
   |        ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_read_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:57:27
   |
57 |     if fp._IO_read_end == fp._IO_read_ptr
   |                           ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:58:12
   |
58 |         && fp._IO_write_ptr == fp._IO_write_base && fp._IO_save_base.is_null()
   |            ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:58:32
   |
58 |         && fp._IO_write_ptr == fp._IO_write_base && fp._IO_save_base.is_null()
   |                                ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_save_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:58:53
   |
58 |         && fp._IO_write_ptr == fp._IO_write_base && fp._IO_save_base.is_null()
   |                                                     ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fseeko.rs:63:23
   |
63 |             if pos == -(1 as libc::c_int) as libc::c_long {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:66:13
   |
66 |             fp._flags &= !(0x10 as libc::c_int);
   |             ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_offset` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:67:13
   |
67 |             fp._offset = pos;
   |             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unneeded `return` statement
  --> src/hard_locale.rs:32:5
   |
32 |     return true;
   |     ^^^^^^^^^^^^ help: remove `return`: `true`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:42:9
   |
42 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:44:9
   |
44 |         return None; // Assuming _gl_alloc_nomem() returns a null pointer, we return None here.
   |         ^^^^^^^^^^^^ help: remove `return`: `None`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/ialloc.rs:30:8
   |
30 |     if n <= usize::MAX && s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::absurd-extreme-comparisons` implied by `-W clippy::all`
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/ialloc.rs:30:27
   |
30 |     if n <= usize::MAX && s <= usize::MAX {
   |                           ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/ialloc.rs:52:8
   |
52 |     if n > usize::MAX {
   |        ^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always false
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/ialloc.rs:58:8
   |
58 |     if s > usize::MAX {
   |        ^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always false
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/ialloc.rs:72:8
   |
72 |     if s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:86:8
   |
86 |     if s as usize <= usize::MAX {
   |        ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:86:8
   |
86 |     if s as usize <= usize::MAX {
   |        ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:87:29
   |
87 |         let vec = vec![0u8; s as usize];
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:87:29
   |
87 |         let vec = vec![0u8; s as usize];
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/ialloc.rs:98:1
    |
98  | / pub unsafe extern "C" fn _gl_alloc_nomem() -> *mut libc::c_void {
99  | |     *__errno_location() = 12 as libc::c_int;
100 | |     return 0 as *mut libc::c_void;
101 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/ialloc.rs:100:5
    |
100 |     return 0 as *mut libc::c_void;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/ialloc.rs:100:12
    |
100 |     return 0 as *mut libc::c_void;
    |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary structure name repetition
  --> src/linebuffer.rs:47:22
   |
47 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/linebuffer.rs:58:29
   |
58 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: casting `i32` to `i8` may truncate the value
  --> src/linebuffer.rs:88:50
   |
88 |         readlinebuffer_delim(linebuffer, stream, b'\n' as i32 as libc::c_char)
   |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/linebuffer.rs:88:50
   |
88 |         readlinebuffer_delim(linebuffer, stream, b'\n' as i32 as libc::c_char)
   |                                                  ^^^^^^^^^^^^ help: try: `i32::from(b'\n')`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/linebuffer.rs:94:1
    |
94  | / pub unsafe extern "C" fn readlinebuffer_delim(
95  | |     mut linebuffer: *mut linebuffer,
96  | |     mut stream: *mut FILE,
97  | |     mut delimiter: libc::c_char,
...   |
140 | |     return linebuffer;
141 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/linebuffer.rs:135:12
    |
135 |         if !(c != delimiter as libc::c_int) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `c == delimiter as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/linebuffer.rs:140:5
    |
140 |     return linebuffer;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `linebuffer`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/linebuffer.rs:102:52
    |
102 |     let mut end: *mut libc::c_char = buffer.offset((*linebuffer).size as isize);
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `0 as *mut _` detected
   --> src/linebuffer.rs:104:16
    |
104 |         return 0 as *mut linebuffer;
    |                ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/linebuffer.rs:110:24
    |
110 |                 return 0 as *mut linebuffer;
    |                        ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:112:16
    |
112 |             if *p.offset(-(1 as libc::c_int) as isize) as libc::c_int
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p.offset(-(1 as libc::c_int) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:113:20
    |
113 |                 == delimiter as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:117:17
    |
117 |             c = delimiter as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/linebuffer.rs:121:22
    |
121 |               buffer = xpalloc(
    |  ______________________^
122 | |                 buffer as *mut libc::c_void,
123 | |                 &mut (*linebuffer).size,
124 | |                 1 as libc::c_int as idx_t,
125 | |                 -(1 as libc::c_int) as ptrdiff_t,
126 | |                 1 as libc::c_int as idx_t,
127 | |             ) as *mut libc::c_char;
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
121 ~             buffer = xpalloc(
122 +                 buffer as *mut libc::c_void,
123 +                 &mut (*linebuffer).size,
124 +                 1 as libc::c_int as idx_t,
125 +                 -(1 as libc::c_int) as ptrdiff_t,
126 +                 1 as libc::c_int as idx_t,
127 ~             ).cast::<i8>();
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/linebuffer.rs:122:17
    |
122 |                 buffer as *mut libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/linebuffer.rs:124:17
    |
124 |                 1 as libc::c_int as idx_t,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/linebuffer.rs:125:17
    |
125 |                 -(1 as libc::c_int) as ptrdiff_t,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/linebuffer.rs:126:17
    |
126 |                 1 as libc::c_int as idx_t,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/linebuffer.rs:128:31
    |
128 |             p = buffer.offset(oldsize as isize);
    |                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/linebuffer.rs:130:33
    |
130 |             end = buffer.offset((*linebuffer).size as isize);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/linebuffer.rs:134:19
    |
134 |         *fresh0 = c as libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:135:19
    |
135 |         if !(c != delimiter as libc::c_int) {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: non-binding `let` on a type that implements `Drop`
   --> src/linebuffer.rs:146:13
    |
146 |             let _ = Box::from_raw(linebuffer.buffer); // Convert the raw pointer back to a Box to free the memory
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::let-underscore-drop` implied by `-W clippy::pedantic`
    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: unsafe function's docs miss `# Safety` section
   --> src/localcharset.rs:391:1
    |
391 | / pub unsafe extern "C" fn locale_charset() -> *const libc::c_char {
392 | |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
393 | |     codeset = nl_langinfo(CODESET as libc::c_int);
394 | |     if codeset.is_null() {
...   |
400 | |     return codeset;
401 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/localcharset.rs:400:5
    |
400 |     return codeset;
    |     ^^^^^^^^^^^^^^^ help: remove `return`: `codeset`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/localcharset.rs:392:44
    |
392 |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/localcharset.rs:393:27
    |
393 |     codeset = nl_langinfo(CODESET as libc::c_int);
    |                           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:395:19
    |
395 |         codeset = b"\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/localcharset.rs:397:8
    |
397 |     if *codeset.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*codeset.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:398:19
    |
398 |         codeset = b"ASCII\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ASCII\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:38:9
   |
38 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mbrtoc32.rs:77:5
   |
77 |     return ret;
   |     ^^^^^^^^^^^ help: remove `return`: `ret`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/mbrtoc32.rs:55:15
   |
55 |         pwc = 0 as *mut char32_t;
   |               ^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<char32_t>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:56:13
   |
56 |         s = b"\0" as *const u8 as *const libc::c_char;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:57:13
   |
57 |         n = 1 as libc::c_int as size_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:63:14
   |
63 |     if ret < -(3 as libc::c_int) as size_t && mbsinit(ps) == 0 {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:66:15
   |
66 |     if ret == -(3 as libc::c_int) as size_t {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:8
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:53
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::from(*s as libc::c_uchar)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:75:16
   |
75 |         return 1 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: item name starts with its containing module's name
  --> src/mcel.rs:45:1
   |
45 | / pub struct mcel_t {
46 | |     pub ch: char32_t,
47 | |     pub err: libc::c_uchar,
48 | |     pub len: libc::c_uchar,
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
  --> src/mcel.rs:55:1
   |
55 | / pub fn mcel_scanz(p: &str) -> mcel_t {
56 | |     return mcel_scant(p, '\0');
57 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mcel.rs:56:5
   |
56 |     return mcel_scant(p, '\0');
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scant(p, '\0')`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: docs for function which may panic missing `# Panics` section
  --> src/mcel.rs:62:1
   |
62 | / pub fn mcel_scant(p: &str, terminator: char) -> mcel_t {
63 | |     if mcel_isbasic(p.chars().next().unwrap() as i8) {
64 | |         return mcel_ch(p.chars().next().unwrap() as char32_t, 1);
65 | |     }
...  |
78 | |     return mcel_scan(p, lim);
79 | | }
   | |_^
   |
note: first possible panic found here
  --> src/mcel.rs:63:21
   |
63 |     if mcel_isbasic(p.chars().next().unwrap() as i8) {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
  --> src/mcel.rs:62:1
   |
62 | / pub fn mcel_scant(p: &str, terminator: char) -> mcel_t {
63 | |     if mcel_isbasic(p.chars().next().unwrap() as i8) {
64 | |         return mcel_ch(p.chars().next().unwrap() as char32_t, 1);
65 | |     }
...  |
78 | |     return mcel_scan(p, lim);
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mcel.rs:78:5
   |
78 |     return mcel_scan(p, lim);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scan(p, lim)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: item name starts with its containing module's name
   --> src/mcel.rs:84:1
    |
84  | / pub fn mcel_scan(p: &str, lim: &str) -> mcel_t {
85  | |     let c = p.chars().next().unwrap_or('\0') as i8;
86  | |     if mcel_isbasic(c) {
87  | |         return mcel_ch(c as char32_t, 1);
...   |
106 | |     return mcel_ch(ch, len as usize);
107 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/mcel.rs:106:5
    |
106 |     return mcel_ch(ch, len as usize);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_ch(ch, len as usize)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
  --> src/mcel.rs:87:24
   |
87 |         return mcel_ch(c as char32_t, 1);
   |                        ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/mcel.rs:99:33
   |
99 |         len = mbrtoc32(&mut ch, p.as_ptr() as *const i8, (lim.as_ptr().offset_from(p.as_ptr()) as isize) as u64, &mut mbs);
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `p.as_ptr().cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `isize` to `u64` may lose the sign of the value
  --> src/mcel.rs:99:58
   |
99 |         len = mbrtoc32(&mut ch, p.as_ptr() as *const i8, (lim.as_ptr().offset_from(p.as_ptr()) as isize) as u64, &mut mbs);
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `u64` may lose the sign of the value
   --> src/mcel.rs:102:14
    |
102 |     if len > (-(1 as isize) as u64).wrapping_div(2) {
    |              ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting integer literal to `isize` is unnecessary
   --> src/mcel.rs:102:16
    |
102 |     if len > (-(1 as isize) as u64).wrapping_div(2) {
    |                ^^^^^^^^^^^^ help: try: `1_isize`
    |
    = note: `-W clippy::unnecessary-cast` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/mcel.rs:103:25
    |
103 |         return mcel_err(c as u8);
    |                         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/mcel.rs:106:24
    |
106 |     return mcel_ch(ch, len as usize);
    |                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: item name starts with its containing module's name
   --> src/mcel.rs:112:1
    |
112 | / pub fn mcel_isbasic(c: i8) -> bool {
113 | |     (0 <= c && c < MCEL_ERR_MIN as i8)
114 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this could be a `const fn`
   --> src/mcel.rs:112:1
    |
112 | / pub fn mcel_isbasic(c: i8) -> bool {
113 | |     (0 <= c && c < MCEL_ERR_MIN as i8)
114 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `u32` to `i8` may truncate the value
   --> src/mcel.rs:113:20
    |
113 |     (0 <= c && c < MCEL_ERR_MIN as i8)
    |                    ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: docs for function which may panic missing `# Panics` section
   --> src/mcel.rs:119:1
    |
119 | / pub fn mcel_tocmp(
120 | |     to: Option<fn(wint_t) -> wint_t>,
121 | |     c1: mcel_t,
122 | |     c2: mcel_t,
...   |
130 | |     ch1 - ch2
131 | | }
    | |_^
    |
note: first possible panic found here
   --> src/mcel.rs:128:28
    |
128 |     let ch1: libc::c_int = to.expect("non-null function pointer")(c1.ch).try_into().unwrap();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:119:1
    |
119 | / pub fn mcel_tocmp(
120 | |     to: Option<fn(wint_t) -> wint_t>,
121 | |     c1: mcel_t,
122 | |     c2: mcel_t,
...   |
130 | |     ch1 - ch2
131 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:125:9
    |
125 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int) != 0 {
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:125:33
    |
125 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int) != 0 {
    |                                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/mcel.rs:125:57
    |
125 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int) != 0 {
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(cmp == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: item name starts with its containing module's name
   --> src/mcel.rs:136:1
    |
136 | / pub fn mcel_cmp(c1: mcel_t, c2: mcel_t) -> i32 {
137 | |     let ch1: i32 = c1.ch as i32;
138 | |     let ch2: i32 = c2.ch as i32;
139 | |     (c1.err as i32 - c2.err as i32) * (1 << MCEL_ERR_SHIFT as i32) + (ch1 - ch2)
140 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this could be a `const fn`
   --> src/mcel.rs:136:1
    |
136 | / pub fn mcel_cmp(c1: mcel_t, c2: mcel_t) -> i32 {
137 | |     let ch1: i32 = c1.ch as i32;
138 | |     let ch2: i32 = c2.ch as i32;
139 | |     (c1.err as i32 - c2.err as i32) * (1 << MCEL_ERR_SHIFT as i32) + (ch1 - ch2)
140 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:137:20
    |
137 |     let ch1: i32 = c1.ch as i32;
    |                    ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:138:20
    |
138 |     let ch2: i32 = c2.ch as i32;
    |                    ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:139:6
    |
139 |     (c1.err as i32 - c2.err as i32) * (1 << MCEL_ERR_SHIFT as i32) + (ch1 - ch2)
    |      ^^^^^^^^^^^^^ help: try: `i32::from(c1.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:139:22
    |
139 |     (c1.err as i32 - c2.err as i32) * (1 << MCEL_ERR_SHIFT as i32) + (ch1 - ch2)
    |                      ^^^^^^^^^^^^^ help: try: `i32::from(c2.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:139:45
    |
139 |     (c1.err as i32 - c2.err as i32) * (1 << MCEL_ERR_SHIFT as i32) + (ch1 - ch2)
    |                                             ^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function which may panic missing `# Panics` section
   --> src/mcel.rs:145:1
    |
145 | / pub fn mcel_err(err: u8) -> mcel_t {
146 | |     assert!(MCEL_ERR_MIN as i32 <= err as i32, "Error value out of range");
147 | |     
148 | |     mcel_t {
...   |
152 | |     }
153 | | }
    | |_^
    |
note: first possible panic found here
   --> src/mcel.rs:146:5
    |
146 |     assert!(MCEL_ERR_MIN as i32 <= err as i32, "Error value out of range");
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:145:1
    |
145 | / pub fn mcel_err(err: u8) -> mcel_t {
146 | |     assert!(MCEL_ERR_MIN as i32 <= err as i32, "Error value out of range");
147 | |     
148 | |     mcel_t {
...   |
152 | |     }
153 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:146:13
    |
146 |     assert!(MCEL_ERR_MIN as i32 <= err as i32, "Error value out of range");
    |             ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:146:36
    |
146 |     assert!(MCEL_ERR_MIN as i32 <= err as i32, "Error value out of range");
    |                                    ^^^^^^^^^^ help: try: `i32::from(err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: docs for function which may panic missing `# Panics` section
   --> src/mcel.rs:158:1
    |
158 | / pub fn mcel_ch(ch: char32_t, len: usize) -> mcel_t {
159 | |     assert!(len > 0, "Length must be greater than 0");
160 | |     assert!(len <= MCEL_LEN_MAX as usize, "Length exceeds maximum allowed");
161 | |     assert!(ch <= MCEL_CHAR_MAX as u32, "Character exceeds maximum allowed");
...   |
167 | |     }
168 | | }
    | |_^
    |
note: first possible panic found here
   --> src/mcel.rs:159:5
    |
159 |     assert!(len > 0, "Length must be greater than 0");
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:158:1
    |
158 | / pub fn mcel_ch(ch: char32_t, len: usize) -> mcel_t {
159 | |     assert!(len > 0, "Length must be greater than 0");
160 | |     assert!(len <= MCEL_LEN_MAX as usize, "Length exceeds maximum allowed");
161 | |     assert!(ch <= MCEL_CHAR_MAX as u32, "Character exceeds maximum allowed");
...   |
167 | |     }
168 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `usize` to `u8` may truncate the value
   --> src/mcel.rs:166:14
    |
166 |         len: len as u8,
    |              ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unneeded `return` statement
  --> src/memcasecmp.rs:21:5
   |
21 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/posixver.rs:20:5
   |
20 | /     return (if v < (-(2147483647) - 1) {
21 | |         (-(2147483647) - 1) as libc::c_long
22 | |     } else if v < 2147483647 {
23 | |         v
24 | |     } else {
25 | |         2147483647
26 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
20 ~     (if v < (-(2147483647) - 1) {
21 +         (-(2147483647) - 1) as libc::c_long
22 +     } else if v < 2147483647 {
23 +         v
24 +     } else {
25 +         2147483647
26 +     }) as libc::c_int
   |

warning: casting `i64` to `i32` may truncate the value
  --> src/posixver.rs:20:12
   |
20 |       return (if v < (-(2147483647) - 1) {
   |  ____________^
21 | |         (-(2147483647) - 1) as libc::c_long
22 | |     } else if v < 2147483647 {
23 | |         v
24 | |     } else {
25 | |         2147483647
26 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/posixver.rs:21:9
   |
21 |         (-(2147483647) - 1) as libc::c_long
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(2147483647) - 1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/progname.rs:35:22
   |
35 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/progname.rs:46:29
   |
46 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/progname.rs:59:1
   |
59 | / pub unsafe extern "C" fn set_program_name(mut argv0: *const libc::c_char) {
60 | |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
61 | |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
62 | |     if argv0.is_null() {
...  |
95 | |     program_invocation_name = argv0 as *mut libc::c_char;
96 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `0 as *const _` detected
  --> src/progname.rs:60:42
   |
60 |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
  --> src/progname.rs:61:41
   |
61 |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:64:13
   |
64 | /             b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8
65 | |                 as *const libc::c_char,
   | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
  --> src/progname.rs:71:12
   |
71 |       base = if !slash.is_null() {
   |  ____________^
72 | |         slash.offset(1 as libc::c_int as isize)
73 | |     } else {
74 | |         argv0
75 | |     };
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/progname.rs:76:51
   |
76 |     if base.offset_from(argv0) as libc::c_long >= 7 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(7 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:79:13
   |
79 |             b"/.libs/\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/.libs/\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:80:13
   |
80 |             7 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:86:13
   |
86 |             b"lt-\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lt-\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:87:13
   |
87 |             3 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/propername_lite.rs:8:1
   |
8  | / pub unsafe extern "C" fn proper_name_lite(
9  | |     mut name_ascii: *const libc::c_char,
10 | |     mut name_utf8: *const libc::c_char,
11 | | ) -> *const libc::c_char {
...  |
23 | |     };
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/propername_lite.rs:13:5
   |
13 | /     return if translation != name_ascii {
14 | |         translation
15 | |     } else if c_strcasecmp(
16 | |         locale_charset(),
...  |
22 | |         name_ascii
23 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     if translation != name_ascii {
14 +         translation
15 +     } else if c_strcasecmp(
16 +         locale_charset(),
17 +         b"UTF-8\0" as *const u8 as *const libc::c_char,
18 +     ) == 0 as libc::c_int
19 +     {
20 +         name_utf8
21 +     } else {
22 +         name_ascii
23 +     }
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/propername_lite.rs:17:9
   |
17 |         b"UTF-8\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:162:5
    |
162 |     b"literal\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"literal\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:163:5
    |
163 |     b"shell\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:164:5
    |
164 |     b"shell-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:165:5
    |
165 |     b"shell-escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:166:5
    |
166 |     b"shell-escape-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:167:5
    |
167 |     b"c\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:168:5
    |
168 |     b"c-maybe\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c-maybe\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:169:5
    |
169 |     b"escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:170:5
    |
170 |     b"locale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"locale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:171:5
    |
171 |     b"clocale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"clocale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary closure used to substitute value for `Option::None`
   --> src/quotearg.rs:196:19
    |
196 |     let options = o.unwrap_or_else(|| unsafe { &default_quoting_options });
    |                   ^^------------------------------------------------------
    |                     |
    |                     help: use `unwrap_or(..)` instead: `unwrap_or(unsafe { &default_quoting_options })`
    |
    = note: `-W clippy::unnecessary-lazy-evaluations` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations

warning: using `clone` on type `src::quotearg::quoting_options` which implements the `Copy` trait
   --> src/quotearg.rs:197:26
    |
197 |     let cloned_options = options.clone();
    |                          ^^^^^^^^^^^^^^^ help: try dereferencing it: `*options`
    |
    = note: `-W clippy::clone-on-copy` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:241:11
    |
241 |     *p ^= ((i & 1 ^ r as i32) << shift) as u32;
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:241:21
    |
241 |     *p ^= ((i & 1 ^ r as i32) << shift) as u32;
    |                     ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:243:5
    |
243 |     r as i32
    |     ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/quotearg.rs:262:5
    |
262 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:266:1
    |
266 | / pub unsafe extern "C" fn set_custom_quoting(
267 | |     mut o: *mut quoting_options,
268 | |     mut left_quote: *const libc::c_char,
269 | |     mut right_quote: *const libc::c_char,
...   |
279 | |     (*o).right_quote = right_quote;
280 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: only a `panic!` in `if`-then statement
   --> src/quotearg.rs:282:5
    |
282 | /     if style == custom_quoting_style {
283 | |         panic!("Custom quoting style is not allowed");
284 | |     }
    | |_____^ help: try: `assert!(!(style == custom_quoting_style), "Custom quoting style is not allowed");`
    |
    = note: `-W clippy::manual-assert` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert

warning: unneeded `return` statement
   --> src/quotearg.rs:327:9
    |
327 |         return "\"".to_string();
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `"\"".to_string()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/quotearg.rs:329:9
    |
329 |         return "'".to_string();
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `"'".to_string()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:297:39
    |
297 |         let translation_ptr = gettext(msgid.as_ptr() as *const libc::c_char);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `msgid.as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: you should use the `starts_with` method
   --> src/quotearg.rs:311:19
    |
311 |         return if msgid.chars().next() == Some('`') {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `msgid.starts_with('`')`
    |
    = note: `-W clippy::chars-next-cmp` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp

warning: you should use the `starts_with` method
   --> src/quotearg.rs:319:19
    |
319 |         return if msgid.chars().next() == Some('`') {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `msgid.starts_with('`')`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp

warning: this boolean expression can be simplified
   --> src/quotearg.rs:842:28
    |
842 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `bytes != 0 as libc::c_int as libc::c_ulong`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/quotearg.rs:1029:12
     |
1029 |           if !((backslash_escapes && quoting_style != shell_always_quoting_style) || elide_outer_quotes)
     |  ____________^
1030 | |             && !quote_these_too.is_null()
1031 | |             && (unsafe { *quote_these_too.offset(c as isize / (std::mem::size_of::<libc::c_int>() * 8) as isize) } >> (c as usize % (std:...
1032 | |             && !is_right_quote {
     | |______________________________^ help: try: `!(elide_outer_quotes || quote_these_too.is_null() || (unsafe { *quote_these_too.offset(c as isize / (std::mem::size_of::<libc::c_int>() * 8) as isize) } >> (c as usize % (std::mem::size_of::<libc::c_int>() * 8)) & 1) == 0 || is_right_quote || backslash_escapes && quoting_style != shell_always_quoting_style)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/quotearg.rs:1029:12
     |
1029 |           if !((backslash_escapes && quoting_style != shell_always_quoting_style) || elide_outer_quotes)
     |  ____________^
1030 | |             && !quote_these_too.is_null()
     | |_________________________________________^ help: try: `!(elide_outer_quotes || quote_these_too.is_null() || backslash_escapes && quoting_style != shell_always_quoting_style)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (122/25)
   --> src/quotearg.rs:333:22
    |
333 | unsafe extern "C" fn quotearg_buffer_restyled(
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (798/100)
    --> src/quotearg.rs:333:1
     |
333  | / unsafe extern "C" fn quotearg_buffer_restyled(
334  | |     mut buffer: *mut libc::c_char,
335  | |     mut buffersize: size_t,
336  | |     mut arg: *const libc::c_char,
...    |
1173 | |     };
1174 | | }
     | |_^
     |
     = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/quotearg.rs:1144:13
     |
1144 | /             return quotearg_buffer_restyled(
1145 | |                 buffer,
1146 | |                 buffersize,
1147 | |                 arg,
...    |
1153 | |                 right_quote,
1154 | |             );
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1144 ~             quotearg_buffer_restyled(
1145 +                 buffer,
1146 +                 buffersize,
1147 +                 arg,
1148 +                 argsize,
1149 +                 quoting_style,
1150 +                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1151 +                 0 as *const libc::c_uint,
1152 +                 left_quote,
1153 +                 right_quote,
1154 +             )
     |

warning: unneeded `return` statement
    --> src/quotearg.rs:1171:13
     |
1171 |             return len;
     |             ^^^^^^^^^^^ help: remove `return`: `len`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:347:27
    |
347 |     let mut len: size_t = 0 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:348:39
    |
348 |     let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:349:49
    |
349 |     let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:350:40
    |
350 |     let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:353:12
    |
353 |         == 1 as libc::c_int as libc::c_ulong;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:354:48
    |
354 |     let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:377:24
    |
377 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:377:24
    |
377 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:392:44
    |
392 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:392:44
    |
392 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:395:25
    |
395 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/quotearg.rs:397:25
    |
397 |                         quote_string;
    |                         ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:430:56
    |
430 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:430:40
    |
430 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:430:40
    |
430 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:433:21
    |
433 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:436:32
    |
436 |                 quote_string = b"\"\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:437:36
    |
437 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:446:9
    |
446 | /         match current_block_48 {
447 | |             2266290538919981374 => {
448 | |                 if !elide_outer_quotes {
449 | |                     backslash_escapes = 1 as libc::c_int != 0;
...   |
453 | |             _ => {}
454 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
446 ~         if current_block_48 == 2266290538919981374 {
447 +             if !elide_outer_quotes {
448 +                 backslash_escapes = 1 as libc::c_int != 0;
449 +             }
450 +             current_block_48 = 14141891332124833771;
451 +         }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:455:9
    |
455 | /         match current_block_48 {
456 | |             14141891332124833771 => {
457 | |                 quoting_style = shell_always_quoting_style;
458 | |                 if !elide_outer_quotes {
...   |
468 | |             _ => {}
469 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
455 ~         if current_block_48 == 14141891332124833771 {
456 +             quoting_style = shell_always_quoting_style;
457 +             if !elide_outer_quotes {
458 +                 if len < buffersize {
459 +                     *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
460 +                 }
461 +                 len = len.wrapping_add(1);
462 +                 len;
463 +             }
464 +             quote_string = b"'\0" as *const u8 as *const libc::c_char;
465 +             quote_string_len = 1 as libc::c_int as size_t;
466 +         }
    |

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:460:56
    |
460 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:460:40
    |
460 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:460:40
    |
460 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:463:21
    |
463 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:465:32
    |
465 |                 quote_string = b"'\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:466:36
    |
466 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:470:13
    |
470 |         i = 0 as libc::c_int as size_t;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:472:13
    |
472 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize) as libc::c_int == '\0' as i32)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:472:14
    |
472 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:472:26
    |
472 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:472:26
    |
472 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:474:13
    |
474 |             (i == argsize) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(i == argsize)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:492:5
    |
492 | /         argsize
493 | |     }
    | |_____^
    |
    = note: the end suggestion probably needs some adjustments to use the expression result correctly
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
492 ~     }
493 +     argsize
    |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:494:19
    |
494 |     && &arg_slice[i as usize..(i + quote_string_len) as usize] == unsafe { std::ffi::CStr::from_ptr(quote_string).to_bytes() }
    |                   ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:494:31
    |
494 |     && &arg_slice[i as usize..(i + quote_string_len) as usize] == unsafe { std::ffi::CStr::from_ptr(quote_string).to_bytes() }
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:503:15
    |
503 | c = arg_slice[i as usize];
    |               ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:515:34
    |
515 |             unsafe { *buffer.add(len as usize) = '\'' as i8; }
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:519:34
    |
519 |             unsafe { *buffer.add(len as usize) = '$' as i8; }
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:523:34
    |
523 |             unsafe { *buffer.add(len as usize) = '\'' as i8; }
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:529:30
    |
529 |         unsafe { *buffer.add(len as usize) = '\\' as i8; }
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:534:44
    |
534 |         && ('0' as i8 <= unsafe { *arg.add((i + 1) as usize) } && unsafe { *arg.add((i + 1) as usize) } <= '9' as i8)
    |                                            ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:534:85
    |
534 |         && ('0' as i8 <= unsafe { *arg.add((i + 1) as usize) } && unsafe { *arg.add((i + 1) as usize) } <= '9' as i8)
    |                                                                                     ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:537:34
    |
537 |             unsafe { *buffer.add(len as usize) = '0' as i8; }
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:541:34
    |
541 |             unsafe { *buffer.add(len as usize) = '0' as i8; }
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:545:9
    |
545 |     c = '0' as u8;
    |         ^^^^^^^^^ help: use a byte literal instead: `b'0'`
    |
    = note: `-W clippy::char-lit-as-u8` implied by `-W clippy::all`
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:547:20
    |
547 | } else if (flags & QA_ELIDE_NULL_BYTES as i32) != 0 {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:567:48
    |
567 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:568:59
    |
568 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:570:44
    |
570 |   ...                   && *arg
    |  __________________________^
571 | | ...                       .offset(
572 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
573 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
570 ~                                         && i32::from(*arg
571 +                                             .offset(
572 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
573 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:572:49
    |
572 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:572:49
    |
572 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:572:64
    |
572 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:575:47
    |
575 |   ...                   match *arg
    |  _____________________________^
576 | | ...                       .offset(
577 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
578 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
575 ~                                         match i32::from(*arg
576 +                                             .offset(
577 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
578 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:577:49
    |
577 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:577:49
    |
577 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:577:64
    |
577 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:585:53
    |
585 |   ...                   c = *arg
    |  ___________________________^
586 | | ...                       .offset(
587 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
588 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:587:57
    |
587 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:587:57
    |
587 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:587:72
    |
587 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:590:67
    |
590 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:593:84
    |
593 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:593:68
    |
593 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:593:68
    |
593 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:596:49
    |
596 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:598:84
    |
598 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:598:68
    |
598 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:598:68
    |
598 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:601:49
    |
601 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:603:84
    |
603 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:603:68
    |
603 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:603:68
    |
603 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:606:49
    |
606 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:608:84
    |
608 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:608:68
    |
608 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:608:68
    |
608 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:611:49
    |
611 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:630:48
    |
630 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:631:59
    |
631 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:633:44
    |
633 |   ...                   && *arg
    |  __________________________^
634 | | ...                       .offset(
635 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
636 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
633 ~                                         && i32::from(*arg
634 +                                             .offset(
635 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
636 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:635:49
    |
635 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:635:49
    |
635 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:635:64
    |
635 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:638:47
    |
638 |   ...                   match *arg
    |  _____________________________^
639 | | ...                       .offset(
640 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
641 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
638 ~                                         match i32::from(*arg
639 +                                             .offset(
640 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
641 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:640:49
    |
640 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:640:49
    |
640 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:640:64
    |
640 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:648:53
    |
648 |   ...                   c = *arg
    |  ___________________________^
649 | | ...                       .offset(
650 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
651 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:650:57
    |
650 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:650:57
    |
650 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:650:72
    |
650 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:653:67
    |
653 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:656:84
    |
656 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:656:68
    |
656 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:656:68
    |
656 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:659:49
    |
659 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:661:84
    |
661 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:661:68
    |
661 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:661:68
    |
661 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:664:49
    |
664 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:666:84
    |
666 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:666:68
    |
666 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:666:68
    |
666 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:669:49
    |
669 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:671:84
    |
671 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:671:68
    |
671 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:671:68
    |
671 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:674:49
    |
674 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:690:15
    |
690 |         esc = 'a' as u8;
    |               ^^^^^^^^^ help: use a byte literal instead: `b'a'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:694:15
    |
694 |         esc = 'b' as u8;
    |               ^^^^^^^^^ help: use a byte literal instead: `b'b'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:698:15
    |
698 |         esc = 'f' as u8;
    |               ^^^^^^^^^ help: use a byte literal instead: `b'f'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:702:15
    |
702 |         esc = 'n' as u8;
    |               ^^^^^^^^^ help: use a byte literal instead: `b'n'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:706:15
    |
706 |         esc = 'r' as u8;
    |               ^^^^^^^^^ help: use a byte literal instead: `b'r'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:710:15
    |
710 |         esc = 't' as u8;
    |               ^^^^^^^^^ help: use a byte literal instead: `b't'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:714:15
    |
714 |         esc = 'v' as u8;
    |               ^^^^^^^^^ help: use a byte literal instead: `b'v'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:801:1
    |
801 | /     current_block = 253337042034819032;
802 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
801 + }
802 + current_block = 253337042034819032;
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:779:28
    |
779 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:779:28
    |
779 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:786:28
    |
786 |             *buffer.offset(len as isize) = '\\' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:786:28
    |
786 |             *buffer.offset(len as isize) = '\\' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:793:28
    |
793 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:793:28
    |
793 |             *buffer.offset(len as isize) = '\'' as i8;
    |                            ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `if _ { .. } else { .. }` is an expression
   --> src/quotearg.rs:817:21
    |
817 | /                     let mut printable: bool = false;
818 | |                     if unibyte_locale {
819 | |                         m = 1 as libc::c_int as size_t;
820 | |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
...   |
883 | |                         }
884 | |                     }
    | |_____________________^
    |
    = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
    |
817 ~                     let <mut> printable = if unibyte_locale { ..; *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
818 +                             as libc::c_int
819 +                             & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
820 +                             != 0 as libc::c_int } else { ..; false };
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:819:29
    |
819 |                         m = 1 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:820:37
    |
820 |                           printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |  _____________________________________^
821 | |                             as libc::c_int
    | |__________________________________________^ help: try: `i32::from(*(*__ctype_b_loc()).offset(c as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:820:64
    |
820 |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |                                                                ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:822:31
    |
822 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISprint as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/quotearg.rs:822:31
    |
822 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/quotearg.rs:822:31
    |
822 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:822:31
    |
822 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:830:29
    |
830 |                         m = 0 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:838:42
    |
838 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:838:42
    |
838 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:842:39
    |
842 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:843:41
    |
843 | ...                   if bytes == -(1 as libc::c_int) as size_t {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:845:48
    |
845 | ...                   } else if bytes == -(2 as libc::c_int) as size_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:848:40
    |
848 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i.wrapping_add(m) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:848:52
    |
848 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:848:52
    |
848 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:852:37
    |
852 | ...                   m;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:856:40
    |
856 | ...                   && elide_outer_quotes as libc::c_int != 0
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:858:44
    |
858 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:858:44
    |
858 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:861:41
    |
861 | ...                   j = 1 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:863:47
    |
863 |   ...                   match *arg
    |  _____________________________^
864 | | ...                       .offset(i.wrapping_add(m).wrapping_add(j) as isize)
865 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
863 ~                                         match i32::from(*arg
864 +                                             .offset(i.wrapping_add(m).wrapping_add(j) as isize))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:864:53
    |
864 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:864:53
    |
864 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:874:41
    |
874 | ...                   j;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:889:72
    |
889 |     let buffer_slice = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                                                                        ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:899:34
    |
899 |                     buffer_slice[len as usize] = '\'' as i8;
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:903:34
    |
903 |                     buffer_slice[len as usize] = '$' as i8;
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:907:34
    |
907 |                     buffer_slice[len as usize] = '\'' as i8;
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:913:30
    |
913 |                 buffer_slice[len as usize] = '\\' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:917:46
    |
917 |                 buffer_slice[len as usize] = ('0' as i32 + (c as i32 >> 6)) as i8;
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:917:61
    |
917 |                 buffer_slice[len as usize] = ('0' as i32 + (c as i32 >> 6)) as i8;
    |                                                             ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:917:30
    |
917 |                 buffer_slice[len as usize] = ('0' as i32 + (c as i32 >> 6)) as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:921:46
    |
921 |                 buffer_slice[len as usize] = ('0' as i32 + ((c as i32 >> 3) & 7)) as i8;
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:921:62
    |
921 |                 buffer_slice[len as usize] = ('0' as i32 + ((c as i32 >> 3) & 7)) as i8;
    |                                                              ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:921:30
    |
921 |                 buffer_slice[len as usize] = ('0' as i32 + ((c as i32 >> 3) & 7)) as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:924:17
    |
924 |             c = ('0' as i32 + (c as i32 & 7)) as u8;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:924:17
    |
924 |             c = ('0' as i32 + (c as i32 & 7)) as u8;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:924:32
    |
924 |             c = ('0' as i32 + (c as i32 & 7)) as u8;
    |                                ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:927:30
    |
927 |                 buffer_slice[len as usize] = '\\' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:937:30
    |
937 |                 buffer_slice[len as usize] = '\'' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:941:30
    |
941 |                 buffer_slice[len as usize] = '\'' as i8;
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:947:42
    |
947 |             buffer_slice[len as usize] = c as i8;
    |                                          ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:947:26
    |
947 |             buffer_slice[len as usize] = c as i8;
    |                          ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:951:13
    |
951 |         c = unsafe { *arg.offset(i as isize) } as u8;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:951:34
    |
951 |         c = unsafe { *arg.offset(i as isize) } as u8;
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:951:34
    |
951 |         c = unsafe { *arg.offset(i as isize) } as u8;
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/quotearg.rs:964:9
    |
964 | /         if i != 0 {
965 | |             current_block = 253337042034819032;
966 | |         } else {
967 | |             current_block = 4634307283396172174;
968 | |         }
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:996:1
     |
996  | / match current_block {
997  | |     7549413860336125482 => {
998  | |         current_block = 13059411171234995867;
999  | |     }
1000 | |     _ => {}
1001 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
996  + if current_block == 7549413860336125482 {
997  +     current_block = 13059411171234995867;
998  + }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1003:1
     |
1003 | / match current_block {
1004 | |     13059411171234995867 => {
1005 | |         current_block = 16620298045565028098;
1006 | |     }
1007 | |     _ => {}
1008 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1003 + if current_block == 13059411171234995867 {
1004 +     current_block = 16620298045565028098;
1005 + }
     |

warning: casting `u8` to `isize` may wrap around the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1031:50
     |
1031 | ...   && (unsafe { *quote_these_too.offset(c as isize / (std::mem::size_of::<libc::c_int>() * 8) as isize) } >> (c as usize % (std::mem::...
     |                                            ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `isize` may wrap around the value
    --> src/quotearg.rs:1031:63
     |
1031 | ...   && (unsafe { *quote_these_too.offset(c as isize / (std::mem::size_of::<libc::c_int>() * 8) as isize) } >> (c as usize % (std::mem::...
     |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1049:41
     |
1049 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1049:41
     |
1049 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1053:41
     |
1053 |                 unsafe { *buffer.offset(len as isize) = '$' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1053:41
     |
1053 |                 unsafe { *buffer.offset(len as isize) = '$' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1057:41
     |
1057 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1057:41
     |
1057 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1063:37
     |
1063 |             unsafe { *buffer.offset(len as isize) = '\\' as i8; }
     |                                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1063:37
     |
1063 |             unsafe { *buffer.offset(len as isize) = '\\' as i8; }
     |                                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1075:41
     |
1075 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1075:41
     |
1075 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1079:41
     |
1079 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1079:41
     |
1079 |                 unsafe { *buffer.offset(len as isize) = '\'' as i8; }
     |                                         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i8` may wrap around the value
    --> src/quotearg.rs:1085:53
     |
1085 |             unsafe { *buffer.offset(len as isize) = c as i8; }
     |                                                     ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1085:37
     |
1085 |             unsafe { *buffer.offset(len as isize) = c as i8; }
     |                                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1085:37
     |
1085 |             unsafe { *buffer.offset(len as isize) = c as i8; }
     |                                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1099:19
     |
1099 |         if len == 0 as libc::c_int as libc::c_ulong
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1101:20
     |
1101 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1101:20
     |
1101 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1102:16
     |
1102 |             && elide_outer_quotes as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1108:16
     |
1108 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1108:16
     |
1108 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1109:39
     |
1109 |             && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(encountered_single_quote)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1136:5
     |
1136 | /     match current_block {
1137 | |         7928555609993211441 => {
1138 | |             if quoting_style as libc::c_uint
1139 | |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1172 | |         }
1173 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1136 ~     if current_block == 7928555609993211441 {
1137 +         if quoting_style as libc::c_uint
1138 +             == shell_always_quoting_style as libc::c_int as libc::c_uint
1139 +             && backslash_escapes as libc::c_int != 0
1140 +         {
1141 +             quoting_style = shell_escape_always_quoting_style;
1142 +         }
1143 +         return quotearg_buffer_restyled(
1144 +             buffer,
1145 +             buffersize,
1146 +             arg,
1147 +             argsize,
1148 +             quoting_style,
1149 +             flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1150 +             0 as *const libc::c_uint,
1151 +             left_quote,
1152 +             right_quote,
1153 +         );
1154 +     } else {
1155 +         if !quote_string.is_null() && !elide_outer_quotes {
1156 +             while *quote_string != 0 {
1157 +                 if len < buffersize {
1158 +                     *buffer.offset(len as isize) = *quote_string;
1159 +                 }
1160 +                 len = len.wrapping_add(1);
1161 +                 len;
1162 +                 quote_string = quote_string.offset(1);
1163 +                 quote_string;
1164 +             }
1165 +         }
1166 +         if len < buffersize {
1167 +             *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
1168 +         }
1169 +         return len;
1170 ~     };
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1139:20
     |
1139 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1139:20
     |
1139 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1140:20
     |
1140 |                 && backslash_escapes as libc::c_int != 0
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1150:26
     |
1150 |                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *const _` detected
    --> src/quotearg.rs:1151:17
     |
1151 |                 0 as *const libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_uint>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1160:40
     |
1160 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1160:40
     |
1160 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1163:21
     |
1163 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1165:21
     |
1165 |                     quote_string;
     |                     ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1169:48
     |
1169 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1169:32
     |
1169 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1169:32
     |
1169 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1176:1
     |
1176 | / pub fn quotearg_buffer(
1177 | |     buffer: &mut [c_char],
1178 | |     arg: &[c_char],
1179 | |     o: Option<&quoting_options>,
...    |
1197 | |     r.try_into().unwrap()
1198 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1186:13
     |
1186 |             buffer.len().try_into().unwrap(),
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1176:1
     |
1176 | / pub fn quotearg_buffer(
1177 | |     buffer: &mut [c_char],
1178 | |     arg: &[c_char],
1179 | |     o: Option<&quoting_options>,
...    |
1197 | |     r.try_into().unwrap()
1198 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unnecessary closure used to substitute value for `Option::None`
    --> src/quotearg.rs:1181:31
     |
1181 |     let p: &quoting_options = o.unwrap_or_else(|| unsafe { &default_quoting_options });
     |                               ^^------------------------------------------------------
     |                                 |
     |                                 help: use `unwrap_or(..)` instead: `unwrap_or(unsafe { &default_quoting_options })`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1201:1
     |
1201 | / pub fn quotearg_alloc(
1202 | |     arg: &CStr,
1203 | |     argsize: usize,
1204 | |     o: &quoting_options,
...    |
1207 | |     unsafe { CString::from_raw(result) }
1208 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1206:60
     |
1206 |     let result = unsafe { quotearg_alloc_mem(arg.as_ptr(), argsize.try_into().unwrap(), std::ptr::null_mut(), o) };
     |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1201:1
     |
1201 | / pub fn quotearg_alloc(
1202 | |     arg: &CStr,
1203 | |     argsize: usize,
1204 | |     o: &quoting_options,
...    |
1207 | |     unsafe { CString::from_raw(result) }
1208 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1211:1
     |
1211 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1212 | |     mut arg: *const libc::c_char,
1213 | |     mut argsize: size_t,
1214 | |     mut size: *mut size_t,
...    |
1257 | |     return buf;
1258 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1211:1
     |
1211 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1212 | |     mut arg: *const libc::c_char,
1213 | |     mut argsize: size_t,
1214 | |     mut size: *mut size_t,
...    |
1257 | |     return buf;
1258 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1257:5
     |
1257 |     return buf;
     |     ^^^^^^^^^^^ help: remove `return`: `buf`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1217:41
     |
1217 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1218 | |         o
1219 | |     } else {
1220 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1221 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1220:9
     |
1220 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1224:11
     |
1224 |           | (if !size.is_null() {
     |  ___________^
1225 | |             0 as libc::c_int
1226 | |         } else {
1227 | |             QA_ELIDE_NULL_BYTES as libc::c_int
1228 | |         });
     | |__________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1227:13
     |
1227 |             QA_ELIDE_NULL_BYTES as libc::c_int
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1230:9
     |
1230 |         0 as *mut libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1231:9
     |
1231 |         0 as libc::c_int as size_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1240:23
     |
1240 |         .wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1255:38
     |
1255 |         *size = bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1267:9
     |
1263 | /         let mut init = slotvec {
1264 | |             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1265 | |             val: slot0.as_ptr() as *mut _,
1266 | |         };
     | |__________- unnecessary `let` binding
1267 |           init
     |           ^^^^
     |
     = note: `-W clippy::let-and-return` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1263 ~         
1264 ~         slotvec {
1265 +             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1266 +             val: slot0.as_ptr() as *mut _,
1267 +         }
     |

warning: borrow as raw pointer
    --> src/quotearg.rs:1271:5
     |
1271 |     &slotvec0 as *const slotvec as *mut slotvec
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1274:1
     |
1274 | / pub fn quotearg_free() {
1275 | |     unsafe {
1276 | |         let mut sv = slotvec;
1277 | |         let mut i: libc::c_int = 1;
...    |
1301 | |     }
1302 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: non-binding `let` on a type that implements `Drop`
    --> src/quotearg.rs:1282:17
     |
1282 |                 let _ = Box::from_raw(val); // Automatically frees the memory
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: non-binding `let` on a type that implements `Drop`
    --> src/quotearg.rs:1290:17
     |
1290 |                 let _ = Box::from_raw(val); // Automatically frees the memory
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: borrow as raw pointer
    --> src/quotearg.rs:1296:18
     |
1296 |         if sv != &mut slotvec0 as *mut slotvec {
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: non-binding `let` on a type that implements `Drop`
    --> src/quotearg.rs:1297:13
     |
1297 |             let _ = Box::from_raw(sv); // Automatically frees the memory
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: unneeded `return` statement
    --> src/quotearg.rs:1381:5
     |
1381 |     return val;
     |     ^^^^^^^^^^^ help: remove `return`: `val`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1312:39
     |
1312 |       let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |  _______________________________________^
1313 | |         < 9223372036854775807 as libc::c_long
1314 | |     {
1315 | |         2147483647 as libc::c_int as libc::c_long
1316 | |     } else {
1317 | |         9223372036854775807 as libc::c_long
1318 | |     }) as libc::c_int;
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1312:43
     |
1312 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1315:9
     |
1315 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/quotearg.rs:1323:44
     |
1323 |         let mut preallocated: bool = sv == &mut slotvec0 as *mut slotvec;
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1324:37
     |
1324 |         let mut new_nslots: idx_t = nslots as idx_t;
     |                                     ^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1325:14
     |
1325 |           sv = xpalloc(
     |  ______________^
1326 | |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1327 | |                 as *mut libc::c_void,
1328 | |             &mut new_nslots,
...    |
1331 | |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1332 | |         ) as *mut slotvec;
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1325 ~         sv = xpalloc(
1326 +             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1327 +                 as *mut libc::c_void,
1328 +             &mut new_nslots,
1329 +             (n - nslots + 1 as libc::c_int) as idx_t,
1330 +             nslots_max as ptrdiff_t,
1331 +             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1332 ~         ).cast::<src::quotearg::slotvec>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1326:13
     |
1326 | /             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1327 | |                 as *mut libc::c_void,
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `(if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv }).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/quotearg.rs:1326:13
     |
1326 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1326:17
     |
1326 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(preallocated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1326:52
     |
1326 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                                                    ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<slotvec>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1329:13
     |
1329 |             (n - nslots + 1 as libc::c_int) as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n - nslots + 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1330:13
     |
1330 |             nslots_max as ptrdiff_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots_max)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/quotearg.rs:1331:13
     |
1331 |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1338:13
     |
1338 |             sv.offset(nslots as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.offset(nslots as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1340:13
     |
1340 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1340:28
     |
1340 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1343:18
     |
1343 |         nslots = new_nslots as libc::c_int;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1347:53
     |
1347 |     let mut flags: libc::c_int = (*options).flags | QA_ELIDE_NULL_BYTES as libc::c_int;
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1360:35
     |
1360 |         size = qsize.wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1363:18
     |
1363 |             free(val as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/quotearg.rs:1366:13
     |
1366 |         let ref mut fresh0 = (*sv.offset(n as isize)).val;
     |         ----^^^^^^^^^^^^^^-------------------------------- help: try: `let fresh0 = &mut (*sv.offset(n as isize)).val;`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1384:1
     |
1384 | / pub unsafe extern "C" fn quotearg_n(
1385 | |     mut n: libc::c_int,
1386 | |     mut arg: *const libc::c_char,
1387 | | ) -> *mut libc::c_char {
...    |
1393 | |     );
1394 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1384:1
     |
1384 | / pub unsafe extern "C" fn quotearg_n(
1385 | |     mut n: libc::c_int,
1386 | |     mut arg: *const libc::c_char,
1387 | | ) -> *mut libc::c_char {
...    |
1393 | |     );
1394 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1388:5
     |
1388 | /     return quotearg_n_options(
1389 | |         n,
1390 | |         arg,
1391 | |         18446744073709551615 as libc::c_ulong,
1392 | |         &mut default_quoting_options,
1393 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1388 ~     quotearg_n_options(
1389 +         n,
1390 +         arg,
1391 +         18446744073709551615 as libc::c_ulong,
1392 +         &mut default_quoting_options,
1393 +     )
     |

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1392:9
     |
1392 |         &mut default_quoting_options,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1396:1
     |
1396 | / pub fn quotearg_n_mem(
1397 | |     n: i32,
1398 | |     arg: &CStr,
1399 | |     argsize: usize,
...    |
1405 | |     }
1406 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1403:62
     |
1403 |         let result_ptr = quotearg_n_options(n, arg.as_ptr(), argsize.try_into().unwrap(), options);
     |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1396:1
     |
1396 | / pub fn quotearg_n_mem(
1397 | |     n: i32,
1398 | |     arg: &CStr,
1399 | |     argsize: usize,
...    |
1405 | |     }
1406 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1404:9
     |
1403 |         let result_ptr = quotearg_n_options(n, arg.as_ptr(), argsize.try_into().unwrap(), options);
     |         ------------------------------------------------------------------------------------------- unnecessary `let` binding
1404 |         result_ptr
     |         ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1403 ~         
1404 ~         quotearg_n_options(n, arg.as_ptr(), argsize.try_into().unwrap(), options)
     |

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1417:1
     |
1417 | / pub fn quotearg_mem(arg: &CStr) -> CString {
1418 | |     let argsize: usize = arg.to_bytes().len();
1419 | |     let result_ptr = quotearg_n_mem(0, arg, argsize);
1420 | |     unsafe { CString::from_raw(result_ptr) }
1421 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1424:1
     |
1424 | / pub unsafe extern "C" fn quotearg_n_style(
1425 | |     mut n: libc::c_int,
1426 | |     mut s: quoting_style,
1427 | |     mut arg: *const libc::c_char,
...    |
1430 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1431 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1424:1
     |
1424 | / pub unsafe extern "C" fn quotearg_n_style(
1425 | |     mut n: libc::c_int,
1426 | |     mut s: quoting_style,
1427 | |     mut arg: *const libc::c_char,
...    |
1430 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1431 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1430:5
     |
1430 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1433:1
     |
1433 | / pub fn quotearg_n_style_mem(
1434 | |     n: i32,
1435 | |     s: quoting_style,
1436 | |     arg: &CStr,
...    |
1442 | |     }
1443 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1446:1
     |
1446 | / pub fn quotearg_style(
1447 | |     s: quoting_style,
1448 | |     arg: &str,
1449 | | ) -> String {
...    |
1453 | |     unsafe { CString::from_raw(result_ptr).into_string().expect("Failed to convert CString to String") }
1454 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1457:1
     |
1457 | / pub fn quotearg_style_mem(
1458 | |     s: quoting_style,
1459 | |     arg: &CStr,
1460 | | ) -> CString {
1461 | |     let result_ptr = quotearg_n_style_mem(0, s, arg);
1462 | |     unsafe { CString::from_raw(result_ptr) }
1463 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1466:1
     |
1466 | / pub unsafe extern "C" fn quotearg_char_mem(
1467 | |     mut arg: *const libc::c_char,
1468 | |     mut argsize: size_t,
1469 | |     mut ch: libc::c_char,
...    |
1480 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1481 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1466:1
     |
1466 | / pub unsafe extern "C" fn quotearg_char_mem(
1467 | |     mut arg: *const libc::c_char,
1468 | |     mut argsize: size_t,
1469 | |     mut ch: libc::c_char,
...    |
1480 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1481 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1480:5
     |
1480 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
    --> src/quotearg.rs:1475:21
     |
1475 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1476:22
     |
1476 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i8` to `u8` may lose the sign of the value
    --> src/quotearg.rs:1479:55
     |
1479 |     let result = set_char_quoting(Some(&mut options), ch as u8 as char, 1);
     |                                                       ^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1480:63
     |
1480 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |                                                               ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1483:1
     |
1483 | / pub fn quotearg_char(arg: &CStr, ch: char) -> *mut c_char {
1484 | |     let ch_as_i8 = ch as i8;
1485 | |     unsafe { quotearg_char_mem(arg.as_ptr(), u64::MAX, ch_as_i8) }
1486 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1489:1
     |
1489 | / pub fn quotearg_colon(arg: &CStr) -> CString {
1490 | |     let ch: char = ':'; // Define the character to be used
1491 | |     let result_ptr = quotearg_char(arg, ch);
1492 | |     unsafe { CString::from_raw(result_ptr) } // Convert the raw pointer back to CString
1493 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1496:1
     |
1496 | / pub fn quotearg_colon_mem(arg: &CStr) -> CString {
1497 | |     let argsize = arg.to_bytes().len();
1498 | |     let result_ptr = unsafe {
1499 | |         quotearg_char_mem(arg.as_ptr(), argsize.try_into().unwrap(), ':' as i32 as c_char)
1500 | |     };
1501 | |     unsafe { CString::from_raw(result_ptr) }
1502 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1499:41
     |
1499 |         quotearg_char_mem(arg.as_ptr(), argsize.try_into().unwrap(), ':' as i32 as c_char)
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1496:1
     |
1496 | / pub fn quotearg_colon_mem(arg: &CStr) -> CString {
1497 | |     let argsize = arg.to_bytes().len();
1498 | |     let result_ptr = unsafe {
1499 | |         quotearg_char_mem(arg.as_ptr(), argsize.try_into().unwrap(), ':' as i32 as c_char)
1500 | |     };
1501 | |     unsafe { CString::from_raw(result_ptr) }
1502 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1505:1
     |
1505 | / pub fn quotearg_n_style_colon(
1506 | |     n: i32,
1507 | |     s: quoting_style,
1508 | |     arg: &CStr,
...    |
1529 | |     unsafe { CString::from_raw(result) }
1530 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting to the same type is unnecessary (`char` -> `char`)
    --> src/quotearg.rs:1518:42
     |
1518 |     set_char_quoting(Some(&mut options), ':' as char, 1);
     |                                          ^^^^^^^^^^^ help: try: `':'`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1525:13
     |
1525 |             &mut options,
     |             ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1533:1
     |
1533 | / pub fn quotearg_n_custom(
1534 | |     n: i32,
1535 | |     left_quote: *const libc::c_char,
1536 | |     right_quote: *const libc::c_char,
...    |
1547 | |     }
1548 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this public function might dereference a raw pointer but is not marked `unsafe`
    --> src/quotearg.rs:1542:13
     |
1542 |             left_quote,
     |             ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
    --> src/quotearg.rs:1543:13
     |
1543 |             right_quote,
     |             ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
    --> src/quotearg.rs:1544:13
     |
1544 |             arg,
     |             ^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1551:1
     |
1551 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1552 | |     mut n: libc::c_int,
1553 | |     mut left_quote: *const libc::c_char,
1554 | |     mut right_quote: *const libc::c_char,
...    |
1560 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1561 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1551:1
     |
1551 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1552 | |     mut n: libc::c_int,
1553 | |     mut left_quote: *const libc::c_char,
1554 | |     mut right_quote: *const libc::c_char,
...    |
1560 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1561 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1560:5
     |
1560 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1560:48
     |
1560 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |                                                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1563:1
     |
1563 | / pub fn quotearg_custom(
1564 | |     left_quote: &str,
1565 | |     right_quote: &str,
1566 | |     arg: &str,
...    |
1574 | |     unsafe { std::ffi::CStr::from_ptr(result).to_string_lossy().into_owned() }
1575 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1568:24
     |
1568 |     let left_quote_c = std::ffi::CString::new(left_quote).unwrap();
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1563:1
     |
1563 | / pub fn quotearg_custom(
1564 | |     left_quote: &str,
1565 | |     right_quote: &str,
1566 | |     arg: &str,
...    |
1574 | |     unsafe { std::ffi::CStr::from_ptr(result).to_string_lossy().into_owned() }
1575 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1578:1
     |
1578 | / pub fn quotearg_custom_mem(
1579 | |     left_quote: &CStr,
1580 | |     right_quote: &CStr,
1581 | |     arg: &CStr,
...    |
1593 | |     unsafe { CString::from_raw(result_ptr) }
1594 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1605:5
     |
1598 | /     let mut init = quoting_options {
1599 | |         style: locale_quoting_style,
1600 | |         flags: 0 as libc::c_int,
1601 | |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1602 | |         left_quote: 0 as *const libc::c_char,
1603 | |         right_quote: 0 as *const libc::c_char,
1604 | |     };
     | |______- unnecessary `let` binding
1605 |       init
     |       ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1598 ~     
1599 ~     quoting_options {
1600 +         style: locale_quoting_style,
1601 +         flags: 0 as libc::c_int,
1602 +         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1603 +         left_quote: 0 as *const libc::c_char,
1604 +         right_quote: 0 as *const libc::c_char,
1605 +     }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1601:27
     |
1601 |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1608:1
     |
1608 | / pub unsafe extern "C" fn quote_n_mem(
1609 | |     mut n: libc::c_int,
1610 | |     mut arg: *const libc::c_char,
1611 | |     mut argsize: size_t,
1612 | | ) -> *const libc::c_char {
1613 | |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
1614 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1613:5
     |
1613 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut quote_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1613:48
     |
1613 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1616:1
     |
1616 | / pub fn quote_mem(arg: &CStr) -> CString {
1617 | |     let argsize = arg.to_bytes().len();
1618 | |     let quoted = unsafe { quote_n_mem(0, arg.as_ptr(), argsize.try_into().unwrap()) };
1619 | |     unsafe { CStr::from_ptr(quoted).to_owned() }
1620 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1618:56
     |
1618 |     let quoted = unsafe { quote_n_mem(0, arg.as_ptr(), argsize.try_into().unwrap()) };
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1623:1
     |
1623 | / pub unsafe extern "C" fn quote_n(
1624 | |     mut n: libc::c_int,
1625 | |     mut arg: *const libc::c_char,
1626 | | ) -> *const libc::c_char {
1627 | |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
1628 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1627:5
     |
1627 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: item name starts with its containing module's name
  --> src/setlocale_null.rs:15:1
   |
15 | / pub fn setlocale_null_r(
16 | |     category: libc::c_int,
17 | |     buf: &mut [u8],
18 | | ) -> libc::c_int {
...  |
22 | |     }
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/setlocale_null.rs:21:9
   |
21 |         return setlocale_null_r_unlocked(category, buf.as_mut_ptr() as *mut libc::c_char, bufsize);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_r_unlocked(category, buf.as_mut_ptr() as *mut libc::c_char, bufsize)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null.rs:21:52
   |
21 |         return setlocale_null_r_unlocked(category, buf.as_mut_ptr() as *mut libc::c_char, bufsize);
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.as_mut_ptr().cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:18:1
   |
18 | / pub unsafe extern "C" fn setlocale_null_unlocked(
19 | |     mut category: libc::c_int,
20 | | ) -> *const libc::c_char {
21 | |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
22 | |     return result;
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:22:5
   |
22 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/setlocale_null_unlocked.rs:21:63
   |
21 |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:38:9
   |
38 |         return 22; // EINVAL
   |         ^^^^^^^^^^ help: remove `return`: `22`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:44:13
   |
44 |             return 0; // Success
   |             ^^^^^^^^^ help: remove `return`: `0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:51:13
   |
51 |             return 34; // ERANGE
   |             ^^^^^^^^^^ help: remove `return`: `34`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/setlocale_null_unlocked.rs:40:29
   |
40 |         let length: usize = unsafe { strlen(result) } as usize;
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:42:79
   |
42 |             buf[..length].copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, length) });
   |                                                                               ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:48:73
   |
48 |                 buf.copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, copy_length) });
   |                                                                         ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/skipchars.rs:72:1
   |
72 | / pub unsafe extern "C" fn skip_str_matching(
73 | |     mut str: *const libc::c_char,
74 | |     mut predicate: Option::<unsafe extern "C" fn(mcel_t) -> bool>,
75 | |     mut ok: bool,
...  |
88 | |     return s as *mut libc::c_char;
89 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/skipchars.rs:88:5
   |
88 |     return s as *mut libc::c_char;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `s as *mut libc::c_char`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/skipchars.rs:79:11
   |
79 |     while *s as libc::c_int != 0
   |           ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*s)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/skipchars.rs:82:13
   |
82 |             predicate.expect("non-null function pointer")(g) as libc::c_int
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(predicate.expect("non-null function pointer")(g))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/skipchars.rs:83:20
   |
83 |                 == ok as libc::c_int
   |                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/skipchars.rs:86:22
   |
86 |         s = s.offset(g.len as libc::c_int as isize);
   |                      ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(g.len)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unneeded `return` statement
  --> src/skipchars.rs:92:5
   |
92 |     return mcel_scant(p, '\0' as i32 as libc::c_char);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scant(p, '\0' as i32 as libc::c_char)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
  --> src/skipchars.rs:92:26
   |
92 |     return mcel_scant(p, '\0' as i32 as libc::c_char);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unneeded `return` statement
   --> src/skipchars.rs:113:5
    |
113 |     return mcel_scan(p, lim);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scan(p, lim)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
   --> src/skipchars.rs:100:24
    |
100 |         return mcel_ch(*p as char32_t, 1usize);
    |                        ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/skipchars.rs:104:15
    |
104 |     while i < MCEL_LEN_MAX as libc::c_int - 1 as libc::c_int {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/skipchars.rs:107:17
    |
107 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*lim as libc::c_int != terminator as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:107:18
    |
107 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
    |                  ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*lim)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:107:41
    |
107 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(terminator)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/skipchars.rs:111:9
    |
111 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
   --> src/skipchars.rs:142:5
    |
142 |     return mcel_ch(ch, len.try_into().unwrap());
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_ch(ch, len.try_into().unwrap())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
   --> src/skipchars.rs:119:24
    |
119 |         return mcel_ch(c as char32_t, 1);
    |                        ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/skipchars.rs:133:13
    |
133 |             lim.offset_from(p) as libc::c_long as size_t,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/skipchars.rs:138:14
    |
138 |     if len > (-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/skipchars.rs:138:59
    |
138 |     if len > (-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) {
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/skipchars.rs:139:25
    |
139 |         return mcel_err(c as libc::c_uchar);
    |                         ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/skipchars.rs:146:1
    |
146 | / fn mcel_isbasic(c: i8) -> bool {
147 | |     (0 <= c as i32 && (c as i32) < MCEL_ERR_MIN as i32)
148 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:147:11
    |
147 |     (0 <= c as i32 && (c as i32) < MCEL_ERR_MIN as i32)
    |           ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:147:23
    |
147 |     (0 <= c as i32 && (c as i32) < MCEL_ERR_MIN as i32)
    |                       ^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/skipchars.rs:147:36
    |
147 |     (0 <= c as i32 && (c as i32) < MCEL_ERR_MIN as i32)
    |                                    ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/skipchars.rs:152:13
    |
152 |     assert!(MCEL_ERR_MIN as i32 <= err as i32);
    |             ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:152:36
    |
152 |     assert!(MCEL_ERR_MIN as i32 <= err as i32);
    |                                    ^^^^^^^^^^ help: try: `i32::from(err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `usize` to `u8` may truncate the value
   --> src/skipchars.rs:170:14
    |
170 |         len: len as u8,
    |              ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
 --> src/version.rs:3:47
  |
3 |   pub static mut Version: *const libc::c_char = b"9.5.42-bbc97\0" as *const u8
  |  _______________________________________________^
4 | |     as *const libc::c_char;
  | |__________________________^ help: try `pointer::cast`, a safer alternative: `(b"9.5.42-bbc97\0" as *const u8).cast::<i8>()`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary structure name repetition
  --> src/version_etc.rs:45:22
   |
45 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/version_etc.rs:56:29
   |
56 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (174/100)
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary boolean `not` operation
  --> src/version_etc.rs:75:5
   |
75 | /     if !command_name.is_null() {
76 | |         fprintf(
77 | |             stream,
78 | |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
...  |
89 | |         );
90 | |     }
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:78:13
   |
78 |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s (%s) %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:86:13
   |
86 |             b"%s %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:94:17
   |
94 |         gettext(b"(C)\0" as *const u8 as *const libc::c_char),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"(C)\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
  --> src/version_etc.rs:95:9
   |
95 |         COPYRIGHT_YEAR as libc::c_int,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:97:20
   |
97 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:101:13
    |
101 | /             b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere...
102 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:104:9
    |
104 |         b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://gnu.org/licenses/gpl.html\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:106:20
    |
106 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:112:25
    |
112 |                 gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:120:21
    |
120 |                     b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:130:21
    |
130 |                     b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:141:21
    |
141 | /                     b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
142 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:154:21
    |
154 | /                     b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
155 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:168:21
    |
168 | /                     b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
169 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:183:21
    |
183 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
184 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:199:21
    |
199 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
200 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:216:21
    |
216 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
217 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:234:21
    |
234 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
235 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:251:1
    |
251 | / pub unsafe extern "C" fn version_etc_ar(
252 | |     mut stream: *mut FILE,
253 | |     mut command_name: *const libc::c_char,
254 | |     mut package: *const libc::c_char,
...   |
264 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
265 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:251:1
    |
251 | / pub unsafe extern "C" fn version_etc_ar(
252 | |     mut stream: *mut FILE,
253 | |     mut command_name: *const libc::c_char,
254 | |     mut package: *const libc::c_char,
...   |
264 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
265 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:259:17
    |
259 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:260:29
    |
260 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/version_etc.rs:260:29
    |
260 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/version_etc.rs:262:9
    |
262 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:267:1
    |
267 | / pub unsafe extern "C" fn version_etc_va(
268 | |     mut stream: *mut FILE,
269 | |     mut command_name: *const libc::c_char,
270 | |     mut package: *const libc::c_char,
...   |
293 | |     );
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:267:1
    |
267 | / pub unsafe extern "C" fn version_etc_va(
268 | |     mut stream: *mut FILE,
269 | |     mut command_name: *const libc::c_char,
270 | |     mut package: *const libc::c_char,
...   |
293 | |     );
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/version_etc.rs:275:51
    |
275 |     let mut authtab: [*const libc::c_char; 10] = [0 as *const libc::c_char; 10];
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:276:17
    |
276 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:277:23
    |
277 |     while n_authors < 10 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:279:21
    |
279 |             authtab[n_authors as usize] = authors.arg::<*const libc::c_char>();
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:280:23
    |
280 |             !(authtab[n_authors as usize]).is_null()
    |                       ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
   --> src/version_etc.rs:284:9
    |
284 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:296:1
    |
296 | / pub unsafe extern "C" fn version_etc(
297 | |     mut stream: *mut FILE,
298 | |     mut command_name: *const libc::c_char,
299 | |     mut package: *const libc::c_char,
...   |
305 | |     version_etc_va(stream, command_name, package, version, authors.as_va_list());
306 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:312:41
    |
312 |         unsafe { CStr::from_ptr(gettext(b"Report bugs to: \0".as_ptr() as *const libc::c_char)).to_string_lossy() }
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Report bugs to: \0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:316:41
    |
316 |         unsafe { CStr::from_ptr(gettext(b"GNU coreutils\0".as_ptr() as *const libc::c_char)).to_string_lossy() },
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"GNU coreutils\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:317:33
    |
317 |         unsafe { CStr::from_ptr(b"https://www.gnu.org/software/coreutils/\0".as_ptr() as *const libc::c_char).to_string_lossy() }
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"https://www.gnu.org/software/coreutils/\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/xalloc_die.rs:14:1
   |
14 | / pub unsafe extern "C" fn xalloc_die() {
15 | |     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
...  |
53 | |     abort();
54 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:15:5
   |
15 | /     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
18 | |             0 as libc::c_int,
...  |
51 | |         });
52 | |     };
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xalloc_die.rs:15:8
   |
15 |     if 0 != 0 {
   |        ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:19:13
   |
19 |             b"%s\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:20:21
   |
20 |             gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:22:9
   |
22 | /         if exit_failure != 0 as libc::c_int {
23 | |             unreachable!();
24 | |         } else {};
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:27:13
   |
27 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:31:17
   |
31 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:32:25
   |
32 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:34:13
   |
34 | /             if __errstatus != 0 as libc::c_int {
35 | |                 unreachable!();
36 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:40:13
   |
40 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:44:17
   |
44 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:45:25
   |
45 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:47:13
   |
47 | /             if __errstatus != 0 as libc::c_int {
48 | |                 unreachable!();
49 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:53:8
   |
53 |     if s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
  --> src/xmalloc.rs:55:46
   |
55 |         let new_ptr = unsafe { libc::realloc(p as *mut libc::c_void, new_size) };
   |                                              ^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `p.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xmalloc.rs:56:9
   |
56 |         new_ptr as *mut u8
   |         ^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `new_ptr.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xmalloc.rs:58:18
   |
58 |         unsafe { _gl_alloc_nomem() as *mut u8 }
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `_gl_alloc_nomem().cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xmalloc.rs:83:5
   |
83 |     ptr as *mut libc::c_void // Return the raw pointer as *mut c_void
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:92:8
   |
92 |     if n <= usize::MAX && s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:92:27
   |
92 |     if n <= usize::MAX && s <= usize::MAX {
   |                           ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: returning the result of a `let` binding from a block
   --> src/xmalloc.rs:101:9
    |
100 |         let new_ptr = unsafe { libc::reallocarray(p, new_size, 1) };
    |         ------------------------------------------------------------ unnecessary `let` binding
101 |         new_ptr
    |         ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
100 ~         
101 ~         unsafe { libc::reallocarray(p, new_size, 1) }
    |

warning: unneeded `return` statement
   --> src/xmalloc.rs:111:5
    |
111 |     return 0 as *mut libc::c_void;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:111:12
    |
111 |     return 0 as *mut libc::c_void;
    |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xmalloc.rs:115:8
    |
115 |     if s <= usize::MAX {
    |        ^^^^^^^^^^^^^^^
    |
    = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:121:13
    |
121 |             ptr as *mut libc::c_void
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:136:1
    |
136 | / pub unsafe extern "C" fn xmalloc(mut s: size_t) -> *mut libc::c_void {
137 | |     return check_nonnull(malloc(s));
138 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:137:5
    |
137 |     return check_nonnull(malloc(s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(malloc(s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:140:1
    |
140 | / pub unsafe extern "C" fn ximalloc(mut s: idx_t) -> *mut libc::c_void {
141 | |     let allocated_memory = imalloc(s.try_into().unwrap());
142 | | return check_nonnull(allocated_memory);
143 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/xmalloc.rs:140:1
    |
140 | / pub unsafe extern "C" fn ximalloc(mut s: idx_t) -> *mut libc::c_void {
141 | |     let allocated_memory = imalloc(s.try_into().unwrap());
142 | | return check_nonnull(allocated_memory);
143 | | }
    | |_^
    |
note: first possible panic found here
   --> src/xmalloc.rs:141:36
    |
141 |     let allocated_memory = imalloc(s.try_into().unwrap());
    |                                    ^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:142:1
    |
142 | return check_nonnull(allocated_memory);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(allocated_memory)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: docs for function which may panic missing `# Panics` section
   --> src/xmalloc.rs:145:1
    |
145 | / pub fn xcharalloc(n: usize) -> Vec<libc::c_char> {
146 | |     let size_of_char = std::mem::size_of::<libc::c_char>();
147 | |     if size_of_char == 1 {
148 | |         // Call to unsafe function xmalloc
...   |
155 | |     }
156 | | }
    | |_^
    |
note: first possible panic found here
   --> src/xmalloc.rs:149:36
    |
149 |         let ptr = unsafe { xmalloc(n.try_into().unwrap()) };
    |                                    ^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:150:38
    |
150 |         unsafe { Vec::from_raw_parts(ptr as *mut libc::c_char, n, n) }
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:154:38
    |
154 |         unsafe { Vec::from_raw_parts(ptr as *mut libc::c_char, n, n) }
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this public function might dereference a raw pointer but is not marked `unsafe`
   --> src/xmalloc.rs:165:33
    |
165 |             unsafe { libc::free(p) };
    |                                 ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
   --> src/xmalloc.rs:170:36
    |
170 |     let r = unsafe { libc::realloc(p, s) };
    |                                    ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: unneeded `return` statement
   --> src/xmalloc.rs:183:5
    |
183 |     return vec;
    |     ^^^^^^^^^^^ help: remove `return`: `vec`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:198:23
    |
198 |     let size: usize = (n as usize).checked_mul(s as usize).expect("Multiplication overflow");
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/xmalloc.rs:198:23
    |
198 |     let size: usize = (n as usize).checked_mul(s as usize).expect("Multiplication overflow");
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:198:48
    |
198 |     let size: usize = (n as usize).checked_mul(s as usize).expect("Multiplication overflow");
    |                                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/xmalloc.rs:198:48
    |
198 |     let size: usize = (n as usize).checked_mul(s as usize).expect("Multiplication overflow");
    |                                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: slow zero-filling initialization
   --> src/xmalloc.rs:200:5
    |
199 |     let mut vec = Vec::with_capacity(size);
    |                   ------------------------ help: consider replace allocation with: `vec![0; size]`
200 |     vec.resize(size, 0);
    |     ^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::slow-vector-initialization` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#slow_vector_initialization

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:205:1
    |
205 | / pub unsafe extern "C" fn xnmalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
206 | |     let mut vec = Vec::with_capacity((n * s).try_into().unwrap());
207 | | xreallocarray(&mut vec, n.try_into().unwrap(), s.try_into().unwrap());
208 | | return vec.as_mut_ptr() as *mut libc::c_void;
209 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/xmalloc.rs:205:1
    |
205 | / pub unsafe extern "C" fn xnmalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
206 | |     let mut vec = Vec::with_capacity((n * s).try_into().unwrap());
207 | | xreallocarray(&mut vec, n.try_into().unwrap(), s.try_into().unwrap());
208 | | return vec.as_mut_ptr() as *mut libc::c_void;
209 | | }
    | |_^
    |
note: first possible panic found here
   --> src/xmalloc.rs:206:38
    |
206 |     let mut vec = Vec::with_capacity((n * s).try_into().unwrap());
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:208:1
    |
208 | return vec.as_mut_ptr() as *mut libc::c_void;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `vec.as_mut_ptr() as *mut libc::c_void`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:208:8
    |
208 | return vec.as_mut_ptr() as *mut libc::c_void;
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vec.as_mut_ptr().cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:212:29
    |
212 |     let total_size: usize = (n as usize).checked_mul(s as usize).expect("Overflow in multiplication");
    |                             ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/xmalloc.rs:212:29
    |
212 |     let total_size: usize = (n as usize).checked_mul(s as usize).expect("Overflow in multiplication");
    |                             ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:212:54
    |
212 |     let total_size: usize = (n as usize).checked_mul(s as usize).expect("Overflow in multiplication");
    |                                                      ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/xmalloc.rs:212:54
    |
212 |     let total_size: usize = (n as usize).checked_mul(s as usize).expect("Overflow in multiplication");
    |                                                      ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:228:1
    |
228 | / pub unsafe extern "C" fn x2nrealloc(
229 | |     mut p: *mut libc::c_void,
230 | |     mut pn: *mut size_t,
231 | |     mut s: size_t,
...   |
256 | |     return p;
257 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/xmalloc.rs:228:1
    |
228 | / pub unsafe extern "C" fn x2nrealloc(
229 | |     mut p: *mut libc::c_void,
230 | |     mut pn: *mut size_t,
231 | |     mut s: size_t,
...   |
256 | |     return p;
257 | | }
    | |_^
    |
note: first possible panic found here
   --> src/xmalloc.rs:251:53
    |
251 |     let mut vec = Vec::from_raw_parts(p as *mut u8, (n * s).try_into().unwrap(), s.try_into().unwrap());
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:256:5
    |
256 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:236:17
    |
236 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:236:18
    |
236 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:238:31
    |
238 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:238:31
    |
238 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:244:54
    |
244 |                 (n >> 1 as libc::c_int).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xmalloc.rs:246:10
    |
246 |         *(&mut n as *mut size_t) = fresh0;
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:251:39
    |
251 |     let mut vec = Vec::from_raw_parts(p as *mut u8, (n * s).try_into().unwrap(), s.try_into().unwrap());
    |                                       ^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `p.cast::<u8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:253:5
    |
253 | p = vec.as_mut_ptr() as *mut libc::c_void;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vec.as_mut_ptr().cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:259:1
    |
259 | / pub unsafe extern "C" fn xpalloc(
260 | |     mut pa: *mut libc::c_void,
261 | |     mut pn: *mut idx_t,
262 | |     mut n_incr_min: idx_t,
...   |
963 | |     return pa;
964 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function has a cognitive complexity of (131/25)
   --> src/xmalloc.rs:259:26
    |
259 | pub unsafe extern "C" fn xpalloc(
    |                          ^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (698/100)
   --> src/xmalloc.rs:259:1
    |
259 | / pub unsafe extern "C" fn xpalloc(
260 | |     mut pa: *mut libc::c_void,
261 | |     mut pn: *mut idx_t,
262 | |     mut n_incr_min: idx_t,
...   |
963 | |     return pa;
964 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xmalloc.rs:963:5
    |
963 |     return pa;
    |     ^^^^^^^^^^ help: remove `return`: `pa`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: borrow as raw pointer
   --> src/xmalloc.rs:269:6
    |
269 |     *(&mut n as *mut idx_t) = fresh2;
    |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:273:8
    |
273 |     if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
   --> src/xmalloc.rs:277:38
    |
277 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
278 | |         < -(1 as libc::c_int) as idx_t
279 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
280 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
611 | |         }) as libc::c_ulong
612 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:277:38
    |
277 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
278 | |         < -(1 as libc::c_int) as idx_t
279 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
280 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
611 | |         }) as libc::c_ulong
612 | |     }) as idx_t;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:45
    |
277 |     let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:278:11
    |
278 |         < -(1 as libc::c_int) as idx_t
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:279:13
    |
279 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:279:41
    |
279 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:280:15
    |
280 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:280:51
    |
280 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:281:13
    |
281 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:281:41
    |
281 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:282:15
    |
282 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:282:51
    |
282 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:283:20
    |
283 |         && (if s < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:284:20
    |
284 |             if n < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:285:21
    |
285 |                   if ((if 1 as libc::c_int != 0 {
    |  _____________________^
286 | |                     0 as libc::c_int as libc::c_long
287 | |                 } else {
288 | |                     (if 1 as libc::c_int != 0 {
...   |
292 | |                     }) + s
293 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:286:21
    |
286 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:288:21
    |
288 | /                     (if 1 as libc::c_int != 0 {
289 | |                         0 as libc::c_int as libc::c_long
290 | |                     } else {
291 | |                         -(1 as libc::c_int) as idx_t
292 | |                     }) + s
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:289:25
    |
289 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:291:25
    |
291 |                         -(1 as libc::c_int) as idx_t
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:293:22
    |
293 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:293:58
    |
293 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:295:21
    |
295 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:295:26
    |
295 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:297:21
    |
297 | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
298 | |                         0 as libc::c_int as libc::c_long
299 | |                     } else {
300 | |                         s
...   |
362 | |                         -(1 as libc::c_int) as idx_t / -s
363 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |_________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
297 ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
298 +                         0 as libc::c_int as libc::c_long
299 +                     } else {
300 +                         s
301 +                     }) - 1 as libc::c_int as libc::c_long)
302 +                         < 0 as libc::c_int as libc::c_long
303 +                     {
304 +                         !(((((if 1 as libc::c_int != 0 {
305 +                             0 as libc::c_int as libc::c_long
306 +                         } else {
307 +                             s
308 +                         }) + 1 as libc::c_int as libc::c_long)
309 +                             << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
310 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
311 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
312 +                             - 1 as libc::c_int as libc::c_long)
313 +                             * 2 as libc::c_int as libc::c_long
314 +                             + 1 as libc::c_int as libc::c_long)
315 +                     } else {
316 +                         (if 1 as libc::c_int != 0 {
317 +                             0 as libc::c_int as libc::c_long
318 +                         } else {
319 +                             s
320 +                         }) + 0 as libc::c_int as libc::c_long
321 +                     }) < 0 as libc::c_int as libc::c_long
322 +                     {
323 +                         (s
324 +                             < -(if ((if 1 as libc::c_int != 0 {
325 +                                 0 as libc::c_int as libc::c_long
326 +                             } else {
327 +                                 s
328 +                             }) - 1 as libc::c_int as libc::c_long)
329 +                                 < 0 as libc::c_int as libc::c_long
330 +                             {
331 +                                 ((((if 1 as libc::c_int != 0 {
332 +                                     0 as libc::c_int as libc::c_long
333 +                                 } else {
334 +                                     s
335 +                                 }) + 1 as libc::c_int as libc::c_long)
336 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
337 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
338 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
339 +                                     - 1 as libc::c_int as libc::c_long)
340 +                                     * 2 as libc::c_int as libc::c_long
341 +                                     + 1 as libc::c_int as libc::c_long
342 +                             } else {
343 +                                 (if 1 as libc::c_int != 0 {
344 +                                     0 as libc::c_int as libc::c_long
345 +                                 } else {
346 +                                     s
347 +                                 }) - 1 as libc::c_int as libc::c_long
348 +                             })) as libc::c_int
349 +                     } else {
350 +                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
351 +                     }) != 0
352 +                     {
353 +                         (if 1 as libc::c_int != 0 {
354 +                             0 as libc::c_int as libc::c_long
355 +                         } else {
356 +                             s
357 +                         }) + -(1 as libc::c_int) as idx_t
358 +                             >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
359 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
360 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
361 +                     } else {
362 +                         -(1 as libc::c_int) as idx_t / -s
363 +                     }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:297:22
    |
297 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
298 | |                         0 as libc::c_int as libc::c_long
299 | |                     } else {
300 | |                         s
...   |
362 | |                         -(1 as libc::c_int) as idx_t / -s
363 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:297:35
    |
297 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
298 | |                         0 as libc::c_int as libc::c_long
299 | |                     } else {
300 | |                         s
301 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:298:25
    |
298 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:301:26
    |
301 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:302:27
    |
302 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:304:30
    |
304 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
305 | |                             0 as libc::c_int as libc::c_long
306 | |                         } else {
307 | |                             s
308 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:305:29
    |
305 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:308:30
    |
308 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:310:47
    |
310 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:311:47
    |
311 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:31
    |
312 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:313:31
    |
313 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:314:31
    |
314 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:316:25
    |
316 | /                         (if 1 as libc::c_int != 0 {
317 | |                             0 as libc::c_int as libc::c_long
318 | |                         } else {
319 | |                             s
320 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:317:29
    |
317 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:320:30
    |
320 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:321:26
    |
321 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:323:25
    |
323 | /                         (s
324 | |                             < -(if ((if 1 as libc::c_int != 0 {
325 | |                                 0 as libc::c_int as libc::c_long
326 | |                             } else {
...   |
347 | |                                 }) - 1 as libc::c_int as libc::c_long
348 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
323 ~                         i32::from(s
324 +                             < -(if ((if 1 as libc::c_int != 0 {
325 +                                 0 as libc::c_int as libc::c_long
326 +                             } else {
327 +                                 s
328 +                             }) - 1 as libc::c_int as libc::c_long)
329 +                                 < 0 as libc::c_int as libc::c_long
330 +                             {
331 +                                 ((((if 1 as libc::c_int != 0 {
332 +                                     0 as libc::c_int as libc::c_long
333 +                                 } else {
334 +                                     s
335 +                                 }) + 1 as libc::c_int as libc::c_long)
336 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
337 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
338 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
339 +                                     - 1 as libc::c_int as libc::c_long)
340 +                                     * 2 as libc::c_int as libc::c_long
341 +                                     + 1 as libc::c_int as libc::c_long
342 +                             } else {
343 +                                 (if 1 as libc::c_int != 0 {
344 +                                     0 as libc::c_int as libc::c_long
345 +                                 } else {
346 +                                     s
347 +                                 }) - 1 as libc::c_int as libc::c_long
348 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:324:37
    |
324 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
325 | | ...                       0 as libc::c_int as libc::c_long
326 | | ...                   } else {
327 | | ...                       s
328 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:325:33
    |
325 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:328:34
    |
328 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:329:35
    |
329 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:331:36
    |
331 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
332 | | ...                       0 as libc::c_int as libc::c_long
333 | | ...                   } else {
334 | | ...                       s
335 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:332:37
    |
332 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:335:38
    |
335 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:337:55
    |
337 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:338:55
    |
338 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:339:39
    |
339 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:340:39
    |
340 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:341:39
    |
341 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:343:33
    |
343 | / ...                   (if 1 as libc::c_int != 0 {
344 | | ...                       0 as libc::c_int as libc::c_long
345 | | ...                   } else {
346 | | ...                       s
347 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:344:37
    |
344 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:347:38
    |
347 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:350:25
    |
350 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:350:26
    |
350 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:353:25
    |
353 | /                         (if 1 as libc::c_int != 0 {
354 | |                             0 as libc::c_int as libc::c_long
355 | |                         } else {
356 | |                             s
357 | |                         }) + -(1 as libc::c_int) as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:354:29
    |
354 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:357:30
    |
357 |                         }) + -(1 as libc::c_int) as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:359:47
    |
359 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:360:47
    |
360 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:362:25
    |
362 |                         -(1 as libc::c_int) as idx_t / -s
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:363:27
    |
363 |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:366:29
    |
366 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
367 | |                     0 as libc::c_int as libc::c_long
368 | |                 } else {
369 | |                     (if 1 as libc::c_int != 0 {
...   |
373 | |                     }) + 0 as libc::c_int as idx_t
374 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:367:21
    |
367 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:369:21
    |
369 | /                     (if 1 as libc::c_int != 0 {
370 | |                         0 as libc::c_int as libc::c_long
371 | |                     } else {
372 | |                         s
373 | |                     }) + 0 as libc::c_int as idx_t
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:370:25
    |
370 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:373:26
    |
373 |                     }) + 0 as libc::c_int as idx_t
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:374:22
    |
374 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:374:58
    |
374 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:376:26
    |
376 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
377 | |                         0 as libc::c_int as libc::c_long
378 | |                     } else {
379 | |                         (if 1 as libc::c_int != 0 {
...   |
383 | |                         }) + 0 as libc::c_int as idx_t
384 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:377:25
    |
377 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:379:25
    |
379 | /                         (if 1 as libc::c_int != 0 {
380 | |                             0 as libc::c_int as libc::c_long
381 | |                         } else {
382 | |                             s
383 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:380:29
    |
380 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:383:30
    |
383 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:384:26
    |
384 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:386:43
    |
386 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:387:43
    |
387 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:388:27
    |
388 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:389:27
    |
389 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:390:27
    |
390 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:392:21
    |
392 | /                     (if 1 as libc::c_int != 0 {
393 | |                         0 as libc::c_int as libc::c_long
394 | |                     } else {
395 | |                         (if 1 as libc::c_int != 0 {
...   |
399 | |                         }) + 0 as libc::c_int as idx_t
400 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:393:25
    |
393 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:395:25
    |
395 | /                         (if 1 as libc::c_int != 0 {
396 | |                             0 as libc::c_int as libc::c_long
397 | |                         } else {
398 | |                             s
399 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:396:29
    |
396 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:399:30
    |
399 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:400:26
    |
400 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:401:22
    |
401 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:403:21
    |
403 | /                     (((if 1 as libc::c_int != 0 {
404 | |                         0 as libc::c_int as libc::c_long
405 | |                     } else {
406 | |                         s
...   |
443 | |                             }) - 1 as libc::c_int as libc::c_long
444 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
403 ~                     i32::from(((if 1 as libc::c_int != 0 {
404 +                         0 as libc::c_int as libc::c_long
405 +                     } else {
406 +                         s
407 +                     }) + 0 as libc::c_int as idx_t)
408 +                         < -(if ((if 1 as libc::c_int != 0 {
409 +                             0 as libc::c_int as libc::c_long
410 +                         } else {
411 +                             (if 1 as libc::c_int != 0 {
412 +                                 0 as libc::c_int as libc::c_long
413 +                             } else {
414 +                                 s
415 +                             }) + 0 as libc::c_int as idx_t
416 +                         }) - 1 as libc::c_int as libc::c_long)
417 +                             < 0 as libc::c_int as libc::c_long
418 +                         {
419 +                             ((((if 1 as libc::c_int != 0 {
420 +                                 0 as libc::c_int as libc::c_long
421 +                             } else {
422 +                                 (if 1 as libc::c_int != 0 {
423 +                                     0 as libc::c_int as libc::c_long
424 +                                 } else {
425 +                                     s
426 +                                 }) + 0 as libc::c_int as idx_t
427 +                             }) + 1 as libc::c_int as libc::c_long)
428 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
429 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
430 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
431 +                                 - 1 as libc::c_int as libc::c_long)
432 +                                 * 2 as libc::c_int as libc::c_long
433 +                                 + 1 as libc::c_int as libc::c_long
434 +                         } else {
435 +                             (if 1 as libc::c_int != 0 {
436 +                                 0 as libc::c_int as libc::c_long
437 +                             } else {
438 +                                 (if 1 as libc::c_int != 0 {
439 +                                     0 as libc::c_int as libc::c_long
440 +                                 } else {
441 +                                     s
442 +                                 }) + 0 as libc::c_int as idx_t
443 +                             }) - 1 as libc::c_int as libc::c_long
444 +                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:403:23
    |
403 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
404 | |                         0 as libc::c_int as libc::c_long
405 | |                     } else {
406 | |                         s
407 | |                     }) + 0 as libc::c_int as idx_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:404:25
    |
404 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:407:26
    |
407 |                     }) + 0 as libc::c_int as idx_t)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:408:33
    |
408 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
409 | |                             0 as libc::c_int as libc::c_long
410 | |                         } else {
411 | |                             (if 1 as libc::c_int != 0 {
...   |
415 | |                             }) + 0 as libc::c_int as idx_t
416 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:409:29
    |
409 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:411:29
    |
411 | / ...                   (if 1 as libc::c_int != 0 {
412 | | ...                       0 as libc::c_int as libc::c_long
413 | | ...                   } else {
414 | | ...                       s
415 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:412:33
    |
412 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:415:34
    |
415 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:416:30
    |
416 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:417:31
    |
417 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:419:32
    |
419 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
420 | | ...                       0 as libc::c_int as libc::c_long
421 | | ...                   } else {
422 | | ...                       (if 1 as libc::c_int != 0 {
...   |
426 | | ...                       }) + 0 as libc::c_int as idx_t
427 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:420:33
    |
420 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:422:33
    |
422 | / ...                   (if 1 as libc::c_int != 0 {
423 | | ...                       0 as libc::c_int as libc::c_long
424 | | ...                   } else {
425 | | ...                       s
426 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:423:37
    |
423 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:426:38
    |
426 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:427:34
    |
427 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:429:51
    |
429 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:430:51
    |
430 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:431:35
    |
431 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:432:35
    |
432 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:433:35
    |
433 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:435:29
    |
435 | / ...                   (if 1 as libc::c_int != 0 {
436 | | ...                       0 as libc::c_int as libc::c_long
437 | | ...                   } else {
438 | | ...                       (if 1 as libc::c_int != 0 {
...   |
442 | | ...                       }) + 0 as libc::c_int as idx_t
443 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:436:33
    |
436 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:438:33
    |
438 | / ...                   (if 1 as libc::c_int != 0 {
439 | | ...                       0 as libc::c_int as libc::c_long
440 | | ...                   } else {
441 | | ...                       s
442 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:439:37
    |
439 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:442:38
    |
442 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:443:34
    |
443 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:446:21
    |
446 | /                     ((0 as libc::c_int as libc::c_long)
447 | |                         < (if 1 as libc::c_int != 0 {
448 | |                             0 as libc::c_int as libc::c_long
449 | |                         } else {
450 | |                             s
451 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |______________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
446 ~                     i32::from((0 as libc::c_int as libc::c_long)
447 +                         < (if 1 as libc::c_int != 0 {
448 +                             0 as libc::c_int as libc::c_long
449 +                         } else {
450 +                             s
451 +                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:446:22
    |
446 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:447:27
    |
447 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
448 | |                             0 as libc::c_int as libc::c_long
449 | |                         } else {
450 | |                             s
451 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:448:29
    |
448 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:451:30
    |
451 |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:452:33
    |
452 |                 }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:454:25
    |
454 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
455 | |                         0 as libc::c_int as libc::c_long
456 | |                     } else {
457 | |                         n
458 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:455:25
    |
455 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:458:26
    |
458 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:459:27
    |
459 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:461:25
    |
461 | /                         ((0 as libc::c_int as libc::c_long)
462 | |                             < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
461 ~                         i32::from((0 as libc::c_int as libc::c_long)
462 +                             < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:461:26
    |
461 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:462:35
    |
462 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:464:25
    |
464 | /                         ((0 as libc::c_int as libc::c_long) < n
465 | |                             && (-(1 as libc::c_int) as libc::c_long
466 | |                                 - 0 as libc::c_int as idx_t)
467 | |                                 < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
464 ~                         i32::from((0 as libc::c_int as libc::c_long) < n
465 +                             && (-(1 as libc::c_int) as libc::c_long
466 +                                 - 0 as libc::c_int as idx_t)
467 +                                 < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:464:26
    |
464 |                         ((0 as libc::c_int as libc::c_long) < n
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:465:33
    |
465 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:466:35
    |
466 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:467:39
    |
467 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:470:21
    |
470 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:470:22
    |
470 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:474:21
    |
474 |             if s == 0 as libc::c_int as libc::c_long {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:477:24
    |
477 |                 if n < 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:478:33
    |
478 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
479 | |                         0 as libc::c_int as libc::c_long
480 | |                     } else {
481 | |                         (if 1 as libc::c_int != 0 {
...   |
485 | |                         }) + 0 as libc::c_int as idx_t
486 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:479:25
    |
479 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:481:25
    |
481 | /                         (if 1 as libc::c_int != 0 {
482 | |                             0 as libc::c_int as libc::c_long
483 | |                         } else {
484 | |                             n
485 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:482:29
    |
482 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:485:30
    |
485 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:486:26
    |
486 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:487:27
    |
487 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:489:30
    |
489 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
490 | |                             0 as libc::c_int as libc::c_long
491 | |                         } else {
492 | |                             (if 1 as libc::c_int != 0 {
...   |
496 | |                             }) + 0 as libc::c_int as idx_t
497 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:490:29
    |
490 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:492:29
    |
492 | / ...                   (if 1 as libc::c_int != 0 {
493 | | ...                       0 as libc::c_int as libc::c_long
494 | | ...                   } else {
495 | | ...                       n
496 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:493:33
    |
493 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:496:34
    |
496 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:497:30
    |
497 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:499:47
    |
499 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:500:47
    |
500 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:501:31
    |
501 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:502:31
    |
502 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:503:31
    |
503 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:505:25
    |
505 | /                         (if 1 as libc::c_int != 0 {
506 | |                             0 as libc::c_int as libc::c_long
507 | |                         } else {
508 | |                             (if 1 as libc::c_int != 0 {
...   |
512 | |                             }) + 0 as libc::c_int as idx_t
513 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:506:29
    |
506 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:508:29
    |
508 | / ...                   (if 1 as libc::c_int != 0 {
509 | | ...                       0 as libc::c_int as libc::c_long
510 | | ...                   } else {
511 | | ...                       n
512 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:509:33
    |
509 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:512:34
    |
512 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:513:30
    |
513 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:514:26
    |
514 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:516:25
    |
516 | /                         (((if 1 as libc::c_int != 0 {
517 | |                             0 as libc::c_int as libc::c_long
518 | |                         } else {
519 | |                             n
...   |
556 | |                                 }) - 1 as libc::c_int as libc::c_long
557 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
516 ~                         i32::from(((if 1 as libc::c_int != 0 {
517 +                             0 as libc::c_int as libc::c_long
518 +                         } else {
519 +                             n
520 +                         }) + 0 as libc::c_int as idx_t)
521 +                             < -(if ((if 1 as libc::c_int != 0 {
522 +                                 0 as libc::c_int as libc::c_long
523 +                             } else {
524 +                                 (if 1 as libc::c_int != 0 {
525 +                                     0 as libc::c_int as libc::c_long
526 +                                 } else {
527 +                                     n
528 +                                 }) + 0 as libc::c_int as idx_t
529 +                             }) - 1 as libc::c_int as libc::c_long)
530 +                                 < 0 as libc::c_int as libc::c_long
531 +                             {
532 +                                 ((((if 1 as libc::c_int != 0 {
533 +                                     0 as libc::c_int as libc::c_long
534 +                                 } else {
535 +                                     (if 1 as libc::c_int != 0 {
536 +                                         0 as libc::c_int as libc::c_long
537 +                                     } else {
538 +                                         n
539 +                                     }) + 0 as libc::c_int as idx_t
540 +                                 }) + 1 as libc::c_int as libc::c_long)
541 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
542 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
543 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
544 +                                     - 1 as libc::c_int as libc::c_long)
545 +                                     * 2 as libc::c_int as libc::c_long
546 +                                     + 1 as libc::c_int as libc::c_long
547 +                             } else {
548 +                                 (if 1 as libc::c_int != 0 {
549 +                                     0 as libc::c_int as libc::c_long
550 +                                 } else {
551 +                                     (if 1 as libc::c_int != 0 {
552 +                                         0 as libc::c_int as libc::c_long
553 +                                     } else {
554 +                                         n
555 +                                     }) + 0 as libc::c_int as idx_t
556 +                                 }) - 1 as libc::c_int as libc::c_long
557 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:516:27
    |
516 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
517 | |                             0 as libc::c_int as libc::c_long
518 | |                         } else {
519 | |                             n
520 | |                         }) + 0 as libc::c_int as idx_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:517:29
    |
517 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:520:30
    |
520 |                         }) + 0 as libc::c_int as idx_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:521:37
    |
521 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
522 | | ...                       0 as libc::c_int as libc::c_long
523 | | ...                   } else {
524 | | ...                       (if 1 as libc::c_int != 0 {
...   |
528 | | ...                       }) + 0 as libc::c_int as idx_t
529 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:522:33
    |
522 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:524:33
    |
524 | / ...                   (if 1 as libc::c_int != 0 {
525 | | ...                       0 as libc::c_int as libc::c_long
526 | | ...                   } else {
527 | | ...                       n
528 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:525:37
    |
525 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:528:38
    |
528 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:529:34
    |
529 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:530:35
    |
530 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:532:36
    |
532 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
533 | | ...                       0 as libc::c_int as libc::c_long
534 | | ...                   } else {
535 | | ...                       (if 1 as libc::c_int != 0 {
...   |
539 | | ...                       }) + 0 as libc::c_int as idx_t
540 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:533:37
    |
533 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:535:37
    |
535 | / ...                   (if 1 as libc::c_int != 0 {
536 | | ...                       0 as libc::c_int as libc::c_long
537 | | ...                   } else {
538 | | ...                       n
539 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:536:41
    |
536 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:539:42
    |
539 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:540:38
    |
540 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:542:55
    |
542 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:543:55
    |
543 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:544:39
    |
544 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:545:39
    |
545 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:546:39
    |
546 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:548:33
    |
548 | / ...                   (if 1 as libc::c_int != 0 {
549 | | ...                       0 as libc::c_int as libc::c_long
550 | | ...                   } else {
551 | | ...                       (if 1 as libc::c_int != 0 {
...   |
555 | | ...                       }) + 0 as libc::c_int as idx_t
556 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:549:37
    |
549 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:551:37
    |
551 | / ...                   (if 1 as libc::c_int != 0 {
552 | | ...                       0 as libc::c_int as libc::c_long
553 | | ...                   } else {
554 | | ...                       n
555 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:552:41
    |
552 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:555:42
    |
555 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:556:38
    |
556 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:559:25
    |
559 | /                         ((0 as libc::c_int as libc::c_long)
560 | |                             < (if 1 as libc::c_int != 0 {
561 | |                                 0 as libc::c_int as libc::c_long
562 | |                             } else {
563 | |                                 n
564 | |                             }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
559 ~                         i32::from((0 as libc::c_int as libc::c_long)
560 +                             < (if 1 as libc::c_int != 0 {
561 +                                 0 as libc::c_int as libc::c_long
562 +                             } else {
563 +                                 n
564 +                             }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:559:26
    |
559 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:560:31
    |
560 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
561 | | ...                       0 as libc::c_int as libc::c_long
562 | | ...                   } else {
563 | | ...                       n
564 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:561:33
    |
561 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:564:34
    |
564 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:565:37
    |
565 |                     }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:567:29
    |
567 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
568 | |                             0 as libc::c_int as libc::c_long
569 | |                         } else {
570 | |                             s
571 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:568:29
    |
568 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:571:30
    |
571 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:572:31
    |
572 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:574:29
    |
574 | / ...                   ((0 as libc::c_int as libc::c_long)
575 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
574 ~                             i32::from((0 as libc::c_int as libc::c_long)
575 +                                 < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:574:30
    |
574 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:575:39
    |
575 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:577:29
    |
577 | / ...                   ((-(1 as libc::c_int) as libc::c_long
578 | | ...                       - 0 as libc::c_int as idx_t)
579 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
577 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
578 +                                 - 0 as libc::c_int as idx_t)
579 +                                 < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:577:31
    |
577 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:578:35
    |
578 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:579:39
    |
579 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:582:25
    |
582 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:582:26
    |
582 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:585:21
    |
585 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:585:22
    |
585 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:591:10
    |
591 |         *(&mut nbytes as *mut idx_t) = fresh8;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:595:10
    |
595 |         *(&mut nbytes as *mut idx_t) = fresh10;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:596:9
    |
596 |         fresh11 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:599:12
    |
599 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:602:13
    |
602 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:607:9
    |
607 | /         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
608 | |             DEFAULT_MXFAST_0 as libc::c_int
609 | |         } else {
610 | |             0 as libc::c_int
611 | |         }) as libc::c_ulong
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:607:22
    |
607 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(DEFAULT_MXFAST_0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:607:22
    |
607 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:608:13
    |
608 |             DEFAULT_MXFAST_0 as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:618:15
    |
618 |         *pn = 0 as libc::c_int as idx_t;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:623:14
    |
623 |             *(&mut n as *mut idx_t) = fresh12;
    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:624:13
    |
624 |             fresh13 as libc::c_int != 0
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:625:20
    |
625 |                 || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:626:24
    |
626 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:626:54
    |
626 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:627:25
    |
627 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
628 | |                         0 as libc::c_int as libc::c_long
629 | |                     } else {
630 | |                         n
631 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:628:25
    |
628 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:631:26
    |
631 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:632:27
    |
632 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:633:25
    |
633 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
634 | |                         0 as libc::c_int as libc::c_long
635 | |                     } else {
636 | |                         s
637 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:634:25
    |
634 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:637:26
    |
637 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:638:27
    |
638 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:639:32
    |
639 |                     && (if s < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:640:32
    |
640 |                         if n < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:641:33
    |
641 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
642 | | ...                       0 as libc::c_int as libc::c_long
643 | | ...                   } else {
644 | | ...                       (if 1 as libc::c_int != 0 {
...   |
648 | | ...                       }) + s
649 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:642:33
    |
642 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:644:33
    |
644 | / ...                   (if 1 as libc::c_int != 0 {
645 | | ...                       0 as libc::c_int as libc::c_long
646 | | ...                   } else {
647 | | ...                       -(1 as libc::c_int) as idx_t
648 | | ...                   }) + s
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:645:37
    |
645 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:647:37
    |
647 | ...                   -(1 as libc::c_int) as idx_t
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:649:34
    |
649 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:650:35
    |
650 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:652:33
    |
652 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:652:38
    |
652 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:654:33
    |
654 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
655 | | ...                       0 as libc::c_int as libc::c_long
656 | | ...                   } else {
657 | | ...                       s
...   |
720 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
721 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
654 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
655 +                                     0 as libc::c_int as libc::c_long
656 +                                 } else {
657 +                                     s
658 +                                 }) - 1 as libc::c_int as libc::c_long)
659 +                                     < 0 as libc::c_int as libc::c_long
660 +                                 {
661 +                                     !(((((if 1 as libc::c_int != 0 {
662 +                                         0 as libc::c_int as libc::c_long
663 +                                     } else {
664 +                                         s
665 +                                     }) + 1 as libc::c_int as libc::c_long)
666 +                                         << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
667 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
668 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
669 +                                         - 1 as libc::c_int as libc::c_long)
670 +                                         * 2 as libc::c_int as libc::c_long
671 +                                         + 1 as libc::c_int as libc::c_long)
672 +                                 } else {
673 +                                     (if 1 as libc::c_int != 0 {
674 +                                         0 as libc::c_int as libc::c_long
675 +                                     } else {
676 +                                         s
677 +                                     }) + 0 as libc::c_int as libc::c_long
678 +                                 }) < 0 as libc::c_int as libc::c_long
679 +                                 {
680 +                                     (s
681 +                                         < -(if ((if 1 as libc::c_int != 0 {
682 +                                             0 as libc::c_int as libc::c_long
683 +                                         } else {
684 +                                             s
685 +                                         }) - 1 as libc::c_int as libc::c_long)
686 +                                             < 0 as libc::c_int as libc::c_long
687 +                                         {
688 +                                             ((((if 1 as libc::c_int != 0 {
689 +                                                 0 as libc::c_int as libc::c_long
690 +                                             } else {
691 +                                                 s
692 +                                             }) + 1 as libc::c_int as libc::c_long)
693 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
694 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
695 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
696 +                                                 - 1 as libc::c_int as libc::c_long)
697 +                                                 * 2 as libc::c_int as libc::c_long
698 +                                                 + 1 as libc::c_int as libc::c_long
699 +                                         } else {
700 +                                             (if 1 as libc::c_int != 0 {
701 +                                                 0 as libc::c_int as libc::c_long
702 +                                             } else {
703 +                                                 s
704 +                                             }) - 1 as libc::c_int as libc::c_long
705 +                                         })) as libc::c_int
706 +                                 } else {
707 +                                     ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
708 +                                 }) != 0
709 +                                 {
710 +                                     (if 1 as libc::c_int != 0 {
711 +                                         0 as libc::c_int as libc::c_long
712 +                                     } else {
713 +                                         s
714 +                                     }) + -(1 as libc::c_int) as idx_t
715 +                                         >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
716 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
717 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
718 +                                 } else {
719 +                                     -(1 as libc::c_int) as idx_t / -s
720 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:654:34
    |
654 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ________________________^
655 | | ...                       0 as libc::c_int as libc::c_long
656 | | ...                   } else {
657 | | ...                       s
...   |
719 | | ...                       -(1 as libc::c_int) as idx_t / -s
720 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:654:47
    |
654 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________________^
655 | | ...                       0 as libc::c_int as libc::c_long
656 | | ...                   } else {
657 | | ...                       s
658 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:655:37
    |
655 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:658:38
    |
658 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:659:39
    |
659 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:661:42
    |
661 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
662 | | ...                       0 as libc::c_int as libc::c_long
663 | | ...                   } else {
664 | | ...                       s
665 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:662:41
    |
662 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:665:42
    |
665 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:667:59
    |
667 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:668:59
    |
668 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:669:43
    |
669 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:670:43
    |
670 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:671:43
    |
671 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:673:37
    |
673 | / ...                   (if 1 as libc::c_int != 0 {
674 | | ...                       0 as libc::c_int as libc::c_long
675 | | ...                   } else {
676 | | ...                       s
677 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:674:41
    |
674 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:677:42
    |
677 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:678:38
    |
678 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:680:37
    |
680 | / ...                   (s
681 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
682 | | ...                           0 as libc::c_int as libc::c_long
683 | | ...                       } else {
...   |
704 | | ...                           }) - 1 as libc::c_int as libc::c_long
705 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
680 ~                                     i32::from(s
681 +                                         < -(if ((if 1 as libc::c_int != 0 {
682 +                                             0 as libc::c_int as libc::c_long
683 +                                         } else {
684 +                                             s
685 +                                         }) - 1 as libc::c_int as libc::c_long)
686 +                                             < 0 as libc::c_int as libc::c_long
687 +                                         {
688 +                                             ((((if 1 as libc::c_int != 0 {
689 +                                                 0 as libc::c_int as libc::c_long
690 +                                             } else {
691 +                                                 s
692 +                                             }) + 1 as libc::c_int as libc::c_long)
693 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
694 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
695 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
696 +                                                 - 1 as libc::c_int as libc::c_long)
697 +                                                 * 2 as libc::c_int as libc::c_long
698 +                                                 + 1 as libc::c_int as libc::c_long
699 +                                         } else {
700 +                                             (if 1 as libc::c_int != 0 {
701 +                                                 0 as libc::c_int as libc::c_long
702 +                                             } else {
703 +                                                 s
704 +                                             }) - 1 as libc::c_int as libc::c_long
705 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:681:49
    |
681 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
682 | | ...                       0 as libc::c_int as libc::c_long
683 | | ...                   } else {
684 | | ...                       s
685 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:682:45
    |
682 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:685:46
    |
685 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:686:47
    |
686 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:688:48
    |
688 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
689 | | ...                       0 as libc::c_int as libc::c_long
690 | | ...                   } else {
691 | | ...                       s
692 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:689:49
    |
689 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:692:50
    |
692 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:694:67
    |
694 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:695:67
    |
695 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:696:51
    |
696 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:697:51
    |
697 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:698:51
    |
698 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:700:45
    |
700 | / ...                   (if 1 as libc::c_int != 0 {
701 | | ...                       0 as libc::c_int as libc::c_long
702 | | ...                   } else {
703 | | ...                       s
704 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:701:49
    |
701 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:704:50
    |
704 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:707:37
    |
707 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:707:38
    |
707 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:710:37
    |
710 | / ...                   (if 1 as libc::c_int != 0 {
711 | | ...                       0 as libc::c_int as libc::c_long
712 | | ...                   } else {
713 | | ...                       s
714 | | ...                   }) + -(1 as libc::c_int) as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:711:41
    |
711 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:714:42
    |
714 | ...                   }) + -(1 as libc::c_int) as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:716:59
    |
716 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:717:59
    |
717 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:719:37
    |
719 | ...                   -(1 as libc::c_int) as idx_t / -s
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:720:39
    |
720 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:724:41
    |
724 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
725 | | ...                       0 as libc::c_int as libc::c_long
726 | | ...                   } else {
727 | | ...                       (if 1 as libc::c_int != 0 {
...   |
731 | | ...                       }) + 0 as libc::c_int as idx_t
732 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:725:33
    |
725 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:727:33
    |
727 | / ...                   (if 1 as libc::c_int != 0 {
728 | | ...                       0 as libc::c_int as libc::c_long
729 | | ...                   } else {
730 | | ...                       s
731 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:728:37
    |
728 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:731:38
    |
731 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:732:34
    |
732 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:733:35
    |
733 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:735:38
    |
735 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
736 | | ...                       0 as libc::c_int as libc::c_long
737 | | ...                   } else {
738 | | ...                       (if 1 as libc::c_int != 0 {
...   |
742 | | ...                       }) + 0 as libc::c_int as idx_t
743 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:736:37
    |
736 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:738:37
    |
738 | / ...                   (if 1 as libc::c_int != 0 {
739 | | ...                       0 as libc::c_int as libc::c_long
740 | | ...                   } else {
741 | | ...                       s
742 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:739:41
    |
739 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:742:42
    |
742 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:743:38
    |
743 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:745:55
    |
745 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:746:55
    |
746 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:747:39
    |
747 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:748:39
    |
748 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:749:39
    |
749 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:751:33
    |
751 | / ...                   (if 1 as libc::c_int != 0 {
752 | | ...                       0 as libc::c_int as libc::c_long
753 | | ...                   } else {
754 | | ...                       (if 1 as libc::c_int != 0 {
...   |
758 | | ...                       }) + 0 as libc::c_int as idx_t
759 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:752:37
    |
752 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:754:37
    |
754 | / ...                   (if 1 as libc::c_int != 0 {
755 | | ...                       0 as libc::c_int as libc::c_long
756 | | ...                   } else {
757 | | ...                       s
758 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:755:41
    |
755 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:758:42
    |
758 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:759:38
    |
759 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:760:34
    |
760 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:762:33
    |
762 | / ...                   (((if 1 as libc::c_int != 0 {
763 | | ...                       0 as libc::c_int as libc::c_long
764 | | ...                   } else {
765 | | ...                       s
...   |
802 | | ...                           }) - 1 as libc::c_int as libc::c_long
803 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
762 ~                                 i32::from(((if 1 as libc::c_int != 0 {
763 +                                     0 as libc::c_int as libc::c_long
764 +                                 } else {
765 +                                     s
766 +                                 }) + 0 as libc::c_int as idx_t)
767 +                                     < -(if ((if 1 as libc::c_int != 0 {
768 +                                         0 as libc::c_int as libc::c_long
769 +                                     } else {
770 +                                         (if 1 as libc::c_int != 0 {
771 +                                             0 as libc::c_int as libc::c_long
772 +                                         } else {
773 +                                             s
774 +                                         }) + 0 as libc::c_int as idx_t
775 +                                     }) - 1 as libc::c_int as libc::c_long)
776 +                                         < 0 as libc::c_int as libc::c_long
777 +                                     {
778 +                                         ((((if 1 as libc::c_int != 0 {
779 +                                             0 as libc::c_int as libc::c_long
780 +                                         } else {
781 +                                             (if 1 as libc::c_int != 0 {
782 +                                                 0 as libc::c_int as libc::c_long
783 +                                             } else {
784 +                                                 s
785 +                                             }) + 0 as libc::c_int as idx_t
786 +                                         }) + 1 as libc::c_int as libc::c_long)
787 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
788 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
789 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
790 +                                             - 1 as libc::c_int as libc::c_long)
791 +                                             * 2 as libc::c_int as libc::c_long
792 +                                             + 1 as libc::c_int as libc::c_long
793 +                                     } else {
794 +                                         (if 1 as libc::c_int != 0 {
795 +                                             0 as libc::c_int as libc::c_long
796 +                                         } else {
797 +                                             (if 1 as libc::c_int != 0 {
798 +                                                 0 as libc::c_int as libc::c_long
799 +                                             } else {
800 +                                                 s
801 +                                             }) + 0 as libc::c_int as idx_t
802 +                                         }) - 1 as libc::c_int as libc::c_long
803 +                                     }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:762:35
    |
762 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
763 | | ...                       0 as libc::c_int as libc::c_long
764 | | ...                   } else {
765 | | ...                       s
766 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:763:37
    |
763 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:766:38
    |
766 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:767:45
    |
767 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
768 | | ...                       0 as libc::c_int as libc::c_long
769 | | ...                   } else {
770 | | ...                       (if 1 as libc::c_int != 0 {
...   |
774 | | ...                       }) + 0 as libc::c_int as idx_t
775 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:768:41
    |
768 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:770:41
    |
770 | / ...                   (if 1 as libc::c_int != 0 {
771 | | ...                       0 as libc::c_int as libc::c_long
772 | | ...                   } else {
773 | | ...                       s
774 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:771:45
    |
771 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:774:46
    |
774 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:775:42
    |
775 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:776:43
    |
776 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:778:44
    |
778 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
779 | | ...                       0 as libc::c_int as libc::c_long
780 | | ...                   } else {
781 | | ...                       (if 1 as libc::c_int != 0 {
...   |
785 | | ...                       }) + 0 as libc::c_int as idx_t
786 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:779:45
    |
779 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:781:45
    |
781 | / ...                   (if 1 as libc::c_int != 0 {
782 | | ...                       0 as libc::c_int as libc::c_long
783 | | ...                   } else {
784 | | ...                       s
785 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:782:49
    |
782 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:785:50
    |
785 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:786:46
    |
786 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:788:63
    |
788 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:789:63
    |
789 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:790:47
    |
790 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:791:47
    |
791 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:792:47
    |
792 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:794:41
    |
794 | / ...                   (if 1 as libc::c_int != 0 {
795 | | ...                       0 as libc::c_int as libc::c_long
796 | | ...                   } else {
797 | | ...                       (if 1 as libc::c_int != 0 {
...   |
801 | | ...                       }) + 0 as libc::c_int as idx_t
802 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:795:45
    |
795 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:797:45
    |
797 | / ...                   (if 1 as libc::c_int != 0 {
798 | | ...                       0 as libc::c_int as libc::c_long
799 | | ...                   } else {
800 | | ...                       s
801 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:798:49
    |
798 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:801:50
    |
801 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:802:46
    |
802 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:805:33
    |
805 | / ...                   ((0 as libc::c_int as libc::c_long)
806 | | ...                       < (if 1 as libc::c_int != 0 {
807 | | ...                           0 as libc::c_int as libc::c_long
808 | | ...                       } else {
809 | | ...                           s
810 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
805 ~                                 i32::from((0 as libc::c_int as libc::c_long)
806 +                                     < (if 1 as libc::c_int != 0 {
807 +                                         0 as libc::c_int as libc::c_long
808 +                                     } else {
809 +                                         s
810 +                                     }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:805:34
    |
805 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:806:39
    |
806 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
807 | | ...                       0 as libc::c_int as libc::c_long
808 | | ...                   } else {
809 | | ...                       s
810 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:807:41
    |
807 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:810:42
    |
810 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:811:45
    |
811 | ...                   }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:813:37
    |
813 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
814 | | ...                       0 as libc::c_int as libc::c_long
815 | | ...                   } else {
816 | | ...                       n
817 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:814:37
    |
814 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:817:38
    |
817 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:818:39
    |
818 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:820:37
    |
820 | / ...                   ((0 as libc::c_int as libc::c_long)
821 | | ...                       < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
820 ~                                     i32::from((0 as libc::c_int as libc::c_long)
821 +                                         < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:820:38
    |
820 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:821:47
    |
821 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:823:37
    |
823 | / ...                   ((0 as libc::c_int as libc::c_long) < n
824 | | ...                       && (-(1 as libc::c_int) as libc::c_long
825 | | ...                           - 0 as libc::c_int as idx_t)
826 | | ...                           < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |____________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
823 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n
824 +                                         && (-(1 as libc::c_int) as libc::c_long
825 +                                             - 0 as libc::c_int as idx_t)
826 +                                             < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:823:38
    |
823 | ...                   ((0 as libc::c_int as libc::c_long) < n
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:824:45
    |
824 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:825:47
    |
825 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:826:51
    |
826 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:829:33
    |
829 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:829:34
    |
829 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:833:33
    |
833 |                         if s == 0 as libc::c_int as libc::c_long {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:836:36
    |
836 | ...                   if n < 0 as libc::c_int as libc::c_long {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:837:45
    |
837 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
838 | | ...                       0 as libc::c_int as libc::c_long
839 | | ...                   } else {
840 | | ...                       (if 1 as libc::c_int != 0 {
...   |
844 | | ...                       }) + 0 as libc::c_int as idx_t
845 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:838:37
    |
838 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:840:37
    |
840 | / ...                   (if 1 as libc::c_int != 0 {
841 | | ...                       0 as libc::c_int as libc::c_long
842 | | ...                   } else {
843 | | ...                       n
844 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:841:41
    |
841 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:844:42
    |
844 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:845:38
    |
845 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:846:39
    |
846 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:848:42
    |
848 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
849 | | ...                       0 as libc::c_int as libc::c_long
850 | | ...                   } else {
851 | | ...                       (if 1 as libc::c_int != 0 {
...   |
855 | | ...                       }) + 0 as libc::c_int as idx_t
856 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:849:41
    |
849 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:851:41
    |
851 | / ...                   (if 1 as libc::c_int != 0 {
852 | | ...                       0 as libc::c_int as libc::c_long
853 | | ...                   } else {
854 | | ...                       n
855 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:852:45
    |
852 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:855:46
    |
855 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:856:42
    |
856 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:858:59
    |
858 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:859:59
    |
859 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:860:43
    |
860 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:861:43
    |
861 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:862:43
    |
862 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:864:37
    |
864 | / ...                   (if 1 as libc::c_int != 0 {
865 | | ...                       0 as libc::c_int as libc::c_long
866 | | ...                   } else {
867 | | ...                       (if 1 as libc::c_int != 0 {
...   |
871 | | ...                       }) + 0 as libc::c_int as idx_t
872 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:865:41
    |
865 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:867:41
    |
867 | / ...                   (if 1 as libc::c_int != 0 {
868 | | ...                       0 as libc::c_int as libc::c_long
869 | | ...                   } else {
870 | | ...                       n
871 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:868:45
    |
868 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:871:46
    |
871 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:872:42
    |
872 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:873:38
    |
873 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:875:37
    |
875 | / ...                   (((if 1 as libc::c_int != 0 {
876 | | ...                       0 as libc::c_int as libc::c_long
877 | | ...                   } else {
878 | | ...                       n
...   |
915 | | ...                           }) - 1 as libc::c_int as libc::c_long
916 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
875 ~                                     i32::from(((if 1 as libc::c_int != 0 {
876 +                                         0 as libc::c_int as libc::c_long
877 +                                     } else {
878 +                                         n
879 +                                     }) + 0 as libc::c_int as idx_t)
880 +                                         < -(if ((if 1 as libc::c_int != 0 {
881 +                                             0 as libc::c_int as libc::c_long
882 +                                         } else {
883 +                                             (if 1 as libc::c_int != 0 {
884 +                                                 0 as libc::c_int as libc::c_long
885 +                                             } else {
886 +                                                 n
887 +                                             }) + 0 as libc::c_int as idx_t
888 +                                         }) - 1 as libc::c_int as libc::c_long)
889 +                                             < 0 as libc::c_int as libc::c_long
890 +                                         {
891 +                                             ((((if 1 as libc::c_int != 0 {
892 +                                                 0 as libc::c_int as libc::c_long
893 +                                             } else {
894 +                                                 (if 1 as libc::c_int != 0 {
895 +                                                     0 as libc::c_int as libc::c_long
896 +                                                 } else {
897 +                                                     n
898 +                                                 }) + 0 as libc::c_int as idx_t
899 +                                             }) + 1 as libc::c_int as libc::c_long)
900 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
901 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
902 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
903 +                                                 - 1 as libc::c_int as libc::c_long)
904 +                                                 * 2 as libc::c_int as libc::c_long
905 +                                                 + 1 as libc::c_int as libc::c_long
906 +                                         } else {
907 +                                             (if 1 as libc::c_int != 0 {
908 +                                                 0 as libc::c_int as libc::c_long
909 +                                             } else {
910 +                                                 (if 1 as libc::c_int != 0 {
911 +                                                     0 as libc::c_int as libc::c_long
912 +                                                 } else {
913 +                                                     n
914 +                                                 }) + 0 as libc::c_int as idx_t
915 +                                             }) - 1 as libc::c_int as libc::c_long
916 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:875:39
    |
875 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
876 | | ...                       0 as libc::c_int as libc::c_long
877 | | ...                   } else {
878 | | ...                       n
879 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:876:41
    |
876 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:879:42
    |
879 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:880:49
    |
880 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
881 | | ...                       0 as libc::c_int as libc::c_long
882 | | ...                   } else {
883 | | ...                       (if 1 as libc::c_int != 0 {
...   |
887 | | ...                       }) + 0 as libc::c_int as idx_t
888 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:881:45
    |
881 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:883:45
    |
883 | / ...                   (if 1 as libc::c_int != 0 {
884 | | ...                       0 as libc::c_int as libc::c_long
885 | | ...                   } else {
886 | | ...                       n
887 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:884:49
    |
884 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:887:50
    |
887 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:888:46
    |
888 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:889:47
    |
889 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:891:48
    |
891 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
892 | | ...                       0 as libc::c_int as libc::c_long
893 | | ...                   } else {
894 | | ...                       (if 1 as libc::c_int != 0 {
...   |
898 | | ...                       }) + 0 as libc::c_int as idx_t
899 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:892:49
    |
892 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:894:49
    |
894 | / ...                   (if 1 as libc::c_int != 0 {
895 | | ...                       0 as libc::c_int as libc::c_long
896 | | ...                   } else {
897 | | ...                       n
898 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:895:53
    |
895 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:898:54
    |
898 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:899:50
    |
899 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:901:67
    |
901 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:902:67
    |
902 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:903:51
    |
903 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:904:51
    |
904 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:905:51
    |
905 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:907:45
    |
907 | / ...                   (if 1 as libc::c_int != 0 {
908 | | ...                       0 as libc::c_int as libc::c_long
909 | | ...                   } else {
910 | | ...                       (if 1 as libc::c_int != 0 {
...   |
914 | | ...                       }) + 0 as libc::c_int as idx_t
915 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:908:49
    |
908 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:910:49
    |
910 | / ...                   (if 1 as libc::c_int != 0 {
911 | | ...                       0 as libc::c_int as libc::c_long
912 | | ...                   } else {
913 | | ...                       n
914 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:911:53
    |
911 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:914:54
    |
914 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:915:50
    |
915 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:918:37
    |
918 | / ...                   ((0 as libc::c_int as libc::c_long)
919 | | ...                       < (if 1 as libc::c_int != 0 {
920 | | ...                           0 as libc::c_int as libc::c_long
921 | | ...                       } else {
922 | | ...                           n
923 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
918 ~                                     i32::from((0 as libc::c_int as libc::c_long)
919 +                                         < (if 1 as libc::c_int != 0 {
920 +                                             0 as libc::c_int as libc::c_long
921 +                                         } else {
922 +                                             n
923 +                                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:918:38
    |
918 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:919:43
    |
919 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
920 | | ...                       0 as libc::c_int as libc::c_long
921 | | ...                   } else {
922 | | ...                       n
923 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:920:45
    |
920 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:923:46
    |
923 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:924:49
    |
924 | ...                   }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:926:41
    |
926 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
927 | | ...                       0 as libc::c_int as libc::c_long
928 | | ...                   } else {
929 | | ...                       s
930 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:927:41
    |
927 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:930:42
    |
930 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:931:43
    |
931 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:933:41
    |
933 | / ...                   ((0 as libc::c_int as libc::c_long)
934 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
933 ~                                         i32::from((0 as libc::c_int as libc::c_long)
934 +                                             < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:933:42
    |
933 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:934:51
    |
934 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:936:41
    |
936 | / ...                   ((-(1 as libc::c_int) as libc::c_long
937 | | ...                       - 0 as libc::c_int as idx_t)
938 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
936 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
937 +                                             - 0 as libc::c_int as idx_t)
938 +                                             < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:936:43
    |
936 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:937:47
    |
937 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:938:51
    |
938 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:941:37
    |
941 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:941:38
    |
941 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:944:33
    |
944 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:944:34
    |
944 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:950:22
    |
950 |                     *(&mut nbytes as *mut idx_t) = fresh18;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:954:22
    |
954 |                     *(&mut nbytes as *mut idx_t) = fresh20;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:955:21
    |
955 |                     fresh21 as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh21)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:961:23
    |
961 |     pa = xrealloc(pa, nbytes as usize);
    |                       ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/xmalloc.rs:961:23
    |
961 |     pa = xrealloc(pa, nbytes as usize);
    |                       ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: useless conversion to the same type: `usize`
   --> src/xmalloc.rs:967:23
    |
967 |     let size: usize = s.try_into().unwrap_or(0);
    |                       ^^^^^^^^^^^^
    |
    = note: `-W clippy::useless-conversion` implied by `-W clippy::all`
    = help: consider removing `.try_into()`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:979:1
    |
979 | / pub unsafe extern "C" fn xcalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
980 | |     return check_nonnull(calloc(n, s));
981 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:980:5
    |
980 |     return check_nonnull(calloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(calloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function has a cognitive complexity of (64/25)
  --> src/xstrtoimax.rs:44:4
   |
44 | fn bkm_scale(
   |    ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (343/100)
   --> src/xstrtoimax.rs:44:1
    |
44  | / fn bkm_scale(
45  | |     x: &mut i64,
46  | |     scale_factor: i32,
47  | | ) -> strtol_error {
...   |
400 | |
401 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:394:1
    |
394 | return LONGINT_OK;
    | ^^^^^^^^^^^^^^^^^^ help: remove `return`: `LONGINT_OK`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: all if blocks contain the same code at the start
   --> src/xstrtoimax.rs:49:1
    |
49  | / if (0 < -1)
50  | |     && ((if true { 0 } else { *x }) - 1) < 0
51  | |     && ((if true { 0 } else { scale_factor }) - 1) < 0
52  | |     && (if scale_factor < 0 {
...   |
358 | |     let (result, overflowed) = (*x).overflowing_mul(scale_factor as i64);
359 | |     scaled = result;
    | |____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements before the if
    |
49  + let (result, overflowed) = (*x).overflowing_mul(scale_factor as i64);
50  + scaled = result;
51  + if (0 < -1)
52  +     && ((if true { 0 } else { *x }) - 1) < 0
53  +     && ((if true { 0 } else { scale_factor }) - 1) < 0
54  +     && (if scale_factor < 0 {
55  +         if *x < 0 {
56  +              if ((if 1 as libc::c_int != 0 {
57  +                     0 as libc::c_int as libc::c_long
58  +                 } else {
59  +                     (if 1 as libc::c_int != 0 {
60  +                         0 as libc::c_int as libc::c_long
61  +                     } else {
62  +                         -(1 as libc::c_int) as intmax_t
63  +                     }) + scale_factor as libc::c_long
64  +                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
65  +                 {
66  +                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
67  +                         as libc::c_int
68  +                 } else {
69  +                     ((if (if (if ((if 1 as libc::c_int != 0 {
70  +                         0 as libc::c_int
71  +                     } else {
72  +                         scale_factor
73  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
74  +                     {
75  +                         !(((((if 1 as libc::c_int != 0 {
76  +                             0 as libc::c_int
77  +                         } else {
78  +                             scale_factor
79  +                         }) + 1 as libc::c_int)
80  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
81  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
82  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
83  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
84  +                     } else {
85  +                         (if 1 as libc::c_int != 0 {
86  +                             0 as libc::c_int
87  +                         } else {
88  +                             scale_factor
89  +                         }) + 0 as libc::c_int
90  +                     }) < 0 as libc::c_int
91  +                     {
92  +                         (scale_factor
93  +                             < -(if ((if 1 as libc::c_int != 0 {
94  +                                 0 as libc::c_int
95  +                             } else {
96  +                                 scale_factor
97  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
98  +                             {
99  +                                 ((((if 1 as libc::c_int != 0 {
100 +                                     0 as libc::c_int
101 +                                 } else {
102 +                                     scale_factor
103 +                                 }) + 1 as libc::c_int)
104 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
105 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
106 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
107 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
108 +                             } else {
109 +                                 (if 1 as libc::c_int != 0 {
110 +                                     0 as libc::c_int
111 +                                 } else {
112 +                                     scale_factor
113 +                                 }) - 1 as libc::c_int
114 +                             })) as libc::c_int
115 +                     } else {
116 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
117 +                     }) != 0
118 +                     {
119 +                         (if 1 as libc::c_int != 0 {
120 +                             0 as libc::c_int
121 +                         } else {
122 +                             scale_factor
123 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
124 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
125 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
126 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
127 +                     } else {
128 +                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
129 +                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
130 +                 }
131 +             
132 +         } else {
133 +              if (if (if ((if 1 as libc::c_int != 0 {
134 +                     0 as libc::c_int as libc::c_long
135 +                 } else {
136 +                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
137 +                         as libc::c_long + 0 as libc::c_int as intmax_t
138 +                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
139 +                 {
140 +                     !(((((if 1 as libc::c_int != 0 {
141 +                         0 as libc::c_int as libc::c_long
142 +                     } else {
143 +                         (if 1 as libc::c_int != 0 {
144 +                             0 as libc::c_int
145 +                         } else {
146 +                             scale_factor
147 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t
148 +                     }) + 1 as libc::c_int as libc::c_long)
149 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
150 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
151 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
152 +                         - 1 as libc::c_int as libc::c_long)
153 +                         * 2 as libc::c_int as libc::c_long
154 +                         + 1 as libc::c_int as libc::c_long)
155 +                 } else {
156 +                     (if 1 as libc::c_int != 0 {
157 +                         0 as libc::c_int as libc::c_long
158 +                     } else {
159 +                         (if 1 as libc::c_int != 0 {
160 +                             0 as libc::c_int
161 +                         } else {
162 +                             scale_factor
163 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t
164 +                     }) + 0 as libc::c_int as libc::c_long
165 +                 }) < 0 as libc::c_int as libc::c_long
166 +                 {
167 +                     (((if 1 as libc::c_int != 0 {
168 +                         0 as libc::c_int
169 +                     } else {
170 +                         scale_factor
171 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
172 +                         < -(if ((if 1 as libc::c_int != 0 {
173 +                             0 as libc::c_int as libc::c_long
174 +                         } else {
175 +                             (if 1 as libc::c_int != 0 {
176 +                                 0 as libc::c_int
177 +                             } else {
178 +                                 scale_factor
179 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
180 +                         }) - 1 as libc::c_int as libc::c_long)
181 +                             < 0 as libc::c_int as libc::c_long
182 +                         {
183 +                             ((((if 1 as libc::c_int != 0 {
184 +                                 0 as libc::c_int as libc::c_long
185 +                             } else {
186 +                                 (if 1 as libc::c_int != 0 {
187 +                                     0 as libc::c_int
188 +                                 } else {
189 +                                     scale_factor
190 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
191 +                             }) + 1 as libc::c_int as libc::c_long)
192 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
193 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
194 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
195 +                                 - 1 as libc::c_int as libc::c_long)
196 +                                 * 2 as libc::c_int as libc::c_long
197 +                                 + 1 as libc::c_int as libc::c_long
198 +                         } else {
199 +                             (if 1 as libc::c_int != 0 {
200 +                                 0 as libc::c_int as libc::c_long
201 +                             } else {
202 +                                 (if 1 as libc::c_int != 0 {
203 +                                     0 as libc::c_int
204 +                                 } else {
205 +                                     scale_factor
206 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
207 +                             }) - 1 as libc::c_int as libc::c_long
208 +                         })) as libc::c_int
209 +                 } else {
210 +                     ((0 as libc::c_int as libc::c_long)
211 +                         < (if 1 as libc::c_int != 0 {
212 +                             0 as libc::c_int
213 +                         } else {
214 +                             scale_factor
215 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
216 +                 }) != 0 && scale_factor == -(1 as libc::c_int)
217 +                 {
218 +                     if ((if 1 as libc::c_int != 0 {
219 +                         0 as libc::c_int as libc::c_long
220 +                     } else {
221 +                         *x
222 +                     }) - 1 as libc::c_int as libc::c_long)
223 +                         < 0 as libc::c_int as libc::c_long
224 +                     {
225 +                         ((0 as libc::c_int as libc::c_long)
226 +                             < *x + 0 as libc::c_int as intmax_t) as libc::c_int
227 +                     } else {
228 +                         ((0 as libc::c_int as libc::c_long) < *x
229 +                             && (-(1 as libc::c_int) as libc::c_long
230 +                                 - 0 as libc::c_int as intmax_t)
231 +                                 < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
232 +                     }
233 +                 } else {
234 +                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
235 +                         as libc::c_int
236 +                 }
237 +             
238 +         }
239 +     } else {
240 +          if scale_factor == 0 as libc::c_int {
241 +                 0 as libc::c_int
242 +             } else {
243 +                 if *x < 0 as libc::c_int as libc::c_long {
244 +                     if (if (if ((if 1 as libc::c_int != 0 {
245 +                         0 as libc::c_int as libc::c_long
246 +                     } else {
247 +                         (if 1 as libc::c_int != 0 {
248 +                             0 as libc::c_int as libc::c_long
249 +                         } else {
250 +                             *x
251 +                         }) + 0 as libc::c_int as intmax_t
252 +                     }) - 1 as libc::c_int as libc::c_long)
253 +                         < 0 as libc::c_int as libc::c_long
254 +                     {
255 +                         !(((((if 1 as libc::c_int != 0 {
256 +                             0 as libc::c_int as libc::c_long
257 +                         } else {
258 +                             (if 1 as libc::c_int != 0 {
259 +                                 0 as libc::c_int as libc::c_long
260 +                             } else {
261 +                                 *x
262 +                             }) + 0 as libc::c_int as intmax_t
263 +                         }) + 1 as libc::c_int as libc::c_long)
264 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
265 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
266 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
267 +                             - 1 as libc::c_int as libc::c_long)
268 +                             * 2 as libc::c_int as libc::c_long
269 +                             + 1 as libc::c_int as libc::c_long)
270 +                     } else {
271 +                         (if 1 as libc::c_int != 0 {
272 +                             0 as libc::c_int as libc::c_long
273 +                         } else {
274 +                             (if 1 as libc::c_int != 0 {
275 +                                 0 as libc::c_int as libc::c_long
276 +                             } else {
277 +                                 *x
278 +                             }) + 0 as libc::c_int as intmax_t
279 +                         }) + 0 as libc::c_int as libc::c_long
280 +                     }) < 0 as libc::c_int as libc::c_long
281 +                     {
282 +                         (((if 1 as libc::c_int != 0 {
283 +                             0 as libc::c_int as libc::c_long
284 +                         } else {
285 +                             *x
286 +                         }) + 0 as libc::c_int as intmax_t)
287 +                             < -(if ((if 1 as libc::c_int != 0 {
288 +                                 0 as libc::c_int as libc::c_long
289 +                             } else {
290 +                                 (if 1 as libc::c_int != 0 {
291 +                                     0 as libc::c_int as libc::c_long
292 +                                 } else {
293 +                                     *x
294 +                                 }) + 0 as libc::c_int as intmax_t
295 +                             }) - 1 as libc::c_int as libc::c_long)
296 +                                 < 0 as libc::c_int as libc::c_long
297 +                             {
298 +                                 ((((if 1 as libc::c_int != 0 {
299 +                                     0 as libc::c_int as libc::c_long
300 +                                 } else {
301 +                                     (if 1 as libc::c_int != 0 {
302 +                                         0 as libc::c_int as libc::c_long
303 +                                     } else {
304 +                                         *x
305 +                                     }) + 0 as libc::c_int as intmax_t
306 +                                 }) + 1 as libc::c_int as libc::c_long)
307 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
308 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
309 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
310 +                                     - 1 as libc::c_int as libc::c_long)
311 +                                     * 2 as libc::c_int as libc::c_long
312 +                                     + 1 as libc::c_int as libc::c_long
313 +                             } else {
314 +                                 (if 1 as libc::c_int != 0 {
315 +                                     0 as libc::c_int as libc::c_long
316 +                                 } else {
317 +                                     (if 1 as libc::c_int != 0 {
318 +                                         0 as libc::c_int as libc::c_long
319 +                                     } else {
320 +                                         *x
321 +                                     }) + 0 as libc::c_int as intmax_t
322 +                                 }) - 1 as libc::c_int as libc::c_long
323 +                             })) as libc::c_int
324 +                     } else {
325 +                         ((0 as libc::c_int as libc::c_long)
326 +                             < (if 1 as libc::c_int != 0 {
327 +                                 0 as libc::c_int as libc::c_long
328 +                             } else {
329 +                                 *x
330 +                             }) + 0 as libc::c_int as intmax_t) as libc::c_int
331 +                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
332 +                     {
333 +                         if ((if 1 as libc::c_int != 0 {
334 +                             0 as libc::c_int
335 +                         } else {
336 +                             scale_factor
337 +                         }) - 1 as libc::c_int) < 0 as libc::c_int
338 +                         {
339 +                             ((0 as libc::c_int as libc::c_long)
340 +                                 < scale_factor as libc::c_long
341 +                                     + 0 as libc::c_int as intmax_t) as libc::c_int
342 +                         } else {
343 +                             ((-(1 as libc::c_int) as libc::c_long
344 +                                 - 0 as libc::c_int as intmax_t)
345 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_long)
346 +                                 as libc::c_int
347 +                         }
348 +                     } else {
349 +                         (0 as libc::c_int as intmax_t / *x
350 +                             < scale_factor as libc::c_long) as libc::c_int
351 +                     }
352 +                 } else {
353 +                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
354 +                         < *x) as libc::c_int
355 +                 }
356 +             }
357 +         
358 +     }) != 0{
    |

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:54:18
   |
54 |                if ((if 1 as libc::c_int != 0 {
   |  __________________^
55 | |                     0 as libc::c_int as libc::c_long
56 | |                 } else {
57 | |                     (if 1 as libc::c_int != 0 {
...  |
61 | |                     }) + scale_factor as libc::c_long
62 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   | |__________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:55:21
   |
55 |                     0 as libc::c_int as libc::c_long
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:57:21
   |
57 | /                     (if 1 as libc::c_int != 0 {
58 | |                         0 as libc::c_int as libc::c_long
59 | |                     } else {
60 | |                         -(1 as libc::c_int) as intmax_t
61 | |                     }) + scale_factor as libc::c_long
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:58:25
   |
58 |                         0 as libc::c_int as libc::c_long
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:60:25
   |
60 |                         -(1 as libc::c_int) as intmax_t
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:61:26
   |
61 |                     }) + scale_factor as libc::c_long
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:62:22
   |
62 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:62:58
   |
62 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xstrtoimax.rs:64:21
   |
64 | /                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
65 | |                         as libc::c_int
   | |______________________________________^ help: try: `i32::from(*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:64:27
   |
64 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:64:61
   |
64 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:67:21
    |
67  | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
68  | |                         0 as libc::c_int
69  | |                     } else {
70  | |                         scale_factor
...   |
126 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
127 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |__________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
67  ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
68  +                         0 as libc::c_int
69  +                     } else {
70  +                         scale_factor
71  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
72  +                     {
73  +                         !(((((if 1 as libc::c_int != 0 {
74  +                             0 as libc::c_int
75  +                         } else {
76  +                             scale_factor
77  +                         }) + 1 as libc::c_int)
78  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
79  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
80  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
81  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
82  +                     } else {
83  +                         (if 1 as libc::c_int != 0 {
84  +                             0 as libc::c_int
85  +                         } else {
86  +                             scale_factor
87  +                         }) + 0 as libc::c_int
88  +                     }) < 0 as libc::c_int
89  +                     {
90  +                         (scale_factor
91  +                             < -(if ((if 1 as libc::c_int != 0 {
92  +                                 0 as libc::c_int
93  +                             } else {
94  +                                 scale_factor
95  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
96  +                             {
97  +                                 ((((if 1 as libc::c_int != 0 {
98  +                                     0 as libc::c_int
99  +                                 } else {
100 +                                     scale_factor
101 +                                 }) + 1 as libc::c_int)
102 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
103 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
104 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
105 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
106 +                             } else {
107 +                                 (if 1 as libc::c_int != 0 {
108 +                                     0 as libc::c_int
109 +                                 } else {
110 +                                     scale_factor
111 +                                 }) - 1 as libc::c_int
112 +                             })) as libc::c_int
113 +                     } else {
114 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
115 +                     }) != 0
116 +                     {
117 +                         (if 1 as libc::c_int != 0 {
118 +                             0 as libc::c_int
119 +                         } else {
120 +                             scale_factor
121 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
122 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
123 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
124 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
125 +                     } else {
126 +                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
127 +                     }) <= -(1 as libc::c_int) as libc::c_long - *x)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:67:22
    |
67  |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
68  | |                         0 as libc::c_int
69  | |                     } else {
70  | |                         scale_factor
...   |
126 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
127 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:67:35
   |
67 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
   |  ___________________________________^
68 | |                         0 as libc::c_int
69 | |                     } else {
70 | |                         scale_factor
71 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:73:30
   |
73 |                           !(((((if 1 as libc::c_int != 0 {
   |  ______________________________^
74 | |                             0 as libc::c_int
75 | |                         } else {
76 | |                             scale_factor
77 | |                         }) + 1 as libc::c_int)
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:79:47
   |
79 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:80:47
   |
80 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:83:25
   |
83 | /                         (if 1 as libc::c_int != 0 {
84 | |                             0 as libc::c_int
85 | |                         } else {
86 | |                             scale_factor
87 | |                         }) + 0 as libc::c_int
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:90:25
    |
90  | /                         (scale_factor
91  | |                             < -(if ((if 1 as libc::c_int != 0 {
92  | |                                 0 as libc::c_int
93  | |                             } else {
...   |
111 | |                                 }) - 1 as libc::c_int
112 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
90  ~                         i32::from(scale_factor
91  +                             < -(if ((if 1 as libc::c_int != 0 {
92  +                                 0 as libc::c_int
93  +                             } else {
94  +                                 scale_factor
95  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
96  +                             {
97  +                                 ((((if 1 as libc::c_int != 0 {
98  +                                     0 as libc::c_int
99  +                                 } else {
100 +                                     scale_factor
101 +                                 }) + 1 as libc::c_int)
102 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
103 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
104 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
105 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
106 +                             } else {
107 +                                 (if 1 as libc::c_int != 0 {
108 +                                     0 as libc::c_int
109 +                                 } else {
110 +                                     scale_factor
111 +                                 }) - 1 as libc::c_int
112 +                             }))
    |

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:91:37
   |
91 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
   |  _______________________________^
92 | | ...                       0 as libc::c_int
93 | | ...                   } else {
94 | | ...                       scale_factor
95 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
   | |________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:97:36
    |
97  |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
98  | | ...                       0 as libc::c_int
99  | | ...                   } else {
100 | | ...                       scale_factor
101 | | ...                   }) + 1 as libc::c_int)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:103:55
    |
103 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:104:55
    |
104 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:107:33
    |
107 | / ...                   (if 1 as libc::c_int != 0 {
108 | | ...                       0 as libc::c_int
109 | | ...                   } else {
110 | | ...                       scale_factor
111 | | ...                   }) - 1 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:114:25
    |
114 |                         ((0 as libc::c_int) < scale_factor) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:117:25
    |
117 | /                         (if 1 as libc::c_int != 0 {
118 | |                             0 as libc::c_int
119 | |                         } else {
120 | |                             scale_factor
121 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
117 ~                         i64::from((if 1 as libc::c_int != 0 {
118 +                             0 as libc::c_int
119 +                         } else {
120 +                             scale_factor
121 ~                         })) + -(1 as libc::c_int) as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:117:25
    |
117 | /                         (if 1 as libc::c_int != 0 {
118 | |                             0 as libc::c_int
119 | |                         } else {
120 | |                             scale_factor
121 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:121:46
    |
121 |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:123:47
    |
123 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:124:47
    |
124 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:126:25
    |
126 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:126:59
    |
126 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:127:27
    |
127 |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:131:26
    |
131 |                if (if (if ((if 1 as libc::c_int != 0 {
    |  __________________________^
132 | |                     0 as libc::c_int as libc::c_long
133 | |                 } else {
134 | |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
135 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
136 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:132:21
    |
132 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:134:21
    |
134 | /                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
135 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
    | |_______________________________________^ help: try: `i64::from((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor }))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:134:21
    |
134 |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:135:43
    |
135 |                         as libc::c_long + 0 as libc::c_int as intmax_t
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:136:22
    |
136 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:136:58
    |
136 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:138:26
    |
138 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
139 | |                         0 as libc::c_int as libc::c_long
140 | |                     } else {
141 | |                         (if 1 as libc::c_int != 0 {
...   |
145 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
146 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:139:25
    |
139 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:141:25
    |
141 | /                         (if 1 as libc::c_int != 0 {
142 | |                             0 as libc::c_int
143 | |                         } else {
144 | |                             scale_factor
145 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
141 ~                         i64::from((if 1 as libc::c_int != 0 {
142 +                             0 as libc::c_int
143 +                         } else {
144 +                             scale_factor
145 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:141:25
    |
141 | /                         (if 1 as libc::c_int != 0 {
142 | |                             0 as libc::c_int
143 | |                         } else {
144 | |                             scale_factor
145 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:145:46
    |
145 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:146:26
    |
146 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:148:43
    |
148 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:149:43
    |
149 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:150:27
    |
150 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:151:27
    |
151 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:152:27
    |
152 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:154:21
    |
154 | /                     (if 1 as libc::c_int != 0 {
155 | |                         0 as libc::c_int as libc::c_long
156 | |                     } else {
157 | |                         (if 1 as libc::c_int != 0 {
...   |
161 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
162 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:155:25
    |
155 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:157:25
    |
157 | /                         (if 1 as libc::c_int != 0 {
158 | |                             0 as libc::c_int
159 | |                         } else {
160 | |                             scale_factor
161 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
157 ~                         i64::from((if 1 as libc::c_int != 0 {
158 +                             0 as libc::c_int
159 +                         } else {
160 +                             scale_factor
161 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:157:25
    |
157 | /                         (if 1 as libc::c_int != 0 {
158 | |                             0 as libc::c_int
159 | |                         } else {
160 | |                             scale_factor
161 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:161:46
    |
161 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:162:26
    |
162 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:163:22
    |
163 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:165:21
    |
165 | /                     (((if 1 as libc::c_int != 0 {
166 | |                         0 as libc::c_int
167 | |                     } else {
168 | |                         scale_factor
...   |
205 | |                             }) - 1 as libc::c_int as libc::c_long
206 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
165 ~                     i32::from(((if 1 as libc::c_int != 0 {
166 +                         0 as libc::c_int
167 +                     } else {
168 +                         scale_factor
169 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
170 +                         < -(if ((if 1 as libc::c_int != 0 {
171 +                             0 as libc::c_int as libc::c_long
172 +                         } else {
173 +                             (if 1 as libc::c_int != 0 {
174 +                                 0 as libc::c_int
175 +                             } else {
176 +                                 scale_factor
177 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
178 +                         }) - 1 as libc::c_int as libc::c_long)
179 +                             < 0 as libc::c_int as libc::c_long
180 +                         {
181 +                             ((((if 1 as libc::c_int != 0 {
182 +                                 0 as libc::c_int as libc::c_long
183 +                             } else {
184 +                                 (if 1 as libc::c_int != 0 {
185 +                                     0 as libc::c_int
186 +                                 } else {
187 +                                     scale_factor
188 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
189 +                             }) + 1 as libc::c_int as libc::c_long)
190 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
191 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
192 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
193 +                                 - 1 as libc::c_int as libc::c_long)
194 +                                 * 2 as libc::c_int as libc::c_long
195 +                                 + 1 as libc::c_int as libc::c_long
196 +                         } else {
197 +                             (if 1 as libc::c_int != 0 {
198 +                                 0 as libc::c_int as libc::c_long
199 +                             } else {
200 +                                 (if 1 as libc::c_int != 0 {
201 +                                     0 as libc::c_int
202 +                                 } else {
203 +                                     scale_factor
204 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
205 +                             }) - 1 as libc::c_int as libc::c_long
206 +                         }))
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:165:23
    |
165 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
166 | |                         0 as libc::c_int
167 | |                     } else {
168 | |                         scale_factor
169 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
165 ~                     ((i64::from((if 1 as libc::c_int != 0 {
166 +                         0 as libc::c_int
167 +                     } else {
168 +                         scale_factor
169 ~                     })) + 0 as libc::c_int as intmax_t)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:165:23
    |
165 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
166 | |                         0 as libc::c_int
167 | |                     } else {
168 | |                         scale_factor
169 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:169:42
    |
169 |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:170:33
    |
170 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
171 | |                             0 as libc::c_int as libc::c_long
172 | |                         } else {
173 | |                             (if 1 as libc::c_int != 0 {
...   |
177 | |                             }) as libc::c_long + 0 as libc::c_int as intmax_t
178 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:171:29
    |
171 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:173:29
    |
173 | / ...                   (if 1 as libc::c_int != 0 {
174 | | ...                       0 as libc::c_int
175 | | ...                   } else {
176 | | ...                       scale_factor
177 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
173 ~                             i64::from((if 1 as libc::c_int != 0 {
174 +                                 0 as libc::c_int
175 +                             } else {
176 +                                 scale_factor
177 ~                             })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:173:29
    |
173 | / ...                   (if 1 as libc::c_int != 0 {
174 | | ...                       0 as libc::c_int
175 | | ...                   } else {
176 | | ...                       scale_factor
177 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:177:50
    |
177 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:178:30
    |
178 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:179:31
    |
179 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:181:32
    |
181 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
182 | | ...                       0 as libc::c_int as libc::c_long
183 | | ...                   } else {
184 | | ...                       (if 1 as libc::c_int != 0 {
...   |
188 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
189 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:182:33
    |
182 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:184:33
    |
184 | / ...                   (if 1 as libc::c_int != 0 {
185 | | ...                       0 as libc::c_int
186 | | ...                   } else {
187 | | ...                       scale_factor
188 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
184 ~                                 i64::from((if 1 as libc::c_int != 0 {
185 +                                     0 as libc::c_int
186 +                                 } else {
187 +                                     scale_factor
188 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:184:33
    |
184 | / ...                   (if 1 as libc::c_int != 0 {
185 | | ...                       0 as libc::c_int
186 | | ...                   } else {
187 | | ...                       scale_factor
188 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:188:54
    |
188 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:189:34
    |
189 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:191:51
    |
191 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:192:51
    |
192 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:193:35
    |
193 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:194:35
    |
194 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:195:35
    |
195 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:197:29
    |
197 | / ...                   (if 1 as libc::c_int != 0 {
198 | | ...                       0 as libc::c_int as libc::c_long
199 | | ...                   } else {
200 | | ...                       (if 1 as libc::c_int != 0 {
...   |
204 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
205 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:198:33
    |
198 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:200:33
    |
200 | / ...                   (if 1 as libc::c_int != 0 {
201 | | ...                       0 as libc::c_int
202 | | ...                   } else {
203 | | ...                       scale_factor
204 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
200 ~                                 i64::from((if 1 as libc::c_int != 0 {
201 +                                     0 as libc::c_int
202 +                                 } else {
203 +                                     scale_factor
204 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:200:33
    |
200 | / ...                   (if 1 as libc::c_int != 0 {
201 | | ...                       0 as libc::c_int
202 | | ...                   } else {
203 | | ...                       scale_factor
204 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:204:54
    |
204 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:205:34
    |
205 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:208:21
    |
208 | /                     ((0 as libc::c_int as libc::c_long)
209 | |                         < (if 1 as libc::c_int != 0 {
210 | |                             0 as libc::c_int
211 | |                         } else {
212 | |                             scale_factor
213 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
208 ~                     i32::from((0 as libc::c_int as libc::c_long)
209 +                         < (if 1 as libc::c_int != 0 {
210 +                             0 as libc::c_int
211 +                         } else {
212 +                             scale_factor
213 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:208:22
    |
208 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:209:27
    |
209 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
210 | |                             0 as libc::c_int
211 | |                         } else {
212 | |                             scale_factor
213 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
209 ~                         < i64::from((if 1 as libc::c_int != 0 {
210 +                             0 as libc::c_int
211 +                         } else {
212 +                             scale_factor
213 ~                         })) + 0 as libc::c_int as intmax_t) as libc::c_int
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:209:27
    |
209 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
210 | |                             0 as libc::c_int
211 | |                         } else {
212 | |                             scale_factor
213 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:213:46
    |
213 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:216:25
    |
216 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
217 | |                         0 as libc::c_int as libc::c_long
218 | |                     } else {
219 | |                         *x
220 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:217:25
    |
217 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:220:26
    |
220 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:221:27
    |
221 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:223:25
    |
223 | /                         ((0 as libc::c_int as libc::c_long)
224 | |                             < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
223 ~                         i32::from((0 as libc::c_int as libc::c_long)
224 +                             < *x + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:223:26
    |
223 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:224:36
    |
224 | ...                   < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:226:25
    |
226 | /                         ((0 as libc::c_int as libc::c_long) < *x
227 | |                             && (-(1 as libc::c_int) as libc::c_long
228 | |                                 - 0 as libc::c_int as intmax_t)
229 | |                                 < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |_______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
226 ~                         i32::from((0 as libc::c_int as libc::c_long) < *x
227 +                             && (-(1 as libc::c_int) as libc::c_long
228 +                                 - 0 as libc::c_int as intmax_t)
229 +                                 < *x - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:226:26
    |
226 |                         ((0 as libc::c_int as libc::c_long) < *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:227:33
    |
227 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:228:35
    |
228 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:229:40
    |
229 | ...                   < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:232:21
    |
232 | /                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
233 | |                         as libc::c_int
    | |______________________________________^ help: try: `i32::from((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:232:23
    |
232 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:232:54
    |
232 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:241:25
    |
241 |                 if *x < 0 as libc::c_int as libc::c_long {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:242:33
    |
242 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
243 | |                         0 as libc::c_int as libc::c_long
244 | |                     } else {
245 | |                         (if 1 as libc::c_int != 0 {
...   |
249 | |                         }) + 0 as libc::c_int as intmax_t
250 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:243:25
    |
243 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:245:25
    |
245 | /                         (if 1 as libc::c_int != 0 {
246 | |                             0 as libc::c_int as libc::c_long
247 | |                         } else {
248 | |                             *x
249 | |                         }) + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:246:29
    |
246 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:249:30
    |
249 |                         }) + 0 as libc::c_int as intmax_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:250:26
    |
250 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:251:27
    |
251 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:253:30
    |
253 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
254 | |                             0 as libc::c_int as libc::c_long
255 | |                         } else {
256 | |                             (if 1 as libc::c_int != 0 {
...   |
260 | |                             }) + 0 as libc::c_int as intmax_t
261 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:254:29
    |
254 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:256:29
    |
256 | / ...                   (if 1 as libc::c_int != 0 {
257 | | ...                       0 as libc::c_int as libc::c_long
258 | | ...                   } else {
259 | | ...                       *x
260 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:257:33
    |
257 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:260:34
    |
260 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:261:30
    |
261 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:263:47
    |
263 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:264:47
    |
264 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:265:31
    |
265 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:266:31
    |
266 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:267:31
    |
267 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:269:25
    |
269 | /                         (if 1 as libc::c_int != 0 {
270 | |                             0 as libc::c_int as libc::c_long
271 | |                         } else {
272 | |                             (if 1 as libc::c_int != 0 {
...   |
276 | |                             }) + 0 as libc::c_int as intmax_t
277 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:270:29
    |
270 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:272:29
    |
272 | / ...                   (if 1 as libc::c_int != 0 {
273 | | ...                       0 as libc::c_int as libc::c_long
274 | | ...                   } else {
275 | | ...                       *x
276 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:273:33
    |
273 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:276:34
    |
276 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:277:30
    |
277 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:278:26
    |
278 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:280:25
    |
280 | /                         (((if 1 as libc::c_int != 0 {
281 | |                             0 as libc::c_int as libc::c_long
282 | |                         } else {
283 | |                             *x
...   |
320 | |                                 }) - 1 as libc::c_int as libc::c_long
321 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
280 ~                         i32::from(((if 1 as libc::c_int != 0 {
281 +                             0 as libc::c_int as libc::c_long
282 +                         } else {
283 +                             *x
284 +                         }) + 0 as libc::c_int as intmax_t)
285 +                             < -(if ((if 1 as libc::c_int != 0 {
286 +                                 0 as libc::c_int as libc::c_long
287 +                             } else {
288 +                                 (if 1 as libc::c_int != 0 {
289 +                                     0 as libc::c_int as libc::c_long
290 +                                 } else {
291 +                                     *x
292 +                                 }) + 0 as libc::c_int as intmax_t
293 +                             }) - 1 as libc::c_int as libc::c_long)
294 +                                 < 0 as libc::c_int as libc::c_long
295 +                             {
296 +                                 ((((if 1 as libc::c_int != 0 {
297 +                                     0 as libc::c_int as libc::c_long
298 +                                 } else {
299 +                                     (if 1 as libc::c_int != 0 {
300 +                                         0 as libc::c_int as libc::c_long
301 +                                     } else {
302 +                                         *x
303 +                                     }) + 0 as libc::c_int as intmax_t
304 +                                 }) + 1 as libc::c_int as libc::c_long)
305 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
306 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
307 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
308 +                                     - 1 as libc::c_int as libc::c_long)
309 +                                     * 2 as libc::c_int as libc::c_long
310 +                                     + 1 as libc::c_int as libc::c_long
311 +                             } else {
312 +                                 (if 1 as libc::c_int != 0 {
313 +                                     0 as libc::c_int as libc::c_long
314 +                                 } else {
315 +                                     (if 1 as libc::c_int != 0 {
316 +                                         0 as libc::c_int as libc::c_long
317 +                                     } else {
318 +                                         *x
319 +                                     }) + 0 as libc::c_int as intmax_t
320 +                                 }) - 1 as libc::c_int as libc::c_long
321 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:280:27
    |
280 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
281 | |                             0 as libc::c_int as libc::c_long
282 | |                         } else {
283 | |                             *x
284 | |                         }) + 0 as libc::c_int as intmax_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:281:29
    |
281 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:284:30
    |
284 |                         }) + 0 as libc::c_int as intmax_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:285:37
    |
285 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
286 | | ...                       0 as libc::c_int as libc::c_long
287 | | ...                   } else {
288 | | ...                       (if 1 as libc::c_int != 0 {
...   |
292 | | ...                       }) + 0 as libc::c_int as intmax_t
293 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:286:33
    |
286 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:288:33
    |
288 | / ...                   (if 1 as libc::c_int != 0 {
289 | | ...                       0 as libc::c_int as libc::c_long
290 | | ...                   } else {
291 | | ...                       *x
292 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:289:37
    |
289 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:292:38
    |
292 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:293:34
    |
293 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:294:35
    |
294 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:296:36
    |
296 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
297 | | ...                       0 as libc::c_int as libc::c_long
298 | | ...                   } else {
299 | | ...                       (if 1 as libc::c_int != 0 {
...   |
303 | | ...                       }) + 0 as libc::c_int as intmax_t
304 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:297:37
    |
297 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:299:37
    |
299 | / ...                   (if 1 as libc::c_int != 0 {
300 | | ...                       0 as libc::c_int as libc::c_long
301 | | ...                   } else {
302 | | ...                       *x
303 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:300:41
    |
300 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:303:42
    |
303 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:304:38
    |
304 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:306:55
    |
306 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:307:55
    |
307 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:308:39
    |
308 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:309:39
    |
309 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:310:39
    |
310 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:312:33
    |
312 | / ...                   (if 1 as libc::c_int != 0 {
313 | | ...                       0 as libc::c_int as libc::c_long
314 | | ...                   } else {
315 | | ...                       (if 1 as libc::c_int != 0 {
...   |
319 | | ...                       }) + 0 as libc::c_int as intmax_t
320 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:313:37
    |
313 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:315:37
    |
315 | / ...                   (if 1 as libc::c_int != 0 {
316 | | ...                       0 as libc::c_int as libc::c_long
317 | | ...                   } else {
318 | | ...                       *x
319 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:316:41
    |
316 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:319:42
    |
319 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:320:38
    |
320 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:323:25
    |
323 | /                         ((0 as libc::c_int as libc::c_long)
324 | |                             < (if 1 as libc::c_int != 0 {
325 | |                                 0 as libc::c_int as libc::c_long
326 | |                             } else {
327 | |                                 *x
328 | |                             }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
323 ~                         i32::from((0 as libc::c_int as libc::c_long)
324 +                             < (if 1 as libc::c_int != 0 {
325 +                                 0 as libc::c_int as libc::c_long
326 +                             } else {
327 +                                 *x
328 +                             }) + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:323:26
    |
323 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:324:31
    |
324 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
325 | | ...                       0 as libc::c_int as libc::c_long
326 | | ...                   } else {
327 | | ...                       *x
328 | | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:325:33
    |
325 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:328:34
    |
328 | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:329:38
    |
329 |                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:331:29
    |
331 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
332 | |                             0 as libc::c_int
333 | |                         } else {
334 | |                             scale_factor
335 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:337:29
    |
337 | / ...                   ((0 as libc::c_int as libc::c_long)
338 | | ...                       < scale_factor as libc::c_long
339 | | ...                           + 0 as libc::c_int as intmax_t) as libc::c_int
    | |____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
337 ~                             i32::from((0 as libc::c_int as libc::c_long)
338 +                                 < scale_factor as libc::c_long
339 +                                     + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:337:30
    |
337 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:338:35
    |
338 | ...                   < scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:339:39
    |
339 | ...                   + 0 as libc::c_int as intmax_t) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:341:29
    |
341 | / ...                   ((-(1 as libc::c_int) as libc::c_long
342 | | ...                       - 0 as libc::c_int as intmax_t)
343 | | ...                       < (scale_factor - 1 as libc::c_int) as libc::c_long)
344 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
341 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
342 +                                 - 0 as libc::c_int as intmax_t)
343 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:341:31
    |
341 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:342:35
    |
342 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:343:35
    |
343 | ...                   < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:347:25
    |
347 | /                         (0 as libc::c_int as intmax_t / *x
348 | |                             < scale_factor as libc::c_long) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
347 ~                         i32::from(0 as libc::c_int as intmax_t / *x
348 +                             < scale_factor as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:347:26
    |
347 |                         (0 as libc::c_int as intmax_t / *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:348:31
    |
348 | ...                   < scale_factor as libc::c_long) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:351:21
    |
351 | /                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
352 | |                         < *x) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
351 ~                     i32::from((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
352 +                         < *x)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:351:23
    |
351 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:351:57
    |
351 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:358:53
    |
358 |     let (result, overflowed) = (*x).overflowing_mul(scale_factor as i64);
    |                                                     ^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:362:53
    |
362 |     let (result, overflowed) = (*x).overflowing_mul(scale_factor as i64);
    |                                                     ^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:369:19
    |
369 |      *x = if *x < 0 as libc::c_int as libc::c_long {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:370:17
    |
370 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:370:50
    |
370 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:371:17
    |
371 |                 -(1 as libc::c_int) as intmax_t
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:373:19
    |
373 |                 (((1 as libc::c_int as intmax_t)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:375:39
    |
375 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:376:39
    |
376 |                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:377:23
    |
377 |                     - 1 as libc::c_int as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:378:23
    |
378 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:378:58
    |
378 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:380:19
    |
380 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:380:52
    |
380 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:381:13
    |
381 |             -(1 as libc::c_int) as intmax_t
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:383:15
    |
383 |             (((1 as libc::c_int as intmax_t)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:385:35
    |
385 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:386:35
    |
386 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:387:19
    |
387 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:387:55
    |
387 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:388:19
    |
388 |                 + 1 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/xstrtoimax.rs:417:1
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
...   |
557 | |
558 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/xstrtoimax.rs:417:1
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
...   |
557 | |
558 | | }
    | |_^
    |
note: first possible panic found here
   --> src/xstrtoimax.rs:434:5
    |
434 |     panic!("0 <= strtol_base && strtol_base <= 36");
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: this function has too many lines (120/100)
   --> src/xstrtoimax.rs:417:1
    |
417 | / pub unsafe extern "C" fn xstrtoimax(
418 | |     mut s: *const libc::c_char,
419 | |     mut ptr: *mut *mut libc::c_char,
420 | |     mut strtol_base: libc::c_int,
...   |
557 | |
558 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:556:1
    |
556 | return err;
    | ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
   --> src/xstrtoimax.rs:429:31
    |
429 | let mut p: *mut *mut c_char = if !ptr.is_null() { ptr } else { &mut t_ptr };
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: only a `panic!` in `if`-then statement
   --> src/xstrtoimax.rs:433:1
    |
433 | / if !(0 <= strtol_base && strtol_base <= 36) {
434 | |     panic!("0 <= strtol_base && strtol_base <= 36");
435 | | }
    | |_^ help: try: `assert!((0 <= strtol_base && strtol_base <= 36), "0 <= strtol_base && strtol_base <= 36");`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert

warning: manual `RangeInclusive::contains` implementation
   --> src/xstrtoimax.rs:433:5
    |
433 | if !(0 <= strtol_base && strtol_base <= 36) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(0..=36).contains(&strtol_base)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:438:27
    |
438 | let mut ch: u8 = unsafe { *q as u8 };
    |                           ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:440:42
    |
440 | while unsafe { *__ctype_b_loc() }.offset(ch as i32 as isize) as i32 & _ISspace as u16 as i32 != 0 {
    |                                          ^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:440:71
    |
440 | while unsafe { *__ctype_b_loc() }.offset(ch as i32 as isize) as i32 & _ISspace as u16 as i32 != 0 {
    |                                                                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as u16)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `u16` may truncate the value
   --> src/xstrtoimax.rs:440:71
    |
440 | while unsafe { *__ctype_b_loc() }.offset(ch as i32 as isize) as i32 & _ISspace as u16 as i32 != 0 {
    |                                                                       ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:442:19
    |
442 |     ch = unsafe { *q as u8 };
    |                   ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:445:4
    |
445 | if ch as i32 == '-' as i32 {
    |    ^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:452:37
    |
452 |     if !valid_suffixes.is_null() && **p as i32 != 0 && !strchr(valid_suffixes, **p as i32).is_null() {
    |                                     ^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:452:80
    |
452 |     if !valid_suffixes.is_null() && **p as i32 != 0 && !strchr(valid_suffixes, **p as i32).is_null() {
    |                                                                                ^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:475:37
    |
475 |     if !valid_suffixes_str.contains(**p as u8 as char) {
    |                                     ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:480:11
    |
480 |     match **p as u8 {
    |           ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:483:23
    |
483 |                 match unsafe { *(*p).offset(1) } as u8 {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:485:28
    |
485 |                         if unsafe { *(*p).offset(2) } as u8 == b'B' {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:500:11
    |
500 |     match **p as u8 {
    |           ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: path statement with no effect
   --> src/argmatch.rs:244:9
    |
244 |         i;
    |         ^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/argmatch.rs:317:9
    |
317 |         i;
    |         ^^

warning: path statement with no effect
   --> src/quotearg.rs:395:25
    |
395 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:397:25
    |
397 |                         quote_string;
    |                         ^^^^^^^^^^^^^

warning: path statement with no effect
   --> src/quotearg.rs:433:21
    |
433 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:463:21
    |
463 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:596:49
    |
596 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:601:49
    |
601 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:606:49
    |
606 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:611:49
    |
611 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:659:49
    |
659 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:664:49
    |
664 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:669:49
    |
669 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:674:49
    |
674 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:852:37
    |
852 | ...                   m;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:874:41
    |
874 | ...                   j;
    |                       ^^

warning: path statement with no effect
    --> src/quotearg.rs:1163:21
     |
1163 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1165:21
     |
1165 |                     quote_string;
     |                     ^^^^^^^^^^^^^

warning: path statement with no effect
   --> src/skipchars.rs:111:9
    |
111 |         i;
    |         ^^

warning: path statement with no effect
   --> src/version_etc.rs:262:9
    |
262 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/version_etc.rs:284:9
    |
284 |         n_authors;
    |         ^^^^^^^^^^

warning: `rust` (lib) generated 1975 warnings
warning: long literal lacking separators
   --> src/uniq.rs:261:44
    |
261 | pub const MCEL_CHAR_MAX: C2RustUnnamed_2 = 1114111;
    |                                            ^^^^^^^ help: consider: `1_114_111`
    |
    = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:488:33
    |
488 | static mut check_chars: idx_t = 9223372036854775807 as libc::c_long;
    |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:746:9
    |
746 |         200112 <= posix_ver && posix_ver < 200809
    |         ^^^^^^ help: consider: `200_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:746:44
    |
746 |         200112 <= posix_ver && posix_ver < 200809
    |                                            ^^^^^^ help: consider: `200_809`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:768:15
    |
768 |     if size < 9223372036854775807 {
    |               ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:771:9
    |
771 |         9223372036854775807
    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/uniq.rs:814:13
    |
814 |     let mut len: idx_t = 0;
    |             ^^^
    |
    = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
   --> src/uniq.rs:785:9
    |
785 |     mut plen: *mut idx_t,
    |         ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: redundant else block
   --> src/uniq.rs:845:12
    |
845 |       } else {
    |  ____________^
846 | |         return oldlen != newlen
847 | |             || memcmp(
848 | |                 old as *const libc::c_void,
...   |
851 | |             ) != 0
852 | |     };
    | |_____^
    |
    = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/uniq.rs:1074:33
     |
1074 |                 current_block = 6476622998065200121;
     |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_476_622_998_065_200_121`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/uniq.rs:1085:20
     |
1085 |               } else {
     |  ____________________^
1086 | |                 let mut thislen_0: idx_t = 0;
1087 | |                 let mut thisfield_0: *mut libc::c_char = find_field(
1088 | |                     thisline,
...    |
1174 | |                 }
1175 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
    --> src/uniq.rs:1081:24
     |
1081 |                   } else {
     |  ________________________^
1082 | |                     current_block = 6476622998065200121;
1083 | |                     break;
1084 | |                 }
     | |_________________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/uniq.rs:1079:37
     |
1079 |                     current_block = 6469497169255231809;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `6_469_497_169_255_231_809`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/uniq.rs:1082:37
     |
1082 |                     current_block = 6476622998065200121;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `6_476_622_998_065_200_121`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/uniq.rs:1098:35
     |
1098 |                 if match_count == 9223372036854775807 as libc::c_long {
     |                                   ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `if` statement can be collapsed
    --> src/uniq.rs:1155:28
     |
1155 |                       } else if match_count == 1 as libc::c_int as libc::c_long {
     |  ____________________________^
1156 | |                         if delimit_groups as libc::c_uint
1157 | |                             == DM_PREPEND as libc::c_int as libc::c_uint
1158 | |                             || delimit_groups as libc::c_uint
...    |
1163 | |                         }
1164 | |                     }
     | |_____________________^
     |
     = note: `-W clippy::collapsible-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1155 ~                     } else if match_count == 1 as libc::c_int as libc::c_long && (delimit_groups as libc::c_uint
1156 +                             == DM_PREPEND as libc::c_int as libc::c_uint || delimit_groups as libc::c_uint
1157 +                                 == DM_SEPARATE as libc::c_int as libc::c_uint
1158 +                                 && !first_delimiter) {
1159 +                         putchar_unlocked(delimiter as libc::c_int);
1160 +                     }
     |

warning: long literal lacking separators
    --> src/uniq.rs:1178:13
     |
1178 |             6469497169255231809 => {}
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `6_469_497_169_255_231_809`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/uniq.rs:1201:9
     |
1201 |     mut argv: *mut *mut libc::c_char,
     |         ^^^^
     |
note: existing binding defined here
    --> src/uniq.rs:1200:9
     |
1200 |     mut argc: libc::c_int,
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/uniq.rs:1266:48
     |
1266 |                         skip_chars = if size < 9223372036854775807 as libc::c_long {
     |                                                ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/uniq.rs:1269:29
     |
1269 | ...                   9223372036854775807 as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
    --> src/uniq.rs:1536:32
     |
1536 |                           } else {
     |  ________________________________^
1537 | |                             if 10 as libc::c_int == 0 as libc::c_int {
1538 | |                                 0 as libc::c_int
1539 | |                             } else {
...    |
1655 | |                             }
1656 | |                         }) != 0
     | |_________________________^
     |
     = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1536 ~                         } else if 10 as libc::c_int == 0 as libc::c_int {
1537 +                             0 as libc::c_int
1538 +                         } else {
1539 +                             if skip_fields < 0 as libc::c_int as libc::c_long {
1540 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1541 +                                     0 as libc::c_int as libc::c_long
1542 +                                 } else {
1543 +                                     (if 1 as libc::c_int != 0 {
1544 +                                         0 as libc::c_int as libc::c_long
1545 +                                     } else {
1546 +                                         skip_fields
1547 +                                     }) + 0 as libc::c_int as idx_t
1548 +                                 }) - 1 as libc::c_int as libc::c_long)
1549 +                                     < 0 as libc::c_int as libc::c_long
1550 +                                 {
1551 +                                     !(((((if 1 as libc::c_int != 0 {
1552 +                                         0 as libc::c_int as libc::c_long
1553 +                                     } else {
1554 +                                         (if 1 as libc::c_int != 0 {
1555 +                                             0 as libc::c_int as libc::c_long
1556 +                                         } else {
1557 +                                             skip_fields
1558 +                                         }) + 0 as libc::c_int as idx_t
1559 +                                     }) + 1 as libc::c_int as libc::c_long)
1560 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1561 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1562 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1563 +                                         - 1 as libc::c_int as libc::c_long)
1564 +                                         * 2 as libc::c_int as libc::c_long
1565 +                                         + 1 as libc::c_int as libc::c_long)
1566 +                                 } else {
1567 +                                     (if 1 as libc::c_int != 0 {
1568 +                                         0 as libc::c_int as libc::c_long
1569 +                                     } else {
1570 +                                         (if 1 as libc::c_int != 0 {
1571 +                                             0 as libc::c_int as libc::c_long
1572 +                                         } else {
1573 +                                             skip_fields
1574 +                                         }) + 0 as libc::c_int as idx_t
1575 +                                     }) + 0 as libc::c_int as libc::c_long
1576 +                                 }) < 0 as libc::c_int as libc::c_long
1577 +                                 {
1578 +                                     (((if 1 as libc::c_int != 0 {
1579 +                                         0 as libc::c_int as libc::c_long
1580 +                                     } else {
1581 +                                         skip_fields
1582 +                                     }) + 0 as libc::c_int as idx_t)
1583 +                                         < -(if ((if 1 as libc::c_int != 0 {
1584 +                                             0 as libc::c_int as libc::c_long
1585 +                                         } else {
1586 +                                             (if 1 as libc::c_int != 0 {
1587 +                                                 0 as libc::c_int as libc::c_long
1588 +                                             } else {
1589 +                                                 skip_fields
1590 +                                             }) + 0 as libc::c_int as idx_t
1591 +                                         }) - 1 as libc::c_int as libc::c_long)
1592 +                                             < 0 as libc::c_int as libc::c_long
1593 +                                         {
1594 +                                             ((((if 1 as libc::c_int != 0 {
1595 +                                                 0 as libc::c_int as libc::c_long
1596 +                                             } else {
1597 +                                                 (if 1 as libc::c_int != 0 {
1598 +                                                     0 as libc::c_int as libc::c_long
1599 +                                                 } else {
1600 +                                                     skip_fields
1601 +                                                 }) + 0 as libc::c_int as idx_t
1602 +                                             }) + 1 as libc::c_int as libc::c_long)
1603 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1604 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1605 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1606 +                                                 - 1 as libc::c_int as libc::c_long)
1607 +                                                 * 2 as libc::c_int as libc::c_long
1608 +                                                 + 1 as libc::c_int as libc::c_long
1609 +                                         } else {
1610 +                                             (if 1 as libc::c_int != 0 {
1611 +                                                 0 as libc::c_int as libc::c_long
1612 +                                             } else {
1613 +                                                 (if 1 as libc::c_int != 0 {
1614 +                                                     0 as libc::c_int as libc::c_long
1615 +                                                 } else {
1616 +                                                     skip_fields
1617 +                                                 }) + 0 as libc::c_int as idx_t
1618 +                                             }) - 1 as libc::c_int as libc::c_long
1619 +                                         })) as libc::c_int
1620 +                                 } else {
1621 +                                     ((0 as libc::c_int as libc::c_long)
1622 +                                         < (if 1 as libc::c_int != 0 {
1623 +                                             0 as libc::c_int as libc::c_long
1624 +                                         } else {
1625 +                                             skip_fields
1626 +                                         }) + 0 as libc::c_int as idx_t) as libc::c_int
1627 +                                 }) != 0
1628 +                                     && skip_fields == -(1 as libc::c_int) as libc::c_long
1629 +                                 {
1630 +                                     if ((if 1 as libc::c_int != 0 {
1631 +                                         0 as libc::c_int
1632 +                                     } else {
1633 +                                         10 as libc::c_int
1634 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1635 +                                     {
1636 +                                         ((0 as libc::c_int as libc::c_long)
1637 +                                             < 10 as libc::c_int as libc::c_long
1638 +                                                 + 0 as libc::c_int as idx_t) as libc::c_int
1639 +                                     } else {
1640 +                                         ((-(1 as libc::c_int) as libc::c_long
1641 +                                             - 0 as libc::c_int as idx_t)
1642 +                                             < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1643 +                                             as libc::c_int
1644 +                                     }
1645 +                                 } else {
1646 +                                     (0 as libc::c_int as idx_t / skip_fields
1647 +                                         < 10 as libc::c_int as libc::c_long) as libc::c_int
1648 +                                 }
1649 +                             } else {
1650 +                                 ((-(1 as libc::c_int) as idx_t
1651 +                                     / 10 as libc::c_int as libc::c_long) < skip_fields)
1652 +                                     as libc::c_int
1653 +                             }
1654 ~                         }) != 0
     |

warning: this `else { if .. }` block can be collapsed
    --> src/uniq.rs:1423:36
     |
1423 |   ...                   } else {
     |  ______________________________^
1424 | | ...                       if (if (if ((if 1 as libc::c_int != 0 {
1425 | | ...                           0 as libc::c_int as libc::c_long
1426 | | ...                       } else {
...    |
1534 | | ...                       }
1535 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1423 ~                             } else if (if (if ((if 1 as libc::c_int != 0 {
1424 +                                 0 as libc::c_int as libc::c_long
1425 +                             } else {
1426 +                                 (if 1 as libc::c_int != 0 {
1427 +                                     0 as libc::c_int
1428 +                                 } else {
1429 +                                     10 as libc::c_int
1430 +                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1431 +                             }) - 1 as libc::c_int as libc::c_long)
1432 +                                 < 0 as libc::c_int as libc::c_long
1433 +                             {
1434 +                                 !(((((if 1 as libc::c_int != 0 {
1435 +                                     0 as libc::c_int as libc::c_long
1436 +                                 } else {
1437 +                                     (if 1 as libc::c_int != 0 {
1438 +                                         0 as libc::c_int
1439 +                                     } else {
1440 +                                         10 as libc::c_int
1441 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1442 +                                 }) + 1 as libc::c_int as libc::c_long)
1443 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1444 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1445 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1446 +                                     - 1 as libc::c_int as libc::c_long)
1447 +                                     * 2 as libc::c_int as libc::c_long
1448 +                                     + 1 as libc::c_int as libc::c_long)
1449 +                             } else {
1450 +                                 (if 1 as libc::c_int != 0 {
1451 +                                     0 as libc::c_int as libc::c_long
1452 +                                 } else {
1453 +                                     (if 1 as libc::c_int != 0 {
1454 +                                         0 as libc::c_int
1455 +                                     } else {
1456 +                                         10 as libc::c_int
1457 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1458 +                                 }) + 0 as libc::c_int as libc::c_long
1459 +                             }) < 0 as libc::c_int as libc::c_long
1460 +                             {
1461 +                                 (((if 1 as libc::c_int != 0 {
1462 +                                     0 as libc::c_int
1463 +                                 } else {
1464 +                                     10 as libc::c_int
1465 +                                 }) as libc::c_long + 0 as libc::c_int as idx_t)
1466 +                                     < -(if ((if 1 as libc::c_int != 0 {
1467 +                                         0 as libc::c_int as libc::c_long
1468 +                                     } else {
1469 +                                         (if 1 as libc::c_int != 0 {
1470 +                                             0 as libc::c_int
1471 +                                         } else {
1472 +                                             10 as libc::c_int
1473 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1474 +                                     }) - 1 as libc::c_int as libc::c_long)
1475 +                                         < 0 as libc::c_int as libc::c_long
1476 +                                     {
1477 +                                         ((((if 1 as libc::c_int != 0 {
1478 +                                             0 as libc::c_int as libc::c_long
1479 +                                         } else {
1480 +                                             (if 1 as libc::c_int != 0 {
1481 +                                                 0 as libc::c_int
1482 +                                             } else {
1483 +                                                 10 as libc::c_int
1484 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1485 +                                         }) + 1 as libc::c_int as libc::c_long)
1486 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1487 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1488 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1489 +                                             - 1 as libc::c_int as libc::c_long)
1490 +                                             * 2 as libc::c_int as libc::c_long
1491 +                                             + 1 as libc::c_int as libc::c_long
1492 +                                     } else {
1493 +                                         (if 1 as libc::c_int != 0 {
1494 +                                             0 as libc::c_int as libc::c_long
1495 +                                         } else {
1496 +                                             (if 1 as libc::c_int != 0 {
1497 +                                                 0 as libc::c_int
1498 +                                             } else {
1499 +                                                 10 as libc::c_int
1500 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1501 +                                         }) - 1 as libc::c_int as libc::c_long
1502 +                                     })) as libc::c_int
1503 +                             } else {
1504 +                                 ((0 as libc::c_int as libc::c_long)
1505 +                                     < (if 1 as libc::c_int != 0 {
1506 +                                         0 as libc::c_int
1507 +                                     } else {
1508 +                                         10 as libc::c_int
1509 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1510 +                                     as libc::c_int
1511 +                             }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
1512 +                             {
1513 +                                 if ((if 1 as libc::c_int != 0 {
1514 +                                     0 as libc::c_int as libc::c_long
1515 +                                 } else {
1516 +                                     skip_fields
1517 +                                 }) - 1 as libc::c_int as libc::c_long)
1518 +                                     < 0 as libc::c_int as libc::c_long
1519 +                                 {
1520 +                                     ((0 as libc::c_int as libc::c_long)
1521 +                                         < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
1522 +                                 } else {
1523 +                                     ((0 as libc::c_int as libc::c_long) < skip_fields
1524 +                                         && (-(1 as libc::c_int) as libc::c_long
1525 +                                             - 0 as libc::c_int as idx_t)
1526 +                                             < skip_fields - 1 as libc::c_int as libc::c_long)
1527 +                                         as libc::c_int
1528 +                                 }
1529 +                             } else {
1530 +                                 ((0 as libc::c_int as idx_t
1531 +                                     / 10 as libc::c_int as libc::c_long) < skip_fields)
1532 +                                     as libc::c_int
1533 +                             }
     |

warning: operator precedence can trip the unwary
    --> src/uniq.rs:1409:41
     |
1409 | / ...                   (if 1 as libc::c_int != 0 {
1410 | | ...                       0 as libc::c_int
1411 | | ...                   } else {
1412 | | ...                       10 as libc::c_int
...    |
1415 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1416 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     | |______________________________________________________________________________^
     |
     = note: `-W clippy::precedence` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
     |
1409 ~                                         ((if 1 as libc::c_int != 0 {
1410 +                                             0 as libc::c_int
1411 +                                         } else {
1412 +                                             10 as libc::c_int
1413 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1414 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1415 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |

warning: this `else { if .. }` block can be collapsed
    --> src/uniq.rs:1539:36
     |
1539 |   ...                   } else {
     |  ______________________________^
1540 | | ...                       if skip_fields < 0 as libc::c_int as libc::c_long {
1541 | | ...                           if (if (if ((if 1 as libc::c_int != 0 {
1542 | | ...                               0 as libc::c_int as libc::c_long
...    |
1654 | | ...                       }
1655 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1539 ~                             } else if skip_fields < 0 as libc::c_int as libc::c_long {
1540 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1541 +                                     0 as libc::c_int as libc::c_long
1542 +                                 } else {
1543 +                                     (if 1 as libc::c_int != 0 {
1544 +                                         0 as libc::c_int as libc::c_long
1545 +                                     } else {
1546 +                                         skip_fields
1547 +                                     }) + 0 as libc::c_int as idx_t
1548 +                                 }) - 1 as libc::c_int as libc::c_long)
1549 +                                     < 0 as libc::c_int as libc::c_long
1550 +                                 {
1551 +                                     !(((((if 1 as libc::c_int != 0 {
1552 +                                         0 as libc::c_int as libc::c_long
1553 +                                     } else {
1554 +                                         (if 1 as libc::c_int != 0 {
1555 +                                             0 as libc::c_int as libc::c_long
1556 +                                         } else {
1557 +                                             skip_fields
1558 +                                         }) + 0 as libc::c_int as idx_t
1559 +                                     }) + 1 as libc::c_int as libc::c_long)
1560 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1561 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1562 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1563 +                                         - 1 as libc::c_int as libc::c_long)
1564 +                                         * 2 as libc::c_int as libc::c_long
1565 +                                         + 1 as libc::c_int as libc::c_long)
1566 +                                 } else {
1567 +                                     (if 1 as libc::c_int != 0 {
1568 +                                         0 as libc::c_int as libc::c_long
1569 +                                     } else {
1570 +                                         (if 1 as libc::c_int != 0 {
1571 +                                             0 as libc::c_int as libc::c_long
1572 +                                         } else {
1573 +                                             skip_fields
1574 +                                         }) + 0 as libc::c_int as idx_t
1575 +                                     }) + 0 as libc::c_int as libc::c_long
1576 +                                 }) < 0 as libc::c_int as libc::c_long
1577 +                                 {
1578 +                                     (((if 1 as libc::c_int != 0 {
1579 +                                         0 as libc::c_int as libc::c_long
1580 +                                     } else {
1581 +                                         skip_fields
1582 +                                     }) + 0 as libc::c_int as idx_t)
1583 +                                         < -(if ((if 1 as libc::c_int != 0 {
1584 +                                             0 as libc::c_int as libc::c_long
1585 +                                         } else {
1586 +                                             (if 1 as libc::c_int != 0 {
1587 +                                                 0 as libc::c_int as libc::c_long
1588 +                                             } else {
1589 +                                                 skip_fields
1590 +                                             }) + 0 as libc::c_int as idx_t
1591 +                                         }) - 1 as libc::c_int as libc::c_long)
1592 +                                             < 0 as libc::c_int as libc::c_long
1593 +                                         {
1594 +                                             ((((if 1 as libc::c_int != 0 {
1595 +                                                 0 as libc::c_int as libc::c_long
1596 +                                             } else {
1597 +                                                 (if 1 as libc::c_int != 0 {
1598 +                                                     0 as libc::c_int as libc::c_long
1599 +                                                 } else {
1600 +                                                     skip_fields
1601 +                                                 }) + 0 as libc::c_int as idx_t
1602 +                                             }) + 1 as libc::c_int as libc::c_long)
1603 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1604 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1605 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1606 +                                                 - 1 as libc::c_int as libc::c_long)
1607 +                                                 * 2 as libc::c_int as libc::c_long
1608 +                                                 + 1 as libc::c_int as libc::c_long
1609 +                                         } else {
1610 +                                             (if 1 as libc::c_int != 0 {
1611 +                                                 0 as libc::c_int as libc::c_long
1612 +                                             } else {
1613 +                                                 (if 1 as libc::c_int != 0 {
1614 +                                                     0 as libc::c_int as libc::c_long
1615 +                                                 } else {
1616 +                                                     skip_fields
1617 +                                                 }) + 0 as libc::c_int as idx_t
1618 +                                             }) - 1 as libc::c_int as libc::c_long
1619 +                                         })) as libc::c_int
1620 +                                 } else {
1621 +                                     ((0 as libc::c_int as libc::c_long)
1622 +                                         < (if 1 as libc::c_int != 0 {
1623 +                                             0 as libc::c_int as libc::c_long
1624 +                                         } else {
1625 +                                             skip_fields
1626 +                                         }) + 0 as libc::c_int as idx_t) as libc::c_int
1627 +                                 }) != 0
1628 +                                     && skip_fields == -(1 as libc::c_int) as libc::c_long
1629 +                                 {
1630 +                                     if ((if 1 as libc::c_int != 0 {
1631 +                                         0 as libc::c_int
1632 +                                     } else {
1633 +                                         10 as libc::c_int
1634 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1635 +                                     {
1636 +                                         ((0 as libc::c_int as libc::c_long)
1637 +                                             < 10 as libc::c_int as libc::c_long
1638 +                                                 + 0 as libc::c_int as idx_t) as libc::c_int
1639 +                                     } else {
1640 +                                         ((-(1 as libc::c_int) as libc::c_long
1641 +                                             - 0 as libc::c_int as idx_t)
1642 +                                             < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1643 +                                             as libc::c_int
1644 +                                     }
1645 +                                 } else {
1646 +                                     (0 as libc::c_int as idx_t / skip_fields
1647 +                                         < 10 as libc::c_int as libc::c_long) as libc::c_int
1648 +                                 }
1649 +                             } else {
1650 +                                 ((-(1 as libc::c_int) as idx_t
1651 +                                     / 10 as libc::c_int as libc::c_long) < skip_fields)
1652 +                                     as libc::c_int
1653 +                             }
     |

warning: long literal lacking separators
    --> src/uniq.rs:1675:39
     |
1675 |                         skip_fields = 9223372036854775807 as libc::c_long;
     |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1241:31
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1241 |       let extra_operand = quote(unsafe { *argv.offset(optind as isize) });
     |                                 ^^^^^^ unnecessary `unsafe` block
     |
     = note: `#[warn(unused_unsafe)]` on by default
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`
     = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1249:25
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1249 |   file[fresh1 as usize] = unsafe { *argv.offset(fresh0 as isize) };
     |                           ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1695:22
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1695 |       let optarg_str = unsafe { std::ffi::CStr::from_ptr(optarg) };
     |                        ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1715:22
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1715 |       let optarg_str = unsafe { std::ffi::CStr::from_ptr(optarg) };
     |                        ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1732:13
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1732 |               unsafe { CStr::from_ptr(optarg) },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1733:13
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1733 |               unsafe { CStr::from_bytes_with_nul_unchecked(b"invalid number of fields to skip\0") },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1741:13
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1741 |               unsafe { CStr::from_ptr(optarg) },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1742:13
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1742 |               unsafe { CStr::from_bytes_with_nul_unchecked(b"invalid number of bytes to skip\0") },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1751:13
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1751 |               unsafe { CStr::from_ptr(optarg) },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/uniq.rs:1752:13
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1752 |               unsafe { CStr::from_bytes_with_nul_unchecked(b"invalid number of bytes to compare\0") },
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary structure name repetition
   --> src/uniq.rs:200:22
    |
200 |     pub _chain: *mut _IO_FILE,
    |                      ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src/uniq.rs:211:29
    |
211 |     pub _freeres_list: *mut _IO_FILE,
    |                             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this loop could be written as a `for` loop
   --> src/uniq.rs:316:5
    |
316 |     while let Some(&(prog, n)) = map_prog.next() {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `for &(prog, n) in map_prog`
    |
    = note: `-W clippy::while-let-on-iterator` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#while_let_on_iterator

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:323:56
    |
323 |     let help_message = unsafe { CStr::from_ptr(gettext(b"GNU coreutils\0".as_ptr() as *const i8)).to_string_lossy() };
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"GNU coreutils\0".as_ptr().cast::<i8>()`
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:331:66
    |
331 | ...om_ptr(gettext(b"Report any translation bugs to <https://translationproject.org/team/>\0".as_ptr() as *const i8)).to_string_lossy() };
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"Report any translation bugs to <https://translationproject.org/team/>\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: use of `writeln!(stdout(), ...).unwrap()`
   --> src/uniq.rs:332:13
    |
332 |             writeln!(std::io::stdout(), "{}", report_message).unwrap();
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `println!("{}", report_message)`
    |
    = note: `-W clippy::explicit-write` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_write

warning: non-binding `let` on a type that implements `Drop`
   --> src/uniq.rs:354:5
    |
354 |     let _ = std::io::stdout().flush();
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::let-underscore-drop` implied by `-W clippy::pedantic`
    = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:361:25
    |
361 |                 gettext(b"write error\0".as_ptr() as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"write error\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:374:29
    |
374 |                     gettext(b"write error\0".as_ptr() as *const libc::c_char),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"write error\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:387:29
    |
387 |                     gettext(b"write error\0".as_ptr() as *const libc::c_char),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"write error\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:405:20
    |
405 |     assert!(len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong, "Length exceeds maximum allowed");
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:405:20
    |
405 |     assert!(len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong, "Length exceeds maximum allowed");
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/uniq.rs:406:19
    |
406 |     assert!(ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint, "Character exceeds maximum allowed");
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:406:19
    |
406 |     assert!(ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint, "Character exceeds maximum allowed");
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `u8` may truncate the value
   --> src/uniq.rs:411:14
    |
411 |         len: len as libc::c_uchar,
    |              ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:417:13
    |
417 |     assert!(MCEL_ERR_MIN as i32 <= err as i32, "Error value out of range");
    |             ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:417:36
    |
417 |     assert!(MCEL_ERR_MIN as i32 <= err as i32, "Error value out of range");
    |                                    ^^^^^^^^^^ help: try: `i32::from(err)`
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this could be a `const fn`
   --> src/uniq.rs:427:1
    |
427 | / fn mcel_isbasic(c: i8) -> bool {
428 | |     let c_int = c as i32;
429 | |     c_int >= 0 && c_int < MCEL_ERR_MIN as i32
430 | | }
    | |_^
    |
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:428:17
    |
428 |     let c_int = c as i32;
    |                 ^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:429:27
    |
429 |     c_int >= 0 && c_int < MCEL_ERR_MIN as i32
    |                           ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/uniq.rs:459:5
    |
459 |     return mcel_ch(ch, len);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_ch(ch, len)`
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
   --> src/uniq.rs:436:24
    |
436 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
    |                        ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:436:39
    |
436 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:450:13
    |
450 |             lim.offset_from(p) as libc::c_long as size_t,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:455:8
    |
455 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) < len) as libc::c_int as libc::c_long != 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) < len) as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:455:8
    |
455 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) < len) as libc::c_int as libc::c_long != 0 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) < len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:455:9
    |
455 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) < len) as libc::c_int as libc::c_long != 0 {
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:455:54
    |
455 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong) < len) as libc::c_int as libc::c_long != 0 {
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/uniq.rs:456:25
    |
456 |         return mcel_err(c as libc::c_uchar);
    |                         ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/uniq.rs:480:5
    |
480 |     return s as *mut libc::c_char;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `s as *mut libc::c_char`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:474:13
    |
474 |             predicate.expect("non-null function pointer")(g) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(predicate.expect("non-null function pointer")(g))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:475:20
    |
475 |                 == ok as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:478:22
    |
478 |         s = s.offset(g.len as libc::c_int as isize);
    |                      ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(g.len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:495:5
    |
495 |     b"none\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"none\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:496:5
    |
496 |     b"prepend\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"prepend\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:497:5
    |
497 |     b"separate\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"separate\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:503:5
    |
503 |     b"prepend\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"prepend\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:504:5
    |
504 |     b"append\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"append\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:505:5
    |
505 |     b"separate\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"separate\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:506:5
    |
506 |     b"both\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"both\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:524:9
    |
518 | /         let mut init = option {
519 | |             name: b"count\0" as *const u8 as *const libc::c_char,
520 | |             has_arg: 0 as libc::c_int,
521 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
522 | |             val: 'c' as i32,
523 | |         };
    | |__________- unnecessary `let` binding
524 |           init
    |           ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
518 ~         
519 ~         option {
520 +             name: b"count\0" as *const u8 as *const libc::c_char,
521 +             has_arg: 0 as libc::c_int,
522 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
523 +             val: 'c' as i32,
524 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:519:19
    |
519 |             name: b"count\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"count\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:533:9
    |
527 | /         let mut init = option {
528 | |             name: b"repeated\0" as *const u8 as *const libc::c_char,
529 | |             has_arg: 0 as libc::c_int,
530 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
531 | |             val: 'd' as i32,
532 | |         };
    | |__________- unnecessary `let` binding
533 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
527 ~         
528 ~         option {
529 +             name: b"repeated\0" as *const u8 as *const libc::c_char,
530 +             has_arg: 0 as libc::c_int,
531 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
532 +             val: 'd' as i32,
533 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:528:19
    |
528 |             name: b"repeated\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"repeated\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:542:9
    |
536 | /         let mut init = option {
537 | |             name: b"all-repeated\0" as *const u8 as *const libc::c_char,
538 | |             has_arg: 2 as libc::c_int,
539 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
540 | |             val: 'D' as i32,
541 | |         };
    | |__________- unnecessary `let` binding
542 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
536 ~         
537 ~         option {
538 +             name: b"all-repeated\0" as *const u8 as *const libc::c_char,
539 +             has_arg: 2 as libc::c_int,
540 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
541 +             val: 'D' as i32,
542 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:537:19
    |
537 |             name: b"all-repeated\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"all-repeated\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:551:9
    |
545 | /         let mut init = option {
546 | |             name: b"group\0" as *const u8 as *const libc::c_char,
547 | |             has_arg: 2 as libc::c_int,
548 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
549 | |             val: GROUP_OPTION as libc::c_int,
550 | |         };
    | |__________- unnecessary `let` binding
551 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
545 ~         
546 ~         option {
547 +             name: b"group\0" as *const u8 as *const libc::c_char,
548 +             has_arg: 2 as libc::c_int,
549 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
550 +             val: GROUP_OPTION as libc::c_int,
551 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:546:19
    |
546 |             name: b"group\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"group\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:549:18
    |
549 |             val: GROUP_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:560:9
    |
554 | /         let mut init = option {
555 | |             name: b"ignore-case\0" as *const u8 as *const libc::c_char,
556 | |             has_arg: 0 as libc::c_int,
557 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
558 | |             val: 'i' as i32,
559 | |         };
    | |__________- unnecessary `let` binding
560 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
554 ~         
555 ~         option {
556 +             name: b"ignore-case\0" as *const u8 as *const libc::c_char,
557 +             has_arg: 0 as libc::c_int,
558 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
559 +             val: 'i' as i32,
560 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:555:19
    |
555 |             name: b"ignore-case\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ignore-case\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:569:9
    |
563 | /         let mut init = option {
564 | |             name: b"unique\0" as *const u8 as *const libc::c_char,
565 | |             has_arg: 0 as libc::c_int,
566 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
567 | |             val: 'u' as i32,
568 | |         };
    | |__________- unnecessary `let` binding
569 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
563 ~         
564 ~         option {
565 +             name: b"unique\0" as *const u8 as *const libc::c_char,
566 +             has_arg: 0 as libc::c_int,
567 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
568 +             val: 'u' as i32,
569 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:564:19
    |
564 |             name: b"unique\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"unique\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:578:9
    |
572 | /         let mut init = option {
573 | |             name: b"skip-fields\0" as *const u8 as *const libc::c_char,
574 | |             has_arg: 1 as libc::c_int,
575 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
576 | |             val: 'f' as i32,
577 | |         };
    | |__________- unnecessary `let` binding
578 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
572 ~         
573 ~         option {
574 +             name: b"skip-fields\0" as *const u8 as *const libc::c_char,
575 +             has_arg: 1 as libc::c_int,
576 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
577 +             val: 'f' as i32,
578 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:573:19
    |
573 |             name: b"skip-fields\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"skip-fields\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:587:9
    |
581 | /         let mut init = option {
582 | |             name: b"skip-chars\0" as *const u8 as *const libc::c_char,
583 | |             has_arg: 1 as libc::c_int,
584 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
585 | |             val: 's' as i32,
586 | |         };
    | |__________- unnecessary `let` binding
587 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
581 ~         
582 ~         option {
583 +             name: b"skip-chars\0" as *const u8 as *const libc::c_char,
584 +             has_arg: 1 as libc::c_int,
585 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
586 +             val: 's' as i32,
587 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:582:19
    |
582 |             name: b"skip-chars\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"skip-chars\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:596:9
    |
590 | /         let mut init = option {
591 | |             name: b"check-chars\0" as *const u8 as *const libc::c_char,
592 | |             has_arg: 1 as libc::c_int,
593 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
594 | |             val: 'w' as i32,
595 | |         };
    | |__________- unnecessary `let` binding
596 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
590 ~         
591 ~         option {
592 +             name: b"check-chars\0" as *const u8 as *const libc::c_char,
593 +             has_arg: 1 as libc::c_int,
594 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
595 +             val: 'w' as i32,
596 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:591:19
    |
591 |             name: b"check-chars\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"check-chars\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:605:9
    |
599 | /         let mut init = option {
600 | |             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
601 | |             has_arg: 0 as libc::c_int,
602 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
603 | |             val: 'z' as i32,
604 | |         };
    | |__________- unnecessary `let` binding
605 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
599 ~         
600 ~         option {
601 +             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
602 +             has_arg: 0 as libc::c_int,
603 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
604 +             val: 'z' as i32,
605 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:600:19
    |
600 |             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"zero-terminated\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:614:9
    |
608 | /         let mut init = option {
609 | |             name: b"help\0" as *const u8 as *const libc::c_char,
610 | |             has_arg: 0 as libc::c_int,
611 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
612 | |             val: GETOPT_HELP_CHAR as libc::c_int,
613 | |         };
    | |__________- unnecessary `let` binding
614 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
608 ~         
609 ~         option {
610 +             name: b"help\0" as *const u8 as *const libc::c_char,
611 +             has_arg: 0 as libc::c_int,
612 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
613 +             val: GETOPT_HELP_CHAR as libc::c_int,
614 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:609:19
    |
609 |             name: b"help\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"help\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:623:9
    |
617 | /         let mut init = option {
618 | |             name: b"version\0" as *const u8 as *const libc::c_char,
619 | |             has_arg: 0 as libc::c_int,
620 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
621 | |             val: GETOPT_VERSION_CHAR as libc::c_int,
622 | |         };
    | |__________- unnecessary `let` binding
623 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
617 ~         
618 ~         option {
619 +             name: b"version\0" as *const u8 as *const libc::c_char,
620 +             has_arg: 0 as libc::c_int,
621 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
622 +             val: GETOPT_VERSION_CHAR as libc::c_int,
623 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:618:19
    |
618 |             name: b"version\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"version\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:632:9
    |
626 | /         let mut init = option {
627 | |             name: 0 as *const libc::c_char,
628 | |             has_arg: 0 as libc::c_int,
629 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
630 | |             val: 0 as libc::c_int,
631 | |         };
    | |__________- unnecessary `let` binding
632 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
626 ~         
627 ~         option {
628 +             name: 0 as *const libc::c_char,
629 +             has_arg: 0 as libc::c_int,
630 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
631 +             val: 0 as libc::c_int,
632 +         }
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/uniq.rs:636:1
    |
636 | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
637 | |     if status != 0 as libc::c_int {
638 | |         fprintf(
639 | |             stderr,
...   |
741 | |     exit(status);
742 | | }
    | |_^
    |
    = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this function has too many lines (105/100)
   --> src/uniq.rs:636:1
    |
636 | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
637 | |     if status != 0 as libc::c_int {
638 | |         fprintf(
639 | |             stderr,
...   |
741 | |     exit(status);
742 | | }
    | |_^
    |
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary `!=` operation
   --> src/uniq.rs:637:5
    |
637 | /     if status != 0 as libc::c_int {
638 | |         fprintf(
639 | |             stderr,
640 | |             gettext(
...   |
739 | |         emit_ancillary_info("uniq");
740 | |     }
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:641:17
    |
641 | /                 b"Try '%s --help' for more information.\n\0" as *const u8
642 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Try '%s --help' for more information.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:649:17
    |
649 | /                 b"Usage: %s [OPTION]... [INPUT [OUTPUT]]\n\0" as *const u8
650 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Usage: %s [OPTION]... [INPUT [OUTPUT]]\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:656:17
    |
656 | /                 b"Filter adjacent matching lines from INPUT (or standard input),\nwriting to OUTPUT (or standard output).\n\nWith no opti...
657 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Filter adjacent matching lines from INPUT (or standard input),\nwriting to OUTPUT (or standard output).\n\nWith no options, matching lines are merged to the first occurrence.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:664:17
    |
664 | /                 b"  -c, --count           prefix lines by the number of occurrences\n  -d, --repeated        only print duplicate lines, ...
665 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -c, --count           prefix lines by the number of occurrences\n  -d, --repeated        only print duplicate lines, one for each group\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:671:17
    |
671 | /                 b"  -D                    print all duplicate lines\n      --all-repeated[=METHOD]  like -D, but allow separating groups\...
672 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -D                    print all duplicate lines\n      --all-repeated[=METHOD]  like -D, but allow separating groups\n                                 with an empty line;\n                                 METHOD={none(default),prepend,separate}\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:678:17
    |
678 | /                 b"  -f, --skip-fields=N   avoid comparing the first N fields\n\0"
679 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -f, --skip-fields=N   avoid comparing the first N fields\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:685:17
    |
685 | /                 b"      --group[=METHOD]  show all items, separating groups with an empty line;\n                          METHOD={separa...
686 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --group[=METHOD]  show all items, separating groups with an empty line;\n                          METHOD={separate(default),prepend,append,both}\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:692:17
    |
692 | /                 b"  -i, --ignore-case     ignore differences in case when comparing\n  -s, --skip-chars=N    avoid comparing the first N ...
693 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -i, --ignore-case     ignore differences in case when comparing\n  -s, --skip-chars=N    avoid comparing the first N characters\n  -u, --unique          only print unique lines\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:699:17
    |
699 | /                 b"  -z, --zero-terminated     line delimiter is NUL, not newline\n\0"
700 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -z, --zero-terminated     line delimiter is NUL, not newline\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:706:17
    |
706 | /                 b"  -w, --check-chars=N   compare no more than N characters in lines\n\0"
707 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -w, --check-chars=N   compare no more than N characters in lines\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:713:17
    |
713 | /                 b"      --help        display this help and exit\n\0" as *const u8
714 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --help        display this help and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:720:17
    |
720 | /                 b"      --version     output version information and exit\n\0"
721 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --version     output version information and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:727:17
    |
727 | /                 b"\nA field is a run of blanks (usually spaces and/or TABs), then non-blank\ncharacters.  Fields are skipped before chars...
728 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nA field is a run of blanks (usually spaces and/or TABs), then non-blank\ncharacters.  Fields are skipped before chars.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:734:17
    |
734 | /                 b"\n'uniq' does not detect repeated lines unless they are adjacent.\nYou may want to sort the input first, or use 'sort -...
735 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\n'uniq' does not detect repeated lines unless they are adjacent.\nYou may want to sort the input first, or use 'sort -u' without 'uniq'.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: manual `Range::contains` implementation
   --> src/uniq.rs:746:9
    |
746 |         200112 <= posix_ver && posix_ver < 200809
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use: `(200112..200809).contains(&posix_ver)`
    |
    = note: `-W clippy::manual-range-contains` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_range_contains

warning: redundant pattern matching, consider using `is_err()`
   --> src/uniq.rs:754:12
    |
754 |     if let Err(_) = opt_str.parse::<i64>().map(|s| {
    |            ^^^^^^
    |
    = note: `-W clippy::redundant-pattern-matching` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching
help: try this
    |
754 ~     if opt_str.parse::<i64>().map(|s| {
755 +         if s < 0 {
756 +             return Err(());
757 +         }
758 +         size = s;
759 +         Ok(())
760 ~     }).is_err() {
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:764:25
    |
764 |             error(1, 0, error_msg.as_ptr() as *const i8); // Pass raw pointer to error function
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `error_msg.as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
   --> src/uniq.rs:781:1
    |
781 | return is_newline || is_blank;
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `is_newline || is_blank`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/uniq.rs:830:5
    |
830 |     return lp;
    |     ^^^^^^^^^^ help: remove `return`: `lp`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/uniq.rs:789:17
    |
789 |         .offset((*line).length as isize)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:792:11
    |
792 |     while (0 as libc::c_int as libc::c_long) < i && lp < lim as *mut libc::c_char {
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/uniq.rs:806:9
    |
806 |         i;
    |         ^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:809:11
    |
809 |     while (0 as libc::c_int as libc::c_long) < i_0 && lp < lim as *mut libc::c_char {
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:810:24
    |
810 |         lp = lp.offset((mcel_scan(lp, lim)).len as libc::c_int as isize);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((mcel_scan(lp, lim)).len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/uniq.rs:812:9
    |
812 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:817:43
    |
817 |     } else if __ctype_get_mb_cur_max() <= 1 as libc::c_int as libc::c_ulong {
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:822:15
    |
822 |         while (0 as libc::c_int as libc::c_long) < i_1 && lp < lim as *mut libc::c_char {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:823:28
    |
823 |             ep = ep.offset((mcel_scan(lp, lim)).len as libc::c_int as isize);
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((mcel_scan(lp, lim)).len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/uniq.rs:825:13
    |
825 |             i_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
   --> src/uniq.rs:839:9
    |
839 | /         return oldlen != newlen
840 | |             || memcasecmp(
841 | |                 old as *const libc::c_void,
842 | |                 new as *const libc::c_void,
843 | |                 oldlen as size_t,
844 | |             ) != 0
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
839 ~         oldlen != newlen
840 +             || memcasecmp(
841 +                 old as *const libc::c_void,
842 +                 new as *const libc::c_void,
843 +                 oldlen as size_t,
844 +             ) != 0
    |

warning: unneeded `return` statement
   --> src/uniq.rs:846:9
    |
846 | /         return oldlen != newlen
847 | |             || memcmp(
848 | |                 old as *const libc::c_void,
849 | |                 new as *const libc::c_void,
850 | |                 oldlen as libc::c_ulong,
851 | |             ) != 0
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
846 ~         oldlen != newlen
847 +             || memcmp(
848 +                 old as *const libc::c_void,
849 +                 new as *const libc::c_void,
850 +                 oldlen as libc::c_ulong,
851 +             ) != 0
    |

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:843:17
    |
843 |                 oldlen as size_t,
    |                 ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:850:17
    |
850 |                 oldlen as libc::c_ulong,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:859:24
    |
859 |     if if linecount == 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:860:9
    |
860 |         output_unique as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_unique)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:862:9
    |
862 |         output_first_repeated as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_first_repeated)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:864:9
    |
864 |         output_later_repeated as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_later_repeated)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:871:13
    |
871 |             b"%7jd \0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%7jd \0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:872:25
    |
872 |             linecount + 1 as libc::c_int as libc::c_long,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:878:9
    |
878 |         (*line).length as size_t,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:880:10
    |
880 |     ) != (*line).length as libc::c_ulong
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this boolean expression can be simplified
   --> src/uniq.rs:903:8
    |
903 |       if !(strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    |  ________^
904 | |         || !(freopen_safer(infile, b"r\0" as *const u8 as *const libc::c_char, stdin))
905 | |             .is_null())
    | |_______________________^
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
    |
903 ~     if strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) != 0 as libc::c_int && (freopen_safer(infile, b"r\0" as *const u8 as *const libc::c_char, stdin))
904 +             .is_null()
    |

warning: this boolean expression can be simplified
   --> src/uniq.rs:958:8
    |
958 |       if !(strcmp(outfile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    |  ________^
959 | |         || !(freopen_safer(outfile, b"w\0" as *const u8 as *const libc::c_char, stdout))
960 | |             .is_null())
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
    |
958 ~     if strcmp(outfile, b"-\0" as *const u8 as *const libc::c_char) != 0 as libc::c_int && (freopen_safer(outfile, b"w\0" as *const u8 as *const libc::c_char, stdout))
959 +             .is_null()
    |

warning: this boolean expression can be simplified
    --> src/uniq.rs:1073:16
     |
1073 |             if !(feof_unlocked(stdin) == 0) {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `feof_unlocked(stdin) != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (36/25)
   --> src/uniq.rs:885:22
    |
885 | unsafe extern "C" fn check_file(
    |                      ^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (300/100)
    --> src/uniq.rs:885:1
     |
885  | / unsafe extern "C" fn check_file(
886  | |     mut infile: *const libc::c_char,
887  | |     mut outfile: *const libc::c_char,
888  | |     mut delimiter: libc::c_char,
...    |
1197 | |
1198 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: `0 as *mut _` detected
   --> src/uniq.rs:894:17
    |
894 |         buffer: 0 as *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/uniq.rs:899:17
    |
899 |         buffer: 0 as *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/uniq.rs:901:41
    |
901 |     let mut thisline: *mut linebuffer = 0 as *mut linebuffer;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/uniq.rs:902:41
    |
902 |     let mut prevline: *mut linebuffer = 0 as *mut linebuffer;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:903:25
    |
903 |     if !(strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:904:36
    |
904 |         || !(freopen_safer(infile, b"r\0" as *const u8 as *const libc::c_char, stdin))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"r\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:907:9
    |
907 | /         if 0 != 0 {
908 | |             error(
909 | |                 1 as libc::c_int,
910 | |                 *__errno_location(),
...   |
955 | |             });
956 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/uniq.rs:907:12
    |
907 |         if 0 != 0 {
    |            ^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:911:17
    |
911 |                 b"%s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:918:13
    |
918 | /             if 1 as libc::c_int != 0 as libc::c_int {
919 | |                 unreachable!();
920 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:923:17
    |
923 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:927:21
    |
927 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:934:17
    |
934 | /                 if __errstatus != 0 as libc::c_int {
935 | |                     unreachable!();
936 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:940:17
    |
940 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:944:21
    |
944 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:951:17
    |
951 | /                 if __errstatus != 0 as libc::c_int {
952 | |                     unreachable!();
953 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:958:26
    |
958 |     if !(strcmp(outfile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:959:37
    |
959 |         || !(freopen_safer(outfile, b"w\0" as *const u8 as *const libc::c_char, stdout))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"w\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:962:9
     |
962  | /         if 0 != 0 {
963  | |             error(
964  | |                 1 as libc::c_int,
965  | |                 *__errno_location(),
...    |
1010 | |             });
1011 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/uniq.rs:962:12
    |
962 |         if 0 != 0 {
    |            ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:966:17
    |
966 |                 b"%s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:973:13
    |
973 | /             if 1 as libc::c_int != 0 as libc::c_int {
974 | |                 unreachable!();
975 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:978:17
    |
978 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:982:21
    |
982 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:989:17
    |
989 | /                 if __errstatus != 0 as libc::c_int {
990 | |                     unreachable!();
991 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:995:17
    |
995 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:999:21
    |
999 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1006:17
     |
1006 | /                 if __errstatus != 0 as libc::c_int {
1007 | |                     unreachable!();
1008 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1018:8
     |
1018 |     if output_unique as libc::c_int != 0 && output_first_repeated as libc::c_int != 0
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_unique)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1018:45
     |
1018 |     if output_unique as libc::c_int != 0 && output_first_repeated as libc::c_int != 0
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_first_repeated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/uniq.rs:1021:48
     |
1021 |         let mut prevfield: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1030:20
     |
1030 |                 || different(thisfield, prevfield, thislen, prevlen) as libc::c_int != 0;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(different(thisfield, prevfield, thislen, prevlen))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1031:16
     |
1031 |             if new_group as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_group)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1032:48
     |
1032 |                 && grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1032:48
     |
1032 |                 && grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1033:49
     |
1033 |                 && (grouping as libc::c_uint == GM_PREPEND as libc::c_int as libc::c_uint
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1033:49
     |
1033 |                 && (grouping as libc::c_uint == GM_PREPEND as libc::c_int as libc::c_uint
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1034:52
     |
1034 |                     || grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1034:52
     |
1034 |                     || grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                                    ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1035:24
     |
1035 |                     || first_group_printed as libc::c_int != 0
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(first_group_printed)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1037:32
     |
1037 | ...                   == GM_APPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1037:32
     |
1037 | ...                   == GM_APPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1039:36
     |
1039 | ...                   == GM_SEPARATE as libc::c_int as libc::c_uint))
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1039:36
     |
1039 | ...                   == GM_SEPARATE as libc::c_int as libc::c_uint))
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1041:34
     |
1041 |                 putchar_unlocked(delimiter as libc::c_int);
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1043:16
     |
1043 |             if new_group as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_group)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1044:48
     |
1044 |                 || grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1044:48
     |
1044 |                 || grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/uniq.rs:1049:21
     |
1049 |                     (*thisline).length as size_t,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/uniq.rs:1051:22
     |
1051 |                 ) != (*thisline).length as libc::c_ulong
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1061:41
     |
1061 |         if (grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1061:41
     |
1061 |         if (grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                         ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1062:44
     |
1062 |             || grouping as libc::c_uint == GM_APPEND as libc::c_int as libc::c_uint)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1062:44
     |
1062 |             || grouping as libc::c_uint == GM_APPEND as libc::c_int as libc::c_uint)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1063:16
     |
1063 |             && first_group_printed as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(first_group_printed)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1065:30
     |
1065 |             putchar_unlocked(delimiter as libc::c_int);
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1070:41
     |
1070 |         let mut match_count: intmax_t = 0 as libc::c_int as intmax_t;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: all if blocks contain the same code at the end
    --> src/uniq.rs:1083:17
     |
1083 | /                     break;
1084 | |                 }
     | |_________________^
     |
     = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
     |
1083 ~                 }
1084 +                 break;
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1078:17
     |
1078 | /                 if ferror_unlocked(stdin) != 0 {
1079 | |                     current_block = 6469497169255231809;
1080 | |                     break;
1081 | |                 } else {
1082 | |                     current_block = 6476622998065200121;
1083 | |                     break;
1084 | |                 }
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`
    --> src/uniq.rs:1097:32
     |
1097 |                 match_count += match_0 as libc::c_long;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(match_0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1100:25
     |
1100 | /                         if 0 != 0 {
1101 | |                             error(
1102 | |                                 1 as libc::c_int,
1103 | |                                 0 as libc::c_int,
...    |
1142 | |                             });
1143 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1100:28
     |
1100 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1105:37
     |
1105 | / ...                   b"too many repeated lines\0" as *const u8
1106 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"too many repeated lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1109:29
     |
1109 | / ...                   if 1 as libc::c_int != 0 as libc::c_int {
1110 | | ...                       unreachable!();
1111 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1114:33
     |
1114 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1119:41
     |
1119 | / ...                   b"too many repeated lines\0" as *const u8
1120 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"too many repeated lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1123:33
     |
1123 | / ...                   if __errstatus != 0 as libc::c_int {
1124 | | ...                       unreachable!();
1125 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1129:33
     |
1129 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1134:41
     |
1134 | / ...                   b"too many repeated lines\0" as *const u8
1135 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"too many repeated lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1138:33
     |
1138 | / ...                   if __errstatus != 0 as libc::c_int {
1139 | | ...                       unreachable!();
1140 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/uniq.rs:1146:21
     |
1146 |                     match_count;
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1149:24
     |
1149 |                     != DM_NONE as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1149:24
     |
1149 |                     != DM_NONE as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1155:46
     |
1155 |                     } else if match_count == 1 as libc::c_int as libc::c_long {
     |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1157:32
     |
1157 | ...                   == DM_PREPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1157:32
     |
1157 | ...                   == DM_PREPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1159:36
     |
1159 | ...                   == DM_SEPARATE as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1159:36
     |
1159 | ...                   == DM_SEPARATE as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1162:46
     |
1162 | ...                   putchar_unlocked(delimiter as libc::c_int);
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1166:32
     |
1166 |                 if !match_0 || output_later_repeated as libc::c_int != 0 {
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_later_repeated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1172:39
     |
1172 |                         match_count = 0 as libc::c_int as intmax_t;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1189:17
     |
1189 |         gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact
    --> src/uniq.rs:1195:1
     |
1195 | drop(lb1);
     | ^^^^^^^^^
     |
     = note: `-W clippy::drop-copy` implied by `-W clippy::all`
note: argument has type `linebuffer`
    --> src/uniq.rs:1195:6
     |
1195 | drop(lb1);
     |      ^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#drop_copy

warning: calls to `std::mem::drop` with a value that implements `Copy`. Dropping a copy leaves the original intact
    --> src/uniq.rs:1196:1
     |
1196 | drop(lb2);
     | ^^^^^^^^^
     |
note: argument has type `linebuffer`
    --> src/uniq.rs:1196:6
     |
1196 | drop(lb2);
     |      ^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#drop_copy

warning: this boolean expression can be simplified
    --> src/uniq.rs:1330:24
     |
1330 |                       if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |  ________________________^
1331 | |                         && ((if 1 as libc::c_int != 0 {
1332 | |                             0 as libc::c_int as libc::c_long
1333 | |                         } else {
...    |
1672 | |                             !fresh12
1673 | |                         })
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
     |
1330 ~                     if ((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
1331 +                         && ((if 1 as libc::c_int != 0 {
1332 +                             0 as libc::c_int as libc::c_long
1333 +                         } else {
1334 +                             skip_fields
1335 +                         }) - 1 as libc::c_int as libc::c_long)
1336 +                             < 0 as libc::c_int as libc::c_long
1337 +                         && ((if 1 as libc::c_int != 0 {
1338 +                             0 as libc::c_int
1339 +                         } else {
1340 +                             10 as libc::c_int
1341 +                         }) - 1 as libc::c_int) < 0 as libc::c_int
1342 +                         && (if (10 as libc::c_int) < 0 as libc::c_int {
1343 +                             if skip_fields < 0 as libc::c_int as libc::c_long {
1344 +                                 if ((if 1 as libc::c_int != 0 {
1345 +                                     0 as libc::c_int as libc::c_long
1346 +                                 } else {
1347 +                                     (if 1 as libc::c_int != 0 {
1348 +                                         0 as libc::c_int as libc::c_long
1349 +                                     } else {
1350 +                                         -(1 as libc::c_int) as idx_t
1351 +                                     }) + 10 as libc::c_int as libc::c_long
1352 +                                 }) - 1 as libc::c_int as libc::c_long)
1353 +                                     < 0 as libc::c_int as libc::c_long
1354 +                                 {
1355 +                                     (skip_fields
1356 +                                         < -(1 as libc::c_int) as idx_t
1357 +                                             / 10 as libc::c_int as libc::c_long) as libc::c_int
1358 +                                 } else {
1359 +                                     ((if (if (if ((if 1 as libc::c_int != 0 {
1360 +                                         0 as libc::c_int
1361 +                                     } else {
1362 +                                         10 as libc::c_int
1363 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1364 +                                     {
1365 +                                         !(((((if 1 as libc::c_int != 0 {
1366 +                                             0 as libc::c_int
1367 +                                         } else {
1368 +                                             10 as libc::c_int
1369 +                                         }) + 1 as libc::c_int)
1370 +                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1371 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1372 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1373 +                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1374 +                                     } else {
1375 +                                         (if 1 as libc::c_int != 0 {
1376 +                                             0 as libc::c_int
1377 +                                         } else {
1378 +                                             10 as libc::c_int
1379 +                                         }) + 0 as libc::c_int
1380 +                                     }) < 0 as libc::c_int
1381 +                                     {
1382 +                                         ((10 as libc::c_int)
1383 +                                             < -(if ((if 1 as libc::c_int != 0 {
1384 +                                                 0 as libc::c_int
1385 +                                             } else {
1386 +                                                 10 as libc::c_int
1387 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1388 +                                             {
1389 +                                                 ((((if 1 as libc::c_int != 0 {
1390 +                                                     0 as libc::c_int
1391 +                                                 } else {
1392 +                                                     10 as libc::c_int
1393 +                                                 }) + 1 as libc::c_int)
1394 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1395 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1396 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1397 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1398 +                                             } else {
1399 +                                                 (if 1 as libc::c_int != 0 {
1400 +                                                     0 as libc::c_int
1401 +                                                 } else {
1402 +                                                     10 as libc::c_int
1403 +                                                 }) - 1 as libc::c_int
1404 +                                             })) as libc::c_int
1405 +                                     } else {
1406 +                                         ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
1407 +                                     }) != 0
1408 +                                     {
1409 +                                         (if 1 as libc::c_int != 0 {
1410 +                                             0 as libc::c_int
1411 +                                         } else {
1412 +                                             10 as libc::c_int
1413 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t
1414 +                                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1415 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1416 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1417 +                                     } else {
1418 +                                         -(1 as libc::c_int) as idx_t
1419 +                                             / -(10 as libc::c_int) as libc::c_long
1420 +                                     }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
1421 +                                         as libc::c_int
1422 +                                 }
1423 +                             } else {
1424 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1425 +                                     0 as libc::c_int as libc::c_long
1426 +                                 } else {
1427 +                                     (if 1 as libc::c_int != 0 {
1428 +                                         0 as libc::c_int
1429 +                                     } else {
1430 +                                         10 as libc::c_int
1431 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1432 +                                 }) - 1 as libc::c_int as libc::c_long)
1433 +                                     < 0 as libc::c_int as libc::c_long
1434 +                                 {
1435 +                                     !(((((if 1 as libc::c_int != 0 {
1436 +                                         0 as libc::c_int as libc::c_long
1437 +                                     } else {
1438 +                                         (if 1 as libc::c_int != 0 {
1439 +                                             0 as libc::c_int
1440 +                                         } else {
1441 +                                             10 as libc::c_int
1442 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1443 +                                     }) + 1 as libc::c_int as libc::c_long)
1444 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1445 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1446 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1447 +                                         - 1 as libc::c_int as libc::c_long)
1448 +                                         * 2 as libc::c_int as libc::c_long
1449 +                                         + 1 as libc::c_int as libc::c_long)
1450 +                                 } else {
1451 +                                     (if 1 as libc::c_int != 0 {
1452 +                                         0 as libc::c_int as libc::c_long
1453 +                                     } else {
1454 +                                         (if 1 as libc::c_int != 0 {
1455 +                                             0 as libc::c_int
1456 +                                         } else {
1457 +                                             10 as libc::c_int
1458 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1459 +                                     }) + 0 as libc::c_int as libc::c_long
1460 +                                 }) < 0 as libc::c_int as libc::c_long
1461 +                                 {
1462 +                                     (((if 1 as libc::c_int != 0 {
1463 +                                         0 as libc::c_int
1464 +                                     } else {
1465 +                                         10 as libc::c_int
1466 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1467 +                                         < -(if ((if 1 as libc::c_int != 0 {
1468 +                                             0 as libc::c_int as libc::c_long
1469 +                                         } else {
1470 +                                             (if 1 as libc::c_int != 0 {
1471 +                                                 0 as libc::c_int
1472 +                                             } else {
1473 +                                                 10 as libc::c_int
1474 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1475 +                                         }) - 1 as libc::c_int as libc::c_long)
1476 +                                             < 0 as libc::c_int as libc::c_long
1477 +                                         {
1478 +                                             ((((if 1 as libc::c_int != 0 {
1479 +                                                 0 as libc::c_int as libc::c_long
1480 +                                             } else {
1481 +                                                 (if 1 as libc::c_int != 0 {
1482 +                                                     0 as libc::c_int
1483 +                                                 } else {
1484 +                                                     10 as libc::c_int
1485 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1486 +                                             }) + 1 as libc::c_int as libc::c_long)
1487 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1488 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1489 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1490 +                                                 - 1 as libc::c_int as libc::c_long)
1491 +                                                 * 2 as libc::c_int as libc::c_long
1492 +                                                 + 1 as libc::c_int as libc::c_long
1493 +                                         } else {
1494 +                                             (if 1 as libc::c_int != 0 {
1495 +                                                 0 as libc::c_int as libc::c_long
1496 +                                             } else {
1497 +                                                 (if 1 as libc::c_int != 0 {
1498 +                                                     0 as libc::c_int
1499 +                                                 } else {
1500 +                                                     10 as libc::c_int
1501 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1502 +                                             }) - 1 as libc::c_int as libc::c_long
1503 +                                         })) as libc::c_int
1504 +                                 } else {
1505 +                                     ((0 as libc::c_int as libc::c_long)
1506 +                                         < (if 1 as libc::c_int != 0 {
1507 +                                             0 as libc::c_int
1508 +                                         } else {
1509 +                                             10 as libc::c_int
1510 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t)
1511 +                                         as libc::c_int
1512 +                                 }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
1513 +                                 {
1514 +                                     if ((if 1 as libc::c_int != 0 {
1515 +                                         0 as libc::c_int as libc::c_long
1516 +                                     } else {
1517 +                                         skip_fields
1518 +                                     }) - 1 as libc::c_int as libc::c_long)
1519 +                                         < 0 as libc::c_int as libc::c_long
1520 +                                     {
1521 +                                         ((0 as libc::c_int as libc::c_long)
1522 +                                             < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
1523 +                                     } else {
1524 +                                         ((0 as libc::c_int as libc::c_long) < skip_fields
1525 +                                             && (-(1 as libc::c_int) as libc::c_long
1526 +                                                 - 0 as libc::c_int as idx_t)
1527 +                                                 < skip_fields - 1 as libc::c_int as libc::c_long)
1528 +                                             as libc::c_int
1529 +                                     }
1530 +                                 } else {
1531 +                                     ((0 as libc::c_int as idx_t
1532 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1533 +                                         as libc::c_int
1534 +                                 }
1535 +                             }
1536 +                         } else {
1537 +                             if 10 as libc::c_int == 0 as libc::c_int {
1538 +                                 0 as libc::c_int
1539 +                             } else {
1540 +                                 if skip_fields < 0 as libc::c_int as libc::c_long {
1541 +                                     if (if (if ((if 1 as libc::c_int != 0 {
1542 +                                         0 as libc::c_int as libc::c_long
1543 +                                     } else {
1544 +                                         (if 1 as libc::c_int != 0 {
1545 +                                             0 as libc::c_int as libc::c_long
1546 +                                         } else {
1547 +                                             skip_fields
1548 +                                         }) + 0 as libc::c_int as idx_t
1549 +                                     }) - 1 as libc::c_int as libc::c_long)
1550 +                                         < 0 as libc::c_int as libc::c_long
1551 +                                     {
1552 +                                         !(((((if 1 as libc::c_int != 0 {
1553 +                                             0 as libc::c_int as libc::c_long
1554 +                                         } else {
1555 +                                             (if 1 as libc::c_int != 0 {
1556 +                                                 0 as libc::c_int as libc::c_long
1557 +                                             } else {
1558 +                                                 skip_fields
1559 +                                             }) + 0 as libc::c_int as idx_t
1560 +                                         }) + 1 as libc::c_int as libc::c_long)
1561 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1562 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1563 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1564 +                                             - 1 as libc::c_int as libc::c_long)
1565 +                                             * 2 as libc::c_int as libc::c_long
1566 +                                             + 1 as libc::c_int as libc::c_long)
1567 +                                     } else {
1568 +                                         (if 1 as libc::c_int != 0 {
1569 +                                             0 as libc::c_int as libc::c_long
1570 +                                         } else {
1571 +                                             (if 1 as libc::c_int != 0 {
1572 +                                                 0 as libc::c_int as libc::c_long
1573 +                                             } else {
1574 +                                                 skip_fields
1575 +                                             }) + 0 as libc::c_int as idx_t
1576 +                                         }) + 0 as libc::c_int as libc::c_long
1577 +                                     }) < 0 as libc::c_int as libc::c_long
1578 +                                     {
1579 +                                         (((if 1 as libc::c_int != 0 {
1580 +                                             0 as libc::c_int as libc::c_long
1581 +                                         } else {
1582 +                                             skip_fields
1583 +                                         }) + 0 as libc::c_int as idx_t)
1584 +                                             < -(if ((if 1 as libc::c_int != 0 {
1585 +                                                 0 as libc::c_int as libc::c_long
1586 +                                             } else {
1587 +                                                 (if 1 as libc::c_int != 0 {
1588 +                                                     0 as libc::c_int as libc::c_long
1589 +                                                 } else {
1590 +                                                     skip_fields
1591 +                                                 }) + 0 as libc::c_int as idx_t
1592 +                                             }) - 1 as libc::c_int as libc::c_long)
1593 +                                                 < 0 as libc::c_int as libc::c_long
1594 +                                             {
1595 +                                                 ((((if 1 as libc::c_int != 0 {
1596 +                                                     0 as libc::c_int as libc::c_long
1597 +                                                 } else {
1598 +                                                     (if 1 as libc::c_int != 0 {
1599 +                                                         0 as libc::c_int as libc::c_long
1600 +                                                     } else {
1601 +                                                         skip_fields
1602 +                                                     }) + 0 as libc::c_int as idx_t
1603 +                                                 }) + 1 as libc::c_int as libc::c_long)
1604 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1605 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1606 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1607 +                                                     - 1 as libc::c_int as libc::c_long)
1608 +                                                     * 2 as libc::c_int as libc::c_long
1609 +                                                     + 1 as libc::c_int as libc::c_long
1610 +                                             } else {
1611 +                                                 (if 1 as libc::c_int != 0 {
1612 +                                                     0 as libc::c_int as libc::c_long
1613 +                                                 } else {
1614 +                                                     (if 1 as libc::c_int != 0 {
1615 +                                                         0 as libc::c_int as libc::c_long
1616 +                                                     } else {
1617 +                                                         skip_fields
1618 +                                                     }) + 0 as libc::c_int as idx_t
1619 +                                                 }) - 1 as libc::c_int as libc::c_long
1620 +                                             })) as libc::c_int
1621 +                                     } else {
1622 +                                         ((0 as libc::c_int as libc::c_long)
1623 +                                             < (if 1 as libc::c_int != 0 {
1624 +                                                 0 as libc::c_int as libc::c_long
1625 +                                             } else {
1626 +                                                 skip_fields
1627 +                                             }) + 0 as libc::c_int as idx_t) as libc::c_int
1628 +                                     }) != 0
1629 +                                         && skip_fields == -(1 as libc::c_int) as libc::c_long
1630 +                                     {
1631 +                                         if ((if 1 as libc::c_int != 0 {
1632 +                                             0 as libc::c_int
1633 +                                         } else {
1634 +                                             10 as libc::c_int
1635 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
1636 +                                         {
1637 +                                             ((0 as libc::c_int as libc::c_long)
1638 +                                                 < 10 as libc::c_int as libc::c_long
1639 +                                                     + 0 as libc::c_int as idx_t) as libc::c_int
1640 +                                         } else {
1641 +                                             ((-(1 as libc::c_int) as libc::c_long
1642 +                                                 - 0 as libc::c_int as idx_t)
1643 +                                                 < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1644 +                                                 as libc::c_int
1645 +                                         }
1646 +                                     } else {
1647 +                                         (0 as libc::c_int as idx_t / skip_fields
1648 +                                             < 10 as libc::c_int as libc::c_long) as libc::c_int
1649 +                                     }
1650 +                                 } else {
1651 +                                     ((-(1 as libc::c_int) as idx_t
1652 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1653 +                                         as libc::c_int
1654 +                                 }
1655 +                             }
1656 +                         }) != 0
1657 +                     {
1658 +                         let (fresh7, _fresh8) = skip_fields
1659 +                             .overflowing_mul((10 as libc::c_int).into());
1660 +                         *(&mut skip_fields as *mut idx_t) = fresh7;
1661 +                         1 as libc::c_int
1662 +                     } else {
1663 +                         let (fresh9, fresh10) = skip_fields
1664 +                             .overflowing_mul((10 as libc::c_int).into());
1665 +                         *(&mut skip_fields as *mut idx_t) = fresh9;
1666 +                         fresh10 as libc::c_int
1667 +                     }) != 0) || !{
1668 +                             let (fresh11, fresh12) = skip_fields
1669 +                                 .overflowing_add((optc - '0' as i32).into());
1670 +                             *(&mut skip_fields as *mut idx_t) = fresh11;
1671 +                             !fresh12
1672 +                         }
     |

warning: this boolean expression can be simplified
    --> src/uniq.rs:1330:26
     |
1330 |                       if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |  __________________________^
1331 | |                         && ((if 1 as libc::c_int != 0 {
1332 | |                             0 as libc::c_int as libc::c_long
1333 | |                         } else {
...    |
1666 | |                         fresh10 as libc::c_int
1667 | |                     }) != 0)
     | |____________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
     |
1330 ~                     if !((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
1331 +                         && ((if 1 as libc::c_int != 0 {
1332 +                             0 as libc::c_int as libc::c_long
1333 +                         } else {
1334 +                             skip_fields
1335 +                         }) - 1 as libc::c_int as libc::c_long)
1336 +                             < 0 as libc::c_int as libc::c_long
1337 +                         && ((if 1 as libc::c_int != 0 {
1338 +                             0 as libc::c_int
1339 +                         } else {
1340 +                             10 as libc::c_int
1341 +                         }) - 1 as libc::c_int) < 0 as libc::c_int
1342 +                         && (if (10 as libc::c_int) < 0 as libc::c_int {
1343 +                             if skip_fields < 0 as libc::c_int as libc::c_long {
1344 +                                 if ((if 1 as libc::c_int != 0 {
1345 +                                     0 as libc::c_int as libc::c_long
1346 +                                 } else {
1347 +                                     (if 1 as libc::c_int != 0 {
1348 +                                         0 as libc::c_int as libc::c_long
1349 +                                     } else {
1350 +                                         -(1 as libc::c_int) as idx_t
1351 +                                     }) + 10 as libc::c_int as libc::c_long
1352 +                                 }) - 1 as libc::c_int as libc::c_long)
1353 +                                     < 0 as libc::c_int as libc::c_long
1354 +                                 {
1355 +                                     (skip_fields
1356 +                                         < -(1 as libc::c_int) as idx_t
1357 +                                             / 10 as libc::c_int as libc::c_long) as libc::c_int
1358 +                                 } else {
1359 +                                     ((if (if (if ((if 1 as libc::c_int != 0 {
1360 +                                         0 as libc::c_int
1361 +                                     } else {
1362 +                                         10 as libc::c_int
1363 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1364 +                                     {
1365 +                                         !(((((if 1 as libc::c_int != 0 {
1366 +                                             0 as libc::c_int
1367 +                                         } else {
1368 +                                             10 as libc::c_int
1369 +                                         }) + 1 as libc::c_int)
1370 +                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1371 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1372 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1373 +                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1374 +                                     } else {
1375 +                                         (if 1 as libc::c_int != 0 {
1376 +                                             0 as libc::c_int
1377 +                                         } else {
1378 +                                             10 as libc::c_int
1379 +                                         }) + 0 as libc::c_int
1380 +                                     }) < 0 as libc::c_int
1381 +                                     {
1382 +                                         ((10 as libc::c_int)
1383 +                                             < -(if ((if 1 as libc::c_int != 0 {
1384 +                                                 0 as libc::c_int
1385 +                                             } else {
1386 +                                                 10 as libc::c_int
1387 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1388 +                                             {
1389 +                                                 ((((if 1 as libc::c_int != 0 {
1390 +                                                     0 as libc::c_int
1391 +                                                 } else {
1392 +                                                     10 as libc::c_int
1393 +                                                 }) + 1 as libc::c_int)
1394 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1395 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1396 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1397 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1398 +                                             } else {
1399 +                                                 (if 1 as libc::c_int != 0 {
1400 +                                                     0 as libc::c_int
1401 +                                                 } else {
1402 +                                                     10 as libc::c_int
1403 +                                                 }) - 1 as libc::c_int
1404 +                                             })) as libc::c_int
1405 +                                     } else {
1406 +                                         ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
1407 +                                     }) != 0
1408 +                                     {
1409 +                                         (if 1 as libc::c_int != 0 {
1410 +                                             0 as libc::c_int
1411 +                                         } else {
1412 +                                             10 as libc::c_int
1413 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t
1414 +                                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1415 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1416 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1417 +                                     } else {
1418 +                                         -(1 as libc::c_int) as idx_t
1419 +                                             / -(10 as libc::c_int) as libc::c_long
1420 +                                     }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
1421 +                                         as libc::c_int
1422 +                                 }
1423 +                             } else {
1424 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1425 +                                     0 as libc::c_int as libc::c_long
1426 +                                 } else {
1427 +                                     (if 1 as libc::c_int != 0 {
1428 +                                         0 as libc::c_int
1429 +                                     } else {
1430 +                                         10 as libc::c_int
1431 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1432 +                                 }) - 1 as libc::c_int as libc::c_long)
1433 +                                     < 0 as libc::c_int as libc::c_long
1434 +                                 {
1435 +                                     !(((((if 1 as libc::c_int != 0 {
1436 +                                         0 as libc::c_int as libc::c_long
1437 +                                     } else {
1438 +                                         (if 1 as libc::c_int != 0 {
1439 +                                             0 as libc::c_int
1440 +                                         } else {
1441 +                                             10 as libc::c_int
1442 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1443 +                                     }) + 1 as libc::c_int as libc::c_long)
1444 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1445 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1446 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1447 +                                         - 1 as libc::c_int as libc::c_long)
1448 +                                         * 2 as libc::c_int as libc::c_long
1449 +                                         + 1 as libc::c_int as libc::c_long)
1450 +                                 } else {
1451 +                                     (if 1 as libc::c_int != 0 {
1452 +                                         0 as libc::c_int as libc::c_long
1453 +                                     } else {
1454 +                                         (if 1 as libc::c_int != 0 {
1455 +                                             0 as libc::c_int
1456 +                                         } else {
1457 +                                             10 as libc::c_int
1458 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1459 +                                     }) + 0 as libc::c_int as libc::c_long
1460 +                                 }) < 0 as libc::c_int as libc::c_long
1461 +                                 {
1462 +                                     (((if 1 as libc::c_int != 0 {
1463 +                                         0 as libc::c_int
1464 +                                     } else {
1465 +                                         10 as libc::c_int
1466 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1467 +                                         < -(if ((if 1 as libc::c_int != 0 {
1468 +                                             0 as libc::c_int as libc::c_long
1469 +                                         } else {
1470 +                                             (if 1 as libc::c_int != 0 {
1471 +                                                 0 as libc::c_int
1472 +                                             } else {
1473 +                                                 10 as libc::c_int
1474 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1475 +                                         }) - 1 as libc::c_int as libc::c_long)
1476 +                                             < 0 as libc::c_int as libc::c_long
1477 +                                         {
1478 +                                             ((((if 1 as libc::c_int != 0 {
1479 +                                                 0 as libc::c_int as libc::c_long
1480 +                                             } else {
1481 +                                                 (if 1 as libc::c_int != 0 {
1482 +                                                     0 as libc::c_int
1483 +                                                 } else {
1484 +                                                     10 as libc::c_int
1485 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1486 +                                             }) + 1 as libc::c_int as libc::c_long)
1487 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1488 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1489 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1490 +                                                 - 1 as libc::c_int as libc::c_long)
1491 +                                                 * 2 as libc::c_int as libc::c_long
1492 +                                                 + 1 as libc::c_int as libc::c_long
1493 +                                         } else {
1494 +                                             (if 1 as libc::c_int != 0 {
1495 +                                                 0 as libc::c_int as libc::c_long
1496 +                                             } else {
1497 +                                                 (if 1 as libc::c_int != 0 {
1498 +                                                     0 as libc::c_int
1499 +                                                 } else {
1500 +                                                     10 as libc::c_int
1501 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1502 +                                             }) - 1 as libc::c_int as libc::c_long
1503 +                                         })) as libc::c_int
1504 +                                 } else {
1505 +                                     ((0 as libc::c_int as libc::c_long)
1506 +                                         < (if 1 as libc::c_int != 0 {
1507 +                                             0 as libc::c_int
1508 +                                         } else {
1509 +                                             10 as libc::c_int
1510 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t)
1511 +                                         as libc::c_int
1512 +                                 }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
1513 +                                 {
1514 +                                     if ((if 1 as libc::c_int != 0 {
1515 +                                         0 as libc::c_int as libc::c_long
1516 +                                     } else {
1517 +                                         skip_fields
1518 +                                     }) - 1 as libc::c_int as libc::c_long)
1519 +                                         < 0 as libc::c_int as libc::c_long
1520 +                                     {
1521 +                                         ((0 as libc::c_int as libc::c_long)
1522 +                                             < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
1523 +                                     } else {
1524 +                                         ((0 as libc::c_int as libc::c_long) < skip_fields
1525 +                                             && (-(1 as libc::c_int) as libc::c_long
1526 +                                                 - 0 as libc::c_int as idx_t)
1527 +                                                 < skip_fields - 1 as libc::c_int as libc::c_long)
1528 +                                             as libc::c_int
1529 +                                     }
1530 +                                 } else {
1531 +                                     ((0 as libc::c_int as idx_t
1532 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1533 +                                         as libc::c_int
1534 +                                 }
1535 +                             }
1536 +                         } else {
1537 +                             if 10 as libc::c_int == 0 as libc::c_int {
1538 +                                 0 as libc::c_int
1539 +                             } else {
1540 +                                 if skip_fields < 0 as libc::c_int as libc::c_long {
1541 +                                     if (if (if ((if 1 as libc::c_int != 0 {
1542 +                                         0 as libc::c_int as libc::c_long
1543 +                                     } else {
1544 +                                         (if 1 as libc::c_int != 0 {
1545 +                                             0 as libc::c_int as libc::c_long
1546 +                                         } else {
1547 +                                             skip_fields
1548 +                                         }) + 0 as libc::c_int as idx_t
1549 +                                     }) - 1 as libc::c_int as libc::c_long)
1550 +                                         < 0 as libc::c_int as libc::c_long
1551 +                                     {
1552 +                                         !(((((if 1 as libc::c_int != 0 {
1553 +                                             0 as libc::c_int as libc::c_long
1554 +                                         } else {
1555 +                                             (if 1 as libc::c_int != 0 {
1556 +                                                 0 as libc::c_int as libc::c_long
1557 +                                             } else {
1558 +                                                 skip_fields
1559 +                                             }) + 0 as libc::c_int as idx_t
1560 +                                         }) + 1 as libc::c_int as libc::c_long)
1561 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1562 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1563 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1564 +                                             - 1 as libc::c_int as libc::c_long)
1565 +                                             * 2 as libc::c_int as libc::c_long
1566 +                                             + 1 as libc::c_int as libc::c_long)
1567 +                                     } else {
1568 +                                         (if 1 as libc::c_int != 0 {
1569 +                                             0 as libc::c_int as libc::c_long
1570 +                                         } else {
1571 +                                             (if 1 as libc::c_int != 0 {
1572 +                                                 0 as libc::c_int as libc::c_long
1573 +                                             } else {
1574 +                                                 skip_fields
1575 +                                             }) + 0 as libc::c_int as idx_t
1576 +                                         }) + 0 as libc::c_int as libc::c_long
1577 +                                     }) < 0 as libc::c_int as libc::c_long
1578 +                                     {
1579 +                                         (((if 1 as libc::c_int != 0 {
1580 +                                             0 as libc::c_int as libc::c_long
1581 +                                         } else {
1582 +                                             skip_fields
1583 +                                         }) + 0 as libc::c_int as idx_t)
1584 +                                             < -(if ((if 1 as libc::c_int != 0 {
1585 +                                                 0 as libc::c_int as libc::c_long
1586 +                                             } else {
1587 +                                                 (if 1 as libc::c_int != 0 {
1588 +                                                     0 as libc::c_int as libc::c_long
1589 +                                                 } else {
1590 +                                                     skip_fields
1591 +                                                 }) + 0 as libc::c_int as idx_t
1592 +                                             }) - 1 as libc::c_int as libc::c_long)
1593 +                                                 < 0 as libc::c_int as libc::c_long
1594 +                                             {
1595 +                                                 ((((if 1 as libc::c_int != 0 {
1596 +                                                     0 as libc::c_int as libc::c_long
1597 +                                                 } else {
1598 +                                                     (if 1 as libc::c_int != 0 {
1599 +                                                         0 as libc::c_int as libc::c_long
1600 +                                                     } else {
1601 +                                                         skip_fields
1602 +                                                     }) + 0 as libc::c_int as idx_t
1603 +                                                 }) + 1 as libc::c_int as libc::c_long)
1604 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1605 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1606 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1607 +                                                     - 1 as libc::c_int as libc::c_long)
1608 +                                                     * 2 as libc::c_int as libc::c_long
1609 +                                                     + 1 as libc::c_int as libc::c_long
1610 +                                             } else {
1611 +                                                 (if 1 as libc::c_int != 0 {
1612 +                                                     0 as libc::c_int as libc::c_long
1613 +                                                 } else {
1614 +                                                     (if 1 as libc::c_int != 0 {
1615 +                                                         0 as libc::c_int as libc::c_long
1616 +                                                     } else {
1617 +                                                         skip_fields
1618 +                                                     }) + 0 as libc::c_int as idx_t
1619 +                                                 }) - 1 as libc::c_int as libc::c_long
1620 +                                             })) as libc::c_int
1621 +                                     } else {
1622 +                                         ((0 as libc::c_int as libc::c_long)
1623 +                                             < (if 1 as libc::c_int != 0 {
1624 +                                                 0 as libc::c_int as libc::c_long
1625 +                                             } else {
1626 +                                                 skip_fields
1627 +                                             }) + 0 as libc::c_int as idx_t) as libc::c_int
1628 +                                     }) != 0
1629 +                                         && skip_fields == -(1 as libc::c_int) as libc::c_long
1630 +                                     {
1631 +                                         if ((if 1 as libc::c_int != 0 {
1632 +                                             0 as libc::c_int
1633 +                                         } else {
1634 +                                             10 as libc::c_int
1635 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
1636 +                                         {
1637 +                                             ((0 as libc::c_int as libc::c_long)
1638 +                                                 < 10 as libc::c_int as libc::c_long
1639 +                                                     + 0 as libc::c_int as idx_t) as libc::c_int
1640 +                                         } else {
1641 +                                             ((-(1 as libc::c_int) as libc::c_long
1642 +                                                 - 0 as libc::c_int as idx_t)
1643 +                                                 < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1644 +                                                 as libc::c_int
1645 +                                         }
1646 +                                     } else {
1647 +                                         (0 as libc::c_int as idx_t / skip_fields
1648 +                                             < 10 as libc::c_int as libc::c_long) as libc::c_int
1649 +                                     }
1650 +                                 } else {
1651 +                                     ((-(1 as libc::c_int) as idx_t
1652 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1653 +                                         as libc::c_int
1654 +                                 }
1655 +                             }
1656 +                         }) != 0
1657 +                     {
1658 +                         let (fresh7, _fresh8) = skip_fields
1659 +                             .overflowing_mul((10 as libc::c_int).into());
1660 +                         *(&mut skip_fields as *mut idx_t) = fresh7;
1661 +                         1 as libc::c_int
1662 +                     } else {
1663 +                         let (fresh9, fresh10) = skip_fields
1664 +                             .overflowing_mul((10 as libc::c_int).into());
1665 +                         *(&mut skip_fields as *mut idx_t) = fresh9;
1666 +                         fresh10 as libc::c_int
1667 +                     }) == 0
     |

warning: the function has a cognitive complexity of (92/25)
    --> src/uniq.rs:1199:11
     |
1199 | unsafe fn main_0(
     |           ^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (717/100)
    --> src/uniq.rs:1199:1
     |
1199 | / unsafe fn main_0(
1200 | |     mut argc: libc::c_int,
1201 | |     mut argv: *mut *mut libc::c_char,
1202 | | ) -> libc::c_int {
...    |
1942 | |     return 0 as libc::c_int;
1943 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/uniq.rs:1942:5
     |
1942 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1205:9
     |
1205 |         b"POSIXLY_CORRECT\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"POSIXLY_CORRECT\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *const _` detected
    --> src/uniq.rs:1210:47
     |
1210 |     let mut file: [*const libc::c_char; 2] = [0 as *const libc::c_char; 2];
     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/uniq.rs:1211:39
     |
1211 |     let mut delimiter: libc::c_char = '\n' as i32 as libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1213:39
     |
1213 |     file[1 as libc::c_int as usize] = b"-\0" as *const u8 as *const libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1213:10
     |
1213 |     file[1 as libc::c_int as usize] = b"-\0" as *const u8 as *const libc::c_char;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1214:44
     |
1214 |     file[0 as libc::c_int as usize] = file[1 as libc::c_int as usize];
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1214:10
     |
1214 |     file[0 as libc::c_int as usize] = file[1 as libc::c_int as usize];
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1216:33
     |
1216 |     setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1218:9
     |
1218 |         b"coreutils\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1219:9
     |
1219 |         b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/usr/local/share/locale\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1221:16
     |
1221 |     textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1225:16
     |
1225 |             || posixly_correct as libc::c_int != 0 && nfiles != 0 as libc::c_int
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(posixly_correct)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1230:21
     |
1230 |                     b"-0123456789Dcdf:is:uw:z\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-0123456789Dcdf:is:uw:z\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/uniq.rs:1232:21
     |
1232 |                     0 as *mut libc::c_int,
     |                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_int>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1242:25
     |
1242 |     error(0, 0, gettext(b"extra operand %s\0" as *const u8 as *const libc::c_char), extra_operand);
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1249:6
     |
1249 | file[fresh1 as usize] = unsafe { *argv.offset(fresh0 as isize) };
     |      ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1255:24
     |
1255 |                     if *optarg.offset(0 as libc::c_int as isize) as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*optarg.offset(0 as libc::c_int as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/uniq.rs:1259:29
     |
1259 | ...                   0 as *mut *mut libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1262:29
     |
1262 | ...                   b"\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1264:32
     |
1264 | ...                   <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1264:32
     |
1264 | ...                   <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/uniq.rs:1272:25
     |
1272 | /                         if 0 != 0 {
1273 | |                             error(
1274 | |                                 0 as libc::c_int,
1275 | |                                 0 as libc::c_int,
...    |
1314 | |                             });
1315 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1272:28
     |
1272 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1277:37
     |
1277 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1281:29
     |
1281 | / ...                   if 0 as libc::c_int != 0 as libc::c_int {
1282 | | ...                       unreachable!();
1283 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1281:32
     |
1281 | ...                   if 0 as libc::c_int != 0 as libc::c_int {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1286:33
     |
1286 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1291:41
     |
1291 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1295:33
     |
1295 | / ...                   if __errstatus != 0 as libc::c_int {
1296 | | ...                       unreachable!();
1297 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1301:33
     |
1301 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1306:41
     |
1306 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1310:33
     |
1310 | / ...                   if __errstatus != 0 as libc::c_int {
1311 | | ...                       unreachable!();
1312 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: manual implementation of an assign operation
    --> src/uniq.rs:1319:25
     |
1319 |                         nfiles = nfiles + 1;
     |                         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `nfiles += 1`
     |
     = note: `-W clippy::assign-op-pattern` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1320:30
     |
1320 |                         file[fresh2 as usize] = optarg;
     |                              ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1326:28
     |
1326 |                         == SFO_NEW as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1326:28
     |
1326 |                         == SFO_NEW as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1328:39
     |
1328 |                         skip_fields = 0 as libc::c_int as idx_t;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1330:32
     |
1330 |                     if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1330:62
     |
1330 |                     if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1331:29
     |
1331 |                           && ((if 1 as libc::c_int != 0 {
     |  _____________________________^
1332 | |                             0 as libc::c_int as libc::c_long
1333 | |                         } else {
1334 | |                             skip_fields
1335 | |                         }) - 1 as libc::c_int as libc::c_long)
     | |__________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1332:29
     |
1332 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1335:30
     |
1335 |                         }) - 1 as libc::c_int as libc::c_long)
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1336:31
     |
1336 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1337:29
     |
1337 |                           && ((if 1 as libc::c_int != 0 {
     |  _____________________________^
1338 | |                             0 as libc::c_int
1339 | |                         } else {
1340 | |                             10 as libc::c_int
1341 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
     | |__________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1343:46
     |
1343 | ...                   if skip_fields < 0 as libc::c_int as libc::c_long {
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1344:37
     |
1344 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1345 | | ...                       0 as libc::c_int as libc::c_long
1346 | | ...                   } else {
1347 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1351 | | ...                       }) + 10 as libc::c_int as libc::c_long
1352 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1345:37
     |
1345 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1347:37
     |
1347 | / ...                   (if 1 as libc::c_int != 0 {
1348 | | ...                       0 as libc::c_int as libc::c_long
1349 | | ...                   } else {
1350 | | ...                       -(1 as libc::c_int) as idx_t
1351 | | ...                   }) + 10 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1348:41
     |
1348 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1350:41
     |
1350 | ...                   -(1 as libc::c_int) as idx_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1351:42
     |
1351 | ...                   }) + 10 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1352:38
     |
1352 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1353:39
     |
1353 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1355:37
     |
1355 | / ...                   (skip_fields
1356 | | ...                       < -(1 as libc::c_int) as idx_t
1357 | | ...                           / 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1355 ~                                     i32::from(skip_fields
1356 +                                         < -(1 as libc::c_int) as idx_t
1357 +                                             / 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1356:43
     |
1356 | ...                   < -(1 as libc::c_int) as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1357:47
     |
1357 | ...                   / 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1359:37
     |
1359 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
1360 | | ...                       0 as libc::c_int
1361 | | ...                   } else {
1362 | | ...                       10 as libc::c_int
...    |
1420 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
1421 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1359 ~                                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
1360 +                                         0 as libc::c_int
1361 +                                     } else {
1362 +                                         10 as libc::c_int
1363 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1364 +                                     {
1365 +                                         !(((((if 1 as libc::c_int != 0 {
1366 +                                             0 as libc::c_int
1367 +                                         } else {
1368 +                                             10 as libc::c_int
1369 +                                         }) + 1 as libc::c_int)
1370 +                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1371 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1372 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1373 +                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1374 +                                     } else {
1375 +                                         (if 1 as libc::c_int != 0 {
1376 +                                             0 as libc::c_int
1377 +                                         } else {
1378 +                                             10 as libc::c_int
1379 +                                         }) + 0 as libc::c_int
1380 +                                     }) < 0 as libc::c_int
1381 +                                     {
1382 +                                         ((10 as libc::c_int)
1383 +                                             < -(if ((if 1 as libc::c_int != 0 {
1384 +                                                 0 as libc::c_int
1385 +                                             } else {
1386 +                                                 10 as libc::c_int
1387 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1388 +                                             {
1389 +                                                 ((((if 1 as libc::c_int != 0 {
1390 +                                                     0 as libc::c_int
1391 +                                                 } else {
1392 +                                                     10 as libc::c_int
1393 +                                                 }) + 1 as libc::c_int)
1394 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1395 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1396 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1397 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1398 +                                             } else {
1399 +                                                 (if 1 as libc::c_int != 0 {
1400 +                                                     0 as libc::c_int
1401 +                                                 } else {
1402 +                                                     10 as libc::c_int
1403 +                                                 }) - 1 as libc::c_int
1404 +                                             })) as libc::c_int
1405 +                                     } else {
1406 +                                         ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
1407 +                                     }) != 0
1408 +                                     {
1409 +                                         (if 1 as libc::c_int != 0 {
1410 +                                             0 as libc::c_int
1411 +                                         } else {
1412 +                                             10 as libc::c_int
1413 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t
1414 +                                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1415 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1416 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1417 +                                     } else {
1418 +                                         -(1 as libc::c_int) as idx_t
1419 +                                             / -(10 as libc::c_int) as libc::c_long
1420 +                                     }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1359:38
     |
1359 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  ________________________^
1360 | | ...                       0 as libc::c_int
1361 | | ...                   } else {
1362 | | ...                       10 as libc::c_int
...    |
1419 | | ...                           / -(10 as libc::c_int) as libc::c_long
1420 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/uniq.rs:1359:51
     |
1359 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  _____________________________________^
1360 | | ...                       0 as libc::c_int
1361 | | ...                   } else {
1362 | | ...                       10 as libc::c_int
1363 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/uniq.rs:1365:46
     |
1365 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1366 | | ...                       0 as libc::c_int
1367 | | ...                   } else {
1368 | | ...                       10 as libc::c_int
1369 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1371:63
     |
1371 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1372:63
     |
1372 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/uniq.rs:1375:41
     |
1375 | / ...                   (if 1 as libc::c_int != 0 {
1376 | | ...                       0 as libc::c_int
1377 | | ...                   } else {
1378 | | ...                       10 as libc::c_int
1379 | | ...                   }) + 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1382:41
     |
1382 | / ...                   ((10 as libc::c_int)
1383 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
1384 | | ...                           0 as libc::c_int
1385 | | ...                       } else {
...    |
1403 | | ...                           }) - 1 as libc::c_int
1404 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1382 ~                                         i32::from((10 as libc::c_int)
1383 +                                             < -(if ((if 1 as libc::c_int != 0 {
1384 +                                                 0 as libc::c_int
1385 +                                             } else {
1386 +                                                 10 as libc::c_int
1387 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1388 +                                             {
1389 +                                                 ((((if 1 as libc::c_int != 0 {
1390 +                                                     0 as libc::c_int
1391 +                                                 } else {
1392 +                                                     10 as libc::c_int
1393 +                                                 }) + 1 as libc::c_int)
1394 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1395 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1396 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1397 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1398 +                                             } else {
1399 +                                                 (if 1 as libc::c_int != 0 {
1400 +                                                     0 as libc::c_int
1401 +                                                 } else {
1402 +                                                     10 as libc::c_int
1403 +                                                 }) - 1 as libc::c_int
1404 +                                             }))
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1383:53
     |
1383 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1384 | | ...                       0 as libc::c_int
1385 | | ...                   } else {
1386 | | ...                       10 as libc::c_int
1387 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/uniq.rs:1389:52
     |
1389 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1390 | | ...                       0 as libc::c_int
1391 | | ...                   } else {
1392 | | ...                       10 as libc::c_int
1393 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1395:71
     |
1395 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1396:71
     |
1396 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/uniq.rs:1399:49
     |
1399 | / ...                   (if 1 as libc::c_int != 0 {
1400 | | ...                       0 as libc::c_int
1401 | | ...                   } else {
1402 | | ...                       10 as libc::c_int
1403 | | ...                   }) - 1 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1406:41
     |
1406 | ...                   ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < 10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1409:41
     |
1409 | / ...                   (if 1 as libc::c_int != 0 {
1410 | | ...                       0 as libc::c_int
1411 | | ...                   } else {
1412 | | ...                       10 as libc::c_int
1413 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1409 ~                                         i64::from((if 1 as libc::c_int != 0 {
1410 +                                             0 as libc::c_int
1411 +                                         } else {
1412 +                                             10 as libc::c_int
1413 ~                                         })) + -(1 as libc::c_int) as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1409:41
     |
1409 | / ...                   (if 1 as libc::c_int != 0 {
1410 | | ...                       0 as libc::c_int
1411 | | ...                   } else {
1412 | | ...                       10 as libc::c_int
1413 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1413:62
     |
1413 | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1415:63
     |
1415 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1416:63
     |
1416 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1418:41
     |
1418 | ...                   -(1 as libc::c_int) as idx_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1419:47
     |
1419 | ...                   / -(10 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(10 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1420:43
     |
1420 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1424:45
     |
1424 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
1425 | | ...                       0 as libc::c_int as libc::c_long
1426 | | ...                   } else {
1427 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1431 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1432 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1425:37
     |
1425 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1427:37
     |
1427 | / ...                   (if 1 as libc::c_int != 0 {
1428 | | ...                       0 as libc::c_int
1429 | | ...                   } else {
1430 | | ...                       10 as libc::c_int
1431 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1427 ~                                     i64::from((if 1 as libc::c_int != 0 {
1428 +                                         0 as libc::c_int
1429 +                                     } else {
1430 +                                         10 as libc::c_int
1431 ~                                     })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1427:37
     |
1427 | / ...                   (if 1 as libc::c_int != 0 {
1428 | | ...                       0 as libc::c_int
1429 | | ...                   } else {
1430 | | ...                       10 as libc::c_int
1431 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1431:58
     |
1431 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1432:38
     |
1432 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1433:39
     |
1433 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1435:42
     |
1435 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1436 | | ...                       0 as libc::c_int as libc::c_long
1437 | | ...                   } else {
1438 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1442 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1443 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1436:41
     |
1436 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1438:41
     |
1438 | / ...                   (if 1 as libc::c_int != 0 {
1439 | | ...                       0 as libc::c_int
1440 | | ...                   } else {
1441 | | ...                       10 as libc::c_int
1442 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1438 ~                                         i64::from((if 1 as libc::c_int != 0 {
1439 +                                             0 as libc::c_int
1440 +                                         } else {
1441 +                                             10 as libc::c_int
1442 ~                                         })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1438:41
     |
1438 | / ...                   (if 1 as libc::c_int != 0 {
1439 | | ...                       0 as libc::c_int
1440 | | ...                   } else {
1441 | | ...                       10 as libc::c_int
1442 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1442:62
     |
1442 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1443:42
     |
1443 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1445:59
     |
1445 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1446:59
     |
1446 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1447:43
     |
1447 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1448:43
     |
1448 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1449:43
     |
1449 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1451:37
     |
1451 | / ...                   (if 1 as libc::c_int != 0 {
1452 | | ...                       0 as libc::c_int as libc::c_long
1453 | | ...                   } else {
1454 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1458 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1459 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1452:41
     |
1452 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1454:41
     |
1454 | / ...                   (if 1 as libc::c_int != 0 {
1455 | | ...                       0 as libc::c_int
1456 | | ...                   } else {
1457 | | ...                       10 as libc::c_int
1458 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1454 ~                                         i64::from((if 1 as libc::c_int != 0 {
1455 +                                             0 as libc::c_int
1456 +                                         } else {
1457 +                                             10 as libc::c_int
1458 ~                                         })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1454:41
     |
1454 | / ...                   (if 1 as libc::c_int != 0 {
1455 | | ...                       0 as libc::c_int
1456 | | ...                   } else {
1457 | | ...                       10 as libc::c_int
1458 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1458:62
     |
1458 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1459:42
     |
1459 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1460:38
     |
1460 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1462:37
     |
1462 | / ...                   (((if 1 as libc::c_int != 0 {
1463 | | ...                       0 as libc::c_int
1464 | | ...                   } else {
1465 | | ...                       10 as libc::c_int
...    |
1502 | | ...                           }) - 1 as libc::c_int as libc::c_long
1503 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1462 ~                                     i32::from(((if 1 as libc::c_int != 0 {
1463 +                                         0 as libc::c_int
1464 +                                     } else {
1465 +                                         10 as libc::c_int
1466 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1467 +                                         < -(if ((if 1 as libc::c_int != 0 {
1468 +                                             0 as libc::c_int as libc::c_long
1469 +                                         } else {
1470 +                                             (if 1 as libc::c_int != 0 {
1471 +                                                 0 as libc::c_int
1472 +                                             } else {
1473 +                                                 10 as libc::c_int
1474 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1475 +                                         }) - 1 as libc::c_int as libc::c_long)
1476 +                                             < 0 as libc::c_int as libc::c_long
1477 +                                         {
1478 +                                             ((((if 1 as libc::c_int != 0 {
1479 +                                                 0 as libc::c_int as libc::c_long
1480 +                                             } else {
1481 +                                                 (if 1 as libc::c_int != 0 {
1482 +                                                     0 as libc::c_int
1483 +                                                 } else {
1484 +                                                     10 as libc::c_int
1485 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1486 +                                             }) + 1 as libc::c_int as libc::c_long)
1487 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1488 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1489 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1490 +                                                 - 1 as libc::c_int as libc::c_long)
1491 +                                                 * 2 as libc::c_int as libc::c_long
1492 +                                                 + 1 as libc::c_int as libc::c_long
1493 +                                         } else {
1494 +                                             (if 1 as libc::c_int != 0 {
1495 +                                                 0 as libc::c_int as libc::c_long
1496 +                                             } else {
1497 +                                                 (if 1 as libc::c_int != 0 {
1498 +                                                     0 as libc::c_int
1499 +                                                 } else {
1500 +                                                     10 as libc::c_int
1501 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1502 +                                             }) - 1 as libc::c_int as libc::c_long
1503 +                                         }))
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1462:39
     |
1462 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1463 | | ...                       0 as libc::c_int
1464 | | ...                   } else {
1465 | | ...                       10 as libc::c_int
1466 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1462 ~                                     ((i64::from((if 1 as libc::c_int != 0 {
1463 +                                         0 as libc::c_int
1464 +                                     } else {
1465 +                                         10 as libc::c_int
1466 ~                                     })) + 0 as libc::c_int as idx_t)
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1462:39
     |
1462 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1463 | | ...                       0 as libc::c_int
1464 | | ...                   } else {
1465 | | ...                       10 as libc::c_int
1466 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1466:58
     |
1466 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1467:49
     |
1467 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1468 | | ...                       0 as libc::c_int as libc::c_long
1469 | | ...                   } else {
1470 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1474 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1475 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1468:45
     |
1468 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1470:45
     |
1470 | / ...                   (if 1 as libc::c_int != 0 {
1471 | | ...                       0 as libc::c_int
1472 | | ...                   } else {
1473 | | ...                       10 as libc::c_int
1474 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1470 ~                                             i64::from((if 1 as libc::c_int != 0 {
1471 +                                                 0 as libc::c_int
1472 +                                             } else {
1473 +                                                 10 as libc::c_int
1474 ~                                             })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1470:45
     |
1470 | / ...                   (if 1 as libc::c_int != 0 {
1471 | | ...                       0 as libc::c_int
1472 | | ...                   } else {
1473 | | ...                       10 as libc::c_int
1474 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1474:66
     |
1474 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1475:46
     |
1475 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1476:47
     |
1476 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1478:48
     |
1478 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1479 | | ...                       0 as libc::c_int as libc::c_long
1480 | | ...                   } else {
1481 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1485 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1486 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1479:49
     |
1479 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1481:49
     |
1481 | / ...                   (if 1 as libc::c_int != 0 {
1482 | | ...                       0 as libc::c_int
1483 | | ...                   } else {
1484 | | ...                       10 as libc::c_int
1485 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1481 ~                                                 i64::from((if 1 as libc::c_int != 0 {
1482 +                                                     0 as libc::c_int
1483 +                                                 } else {
1484 +                                                     10 as libc::c_int
1485 ~                                                 })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1481:49
     |
1481 | / ...                   (if 1 as libc::c_int != 0 {
1482 | | ...                       0 as libc::c_int
1483 | | ...                   } else {
1484 | | ...                       10 as libc::c_int
1485 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1485:70
     |
1485 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1486:50
     |
1486 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1488:67
     |
1488 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1489:67
     |
1489 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1490:51
     |
1490 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1491:51
     |
1491 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1492:51
     |
1492 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1494:45
     |
1494 | / ...                   (if 1 as libc::c_int != 0 {
1495 | | ...                       0 as libc::c_int as libc::c_long
1496 | | ...                   } else {
1497 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1501 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1502 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1495:49
     |
1495 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1497:49
     |
1497 | / ...                   (if 1 as libc::c_int != 0 {
1498 | | ...                       0 as libc::c_int
1499 | | ...                   } else {
1500 | | ...                       10 as libc::c_int
1501 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1497 ~                                                 i64::from((if 1 as libc::c_int != 0 {
1498 +                                                     0 as libc::c_int
1499 +                                                 } else {
1500 +                                                     10 as libc::c_int
1501 ~                                                 })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1497:49
     |
1497 | / ...                   (if 1 as libc::c_int != 0 {
1498 | | ...                       0 as libc::c_int
1499 | | ...                   } else {
1500 | | ...                       10 as libc::c_int
1501 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1501:70
     |
1501 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1502:50
     |
1502 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1505:37
     |
1505 | / ...                   ((0 as libc::c_int as libc::c_long)
1506 | | ...                       < (if 1 as libc::c_int != 0 {
1507 | | ...                           0 as libc::c_int
1508 | | ...                       } else {
1509 | | ...                           10 as libc::c_int
1510 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t)
1511 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1505 ~                                     i32::from((0 as libc::c_int as libc::c_long)
1506 +                                         < (if 1 as libc::c_int != 0 {
1507 +                                             0 as libc::c_int
1508 +                                         } else {
1509 +                                             10 as libc::c_int
1510 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1505:38
     |
1505 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1506:43
     |
1506 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1507 | | ...                       0 as libc::c_int
1508 | | ...                   } else {
1509 | | ...                       10 as libc::c_int
1510 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1506 ~                                         < i64::from((if 1 as libc::c_int != 0 {
1507 +                                             0 as libc::c_int
1508 +                                         } else {
1509 +                                             10 as libc::c_int
1510 ~                                         })) + 0 as libc::c_int as idx_t)
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1506:43
     |
1506 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1507 | | ...                       0 as libc::c_int
1508 | | ...                   } else {
1509 | | ...                       10 as libc::c_int
1510 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1510:62
     |
1510 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1514:41
     |
1514 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1515 | | ...                       0 as libc::c_int as libc::c_long
1516 | | ...                   } else {
1517 | | ...                       skip_fields
1518 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1515:41
     |
1515 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1518:42
     |
1518 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1519:43
     |
1519 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1521:41
     |
1521 | / ...                   ((0 as libc::c_int as libc::c_long)
1522 | | ...                       < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
     | |___________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1521 ~                                         i32::from((0 as libc::c_int as libc::c_long)
1522 +                                             < skip_fields + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1521:42
     |
1521 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1522:61
     |
1522 | ...                   < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1524:41
     |
1524 | / ...                   ((0 as libc::c_int as libc::c_long) < skip_fields
1525 | | ...                       && (-(1 as libc::c_int) as libc::c_long
1526 | | ...                           - 0 as libc::c_int as idx_t)
1527 | | ...                           < skip_fields - 1 as libc::c_int as libc::c_long)
1528 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1524 ~                                         i32::from((0 as libc::c_int as libc::c_long) < skip_fields
1525 +                                             && (-(1 as libc::c_int) as libc::c_long
1526 +                                                 - 0 as libc::c_int as idx_t)
1527 +                                                 < skip_fields - 1 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1524:42
     |
1524 | ...                   ((0 as libc::c_int as libc::c_long) < skip_fields
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1525:49
     |
1525 | ...                   && (-(1 as libc::c_int) as libc::c_long
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1526:51
     |
1526 | ...                   - 0 as libc::c_int as idx_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1527:65
     |
1527 | ...                   < skip_fields - 1 as libc::c_int as libc::c_long)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1531:37
     |
1531 | / ...                   ((0 as libc::c_int as idx_t
1532 | | ...                       / 10 as libc::c_int as libc::c_long) < skip_fields)
1533 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1531 ~                                     i32::from((0 as libc::c_int as idx_t
1532 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1531:39
     |
1531 | ...                   ((0 as libc::c_int as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1532:43
     |
1532 | ...                   / 10 as libc::c_int as libc::c_long) < skip_fields)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1540:50
     |
1540 | ...                   if skip_fields < 0 as libc::c_int as libc::c_long {
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1541:49
     |
1541 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
1542 | | ...                       0 as libc::c_int as libc::c_long
1543 | | ...                   } else {
1544 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1548 | | ...                       }) + 0 as libc::c_int as idx_t
1549 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1542:41
     |
1542 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1544:41
     |
1544 | / ...                   (if 1 as libc::c_int != 0 {
1545 | | ...                       0 as libc::c_int as libc::c_long
1546 | | ...                   } else {
1547 | | ...                       skip_fields
1548 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1545:45
     |
1545 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1548:46
     |
1548 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1549:42
     |
1549 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1550:43
     |
1550 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1552:46
     |
1552 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1553 | | ...                       0 as libc::c_int as libc::c_long
1554 | | ...                   } else {
1555 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1559 | | ...                       }) + 0 as libc::c_int as idx_t
1560 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1553:45
     |
1553 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1555:45
     |
1555 | / ...                   (if 1 as libc::c_int != 0 {
1556 | | ...                       0 as libc::c_int as libc::c_long
1557 | | ...                   } else {
1558 | | ...                       skip_fields
1559 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1556:49
     |
1556 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1559:50
     |
1559 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1560:46
     |
1560 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1562:63
     |
1562 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1563:63
     |
1563 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1564:47
     |
1564 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1565:47
     |
1565 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1566:47
     |
1566 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1568:41
     |
1568 | / ...                   (if 1 as libc::c_int != 0 {
1569 | | ...                       0 as libc::c_int as libc::c_long
1570 | | ...                   } else {
1571 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1575 | | ...                       }) + 0 as libc::c_int as idx_t
1576 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1569:45
     |
1569 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1571:45
     |
1571 | / ...                   (if 1 as libc::c_int != 0 {
1572 | | ...                       0 as libc::c_int as libc::c_long
1573 | | ...                   } else {
1574 | | ...                       skip_fields
1575 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1572:49
     |
1572 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1575:50
     |
1575 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1576:46
     |
1576 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1577:42
     |
1577 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1579:41
     |
1579 | / ...                   (((if 1 as libc::c_int != 0 {
1580 | | ...                       0 as libc::c_int as libc::c_long
1581 | | ...                   } else {
1582 | | ...                       skip_fields
...    |
1619 | | ...                           }) - 1 as libc::c_int as libc::c_long
1620 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1579 ~                                         i32::from(((if 1 as libc::c_int != 0 {
1580 +                                             0 as libc::c_int as libc::c_long
1581 +                                         } else {
1582 +                                             skip_fields
1583 +                                         }) + 0 as libc::c_int as idx_t)
1584 +                                             < -(if ((if 1 as libc::c_int != 0 {
1585 +                                                 0 as libc::c_int as libc::c_long
1586 +                                             } else {
1587 +                                                 (if 1 as libc::c_int != 0 {
1588 +                                                     0 as libc::c_int as libc::c_long
1589 +                                                 } else {
1590 +                                                     skip_fields
1591 +                                                 }) + 0 as libc::c_int as idx_t
1592 +                                             }) - 1 as libc::c_int as libc::c_long)
1593 +                                                 < 0 as libc::c_int as libc::c_long
1594 +                                             {
1595 +                                                 ((((if 1 as libc::c_int != 0 {
1596 +                                                     0 as libc::c_int as libc::c_long
1597 +                                                 } else {
1598 +                                                     (if 1 as libc::c_int != 0 {
1599 +                                                         0 as libc::c_int as libc::c_long
1600 +                                                     } else {
1601 +                                                         skip_fields
1602 +                                                     }) + 0 as libc::c_int as idx_t
1603 +                                                 }) + 1 as libc::c_int as libc::c_long)
1604 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1605 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1606 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1607 +                                                     - 1 as libc::c_int as libc::c_long)
1608 +                                                     * 2 as libc::c_int as libc::c_long
1609 +                                                     + 1 as libc::c_int as libc::c_long
1610 +                                             } else {
1611 +                                                 (if 1 as libc::c_int != 0 {
1612 +                                                     0 as libc::c_int as libc::c_long
1613 +                                                 } else {
1614 +                                                     (if 1 as libc::c_int != 0 {
1615 +                                                         0 as libc::c_int as libc::c_long
1616 +                                                     } else {
1617 +                                                         skip_fields
1618 +                                                     }) + 0 as libc::c_int as idx_t
1619 +                                                 }) - 1 as libc::c_int as libc::c_long
1620 +                                             }))
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1579:43
     |
1579 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1580 | | ...                       0 as libc::c_int as libc::c_long
1581 | | ...                   } else {
1582 | | ...                       skip_fields
1583 | | ...                   }) + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1580:45
     |
1580 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1583:46
     |
1583 | ...                   }) + 0 as libc::c_int as idx_t)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1584:53
     |
1584 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1585 | | ...                       0 as libc::c_int as libc::c_long
1586 | | ...                   } else {
1587 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1591 | | ...                       }) + 0 as libc::c_int as idx_t
1592 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1585:49
     |
1585 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1587:49
     |
1587 | / ...                   (if 1 as libc::c_int != 0 {
1588 | | ...                       0 as libc::c_int as libc::c_long
1589 | | ...                   } else {
1590 | | ...                       skip_fields
1591 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1588:53
     |
1588 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1591:54
     |
1591 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1592:50
     |
1592 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1593:51
     |
1593 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1595:52
     |
1595 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1596 | | ...                       0 as libc::c_int as libc::c_long
1597 | | ...                   } else {
1598 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1602 | | ...                       }) + 0 as libc::c_int as idx_t
1603 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1596:53
     |
1596 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1598:53
     |
1598 | / ...                   (if 1 as libc::c_int != 0 {
1599 | | ...                       0 as libc::c_int as libc::c_long
1600 | | ...                   } else {
1601 | | ...                       skip_fields
1602 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1599:57
     |
1599 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1602:58
     |
1602 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1603:54
     |
1603 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1605:71
     |
1605 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1606:71
     |
1606 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1607:55
     |
1607 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1608:55
     |
1608 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1609:55
     |
1609 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1611:49
     |
1611 | / ...                   (if 1 as libc::c_int != 0 {
1612 | | ...                       0 as libc::c_int as libc::c_long
1613 | | ...                   } else {
1614 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1618 | | ...                       }) + 0 as libc::c_int as idx_t
1619 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1612:53
     |
1612 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1614:53
     |
1614 | / ...                   (if 1 as libc::c_int != 0 {
1615 | | ...                       0 as libc::c_int as libc::c_long
1616 | | ...                   } else {
1617 | | ...                       skip_fields
1618 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1615:57
     |
1615 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1618:58
     |
1618 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1619:54
     |
1619 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1622:41
     |
1622 | / ...                   ((0 as libc::c_int as libc::c_long)
1623 | | ...                       < (if 1 as libc::c_int != 0 {
1624 | | ...                           0 as libc::c_int as libc::c_long
1625 | | ...                       } else {
1626 | | ...                           skip_fields
1627 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
     | |________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1622 ~                                         i32::from((0 as libc::c_int as libc::c_long)
1623 +                                             < (if 1 as libc::c_int != 0 {
1624 +                                                 0 as libc::c_int as libc::c_long
1625 +                                             } else {
1626 +                                                 skip_fields
1627 +                                             }) + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1622:42
     |
1622 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1623:47
     |
1623 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1624 | | ...                       0 as libc::c_int as libc::c_long
1625 | | ...                   } else {
1626 | | ...                       skip_fields
1627 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1624:49
     |
1624 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1627:50
     |
1627 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1629:59
     |
1629 | ...                   && skip_fields == -(1 as libc::c_int) as libc::c_long
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1631:45
     |
1631 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1632 | | ...                       0 as libc::c_int
1633 | | ...                   } else {
1634 | | ...                       10 as libc::c_int
1635 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1637:45
     |
1637 | / ...                   ((0 as libc::c_int as libc::c_long)
1638 | | ...                       < 10 as libc::c_int as libc::c_long
1639 | | ...                           + 0 as libc::c_int as idx_t) as libc::c_int
     | |_________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1637 ~                                             i32::from((0 as libc::c_int as libc::c_long)
1638 +                                                 < 10 as libc::c_int as libc::c_long
1639 +                                                     + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1637:46
     |
1637 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1638:51
     |
1638 | ...                   < 10 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1639:55
     |
1639 | ...                   + 0 as libc::c_int as idx_t) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1641:45
     |
1641 | / ...                   ((-(1 as libc::c_int) as libc::c_long
1642 | | ...                       - 0 as libc::c_int as idx_t)
1643 | | ...                       < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1644 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1641 ~                                             i32::from((-(1 as libc::c_int) as libc::c_long
1642 +                                                 - 0 as libc::c_int as idx_t)
1643 +                                                 < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1641:47
     |
1641 | ...                   ((-(1 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1642:51
     |
1642 | ...                   - 0 as libc::c_int as idx_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1643:51
     |
1643 | ...                   < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int - 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1647:41
     |
1647 | / ...                   (0 as libc::c_int as idx_t / skip_fields
1648 | | ...                       < 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1647 ~                                         i32::from(0 as libc::c_int as idx_t / skip_fields
1648 +                                             < 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1647:42
     |
1647 | ...                   (0 as libc::c_int as idx_t / skip_fields
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1648:47
     |
1648 | ...                   < 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1651:37
     |
1651 | / ...                   ((-(1 as libc::c_int) as idx_t
1652 | | ...                       / 10 as libc::c_int as libc::c_long) < skip_fields)
1653 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1651 ~                                     i32::from((-(1 as libc::c_int) as idx_t
1652 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1651:39
     |
1651 | ...                   ((-(1 as libc::c_int) as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1652:43
     |
1652 | ...                   / 10 as libc::c_int as libc::c_long) < skip_fields)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/uniq.rs:1660:26
     |
1660 |                         *(&mut skip_fields as *mut idx_t) = fresh7;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(skip_fields)`
     |
     = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
    --> src/uniq.rs:1665:26
     |
1665 |                         *(&mut skip_fields as *mut idx_t) = fresh9;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(skip_fields)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1666:25
     |
1666 |                         fresh10 as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh10)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/uniq.rs:1671:30
     |
1671 | ...                   *(&mut skip_fields as *mut idx_t) = fresh11;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(skip_fields)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/uniq.rs:1696:41
     |
1696 |       delimit_groups = delimit_method_map[__xargmatch_internal(
     |  _________________________________________^
1697 | |         std::ffi::CString::new("--all-repeated").unwrap().as_ptr(),
1698 | |         optarg_str.as_ptr(),
1699 | |         delimit_method_string.as_ptr(),
...    |
1703 | |         true,
1704 | |     ) as usize];
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/uniq.rs:1696:41
     |
1696 |       delimit_groups = delimit_method_map[__xargmatch_internal(
     |  _________________________________________^
1697 | |         std::ffi::CString::new("--all-repeated").unwrap().as_ptr(),
1698 | |         optarg_str.as_ptr(),
1699 | |         delimit_method_string.as_ptr(),
...    |
1703 | |         true,
1704 | |     ) as usize];
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1700:9
     |
1700 |         delimit_method_map.as_ptr() as *const libc::c_void,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `delimit_method_map.as_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/uniq.rs:1716:36
     |
1716 |       grouping = grouping_method_map[__xargmatch_internal(
     |  ____________________________________^
1717 | |         std::ffi::CString::new("--group").unwrap().as_ptr(),
1718 | |         optarg_str.as_ptr(),
1719 | |         grouping_method_string.as_ptr(),
...    |
1723 | |         true,
1724 | |     ) as usize];
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/uniq.rs:1716:36
     |
1716 |       grouping = grouping_method_map[__xargmatch_internal(
     |  ____________________________________^
1717 | |         std::ffi::CString::new("--group").unwrap().as_ptr(),
1718 | |         optarg_str.as_ptr(),
1719 | |         grouping_method_string.as_ptr(),
...    |
1723 | |         true,
1724 | |     ) as usize];
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1720:9
     |
1720 |         grouping_method_map.as_ptr() as *const libc::c_void,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `grouping_method_map.as_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u8` to `i8` may wrap around the value
    --> src/uniq.rs:1756:21
     |
1756 |         delimiter = b'\0' as i8;
     |                     ^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1764:25
     |
1764 |                         b"uniq\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"uniq\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1765:25
     |
1765 |                         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1768:29
     |
1768 | ...                   b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1769:29
     |
1769 | ...                   b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1772:29
     |
1772 | ...                   b"David MacKenzie\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"David MacKenzie\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1773:29
     |
1773 | ...                   b"David MacKenzie\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"David MacKenzie\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1775:25
     |
1775 |                         0 as *mut libc::c_void as *mut libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(0 as *mut libc::c_void).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/uniq.rs:1775:25
     |
1775 |                         0 as *mut libc::c_void as *mut libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1791:36
     |
1791 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1791:36
     |
1791 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1792:12
     |
1792 |         && output_option_used as libc::c_int != 0
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_option_used)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1794:9
     |
1794 | /         if 0 != 0 {
1795 | |             error(
1796 | |                 0 as libc::c_int,
1797 | |                 0 as libc::c_int,
...    |
1836 | |             });
1837 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1794:12
     |
1794 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1799:21
     |
1799 | /                     b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8
1800 | |                         as *const libc::c_char,
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1803:13
     |
1803 | /             if 0 as libc::c_int != 0 as libc::c_int {
1804 | |                 unreachable!();
1805 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1803:16
     |
1803 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1808:17
     |
1808 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1813:25
     |
1813 | /                         b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8
1814 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1817:17
     |
1817 | /                 if __errstatus != 0 as libc::c_int {
1818 | |                     unreachable!();
1819 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1823:17
     |
1823 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1828:25
     |
1828 | /                         b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8
1829 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1832:17
     |
1832 | /                 if __errstatus != 0 as libc::c_int {
1833 | |                     unreachable!();
1834 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1840:36
     |
1840 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1840:36
     |
1840 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1841:12
     |
1841 |         && count_occurrences as libc::c_int != 0
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(count_occurrences)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1843:9
     |
1843 | /         if 0 != 0 {
1844 | |             error(
1845 | |                 0 as libc::c_int,
1846 | |                 0 as libc::c_int,
...    |
1885 | |             });
1886 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1843:12
     |
1843 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1848:21
     |
1848 | /                     b"grouping and printing repeat counts is meaningless\0" as *const u8
1849 | |                         as *const libc::c_char,
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"grouping and printing repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1852:13
     |
1852 | /             if 0 as libc::c_int != 0 as libc::c_int {
1853 | |                 unreachable!();
1854 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1852:16
     |
1852 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1857:17
     |
1857 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1862:25
     |
1862 | /                         b"grouping and printing repeat counts is meaningless\0"
1863 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"grouping and printing repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1866:17
     |
1866 | /                 if __errstatus != 0 as libc::c_int {
1867 | |                     unreachable!();
1868 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1872:17
     |
1872 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1877:25
     |
1877 | /                         b"grouping and printing repeat counts is meaningless\0"
1878 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"grouping and printing repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1881:17
     |
1881 | /                 if __errstatus != 0 as libc::c_int {
1882 | |                     unreachable!();
1883 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1889:8
     |
1889 |     if count_occurrences as libc::c_int != 0 && output_later_repeated as libc::c_int != 0
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(count_occurrences)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1889:49
     |
1889 |     if count_occurrences as libc::c_int != 0 && output_later_repeated as libc::c_int != 0
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_later_repeated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1891:9
     |
1891 | /         if 0 != 0 {
1892 | |             error(
1893 | |                 0 as libc::c_int,
1894 | |                 0 as libc::c_int,
...    |
1933 | |             });
1934 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1891:12
     |
1891 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1896:21
     |
1896 | /                     b"printing all duplicated lines and repeat counts is meaningless\0"
1897 | |                         as *const u8 as *const libc::c_char,
     | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"printing all duplicated lines and repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1900:13
     |
1900 | /             if 0 as libc::c_int != 0 as libc::c_int {
1901 | |                 unreachable!();
1902 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1900:16
     |
1900 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1905:17
     |
1905 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1910:25
     |
1910 | /                         b"printing all duplicated lines and repeat counts is meaningless\0"
1911 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"printing all duplicated lines and repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1914:17
     |
1914 | /                 if __errstatus != 0 as libc::c_int {
1915 | |                     unreachable!();
1916 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1920:17
     |
1920 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1925:25
     |
1925 | /                         b"printing all duplicated lines and repeat counts is meaningless\0"
1926 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"printing all duplicated lines and repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1929:17
     |
1929 | /                 if __errstatus != 0 as libc::c_int {
1930 | |                     unreachable!();
1931 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1938:14
     |
1938 |         file[0 as libc::c_int as usize],
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1939:14
     |
1939 |         file[1 as libc::c_int as usize],
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
    --> src/uniq.rs:1957:17
     |
1957 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
    --> src/uniq.rs:1957:17
     |
1957 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1958:17
     |
1958 |                 args.as_mut_ptr() as *mut *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `args.as_mut_ptr().cast::<*mut i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: path statement with no effect
   --> src/uniq.rs:806:9
    |
806 |         i;
    |         ^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/uniq.rs:812:9
    |
812 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/uniq.rs:825:13
    |
825 |             i_1;
    |             ^^^^

warning: path statement with no effect
    --> src/uniq.rs:1146:21
     |
1146 |                     match_count;
     |                     ^^^^^^^^^^^^

warning: getting the inner pointer of a temporary `CString`
    --> src/uniq.rs:1697:59
     |
1697 |         std::ffi::CString::new("--all-repeated").unwrap().as_ptr(),
     |         ------------------------------------------------- ^^^^^^ this pointer will be invalid
     |         |
     |         this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime
     |
     = note: `#[warn(temporary_cstring_as_ptr)]` on by default
     = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned
     = help: for more information, see https://doc.rust-lang.org/reference/destructors.html

warning: getting the inner pointer of a temporary `CString`
    --> src/uniq.rs:1717:52
     |
1717 |         std::ffi::CString::new("--group").unwrap().as_ptr(),
     |         ------------------------------------------ ^^^^^^ this pointer will be invalid
     |         |
     |         this `CString` is deallocated at the end of the statement, bind it to a variable to extend its lifetime
     |
     = note: pointers do not have a lifetime; when calling `as_ptr` the `CString` will be deallocated at the end of the statement because nothing is referencing it as far as the type system is concerned
     = help: for more information, see https://doc.rust-lang.org/reference/destructors.html

warning: `rust` (bin "uniq") generated 535 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 15.37s
