warning: literal with an empty format string
   --> src/version_etc.rs:312:9
    |
312 |         "bug-coreutils@gnu.org"
    |         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::print-literal` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
311 -         "Report bugs to: {}",
311 +         "Report bugs to: bug-coreutils@gnu.org"
    |

warning: literal with an empty format string
   --> src/version_etc.rs:316:9
    |
316 |         "GNU coreutils",
    |         ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
315 -         "{} home page: <{}>",
315 +         "GNU coreutils home page: <{}>",
    |

warning: literal with an empty format string
   --> src/version_etc.rs:317:9
    |
317 |         "https://www.gnu.org/software/coreutils/"
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
315 ~         "{} home page: <https://www.gnu.org/software/coreutils/>",
316 ~         "GNU coreutils"
    |

warning: literal with an empty format string
   --> src/version_etc.rs:321:9
    |
321 |         "https://www.gnu.org/gethelp/"
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
320 -         "General help using GNU software: <{}>",
320 +         "General help using GNU software: <https://www.gnu.org/gethelp/>"
    |

warning: unused import: `std::os::unix::io::AsRawFd`
 --> src/binary_io.rs:2:5
  |
2 | use std::os::unix::io::AsRawFd;
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused import: `::libc`
 --> src/binary_io.rs:4:5
  |
4 | use ::libc;
  |     ^^^^^^

warning: unused import: `::libc`
  --> src/c_ctype.rs:16:5
   |
16 | use ::libc;
   |     ^^^^^^

warning: unused import: `std::char`
 --> src/c_strcasecmp.rs:2:5
  |
2 | use std::char;
  |     ^^^^^^^^^

warning: unused import: `std::ffi::CString`
 --> src/closeout.rs:1:5
  |
1 | use std::ffi::CString;
  |     ^^^^^^^^^^^^^^^^^

warning: unused import: `std::ptr`
 --> src/fflush.rs:2:5
  |
2 | use std::ptr;
  |     ^^^^^^^^

warning: unused import: `std::os::raw::c_int`
 --> src/fseeko.rs:1:5
  |
1 | use std::os::raw::c_int;
  |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::mem`
 --> src/ialloc.rs:3:5
  |
3 | use std::mem;
  |     ^^^^^^^^

warning: unused import: `std::alloc`
 --> src/ialloc.rs:7:5
  |
7 | use std::alloc;
  |     ^^^^^^^^^^

warning: unused import: `std::ptr`
 --> src/ialloc.rs:8:5
  |
8 | use std::ptr;
  |     ^^^^^^^^

warning: unused import: `std::os::raw::c_char`
 --> src/localcharset.rs:2:5
  |
2 | use std::os::raw::c_char;
  |     ^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::os::raw::c_int`
  --> src/quotearg.rs:27:5
   |
27 | use std::os::raw::c_int;
   |     ^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::mem`
  --> src/quotearg.rs:35:5
   |
35 | use std::mem;
   |     ^^^^^^^^

warning: unused import: `std::io`
  --> src/quotearg.rs:37:5
   |
37 | use std::io;
   |     ^^^^^^^

warning: unused import: `std::convert::TryInto`
 --> src/safe_read.rs:1:5
  |
1 | use std::convert::TryInto;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::convert::TryInto`
 --> src/setlocale_null.rs:1:5
  |
1 | use std::convert::TryInto;
  |     ^^^^^^^^^^^^^^^^^^^^^

warning: unused import: `std::slice`
 --> src/setlocale_null_unlocked.rs:1:5
  |
1 | use std::slice;
  |     ^^^^^^^^^^

warning: unused import: `std::process`
 --> src/xalloc_die.rs:1:5
  |
1 | use std::process;
  |     ^^^^^^^^^^^^

warning: unused import: `std::slice`
  --> src/xmalloc.rs:21:5
   |
21 | use std::slice;
   |     ^^^^^^^^^^

warning: unused label
   --> src/xstrtoumax.rs:428:5
    |
428 |     'c_2256: {
    |     ^^^^^^^
    |
    = note: `#[warn(unused_labels)]` on by default

warning: this `else { if .. }` block can be collapsed
   --> src/closeout.rs:129:16
    |
129 |           } else {
    |  ________________^
130 | |             if 0 != 0 {
131 | |                 error(
132 | |                     0 as libc::c_int,
...   |
167 | |             };
168 | |         }
    | |_________^
    |
    = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
129 ~         } else if 0 != 0 {
130 +             error(
131 +                 0 as libc::c_int,
132 +                 *__errno_location(),
133 +                 b"%s\0" as *const u8 as *const libc::c_char,
134 +                 write_error,
135 +             );
136 +             if 0 as libc::c_int != 0 as libc::c_int {
137 +                 unreachable!();
138 +             } else {};
139 +         } else {
140 +             ({
141 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
142 +                 error(
143 +                     __errstatus,
144 +                     *__errno_location(),
145 +                     b"%s\0" as *const u8 as *const libc::c_char,
146 +                     write_error,
147 +                 );
148 +                 if __errstatus != 0 as libc::c_int {
149 +                     unreachable!();
150 +                 } else {};
151 +                 
152 +             });
153 +             ({
154 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
155 +                 error(
156 +                     __errstatus,
157 +                     *__errno_location(),
158 +                     b"%s\0" as *const u8 as *const libc::c_char,
159 +                     write_error,
160 +                 );
161 +                 if __errstatus != 0 as libc::c_int {
162 +                     unreachable!();
163 +                 } else {};
164 +                 
165 +             });
166 +         }
    |

warning: redundant else block
  --> src/full_read.rs:29:16
   |
29 |           } else {
   |  ________________^
30 | |             total += n_rw as usize;
31 | |             ptr = unsafe { ptr.add(n_rw as usize) };
32 | |             count -= n_rw as usize;
33 | |         }
   | |_________^
   |
   = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/localcharset.rs:11:36
   |
11 | pub const _NL_NUM: C2RustUnnamed = 786449;
   |                                    ^^^^^^ help: consider: `786_449`
   |
   = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:12:54
   |
12 | pub const _NL_NUM_LC_IDENTIFICATION: C2RustUnnamed = 786448;
   |                                                      ^^^^^^ help: consider: `786_448`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:13:55
   |
13 | pub const _NL_IDENTIFICATION_CODESET: C2RustUnnamed = 786447;
   |                                                       ^^^^^^ help: consider: `786_447`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:14:56
   |
14 | pub const _NL_IDENTIFICATION_CATEGORY: C2RustUnnamed = 786446;
   |                                                        ^^^^^^ help: consider: `786_446`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:15:52
   |
15 | pub const _NL_IDENTIFICATION_DATE: C2RustUnnamed = 786445;
   |                                                    ^^^^^^ help: consider: `786_445`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:16:56
   |
16 | pub const _NL_IDENTIFICATION_REVISION: C2RustUnnamed = 786444;
   |                                                        ^^^^^^ help: consider: `786_444`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:17:60
   |
17 | pub const _NL_IDENTIFICATION_ABBREVIATION: C2RustUnnamed = 786443;
   |                                                            ^^^^^^ help: consider: `786_443`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:18:59
   |
18 | pub const _NL_IDENTIFICATION_APPLICATION: C2RustUnnamed = 786442;
   |                                                           ^^^^^^ help: consider: `786_442`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:19:56
   |
19 | pub const _NL_IDENTIFICATION_AUDIENCE: C2RustUnnamed = 786441;
   |                                                        ^^^^^^ help: consider: `786_441`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:20:57
   |
20 | pub const _NL_IDENTIFICATION_TERRITORY: C2RustUnnamed = 786440;
   |                                                         ^^^^^^ help: consider: `786_440`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:21:56
   |
21 | pub const _NL_IDENTIFICATION_LANGUAGE: C2RustUnnamed = 786439;
   |                                                        ^^^^^^ help: consider: `786_439`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:22:51
   |
22 | pub const _NL_IDENTIFICATION_FAX: C2RustUnnamed = 786438;
   |                                                   ^^^^^^ help: consider: `786_438`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:23:51
   |
23 | pub const _NL_IDENTIFICATION_TEL: C2RustUnnamed = 786437;
   |                                                   ^^^^^^ help: consider: `786_437`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:24:53
   |
24 | pub const _NL_IDENTIFICATION_EMAIL: C2RustUnnamed = 786436;
   |                                                     ^^^^^^ help: consider: `786_436`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:25:55
   |
25 | pub const _NL_IDENTIFICATION_CONTACT: C2RustUnnamed = 786435;
   |                                                       ^^^^^^ help: consider: `786_435`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:26:55
   |
26 | pub const _NL_IDENTIFICATION_ADDRESS: C2RustUnnamed = 786434;
   |                                                       ^^^^^^ help: consider: `786_434`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:27:54
   |
27 | pub const _NL_IDENTIFICATION_SOURCE: C2RustUnnamed = 786433;
   |                                                      ^^^^^^ help: consider: `786_433`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:28:53
   |
28 | pub const _NL_IDENTIFICATION_TITLE: C2RustUnnamed = 786432;
   |                                                     ^^^^^^ help: consider: `786_432`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:29:51
   |
29 | pub const _NL_NUM_LC_MEASUREMENT: C2RustUnnamed = 720898;
   |                                                   ^^^^^^ help: consider: `720_898`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:30:52
   |
30 | pub const _NL_MEASUREMENT_CODESET: C2RustUnnamed = 720897;
   |                                                    ^^^^^^ help: consider: `720_897`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:31:56
   |
31 | pub const _NL_MEASUREMENT_MEASUREMENT: C2RustUnnamed = 720896;
   |                                                        ^^^^^^ help: consider: `720_896`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:32:49
   |
32 | pub const _NL_NUM_LC_TELEPHONE: C2RustUnnamed = 655365;
   |                                                 ^^^^^^ help: consider: `655_365`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:33:50
   |
33 | pub const _NL_TELEPHONE_CODESET: C2RustUnnamed = 655364;
   |                                                  ^^^^^^ help: consider: `655_364`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:34:53
   |
34 | pub const _NL_TELEPHONE_INT_PREFIX: C2RustUnnamed = 655363;
   |                                                     ^^^^^^ help: consider: `655_363`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:35:53
   |
35 | pub const _NL_TELEPHONE_INT_SELECT: C2RustUnnamed = 655362;
   |                                                     ^^^^^^ help: consider: `655_362`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:36:54
   |
36 | pub const _NL_TELEPHONE_TEL_DOM_FMT: C2RustUnnamed = 655361;
   |                                                      ^^^^^^ help: consider: `655_361`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:37:54
   |
37 | pub const _NL_TELEPHONE_TEL_INT_FMT: C2RustUnnamed = 655360;
   |                                                      ^^^^^^ help: consider: `655_360`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:38:47
   |
38 | pub const _NL_NUM_LC_ADDRESS: C2RustUnnamed = 589837;
   |                                               ^^^^^^ help: consider: `589_837`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:39:48
   |
39 | pub const _NL_ADDRESS_CODESET: C2RustUnnamed = 589836;
   |                                                ^^^^^^ help: consider: `589_836`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:40:49
   |
40 | pub const _NL_ADDRESS_LANG_LIB: C2RustUnnamed = 589835;
   |                                                 ^^^^^^ help: consider: `589_835`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:41:50
   |
41 | pub const _NL_ADDRESS_LANG_TERM: C2RustUnnamed = 589834;
   |                                                  ^^^^^^ help: consider: `589_834`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:42:48
   |
42 | pub const _NL_ADDRESS_LANG_AB: C2RustUnnamed = 589833;
   |                                                ^^^^^^ help: consider: `589_833`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:43:50
   |
43 | pub const _NL_ADDRESS_LANG_NAME: C2RustUnnamed = 589832;
   |                                                  ^^^^^^ help: consider: `589_832`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:44:53
   |
44 | pub const _NL_ADDRESS_COUNTRY_ISBN: C2RustUnnamed = 589831;
   |                                                     ^^^^^^ help: consider: `589_831`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:45:52
   |
45 | pub const _NL_ADDRESS_COUNTRY_NUM: C2RustUnnamed = 589830;
   |                                                    ^^^^^^ help: consider: `589_830`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:46:52
   |
46 | pub const _NL_ADDRESS_COUNTRY_CAR: C2RustUnnamed = 589829;
   |                                                    ^^^^^^ help: consider: `589_829`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:47:52
   |
47 | pub const _NL_ADDRESS_COUNTRY_AB3: C2RustUnnamed = 589828;
   |                                                    ^^^^^^ help: consider: `589_828`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:48:52
   |
48 | pub const _NL_ADDRESS_COUNTRY_AB2: C2RustUnnamed = 589827;
   |                                                    ^^^^^^ help: consider: `589_827`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:49:53
   |
49 | pub const _NL_ADDRESS_COUNTRY_POST: C2RustUnnamed = 589826;
   |                                                     ^^^^^^ help: consider: `589_826`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:50:53
   |
50 | pub const _NL_ADDRESS_COUNTRY_NAME: C2RustUnnamed = 589825;
   |                                                     ^^^^^^ help: consider: `589_825`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:51:51
   |
51 | pub const _NL_ADDRESS_POSTAL_FMT: C2RustUnnamed = 589824;
   |                                                   ^^^^^^ help: consider: `589_824`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:52:44
   |
52 | pub const _NL_NUM_LC_NAME: C2RustUnnamed = 524295;
   |                                            ^^^^^^ help: consider: `524_295`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:53:45
   |
53 | pub const _NL_NAME_CODESET: C2RustUnnamed = 524294;
   |                                             ^^^^^^ help: consider: `524_294`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:54:45
   |
54 | pub const _NL_NAME_NAME_MS: C2RustUnnamed = 524293;
   |                                             ^^^^^^ help: consider: `524_293`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:55:47
   |
55 | pub const _NL_NAME_NAME_MISS: C2RustUnnamed = 524292;
   |                                               ^^^^^^ help: consider: `524_292`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:56:46
   |
56 | pub const _NL_NAME_NAME_MRS: C2RustUnnamed = 524291;
   |                                              ^^^^^^ help: consider: `524_291`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:57:45
   |
57 | pub const _NL_NAME_NAME_MR: C2RustUnnamed = 524290;
   |                                             ^^^^^^ help: consider: `524_290`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:58:46
   |
58 | pub const _NL_NAME_NAME_GEN: C2RustUnnamed = 524289;
   |                                              ^^^^^^ help: consider: `524_289`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:59:46
   |
59 | pub const _NL_NAME_NAME_FMT: C2RustUnnamed = 524288;
   |                                              ^^^^^^ help: consider: `524_288`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:60:45
   |
60 | pub const _NL_NUM_LC_PAPER: C2RustUnnamed = 458755;
   |                                             ^^^^^^ help: consider: `458_755`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:61:46
   |
61 | pub const _NL_PAPER_CODESET: C2RustUnnamed = 458754;
   |                                              ^^^^^^ help: consider: `458_754`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:62:44
   |
62 | pub const _NL_PAPER_WIDTH: C2RustUnnamed = 458753;
   |                                            ^^^^^^ help: consider: `458_753`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:63:45
   |
63 | pub const _NL_PAPER_HEIGHT: C2RustUnnamed = 458752;
   |                                             ^^^^^^ help: consider: `458_752`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:64:48
   |
64 | pub const _NL_NUM_LC_MESSAGES: C2RustUnnamed = 327685;
   |                                                ^^^^^^ help: consider: `327_685`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:65:49
   |
65 | pub const _NL_MESSAGES_CODESET: C2RustUnnamed = 327684;
   |                                                 ^^^^^^ help: consider: `327_684`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:66:36
   |
66 | pub const __NOSTR: C2RustUnnamed = 327683;
   |                                    ^^^^^^ help: consider: `327_683`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:67:37
   |
67 | pub const __YESSTR: C2RustUnnamed = 327682;
   |                                     ^^^^^^ help: consider: `327_682`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:68:37
   |
68 | pub const __NOEXPR: C2RustUnnamed = 327681;
   |                                     ^^^^^^ help: consider: `327_681`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:69:38
   |
69 | pub const __YESEXPR: C2RustUnnamed = 327680;
   |                                      ^^^^^^ help: consider: `327_680`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:79:48
   |
79 | pub const _NL_NUM_LC_MONETARY: C2RustUnnamed = 262190;
   |                                                ^^^^^^ help: consider: `262_190`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:80:49
   |
80 | pub const _NL_MONETARY_CODESET: C2RustUnnamed = 262189;
   |                                                 ^^^^^^ help: consider: `262_189`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:81:58
   |
81 | pub const _NL_MONETARY_THOUSANDS_SEP_WC: C2RustUnnamed = 262188;
   |                                                          ^^^^^^ help: consider: `262_188`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:82:58
   |
82 | pub const _NL_MONETARY_DECIMAL_POINT_WC: C2RustUnnamed = 262187;
   |                                                          ^^^^^^ help: consider: `262_187`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:83:57
   |
83 | pub const _NL_MONETARY_CONVERSION_RATE: C2RustUnnamed = 262186;
   |                                                         ^^^^^^ help: consider: `262_186`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:84:54
   |
84 | pub const _NL_MONETARY_DUO_VALID_TO: C2RustUnnamed = 262185;
   |                                                      ^^^^^^ help: consider: `262_185`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:85:56
   |
85 | pub const _NL_MONETARY_DUO_VALID_FROM: C2RustUnnamed = 262184;
   |                                                        ^^^^^^ help: consider: `262_184`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:86:54
   |
86 | pub const _NL_MONETARY_UNO_VALID_TO: C2RustUnnamed = 262183;
   |                                                      ^^^^^^ help: consider: `262_183`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:87:56
   |
87 | pub const _NL_MONETARY_UNO_VALID_FROM: C2RustUnnamed = 262182;
   |                                                        ^^^^^^ help: consider: `262_182`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:88:61
   |
88 | pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: C2RustUnnamed = 262181;
   |                                                             ^^^^^^ help: consider: `262_181`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:89:61
   |
89 | pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: C2RustUnnamed = 262180;
   |                                                             ^^^^^^ help: consider: `262_180`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:90:57
   |
90 | pub const _NL_MONETARY_DUO_N_SIGN_POSN: C2RustUnnamed = 262179;
   |                                                         ^^^^^^ help: consider: `262_179`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:91:57
   |
91 | pub const _NL_MONETARY_DUO_P_SIGN_POSN: C2RustUnnamed = 262178;
   |                                                         ^^^^^^ help: consider: `262_178`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:92:64
   |
92 | pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: C2RustUnnamed = 262177;
   |                                                                ^^^^^^ help: consider: `262_177`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:93:63
   |
93 | pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: C2RustUnnamed = 262176;
   |                                                               ^^^^^^ help: consider: `262_176`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:94:64
   |
94 | pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: C2RustUnnamed = 262175;
   |                                                                ^^^^^^ help: consider: `262_175`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:95:63
   |
95 | pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: C2RustUnnamed = 262174;
   |                                                               ^^^^^^ help: consider: `262_174`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:96:60
   |
96 | pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: C2RustUnnamed = 262173;
   |                                                            ^^^^^^ help: consider: `262_173`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:97:59
   |
97 | pub const _NL_MONETARY_DUO_N_CS_PRECEDES: C2RustUnnamed = 262172;
   |                                                           ^^^^^^ help: consider: `262_172`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:98:60
   |
98 | pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: C2RustUnnamed = 262171;
   |                                                            ^^^^^^ help: consider: `262_171`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:99:59
   |
99 | pub const _NL_MONETARY_DUO_P_CS_PRECEDES: C2RustUnnamed = 262170;
   |                                                           ^^^^^^ help: consider: `262_170`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:100:57
    |
100 | pub const _NL_MONETARY_DUO_FRAC_DIGITS: C2RustUnnamed = 262169;
    |                                                         ^^^^^^ help: consider: `262_169`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:101:61
    |
101 | pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: C2RustUnnamed = 262168;
    |                                                             ^^^^^^ help: consider: `262_168`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:102:61
    |
102 | pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: C2RustUnnamed = 262167;
    |                                                             ^^^^^^ help: consider: `262_167`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:103:61
    |
103 | pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: C2RustUnnamed = 262166;
    |                                                             ^^^^^^ help: consider: `262_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:104:46
    |
104 | pub const __INT_N_SIGN_POSN: C2RustUnnamed = 262165;
    |                                              ^^^^^^ help: consider: `262_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:105:46
    |
105 | pub const __INT_P_SIGN_POSN: C2RustUnnamed = 262164;
    |                                              ^^^^^^ help: consider: `262_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:106:49
    |
106 | pub const __INT_N_SEP_BY_SPACE: C2RustUnnamed = 262163;
    |                                                 ^^^^^^ help: consider: `262_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:107:48
    |
107 | pub const __INT_N_CS_PRECEDES: C2RustUnnamed = 262162;
    |                                                ^^^^^^ help: consider: `262_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:108:49
    |
108 | pub const __INT_P_SEP_BY_SPACE: C2RustUnnamed = 262161;
    |                                                 ^^^^^^ help: consider: `262_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:109:48
    |
109 | pub const __INT_P_CS_PRECEDES: C2RustUnnamed = 262160;
    |                                                ^^^^^^ help: consider: `262_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:110:50
    |
110 | pub const _NL_MONETARY_CRNCYSTR: C2RustUnnamed = 262159;
    |                                                  ^^^^^^ help: consider: `262_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:111:42
    |
111 | pub const __N_SIGN_POSN: C2RustUnnamed = 262158;
    |                                          ^^^^^^ help: consider: `262_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:112:42
    |
112 | pub const __P_SIGN_POSN: C2RustUnnamed = 262157;
    |                                          ^^^^^^ help: consider: `262_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:113:45
    |
113 | pub const __N_SEP_BY_SPACE: C2RustUnnamed = 262156;
    |                                             ^^^^^^ help: consider: `262_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:114:44
    |
114 | pub const __N_CS_PRECEDES: C2RustUnnamed = 262155;
    |                                            ^^^^^^ help: consider: `262_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:115:45
    |
115 | pub const __P_SEP_BY_SPACE: C2RustUnnamed = 262154;
    |                                             ^^^^^^ help: consider: `262_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:116:44
    |
116 | pub const __P_CS_PRECEDES: C2RustUnnamed = 262153;
    |                                            ^^^^^^ help: consider: `262_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:117:42
    |
117 | pub const __FRAC_DIGITS: C2RustUnnamed = 262152;
    |                                          ^^^^^^ help: consider: `262_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:118:46
    |
118 | pub const __INT_FRAC_DIGITS: C2RustUnnamed = 262151;
    |                                              ^^^^^^ help: consider: `262_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:119:44
    |
119 | pub const __NEGATIVE_SIGN: C2RustUnnamed = 262150;
    |                                            ^^^^^^ help: consider: `262_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:120:44
    |
120 | pub const __POSITIVE_SIGN: C2RustUnnamed = 262149;
    |                                            ^^^^^^ help: consider: `262_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:121:43
    |
121 | pub const __MON_GROUPING: C2RustUnnamed = 262148;
    |                                           ^^^^^^ help: consider: `262_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:122:48
    |
122 | pub const __MON_THOUSANDS_SEP: C2RustUnnamed = 262147;
    |                                                ^^^^^^ help: consider: `262_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:123:48
    |
123 | pub const __MON_DECIMAL_POINT: C2RustUnnamed = 262146;
    |                                                ^^^^^^ help: consider: `262_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:124:46
    |
124 | pub const __CURRENCY_SYMBOL: C2RustUnnamed = 262145;
    |                                              ^^^^^^ help: consider: `262_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:125:46
    |
125 | pub const __INT_CURR_SYMBOL: C2RustUnnamed = 262144;
    |                                              ^^^^^^ help: consider: `262_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:213:47
    |
213 | pub const _NL_NUM_LC_COLLATE: C2RustUnnamed = 196627;
    |                                               ^^^^^^ help: consider: `196_627`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:214:48
    |
214 | pub const _NL_COLLATE_CODESET: C2RustUnnamed = 196626;
    |                                                ^^^^^^ help: consider: `196_626`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:215:50
    |
215 | pub const _NL_COLLATE_COLLSEQWC: C2RustUnnamed = 196625;
    |                                                  ^^^^^^ help: consider: `196_625`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:216:50
    |
216 | pub const _NL_COLLATE_COLLSEQMB: C2RustUnnamed = 196624;
    |                                                  ^^^^^^ help: consider: `196_624`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:217:53
    |
217 | pub const _NL_COLLATE_SYMB_EXTRAMB: C2RustUnnamed = 196623;
    |                                                     ^^^^^^ help: consider: `196_623`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:218:53
    |
218 | pub const _NL_COLLATE_SYMB_TABLEMB: C2RustUnnamed = 196622;
    |                                                     ^^^^^^ help: consider: `196_622`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:219:57
    |
219 | pub const _NL_COLLATE_SYMB_HASH_SIZEMB: C2RustUnnamed = 196621;
    |                                                         ^^^^^^ help: consider: `196_621`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:220:51
    |
220 | pub const _NL_COLLATE_INDIRECTWC: C2RustUnnamed = 196620;
    |                                                   ^^^^^^ help: consider: `196_620`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:221:48
    |
221 | pub const _NL_COLLATE_EXTRAWC: C2RustUnnamed = 196619;
    |                                                ^^^^^^ help: consider: `196_619`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:222:49
    |
222 | pub const _NL_COLLATE_WEIGHTWC: C2RustUnnamed = 196618;
    |                                                 ^^^^^^ help: consider: `196_618`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:223:48
    |
223 | pub const _NL_COLLATE_TABLEWC: C2RustUnnamed = 196617;
    |                                                ^^^^^^ help: consider: `196_617`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:224:45
    |
224 | pub const _NL_COLLATE_GAP3: C2RustUnnamed = 196616;
    |                                             ^^^^^^ help: consider: `196_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:225:45
    |
225 | pub const _NL_COLLATE_GAP2: C2RustUnnamed = 196615;
    |                                             ^^^^^^ help: consider: `196_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:226:45
    |
226 | pub const _NL_COLLATE_GAP1: C2RustUnnamed = 196614;
    |                                             ^^^^^^ help: consider: `196_614`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:227:51
    |
227 | pub const _NL_COLLATE_INDIRECTMB: C2RustUnnamed = 196613;
    |                                                   ^^^^^^ help: consider: `196_613`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:228:48
    |
228 | pub const _NL_COLLATE_EXTRAMB: C2RustUnnamed = 196612;
    |                                                ^^^^^^ help: consider: `196_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:229:49
    |
229 | pub const _NL_COLLATE_WEIGHTMB: C2RustUnnamed = 196611;
    |                                                 ^^^^^^ help: consider: `196_611`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:230:48
    |
230 | pub const _NL_COLLATE_TABLEMB: C2RustUnnamed = 196610;
    |                                                ^^^^^^ help: consider: `196_610`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:231:49
    |
231 | pub const _NL_COLLATE_RULESETS: C2RustUnnamed = 196609;
    |                                                 ^^^^^^ help: consider: `196_609`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:232:47
    |
232 | pub const _NL_COLLATE_NRULES: C2RustUnnamed = 196608;
    |                                               ^^^^^^ help: consider: `196_608`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:233:44
    |
233 | pub const _NL_NUM_LC_TIME: C2RustUnnamed = 131231;
    |                                            ^^^^^^ help: consider: `131_231`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:234:45
    |
234 | pub const _NL_WABALTMON_12: C2RustUnnamed = 131230;
    |                                             ^^^^^^ help: consider: `131_230`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:235:45
    |
235 | pub const _NL_WABALTMON_11: C2RustUnnamed = 131229;
    |                                             ^^^^^^ help: consider: `131_229`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:236:45
    |
236 | pub const _NL_WABALTMON_10: C2RustUnnamed = 131228;
    |                                             ^^^^^^ help: consider: `131_228`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:237:44
    |
237 | pub const _NL_WABALTMON_9: C2RustUnnamed = 131227;
    |                                            ^^^^^^ help: consider: `131_227`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:238:44
    |
238 | pub const _NL_WABALTMON_8: C2RustUnnamed = 131226;
    |                                            ^^^^^^ help: consider: `131_226`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:239:44
    |
239 | pub const _NL_WABALTMON_7: C2RustUnnamed = 131225;
    |                                            ^^^^^^ help: consider: `131_225`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:240:44
    |
240 | pub const _NL_WABALTMON_6: C2RustUnnamed = 131224;
    |                                            ^^^^^^ help: consider: `131_224`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:241:44
    |
241 | pub const _NL_WABALTMON_5: C2RustUnnamed = 131223;
    |                                            ^^^^^^ help: consider: `131_223`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:242:44
    |
242 | pub const _NL_WABALTMON_4: C2RustUnnamed = 131222;
    |                                            ^^^^^^ help: consider: `131_222`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:243:44
    |
243 | pub const _NL_WABALTMON_3: C2RustUnnamed = 131221;
    |                                            ^^^^^^ help: consider: `131_221`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:244:44
    |
244 | pub const _NL_WABALTMON_2: C2RustUnnamed = 131220;
    |                                            ^^^^^^ help: consider: `131_220`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:245:44
    |
245 | pub const _NL_WABALTMON_1: C2RustUnnamed = 131219;
    |                                            ^^^^^^ help: consider: `131_219`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:246:44
    |
246 | pub const _NL_ABALTMON_12: C2RustUnnamed = 131218;
    |                                            ^^^^^^ help: consider: `131_218`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:247:44
    |
247 | pub const _NL_ABALTMON_11: C2RustUnnamed = 131217;
    |                                            ^^^^^^ help: consider: `131_217`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:248:44
    |
248 | pub const _NL_ABALTMON_10: C2RustUnnamed = 131216;
    |                                            ^^^^^^ help: consider: `131_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:249:43
    |
249 | pub const _NL_ABALTMON_9: C2RustUnnamed = 131215;
    |                                           ^^^^^^ help: consider: `131_215`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:250:43
    |
250 | pub const _NL_ABALTMON_8: C2RustUnnamed = 131214;
    |                                           ^^^^^^ help: consider: `131_214`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:251:43
    |
251 | pub const _NL_ABALTMON_7: C2RustUnnamed = 131213;
    |                                           ^^^^^^ help: consider: `131_213`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:252:43
    |
252 | pub const _NL_ABALTMON_6: C2RustUnnamed = 131212;
    |                                           ^^^^^^ help: consider: `131_212`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:253:43
    |
253 | pub const _NL_ABALTMON_5: C2RustUnnamed = 131211;
    |                                           ^^^^^^ help: consider: `131_211`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:254:43
    |
254 | pub const _NL_ABALTMON_4: C2RustUnnamed = 131210;
    |                                           ^^^^^^ help: consider: `131_210`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:255:43
    |
255 | pub const _NL_ABALTMON_3: C2RustUnnamed = 131209;
    |                                           ^^^^^^ help: consider: `131_209`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:256:43
    |
256 | pub const _NL_ABALTMON_2: C2RustUnnamed = 131208;
    |                                           ^^^^^^ help: consider: `131_208`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:257:43
    |
257 | pub const _NL_ABALTMON_1: C2RustUnnamed = 131207;
    |                                           ^^^^^^ help: consider: `131_207`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:258:43
    |
258 | pub const _NL_WALTMON_12: C2RustUnnamed = 131206;
    |                                           ^^^^^^ help: consider: `131_206`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:259:43
    |
259 | pub const _NL_WALTMON_11: C2RustUnnamed = 131205;
    |                                           ^^^^^^ help: consider: `131_205`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:260:43
    |
260 | pub const _NL_WALTMON_10: C2RustUnnamed = 131204;
    |                                           ^^^^^^ help: consider: `131_204`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:261:42
    |
261 | pub const _NL_WALTMON_9: C2RustUnnamed = 131203;
    |                                          ^^^^^^ help: consider: `131_203`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:262:42
    |
262 | pub const _NL_WALTMON_8: C2RustUnnamed = 131202;
    |                                          ^^^^^^ help: consider: `131_202`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:263:42
    |
263 | pub const _NL_WALTMON_7: C2RustUnnamed = 131201;
    |                                          ^^^^^^ help: consider: `131_201`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:264:42
    |
264 | pub const _NL_WALTMON_6: C2RustUnnamed = 131200;
    |                                          ^^^^^^ help: consider: `131_200`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:265:42
    |
265 | pub const _NL_WALTMON_5: C2RustUnnamed = 131199;
    |                                          ^^^^^^ help: consider: `131_199`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:266:42
    |
266 | pub const _NL_WALTMON_4: C2RustUnnamed = 131198;
    |                                          ^^^^^^ help: consider: `131_198`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:267:42
    |
267 | pub const _NL_WALTMON_3: C2RustUnnamed = 131197;
    |                                          ^^^^^^ help: consider: `131_197`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:268:42
    |
268 | pub const _NL_WALTMON_2: C2RustUnnamed = 131196;
    |                                          ^^^^^^ help: consider: `131_196`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:269:42
    |
269 | pub const _NL_WALTMON_1: C2RustUnnamed = 131195;
    |                                          ^^^^^^ help: consider: `131_195`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:270:40
    |
270 | pub const __ALTMON_12: C2RustUnnamed = 131194;
    |                                        ^^^^^^ help: consider: `131_194`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:271:40
    |
271 | pub const __ALTMON_11: C2RustUnnamed = 131193;
    |                                        ^^^^^^ help: consider: `131_193`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:272:40
    |
272 | pub const __ALTMON_10: C2RustUnnamed = 131192;
    |                                        ^^^^^^ help: consider: `131_192`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:273:39
    |
273 | pub const __ALTMON_9: C2RustUnnamed = 131191;
    |                                       ^^^^^^ help: consider: `131_191`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:274:39
    |
274 | pub const __ALTMON_8: C2RustUnnamed = 131190;
    |                                       ^^^^^^ help: consider: `131_190`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:275:39
    |
275 | pub const __ALTMON_7: C2RustUnnamed = 131189;
    |                                       ^^^^^^ help: consider: `131_189`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:276:39
    |
276 | pub const __ALTMON_6: C2RustUnnamed = 131188;
    |                                       ^^^^^^ help: consider: `131_188`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:277:39
    |
277 | pub const __ALTMON_5: C2RustUnnamed = 131187;
    |                                       ^^^^^^ help: consider: `131_187`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:278:39
    |
278 | pub const __ALTMON_4: C2RustUnnamed = 131186;
    |                                       ^^^^^^ help: consider: `131_186`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:279:39
    |
279 | pub const __ALTMON_3: C2RustUnnamed = 131185;
    |                                       ^^^^^^ help: consider: `131_185`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:280:39
    |
280 | pub const __ALTMON_2: C2RustUnnamed = 131184;
    |                                       ^^^^^^ help: consider: `131_184`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:281:39
    |
281 | pub const __ALTMON_1: C2RustUnnamed = 131183;
    |                                       ^^^^^^ help: consider: `131_183`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:282:45
    |
282 | pub const _NL_TIME_CODESET: C2RustUnnamed = 131182;
    |                                             ^^^^^^ help: consider: `131_182`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:283:43
    |
283 | pub const _NL_W_DATE_FMT: C2RustUnnamed = 131181;
    |                                           ^^^^^^ help: consider: `131_181`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:284:38
    |
284 | pub const _DATE_FMT: C2RustUnnamed = 131180;
    |                                      ^^^^^^ help: consider: `131_180`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:285:46
    |
285 | pub const _NL_TIME_TIMEZONE: C2RustUnnamed = 131179;
    |                                              ^^^^^^ help: consider: `131_179`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:286:51
    |
286 | pub const _NL_TIME_CAL_DIRECTION: C2RustUnnamed = 131178;
    |                                                   ^^^^^^ help: consider: `131_178`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:287:51
    |
287 | pub const _NL_TIME_FIRST_WORKDAY: C2RustUnnamed = 131177;
    |                                                   ^^^^^^ help: consider: `131_177`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:288:51
    |
288 | pub const _NL_TIME_FIRST_WEEKDAY: C2RustUnnamed = 131176;
    |                                                   ^^^^^^ help: consider: `131_176`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:289:50
    |
289 | pub const _NL_TIME_WEEK_1STWEEK: C2RustUnnamed = 131175;
    |                                                  ^^^^^^ help: consider: `131_175`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:290:49
    |
290 | pub const _NL_TIME_WEEK_1STDAY: C2RustUnnamed = 131174;
    |                                                 ^^^^^^ help: consider: `131_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:291:48
    |
291 | pub const _NL_TIME_WEEK_NDAYS: C2RustUnnamed = 131173;
    |                                                ^^^^^^ help: consider: `131_173`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:292:43
    |
292 | pub const _NL_WERA_T_FMT: C2RustUnnamed = 131172;
    |                                           ^^^^^^ help: consider: `131_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:293:45
    |
293 | pub const _NL_WERA_D_T_FMT: C2RustUnnamed = 131171;
    |                                             ^^^^^^ help: consider: `131_171`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:294:44
    |
294 | pub const _NL_WALT_DIGITS: C2RustUnnamed = 131170;
    |                                            ^^^^^^ help: consider: `131_170`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:295:43
    |
295 | pub const _NL_WERA_D_FMT: C2RustUnnamed = 131169;
    |                                           ^^^^^^ help: consider: `131_169`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:296:42
    |
296 | pub const _NL_WERA_YEAR: C2RustUnnamed = 131168;
    |                                          ^^^^^^ help: consider: `131_168`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:297:44
    |
297 | pub const _NL_WT_FMT_AMPM: C2RustUnnamed = 131167;
    |                                            ^^^^^^ help: consider: `131_167`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:298:39
    |
298 | pub const _NL_WT_FMT: C2RustUnnamed = 131166;
    |                                       ^^^^^^ help: consider: `131_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:299:39
    |
299 | pub const _NL_WD_FMT: C2RustUnnamed = 131165;
    |                                       ^^^^^^ help: consider: `131_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:300:41
    |
300 | pub const _NL_WD_T_FMT: C2RustUnnamed = 131164;
    |                                         ^^^^^^ help: consider: `131_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:301:40
    |
301 | pub const _NL_WPM_STR: C2RustUnnamed = 131163;
    |                                        ^^^^^^ help: consider: `131_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:302:40
    |
302 | pub const _NL_WAM_STR: C2RustUnnamed = 131162;
    |                                        ^^^^^^ help: consider: `131_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:303:40
    |
303 | pub const _NL_WMON_12: C2RustUnnamed = 131161;
    |                                        ^^^^^^ help: consider: `131_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:304:40
    |
304 | pub const _NL_WMON_11: C2RustUnnamed = 131160;
    |                                        ^^^^^^ help: consider: `131_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:305:40
    |
305 | pub const _NL_WMON_10: C2RustUnnamed = 131159;
    |                                        ^^^^^^ help: consider: `131_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:306:39
    |
306 | pub const _NL_WMON_9: C2RustUnnamed = 131158;
    |                                       ^^^^^^ help: consider: `131_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:307:39
    |
307 | pub const _NL_WMON_8: C2RustUnnamed = 131157;
    |                                       ^^^^^^ help: consider: `131_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:308:39
    |
308 | pub const _NL_WMON_7: C2RustUnnamed = 131156;
    |                                       ^^^^^^ help: consider: `131_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:309:39
    |
309 | pub const _NL_WMON_6: C2RustUnnamed = 131155;
    |                                       ^^^^^^ help: consider: `131_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:310:39
    |
310 | pub const _NL_WMON_5: C2RustUnnamed = 131154;
    |                                       ^^^^^^ help: consider: `131_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:311:39
    |
311 | pub const _NL_WMON_4: C2RustUnnamed = 131153;
    |                                       ^^^^^^ help: consider: `131_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:312:39
    |
312 | pub const _NL_WMON_3: C2RustUnnamed = 131152;
    |                                       ^^^^^^ help: consider: `131_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:313:39
    |
313 | pub const _NL_WMON_2: C2RustUnnamed = 131151;
    |                                       ^^^^^^ help: consider: `131_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:314:39
    |
314 | pub const _NL_WMON_1: C2RustUnnamed = 131150;
    |                                       ^^^^^^ help: consider: `131_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:315:42
    |
315 | pub const _NL_WABMON_12: C2RustUnnamed = 131149;
    |                                          ^^^^^^ help: consider: `131_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:316:42
    |
316 | pub const _NL_WABMON_11: C2RustUnnamed = 131148;
    |                                          ^^^^^^ help: consider: `131_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:317:42
    |
317 | pub const _NL_WABMON_10: C2RustUnnamed = 131147;
    |                                          ^^^^^^ help: consider: `131_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:318:41
    |
318 | pub const _NL_WABMON_9: C2RustUnnamed = 131146;
    |                                         ^^^^^^ help: consider: `131_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:319:41
    |
319 | pub const _NL_WABMON_8: C2RustUnnamed = 131145;
    |                                         ^^^^^^ help: consider: `131_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:320:41
    |
320 | pub const _NL_WABMON_7: C2RustUnnamed = 131144;
    |                                         ^^^^^^ help: consider: `131_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:321:41
    |
321 | pub const _NL_WABMON_6: C2RustUnnamed = 131143;
    |                                         ^^^^^^ help: consider: `131_143`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:322:41
    |
322 | pub const _NL_WABMON_5: C2RustUnnamed = 131142;
    |                                         ^^^^^^ help: consider: `131_142`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:323:41
    |
323 | pub const _NL_WABMON_4: C2RustUnnamed = 131141;
    |                                         ^^^^^^ help: consider: `131_141`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:324:41
    |
324 | pub const _NL_WABMON_3: C2RustUnnamed = 131140;
    |                                         ^^^^^^ help: consider: `131_140`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:325:41
    |
325 | pub const _NL_WABMON_2: C2RustUnnamed = 131139;
    |                                         ^^^^^^ help: consider: `131_139`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:326:41
    |
326 | pub const _NL_WABMON_1: C2RustUnnamed = 131138;
    |                                         ^^^^^^ help: consider: `131_138`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:327:39
    |
327 | pub const _NL_WDAY_7: C2RustUnnamed = 131137;
    |                                       ^^^^^^ help: consider: `131_137`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:328:39
    |
328 | pub const _NL_WDAY_6: C2RustUnnamed = 131136;
    |                                       ^^^^^^ help: consider: `131_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:329:39
    |
329 | pub const _NL_WDAY_5: C2RustUnnamed = 131135;
    |                                       ^^^^^^ help: consider: `131_135`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:330:39
    |
330 | pub const _NL_WDAY_4: C2RustUnnamed = 131134;
    |                                       ^^^^^^ help: consider: `131_134`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:331:39
    |
331 | pub const _NL_WDAY_3: C2RustUnnamed = 131133;
    |                                       ^^^^^^ help: consider: `131_133`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:332:39
    |
332 | pub const _NL_WDAY_2: C2RustUnnamed = 131132;
    |                                       ^^^^^^ help: consider: `131_132`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:333:39
    |
333 | pub const _NL_WDAY_1: C2RustUnnamed = 131131;
    |                                       ^^^^^^ help: consider: `131_131`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:334:41
    |
334 | pub const _NL_WABDAY_7: C2RustUnnamed = 131130;
    |                                         ^^^^^^ help: consider: `131_130`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:335:41
    |
335 | pub const _NL_WABDAY_6: C2RustUnnamed = 131129;
    |                                         ^^^^^^ help: consider: `131_129`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:336:41
    |
336 | pub const _NL_WABDAY_5: C2RustUnnamed = 131128;
    |                                         ^^^^^^ help: consider: `131_128`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:337:41
    |
337 | pub const _NL_WABDAY_4: C2RustUnnamed = 131127;
    |                                         ^^^^^^ help: consider: `131_127`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:338:41
    |
338 | pub const _NL_WABDAY_3: C2RustUnnamed = 131126;
    |                                         ^^^^^^ help: consider: `131_126`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:339:41
    |
339 | pub const _NL_WABDAY_2: C2RustUnnamed = 131125;
    |                                         ^^^^^^ help: consider: `131_125`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:340:41
    |
340 | pub const _NL_WABDAY_1: C2RustUnnamed = 131124;
    |                                         ^^^^^^ help: consider: `131_124`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:341:49
    |
341 | pub const _NL_TIME_ERA_ENTRIES: C2RustUnnamed = 131123;
    |                                                 ^^^^^^ help: consider: `131_123`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:342:53
    |
342 | pub const _NL_TIME_ERA_NUM_ENTRIES: C2RustUnnamed = 131122;
    |                                                     ^^^^^^ help: consider: `131_122`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:343:38
    |
343 | pub const ERA_T_FMT: C2RustUnnamed = 131121;
    |                                      ^^^^^^ help: consider: `131_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:344:40
    |
344 | pub const ERA_D_T_FMT: C2RustUnnamed = 131120;
    |                                        ^^^^^^ help: consider: `131_120`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:345:39
    |
345 | pub const ALT_DIGITS: C2RustUnnamed = 131119;
    |                                       ^^^^^^ help: consider: `131_119`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:346:38
    |
346 | pub const ERA_D_FMT: C2RustUnnamed = 131118;
    |                                      ^^^^^^ help: consider: `131_118`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:347:39
    |
347 | pub const __ERA_YEAR: C2RustUnnamed = 131117;
    |                                       ^^^^^^ help: consider: `131_117`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:348:32
    |
348 | pub const ERA: C2RustUnnamed = 131116;
    |                                ^^^^^^ help: consider: `131_116`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:349:39
    |
349 | pub const T_FMT_AMPM: C2RustUnnamed = 131115;
    |                                       ^^^^^^ help: consider: `131_115`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:350:34
    |
350 | pub const T_FMT: C2RustUnnamed = 131114;
    |                                  ^^^^^^ help: consider: `131_114`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:351:34
    |
351 | pub const D_FMT: C2RustUnnamed = 131113;
    |                                  ^^^^^^ help: consider: `131_113`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:352:36
    |
352 | pub const D_T_FMT: C2RustUnnamed = 131112;
    |                                    ^^^^^^ help: consider: `131_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:353:35
    |
353 | pub const PM_STR: C2RustUnnamed = 131111;
    |                                   ^^^^^^ help: consider: `131_111`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:354:35
    |
354 | pub const AM_STR: C2RustUnnamed = 131110;
    |                                   ^^^^^^ help: consider: `131_110`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:355:35
    |
355 | pub const MON_12: C2RustUnnamed = 131109;
    |                                   ^^^^^^ help: consider: `131_109`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:356:35
    |
356 | pub const MON_11: C2RustUnnamed = 131108;
    |                                   ^^^^^^ help: consider: `131_108`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:357:35
    |
357 | pub const MON_10: C2RustUnnamed = 131107;
    |                                   ^^^^^^ help: consider: `131_107`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:358:34
    |
358 | pub const MON_9: C2RustUnnamed = 131106;
    |                                  ^^^^^^ help: consider: `131_106`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:359:34
    |
359 | pub const MON_8: C2RustUnnamed = 131105;
    |                                  ^^^^^^ help: consider: `131_105`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:360:34
    |
360 | pub const MON_7: C2RustUnnamed = 131104;
    |                                  ^^^^^^ help: consider: `131_104`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:361:34
    |
361 | pub const MON_6: C2RustUnnamed = 131103;
    |                                  ^^^^^^ help: consider: `131_103`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:362:34
    |
362 | pub const MON_5: C2RustUnnamed = 131102;
    |                                  ^^^^^^ help: consider: `131_102`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:363:34
    |
363 | pub const MON_4: C2RustUnnamed = 131101;
    |                                  ^^^^^^ help: consider: `131_101`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:364:34
    |
364 | pub const MON_3: C2RustUnnamed = 131100;
    |                                  ^^^^^^ help: consider: `131_100`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:365:34
    |
365 | pub const MON_2: C2RustUnnamed = 131099;
    |                                  ^^^^^^ help: consider: `131_099`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:366:34
    |
366 | pub const MON_1: C2RustUnnamed = 131098;
    |                                  ^^^^^^ help: consider: `131_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:367:37
    |
367 | pub const ABMON_12: C2RustUnnamed = 131097;
    |                                     ^^^^^^ help: consider: `131_097`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:368:37
    |
368 | pub const ABMON_11: C2RustUnnamed = 131096;
    |                                     ^^^^^^ help: consider: `131_096`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:369:37
    |
369 | pub const ABMON_10: C2RustUnnamed = 131095;
    |                                     ^^^^^^ help: consider: `131_095`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:370:36
    |
370 | pub const ABMON_9: C2RustUnnamed = 131094;
    |                                    ^^^^^^ help: consider: `131_094`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:371:36
    |
371 | pub const ABMON_8: C2RustUnnamed = 131093;
    |                                    ^^^^^^ help: consider: `131_093`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:372:36
    |
372 | pub const ABMON_7: C2RustUnnamed = 131092;
    |                                    ^^^^^^ help: consider: `131_092`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:373:36
    |
373 | pub const ABMON_6: C2RustUnnamed = 131091;
    |                                    ^^^^^^ help: consider: `131_091`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:374:36
    |
374 | pub const ABMON_5: C2RustUnnamed = 131090;
    |                                    ^^^^^^ help: consider: `131_090`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:375:36
    |
375 | pub const ABMON_4: C2RustUnnamed = 131089;
    |                                    ^^^^^^ help: consider: `131_089`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:376:36
    |
376 | pub const ABMON_3: C2RustUnnamed = 131088;
    |                                    ^^^^^^ help: consider: `131_088`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:377:36
    |
377 | pub const ABMON_2: C2RustUnnamed = 131087;
    |                                    ^^^^^^ help: consider: `131_087`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:378:36
    |
378 | pub const ABMON_1: C2RustUnnamed = 131086;
    |                                    ^^^^^^ help: consider: `131_086`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:379:34
    |
379 | pub const DAY_7: C2RustUnnamed = 131085;
    |                                  ^^^^^^ help: consider: `131_085`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:380:34
    |
380 | pub const DAY_6: C2RustUnnamed = 131084;
    |                                  ^^^^^^ help: consider: `131_084`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:381:34
    |
381 | pub const DAY_5: C2RustUnnamed = 131083;
    |                                  ^^^^^^ help: consider: `131_083`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:382:34
    |
382 | pub const DAY_4: C2RustUnnamed = 131082;
    |                                  ^^^^^^ help: consider: `131_082`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:383:34
    |
383 | pub const DAY_3: C2RustUnnamed = 131081;
    |                                  ^^^^^^ help: consider: `131_081`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:384:34
    |
384 | pub const DAY_2: C2RustUnnamed = 131080;
    |                                  ^^^^^^ help: consider: `131_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:385:34
    |
385 | pub const DAY_1: C2RustUnnamed = 131079;
    |                                  ^^^^^^ help: consider: `131_079`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:386:36
    |
386 | pub const ABDAY_7: C2RustUnnamed = 131078;
    |                                    ^^^^^^ help: consider: `131_078`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:387:36
    |
387 | pub const ABDAY_6: C2RustUnnamed = 131077;
    |                                    ^^^^^^ help: consider: `131_077`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:388:36
    |
388 | pub const ABDAY_5: C2RustUnnamed = 131076;
    |                                    ^^^^^^ help: consider: `131_076`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:389:36
    |
389 | pub const ABDAY_4: C2RustUnnamed = 131075;
    |                                    ^^^^^^ help: consider: `131_075`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:390:36
    |
390 | pub const ABDAY_3: C2RustUnnamed = 131074;
    |                                    ^^^^^^ help: consider: `131_074`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:391:36
    |
391 | pub const ABDAY_2: C2RustUnnamed = 131073;
    |                                    ^^^^^^ help: consider: `131_073`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:392:36
    |
392 | pub const ABDAY_1: C2RustUnnamed = 131072;
    |                                    ^^^^^^ help: consider: `131_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:223:5
    |
223 |     o: Option<&mut quoting_options>,
    |     ^
224 |     c: char,
    |     ^
225 |     i: i32,
    |     ^
...
235 |     let p = &mut options.quote_these_too[index];
    |         ^
236 |     let r = (*p >> shift & 1) as i32;
    |         ^
    |
    = note: `-W clippy::many-single-char-names` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: redundant else block
   --> src/quotearg.rs:319:12
    |
319 |       } else {
    |  ____________^
320 | |         return "'".to_string(); // Single quote
321 | |     }
    | |_____^
    |
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:337:13
    |
337 |     let mut i: size_t = 0;
    |             ^
...
468 |             let mut c: libc::c_uchar = 0;
    |                     ^
...
803 |                     let mut m: size_t = 0;
    |                             ^
...
822 |                         let mut w: char32_t = 0;
    |                                 ^
...
847 |                                     let mut j: size_t = 0;
    |                                             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: long literal lacking separators
   --> src/quotearg.rs:356:36
    |
356 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:359:36
    |
359 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:364:36
    |
364 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:394:36
    |
394 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:398:36
    |
398 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:401:36
    |
401 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:404:36
    |
404 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:407:36
    |
407 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:411:36
    |
411 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:418:13
    |
418 |             1283995450065962895 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:429:36
    |
429 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:431:13
    |
431 |             2694013637280298776 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:433:36
    |
433 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:438:13
    |
438 |             2266290538919981374 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:442:36
    |
442 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:447:13
    |
447 |             14141891332124833771 => {
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:462:29
    |
462 |         while if argsize == 18446744073709551615 as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:478:39
    |
478 |                     <= (if argsize == 18446744073709551615 as libc::c_ulong
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:493:37
    |
493 |                     current_block = 7928555609993211441;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:503:25
    |
503 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:540:21
    |
540 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:542:21
    |
542 |     current_block = 13619784596304402172;
    |                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_619_784_596_304_402_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:544:21
    |
544 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:551:45
    |
551 | ...                   current_block = 17954593875197965021;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:553:33
    |
553 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:555:57
    |
555 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:575:69
    |
575 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:611:45
    |
611 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:614:45
    |
614 | ...                   current_block = 14514781131754033399;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_514_781_131_754_033_399`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:616:33
    |
616 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:618:57
    |
618 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:638:69
    |
638 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:674:45
    |
674 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:677:45
    |
677 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:683:37
    |
683 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:687:37
    |
687 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:691:37
    |
691 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:695:37
    |
695 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:699:37
    |
699 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:703:37
    |
703 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:707:37
    |
707 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:713:25
    |
713 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:716:21
    |
716 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:718:21
    |
718 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:720:21
    |
720 |     current_block = 9215498979640025612;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:725:38
    |
725 |                     if if argsize == 18446744073709551615 as libc::c_ulong {
    |                                      ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:732:41
    |
732 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:734:41
    |
734 |                         current_block = 16442922512115311366;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:738:37
    |
738 |                     current_block = 16442922512115311366;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:741:37
    |
741 |                     current_block = 4634307283396172174;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:744:37
    |
744 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:747:37
    |
747 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:750:37
    |
750 |                     current_block = 16620298045565028098;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:753:37
    |
753 |                     current_block = 15155215915847730705;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:761:25
    |
761 |         current_block = 7928555609993211441;
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:787:21
    |
787 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:789:21
    |
789 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:800:37
    |
800 |                     current_block = 253337042034819032;
    |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:819:39
    |
819 |                         if argsize == 18446744073709551615 as libc::c_ulong {
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:855:65
    |
855 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:879:33
    |
879 |                 current_block = 7928555609993211441;
    |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:939:21
    |
939 |     current_block = 4476262310586904498;
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:941:21
    |
941 |     current_block = 253337042034819032;
    |                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:947:17
    |
947 |                 16442922512115311366 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:949:41
    |
949 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:951:41
    |
951 |                         current_block = 4634307283396172174;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:954:17
    |
954 |                 9215498979640025612 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:959:41
    |
959 |                         current_block = 7928555609993211441;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:962:37
    |
962 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:967:17
    |
967 |                 1190876092451756080 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:970:41
    |
970 |                         current_block = 3173013908131212616;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:972:41
    |
972 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:975:17
    |
975 |                 4634307283396172174 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:977:37
    |
977 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:982:17
    |
982 |                 7549413860336125482 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:983:37
    |
983 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:988:17
    |
988 |                 13059411171234995867 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:989:37
    |
989 |                     current_block = 16620298045565028098;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:994:17
    |
994 |                 16620298045565028098 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:995:37
    |
995 |                     current_block = 15155215915847730705;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1000:17
     |
1000 |                 15155215915847730705 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1005:41
     |
1005 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1008:37
     |
1008 |                     current_block = 253337042034819032;
     |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1013:17
     |
1013 |                 253337042034819032 => {
     |                 ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1034:41
     |
1034 |                         current_block = 4476262310586904498;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1036:41
     |
1036 |                         current_block = 3173013908131212616;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1042:17
     |
1042 |                 3173013908131212616 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1044:41
     |
1044 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1074:37
     |
1074 |                     current_block = 4476262310586904498;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1079:17
     |
1079 |                 4476262310586904498 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1112:29
     |
1112 |             current_block = 7928555609993211441;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1119:29
     |
1119 |             current_block = 6412618891452676311;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/quotearg.rs:1134:8
     |
1134 |   } else {
     |  ________^
1135 | |     if !(buffersize == 0 && orig_buffersize != 0) {
1136 | |         current_block = 6412618891452676311;
1137 | |         break;
...    |
1140 | |     len = 0;
1141 | | }
     | |_^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/quotearg.rs:1136:25
     |
1136 |         current_block = 6412618891452676311;
     |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1145:9
     |
1145 |         7928555609993211441 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/quotearg.rs:1364:13
     |
1364 |     let mut qsize: size_t = quotearg_buffer_restyled(
     |             ^^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/quotearg.rs:1361:13
     |
1361 |     let mut size: size_t = (*sv.offset(n as isize)).size;
     |             ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/quotearg.rs:1328:44
     |
1328 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                            ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1329:11
     |
1329 |         < 9223372036854775807 as libc::c_long
     |           ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1331:9
     |
1331 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1333:9
     |
1333 |         9223372036854775807 as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1557:9
     |
1557 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/safe_read.rs:11:44
   |
11 | pub const SYS_BUFSIZE_MAX: C2RustUnnamed = 2146435072;
   |                                            ^^^^^^^^^^ help: consider: `2_146_435_072`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/safe_read.rs:23:16
   |
23 |           } else {
   |  ________________^
24 | |             let err = unsafe { *__errno_location() };
25 | |             if err == 4 { // Interrupted system call
26 | |                 continue;
...  |
32 | |             }
33 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:40:12
   |
40 |       } else {
   |  ____________^
41 | |         let length: usize = unsafe { strlen(result) } as usize; // Cast to usize
42 | |         if length < buf.len() {
43 | |             buf[..length].copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, length) });
...  |
53 | |         }
54 | |     }
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:46:16
   |
46 |           } else {
   |  ________________^
47 | |             let copy_length = buf.len() - 1;
48 | |             if !buf.is_empty() {
49 | |                 buf[..copy_length].copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, copy_length) });
...  |
52 | |             return 34; // ERANGE
53 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xdectoumax.rs:54:24
   |
54 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_ulong {
   |                        ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/xmalloc.rs:94:12
   |
94 |       } else {
   |  ____________^
95 | |         return _gl_alloc_nomem();
96 | |     }
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:83:20
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:83:56
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |                                                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:619:18
    |
619 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                  ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:265:10
    |
265 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |          ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:619:27
    |
619 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                           ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:265:18
    |
265 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |                  ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
   --> src/xmalloc.rs:268:13
    |
268 |         n = 9223372036854775807 as libc::c_long;
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:470:16
    |
470 |           } else {
    |  ________________^
471 | |             if s == 0 as libc::c_int as libc::c_long {
472 | |                 0 as libc::c_int
473 | |             } else {
...   |
584 | |             }
585 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
470 ~         } else if s == 0 as libc::c_int as libc::c_long {
471 +             0 as libc::c_int
472 +         } else {
473 +             if n < 0 as libc::c_int as libc::c_long {
474 +                 if (if (if ((if 1 as libc::c_int != 0 {
475 +                     0 as libc::c_int as libc::c_long
476 +                 } else {
477 +                     (if 1 as libc::c_int != 0 {
478 +                         0 as libc::c_int as libc::c_long
479 +                     } else {
480 +                         n
481 +                     }) + 0 as libc::c_int as idx_t
482 +                 }) - 1 as libc::c_int as libc::c_long)
483 +                     < 0 as libc::c_int as libc::c_long
484 +                 {
485 +                     !(((((if 1 as libc::c_int != 0 {
486 +                         0 as libc::c_int as libc::c_long
487 +                     } else {
488 +                         (if 1 as libc::c_int != 0 {
489 +                             0 as libc::c_int as libc::c_long
490 +                         } else {
491 +                             n
492 +                         }) + 0 as libc::c_int as idx_t
493 +                     }) + 1 as libc::c_int as libc::c_long)
494 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
495 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
496 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
497 +                         - 1 as libc::c_int as libc::c_long)
498 +                         * 2 as libc::c_int as libc::c_long
499 +                         + 1 as libc::c_int as libc::c_long)
500 +                 } else {
501 +                     (if 1 as libc::c_int != 0 {
502 +                         0 as libc::c_int as libc::c_long
503 +                     } else {
504 +                         (if 1 as libc::c_int != 0 {
505 +                             0 as libc::c_int as libc::c_long
506 +                         } else {
507 +                             n
508 +                         }) + 0 as libc::c_int as idx_t
509 +                     }) + 0 as libc::c_int as libc::c_long
510 +                 }) < 0 as libc::c_int as libc::c_long
511 +                 {
512 +                     (((if 1 as libc::c_int != 0 {
513 +                         0 as libc::c_int as libc::c_long
514 +                     } else {
515 +                         n
516 +                     }) + 0 as libc::c_int as idx_t)
517 +                         < -(if ((if 1 as libc::c_int != 0 {
518 +                             0 as libc::c_int as libc::c_long
519 +                         } else {
520 +                             (if 1 as libc::c_int != 0 {
521 +                                 0 as libc::c_int as libc::c_long
522 +                             } else {
523 +                                 n
524 +                             }) + 0 as libc::c_int as idx_t
525 +                         }) - 1 as libc::c_int as libc::c_long)
526 +                             < 0 as libc::c_int as libc::c_long
527 +                         {
528 +                             ((((if 1 as libc::c_int != 0 {
529 +                                 0 as libc::c_int as libc::c_long
530 +                             } else {
531 +                                 (if 1 as libc::c_int != 0 {
532 +                                     0 as libc::c_int as libc::c_long
533 +                                 } else {
534 +                                     n
535 +                                 }) + 0 as libc::c_int as idx_t
536 +                             }) + 1 as libc::c_int as libc::c_long)
537 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
538 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
539 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
540 +                                 - 1 as libc::c_int as libc::c_long)
541 +                                 * 2 as libc::c_int as libc::c_long
542 +                                 + 1 as libc::c_int as libc::c_long
543 +                         } else {
544 +                             (if 1 as libc::c_int != 0 {
545 +                                 0 as libc::c_int as libc::c_long
546 +                             } else {
547 +                                 (if 1 as libc::c_int != 0 {
548 +                                     0 as libc::c_int as libc::c_long
549 +                                 } else {
550 +                                     n
551 +                                 }) + 0 as libc::c_int as idx_t
552 +                             }) - 1 as libc::c_int as libc::c_long
553 +                         })) as libc::c_int
554 +                 } else {
555 +                     ((0 as libc::c_int as libc::c_long)
556 +                         < (if 1 as libc::c_int != 0 {
557 +                             0 as libc::c_int as libc::c_long
558 +                         } else {
559 +                             n
560 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
561 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
562 +                 {
563 +                     if ((if 1 as libc::c_int != 0 {
564 +                         0 as libc::c_int as libc::c_long
565 +                     } else {
566 +                         s
567 +                     }) - 1 as libc::c_int as libc::c_long)
568 +                         < 0 as libc::c_int as libc::c_long
569 +                     {
570 +                         ((0 as libc::c_int as libc::c_long)
571 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
572 +                     } else {
573 +                         ((-(1 as libc::c_int) as libc::c_long
574 +                             - 0 as libc::c_int as idx_t)
575 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
576 +                     }
577 +                 } else {
578 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
579 +                 }
580 +             } else {
581 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
582 +             }
583 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:362:20
    |
362 |               } else {
    |  ____________________^
363 | |                 if (if (if ((if 1 as libc::c_int != 0 {
364 | |                     0 as libc::c_int as libc::c_long
365 | |                 } else {
...   |
468 | |                 }
469 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
362 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
363 +                 0 as libc::c_int as libc::c_long
364 +             } else {
365 +                 (if 1 as libc::c_int != 0 {
366 +                     0 as libc::c_int as libc::c_long
367 +                 } else {
368 +                     s
369 +                 }) + 0 as libc::c_int as idx_t
370 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
371 +             {
372 +                 !(((((if 1 as libc::c_int != 0 {
373 +                     0 as libc::c_int as libc::c_long
374 +                 } else {
375 +                     (if 1 as libc::c_int != 0 {
376 +                         0 as libc::c_int as libc::c_long
377 +                     } else {
378 +                         s
379 +                     }) + 0 as libc::c_int as idx_t
380 +                 }) + 1 as libc::c_int as libc::c_long)
381 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
382 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
383 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
384 +                     - 1 as libc::c_int as libc::c_long)
385 +                     * 2 as libc::c_int as libc::c_long
386 +                     + 1 as libc::c_int as libc::c_long)
387 +             } else {
388 +                 (if 1 as libc::c_int != 0 {
389 +                     0 as libc::c_int as libc::c_long
390 +                 } else {
391 +                     (if 1 as libc::c_int != 0 {
392 +                         0 as libc::c_int as libc::c_long
393 +                     } else {
394 +                         s
395 +                     }) + 0 as libc::c_int as idx_t
396 +                 }) + 0 as libc::c_int as libc::c_long
397 +             }) < 0 as libc::c_int as libc::c_long
398 +             {
399 +                 (((if 1 as libc::c_int != 0 {
400 +                     0 as libc::c_int as libc::c_long
401 +                 } else {
402 +                     s
403 +                 }) + 0 as libc::c_int as idx_t)
404 +                     < -(if ((if 1 as libc::c_int != 0 {
405 +                         0 as libc::c_int as libc::c_long
406 +                     } else {
407 +                         (if 1 as libc::c_int != 0 {
408 +                             0 as libc::c_int as libc::c_long
409 +                         } else {
410 +                             s
411 +                         }) + 0 as libc::c_int as idx_t
412 +                     }) - 1 as libc::c_int as libc::c_long)
413 +                         < 0 as libc::c_int as libc::c_long
414 +                     {
415 +                         ((((if 1 as libc::c_int != 0 {
416 +                             0 as libc::c_int as libc::c_long
417 +                         } else {
418 +                             (if 1 as libc::c_int != 0 {
419 +                                 0 as libc::c_int as libc::c_long
420 +                             } else {
421 +                                 s
422 +                             }) + 0 as libc::c_int as idx_t
423 +                         }) + 1 as libc::c_int as libc::c_long)
424 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
425 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
426 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
427 +                             - 1 as libc::c_int as libc::c_long)
428 +                             * 2 as libc::c_int as libc::c_long
429 +                             + 1 as libc::c_int as libc::c_long
430 +                     } else {
431 +                         (if 1 as libc::c_int != 0 {
432 +                             0 as libc::c_int as libc::c_long
433 +                         } else {
434 +                             (if 1 as libc::c_int != 0 {
435 +                                 0 as libc::c_int as libc::c_long
436 +                             } else {
437 +                                 s
438 +                             }) + 0 as libc::c_int as idx_t
439 +                         }) - 1 as libc::c_int as libc::c_long
440 +                     })) as libc::c_int
441 +             } else {
442 +                 ((0 as libc::c_int as libc::c_long)
443 +                     < (if 1 as libc::c_int != 0 {
444 +                         0 as libc::c_int as libc::c_long
445 +                     } else {
446 +                         s
447 +                     }) + 0 as libc::c_int as idx_t) as libc::c_int
448 +             }) != 0 && s == -(1 as libc::c_int) as libc::c_long
449 +             {
450 +                 if ((if 1 as libc::c_int != 0 {
451 +                     0 as libc::c_int as libc::c_long
452 +                 } else {
453 +                     n
454 +                 }) - 1 as libc::c_int as libc::c_long)
455 +                     < 0 as libc::c_int as libc::c_long
456 +                 {
457 +                     ((0 as libc::c_int as libc::c_long)
458 +                         < n + 0 as libc::c_int as idx_t) as libc::c_int
459 +                 } else {
460 +                     ((0 as libc::c_int as libc::c_long) < n
461 +                         && (-(1 as libc::c_int) as libc::c_long
462 +                             - 0 as libc::c_int as idx_t)
463 +                             < n - 1 as libc::c_int as libc::c_long) as libc::c_int
464 +                 }
465 +             } else {
466 +                 (0 as libc::c_int as idx_t / s < n) as libc::c_int
467 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:350:25
    |
350 | /                         (if 1 as libc::c_int != 0 {
351 | |                             0 as libc::c_int as libc::c_long
352 | |                         } else {
353 | |                             s
...   |
356 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
357 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
350 ~                         ((if 1 as libc::c_int != 0 {
351 +                             0 as libc::c_int as libc::c_long
352 +                         } else {
353 +                             s
354 +                         }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
355 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
356 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:473:20
    |
473 |               } else {
    |  ____________________^
474 | |                 if n < 0 as libc::c_int as libc::c_long {
475 | |                     if (if (if ((if 1 as libc::c_int != 0 {
476 | |                         0 as libc::c_int as libc::c_long
...   |
583 | |                 }
584 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
473 ~             } else if n < 0 as libc::c_int as libc::c_long {
474 +                 if (if (if ((if 1 as libc::c_int != 0 {
475 +                     0 as libc::c_int as libc::c_long
476 +                 } else {
477 +                     (if 1 as libc::c_int != 0 {
478 +                         0 as libc::c_int as libc::c_long
479 +                     } else {
480 +                         n
481 +                     }) + 0 as libc::c_int as idx_t
482 +                 }) - 1 as libc::c_int as libc::c_long)
483 +                     < 0 as libc::c_int as libc::c_long
484 +                 {
485 +                     !(((((if 1 as libc::c_int != 0 {
486 +                         0 as libc::c_int as libc::c_long
487 +                     } else {
488 +                         (if 1 as libc::c_int != 0 {
489 +                             0 as libc::c_int as libc::c_long
490 +                         } else {
491 +                             n
492 +                         }) + 0 as libc::c_int as idx_t
493 +                     }) + 1 as libc::c_int as libc::c_long)
494 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
495 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
496 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
497 +                         - 1 as libc::c_int as libc::c_long)
498 +                         * 2 as libc::c_int as libc::c_long
499 +                         + 1 as libc::c_int as libc::c_long)
500 +                 } else {
501 +                     (if 1 as libc::c_int != 0 {
502 +                         0 as libc::c_int as libc::c_long
503 +                     } else {
504 +                         (if 1 as libc::c_int != 0 {
505 +                             0 as libc::c_int as libc::c_long
506 +                         } else {
507 +                             n
508 +                         }) + 0 as libc::c_int as idx_t
509 +                     }) + 0 as libc::c_int as libc::c_long
510 +                 }) < 0 as libc::c_int as libc::c_long
511 +                 {
512 +                     (((if 1 as libc::c_int != 0 {
513 +                         0 as libc::c_int as libc::c_long
514 +                     } else {
515 +                         n
516 +                     }) + 0 as libc::c_int as idx_t)
517 +                         < -(if ((if 1 as libc::c_int != 0 {
518 +                             0 as libc::c_int as libc::c_long
519 +                         } else {
520 +                             (if 1 as libc::c_int != 0 {
521 +                                 0 as libc::c_int as libc::c_long
522 +                             } else {
523 +                                 n
524 +                             }) + 0 as libc::c_int as idx_t
525 +                         }) - 1 as libc::c_int as libc::c_long)
526 +                             < 0 as libc::c_int as libc::c_long
527 +                         {
528 +                             ((((if 1 as libc::c_int != 0 {
529 +                                 0 as libc::c_int as libc::c_long
530 +                             } else {
531 +                                 (if 1 as libc::c_int != 0 {
532 +                                     0 as libc::c_int as libc::c_long
533 +                                 } else {
534 +                                     n
535 +                                 }) + 0 as libc::c_int as idx_t
536 +                             }) + 1 as libc::c_int as libc::c_long)
537 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
538 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
539 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
540 +                                 - 1 as libc::c_int as libc::c_long)
541 +                                 * 2 as libc::c_int as libc::c_long
542 +                                 + 1 as libc::c_int as libc::c_long
543 +                         } else {
544 +                             (if 1 as libc::c_int != 0 {
545 +                                 0 as libc::c_int as libc::c_long
546 +                             } else {
547 +                                 (if 1 as libc::c_int != 0 {
548 +                                     0 as libc::c_int as libc::c_long
549 +                                 } else {
550 +                                     n
551 +                                 }) + 0 as libc::c_int as idx_t
552 +                             }) - 1 as libc::c_int as libc::c_long
553 +                         })) as libc::c_int
554 +                 } else {
555 +                     ((0 as libc::c_int as libc::c_long)
556 +                         < (if 1 as libc::c_int != 0 {
557 +                             0 as libc::c_int as libc::c_long
558 +                         } else {
559 +                             n
560 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
561 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
562 +                 {
563 +                     if ((if 1 as libc::c_int != 0 {
564 +                         0 as libc::c_int as libc::c_long
565 +                     } else {
566 +                         s
567 +                     }) - 1 as libc::c_int as libc::c_long)
568 +                         < 0 as libc::c_int as libc::c_long
569 +                     {
570 +                         ((0 as libc::c_int as libc::c_long)
571 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
572 +                     } else {
573 +                         ((-(1 as libc::c_int) as libc::c_long
574 +                             - 0 as libc::c_int as idx_t)
575 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
576 +                     }
577 +                 } else {
578 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
579 +                 }
580 +             } else {
581 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
582 +             }
    |

warning: long literal lacking separators
   --> src/xmalloc.rs:596:13
    |
596 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:597:15
    |
597 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:599:13
    |
599 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:601:13
    |
601 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:829:28
    |
829 |                       } else {
    |  ____________________________^
830 | |                         if s == 0 as libc::c_int as libc::c_long {
831 | |                             0 as libc::c_int
832 | |                         } else {
...   |
943 | |                         }
944 | |                     }) != 0
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
829 ~                     } else if s == 0 as libc::c_int as libc::c_long {
830 +                         0 as libc::c_int
831 +                     } else {
832 +                         if n < 0 as libc::c_int as libc::c_long {
833 +                             if (if (if ((if 1 as libc::c_int != 0 {
834 +                                 0 as libc::c_int as libc::c_long
835 +                             } else {
836 +                                 (if 1 as libc::c_int != 0 {
837 +                                     0 as libc::c_int as libc::c_long
838 +                                 } else {
839 +                                     n
840 +                                 }) + 0 as libc::c_int as idx_t
841 +                             }) - 1 as libc::c_int as libc::c_long)
842 +                                 < 0 as libc::c_int as libc::c_long
843 +                             {
844 +                                 !(((((if 1 as libc::c_int != 0 {
845 +                                     0 as libc::c_int as libc::c_long
846 +                                 } else {
847 +                                     (if 1 as libc::c_int != 0 {
848 +                                         0 as libc::c_int as libc::c_long
849 +                                     } else {
850 +                                         n
851 +                                     }) + 0 as libc::c_int as idx_t
852 +                                 }) + 1 as libc::c_int as libc::c_long)
853 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
854 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
855 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
856 +                                     - 1 as libc::c_int as libc::c_long)
857 +                                     * 2 as libc::c_int as libc::c_long
858 +                                     + 1 as libc::c_int as libc::c_long)
859 +                             } else {
860 +                                 (if 1 as libc::c_int != 0 {
861 +                                     0 as libc::c_int as libc::c_long
862 +                                 } else {
863 +                                     (if 1 as libc::c_int != 0 {
864 +                                         0 as libc::c_int as libc::c_long
865 +                                     } else {
866 +                                         n
867 +                                     }) + 0 as libc::c_int as idx_t
868 +                                 }) + 0 as libc::c_int as libc::c_long
869 +                             }) < 0 as libc::c_int as libc::c_long
870 +                             {
871 +                                 (((if 1 as libc::c_int != 0 {
872 +                                     0 as libc::c_int as libc::c_long
873 +                                 } else {
874 +                                     n
875 +                                 }) + 0 as libc::c_int as idx_t)
876 +                                     < -(if ((if 1 as libc::c_int != 0 {
877 +                                         0 as libc::c_int as libc::c_long
878 +                                     } else {
879 +                                         (if 1 as libc::c_int != 0 {
880 +                                             0 as libc::c_int as libc::c_long
881 +                                         } else {
882 +                                             n
883 +                                         }) + 0 as libc::c_int as idx_t
884 +                                     }) - 1 as libc::c_int as libc::c_long)
885 +                                         < 0 as libc::c_int as libc::c_long
886 +                                     {
887 +                                         ((((if 1 as libc::c_int != 0 {
888 +                                             0 as libc::c_int as libc::c_long
889 +                                         } else {
890 +                                             (if 1 as libc::c_int != 0 {
891 +                                                 0 as libc::c_int as libc::c_long
892 +                                             } else {
893 +                                                 n
894 +                                             }) + 0 as libc::c_int as idx_t
895 +                                         }) + 1 as libc::c_int as libc::c_long)
896 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
897 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
898 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
899 +                                             - 1 as libc::c_int as libc::c_long)
900 +                                             * 2 as libc::c_int as libc::c_long
901 +                                             + 1 as libc::c_int as libc::c_long
902 +                                     } else {
903 +                                         (if 1 as libc::c_int != 0 {
904 +                                             0 as libc::c_int as libc::c_long
905 +                                         } else {
906 +                                             (if 1 as libc::c_int != 0 {
907 +                                                 0 as libc::c_int as libc::c_long
908 +                                             } else {
909 +                                                 n
910 +                                             }) + 0 as libc::c_int as idx_t
911 +                                         }) - 1 as libc::c_int as libc::c_long
912 +                                     })) as libc::c_int
913 +                             } else {
914 +                                 ((0 as libc::c_int as libc::c_long)
915 +                                     < (if 1 as libc::c_int != 0 {
916 +                                         0 as libc::c_int as libc::c_long
917 +                                     } else {
918 +                                         n
919 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
920 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
921 +                             {
922 +                                 if ((if 1 as libc::c_int != 0 {
923 +                                     0 as libc::c_int as libc::c_long
924 +                                 } else {
925 +                                     s
926 +                                 }) - 1 as libc::c_int as libc::c_long)
927 +                                     < 0 as libc::c_int as libc::c_long
928 +                                 {
929 +                                     ((0 as libc::c_int as libc::c_long)
930 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
931 +                                 } else {
932 +                                     ((-(1 as libc::c_int) as libc::c_long
933 +                                         - 0 as libc::c_int as idx_t)
934 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
935 +                                 }
936 +                             } else {
937 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
938 +                             }
939 +                         } else {
940 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
941 +                         }
942 ~                     }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:720:32
    |
720 |                           } else {
    |  ________________________________^
721 | |                             if (if (if ((if 1 as libc::c_int != 0 {
722 | |                                 0 as libc::c_int as libc::c_long
723 | |                             } else {
...   |
827 | |                             }
828 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
720 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
721 +                             0 as libc::c_int as libc::c_long
722 +                         } else {
723 +                             (if 1 as libc::c_int != 0 {
724 +                                 0 as libc::c_int as libc::c_long
725 +                             } else {
726 +                                 s
727 +                             }) + 0 as libc::c_int as idx_t
728 +                         }) - 1 as libc::c_int as libc::c_long)
729 +                             < 0 as libc::c_int as libc::c_long
730 +                         {
731 +                             !(((((if 1 as libc::c_int != 0 {
732 +                                 0 as libc::c_int as libc::c_long
733 +                             } else {
734 +                                 (if 1 as libc::c_int != 0 {
735 +                                     0 as libc::c_int as libc::c_long
736 +                                 } else {
737 +                                     s
738 +                                 }) + 0 as libc::c_int as idx_t
739 +                             }) + 1 as libc::c_int as libc::c_long)
740 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
741 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
742 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
743 +                                 - 1 as libc::c_int as libc::c_long)
744 +                                 * 2 as libc::c_int as libc::c_long
745 +                                 + 1 as libc::c_int as libc::c_long)
746 +                         } else {
747 +                             (if 1 as libc::c_int != 0 {
748 +                                 0 as libc::c_int as libc::c_long
749 +                             } else {
750 +                                 (if 1 as libc::c_int != 0 {
751 +                                     0 as libc::c_int as libc::c_long
752 +                                 } else {
753 +                                     s
754 +                                 }) + 0 as libc::c_int as idx_t
755 +                             }) + 0 as libc::c_int as libc::c_long
756 +                         }) < 0 as libc::c_int as libc::c_long
757 +                         {
758 +                             (((if 1 as libc::c_int != 0 {
759 +                                 0 as libc::c_int as libc::c_long
760 +                             } else {
761 +                                 s
762 +                             }) + 0 as libc::c_int as idx_t)
763 +                                 < -(if ((if 1 as libc::c_int != 0 {
764 +                                     0 as libc::c_int as libc::c_long
765 +                                 } else {
766 +                                     (if 1 as libc::c_int != 0 {
767 +                                         0 as libc::c_int as libc::c_long
768 +                                     } else {
769 +                                         s
770 +                                     }) + 0 as libc::c_int as idx_t
771 +                                 }) - 1 as libc::c_int as libc::c_long)
772 +                                     < 0 as libc::c_int as libc::c_long
773 +                                 {
774 +                                     ((((if 1 as libc::c_int != 0 {
775 +                                         0 as libc::c_int as libc::c_long
776 +                                     } else {
777 +                                         (if 1 as libc::c_int != 0 {
778 +                                             0 as libc::c_int as libc::c_long
779 +                                         } else {
780 +                                             s
781 +                                         }) + 0 as libc::c_int as idx_t
782 +                                     }) + 1 as libc::c_int as libc::c_long)
783 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
784 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
785 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
786 +                                         - 1 as libc::c_int as libc::c_long)
787 +                                         * 2 as libc::c_int as libc::c_long
788 +                                         + 1 as libc::c_int as libc::c_long
789 +                                 } else {
790 +                                     (if 1 as libc::c_int != 0 {
791 +                                         0 as libc::c_int as libc::c_long
792 +                                     } else {
793 +                                         (if 1 as libc::c_int != 0 {
794 +                                             0 as libc::c_int as libc::c_long
795 +                                         } else {
796 +                                             s
797 +                                         }) + 0 as libc::c_int as idx_t
798 +                                     }) - 1 as libc::c_int as libc::c_long
799 +                                 })) as libc::c_int
800 +                         } else {
801 +                             ((0 as libc::c_int as libc::c_long)
802 +                                 < (if 1 as libc::c_int != 0 {
803 +                                     0 as libc::c_int as libc::c_long
804 +                                 } else {
805 +                                     s
806 +                                 }) + 0 as libc::c_int as idx_t) as libc::c_int
807 +                         }) != 0 && s == -(1 as libc::c_int) as libc::c_long
808 +                         {
809 +                             if ((if 1 as libc::c_int != 0 {
810 +                                 0 as libc::c_int as libc::c_long
811 +                             } else {
812 +                                 n
813 +                             }) - 1 as libc::c_int as libc::c_long)
814 +                                 < 0 as libc::c_int as libc::c_long
815 +                             {
816 +                                 ((0 as libc::c_int as libc::c_long)
817 +                                     < n + 0 as libc::c_int as idx_t) as libc::c_int
818 +                             } else {
819 +                                 ((0 as libc::c_int as libc::c_long) < n
820 +                                     && (-(1 as libc::c_int) as libc::c_long
821 +                                         - 0 as libc::c_int as idx_t)
822 +                                         < n - 1 as libc::c_int as libc::c_long) as libc::c_int
823 +                             }
824 +                         } else {
825 +                             (0 as libc::c_int as idx_t / s < n) as libc::c_int
826 +                         }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:707:37
    |
707 | / ...                   (if 1 as libc::c_int != 0 {
708 | | ...                       0 as libc::c_int as libc::c_long
709 | | ...                   } else {
710 | | ...                       s
...   |
713 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
714 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
707 ~                                     ((if 1 as libc::c_int != 0 {
708 +                                         0 as libc::c_int as libc::c_long
709 +                                     } else {
710 +                                         s
711 +                                     }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
712 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
713 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:832:32
    |
832 |                           } else {
    |  ________________________________^
833 | |                             if n < 0 as libc::c_int as libc::c_long {
834 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
835 | |                                     0 as libc::c_int as libc::c_long
...   |
942 | |                             }
943 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
832 ~                         } else if n < 0 as libc::c_int as libc::c_long {
833 +                             if (if (if ((if 1 as libc::c_int != 0 {
834 +                                 0 as libc::c_int as libc::c_long
835 +                             } else {
836 +                                 (if 1 as libc::c_int != 0 {
837 +                                     0 as libc::c_int as libc::c_long
838 +                                 } else {
839 +                                     n
840 +                                 }) + 0 as libc::c_int as idx_t
841 +                             }) - 1 as libc::c_int as libc::c_long)
842 +                                 < 0 as libc::c_int as libc::c_long
843 +                             {
844 +                                 !(((((if 1 as libc::c_int != 0 {
845 +                                     0 as libc::c_int as libc::c_long
846 +                                 } else {
847 +                                     (if 1 as libc::c_int != 0 {
848 +                                         0 as libc::c_int as libc::c_long
849 +                                     } else {
850 +                                         n
851 +                                     }) + 0 as libc::c_int as idx_t
852 +                                 }) + 1 as libc::c_int as libc::c_long)
853 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
854 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
855 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
856 +                                     - 1 as libc::c_int as libc::c_long)
857 +                                     * 2 as libc::c_int as libc::c_long
858 +                                     + 1 as libc::c_int as libc::c_long)
859 +                             } else {
860 +                                 (if 1 as libc::c_int != 0 {
861 +                                     0 as libc::c_int as libc::c_long
862 +                                 } else {
863 +                                     (if 1 as libc::c_int != 0 {
864 +                                         0 as libc::c_int as libc::c_long
865 +                                     } else {
866 +                                         n
867 +                                     }) + 0 as libc::c_int as idx_t
868 +                                 }) + 0 as libc::c_int as libc::c_long
869 +                             }) < 0 as libc::c_int as libc::c_long
870 +                             {
871 +                                 (((if 1 as libc::c_int != 0 {
872 +                                     0 as libc::c_int as libc::c_long
873 +                                 } else {
874 +                                     n
875 +                                 }) + 0 as libc::c_int as idx_t)
876 +                                     < -(if ((if 1 as libc::c_int != 0 {
877 +                                         0 as libc::c_int as libc::c_long
878 +                                     } else {
879 +                                         (if 1 as libc::c_int != 0 {
880 +                                             0 as libc::c_int as libc::c_long
881 +                                         } else {
882 +                                             n
883 +                                         }) + 0 as libc::c_int as idx_t
884 +                                     }) - 1 as libc::c_int as libc::c_long)
885 +                                         < 0 as libc::c_int as libc::c_long
886 +                                     {
887 +                                         ((((if 1 as libc::c_int != 0 {
888 +                                             0 as libc::c_int as libc::c_long
889 +                                         } else {
890 +                                             (if 1 as libc::c_int != 0 {
891 +                                                 0 as libc::c_int as libc::c_long
892 +                                             } else {
893 +                                                 n
894 +                                             }) + 0 as libc::c_int as idx_t
895 +                                         }) + 1 as libc::c_int as libc::c_long)
896 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
897 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
898 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
899 +                                             - 1 as libc::c_int as libc::c_long)
900 +                                             * 2 as libc::c_int as libc::c_long
901 +                                             + 1 as libc::c_int as libc::c_long
902 +                                     } else {
903 +                                         (if 1 as libc::c_int != 0 {
904 +                                             0 as libc::c_int as libc::c_long
905 +                                         } else {
906 +                                             (if 1 as libc::c_int != 0 {
907 +                                                 0 as libc::c_int as libc::c_long
908 +                                             } else {
909 +                                                 n
910 +                                             }) + 0 as libc::c_int as idx_t
911 +                                         }) - 1 as libc::c_int as libc::c_long
912 +                                     })) as libc::c_int
913 +                             } else {
914 +                                 ((0 as libc::c_int as libc::c_long)
915 +                                     < (if 1 as libc::c_int != 0 {
916 +                                         0 as libc::c_int as libc::c_long
917 +                                     } else {
918 +                                         n
919 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
920 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
921 +                             {
922 +                                 if ((if 1 as libc::c_int != 0 {
923 +                                     0 as libc::c_int as libc::c_long
924 +                                 } else {
925 +                                     s
926 +                                 }) - 1 as libc::c_int as libc::c_long)
927 +                                     < 0 as libc::c_int as libc::c_long
928 +                                 {
929 +                                     ((0 as libc::c_int as libc::c_long)
930 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
931 +                                 } else {
932 +                                     ((-(1 as libc::c_int) as libc::c_long
933 +                                         - 0 as libc::c_int as idx_t)
934 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
935 +                                 }
936 +                             } else {
937 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
938 +                             }
939 +                         } else {
940 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
941 +                         }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoumax.rs:212:16
    |
212 |           } else {
    |  ________________^
213 | |             if scale_factor == 0 as libc::c_int {
214 | |                 0 as libc::c_int
215 | |             } else {
...   |
345 | |             }
346 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
212 ~         } else if scale_factor == 0 as libc::c_int {
213 +             0 as libc::c_int
214 +         } else {
215 +             if *x < 0 as libc::c_int as libc::c_ulong {
216 +                 if (if (if (if 1 as libc::c_int != 0 {
217 +                     0 as libc::c_int as libc::c_ulong
218 +                 } else {
219 +                     (if 1 as libc::c_int != 0 {
220 +                         0 as libc::c_int as libc::c_ulong
221 +                     } else {
222 +                         *x
223 +                     })
224 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
225 +                 })
226 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
227 +                     < 0 as libc::c_int as libc::c_ulong
228 +                 {
229 +                     !((if 1 as libc::c_int != 0 {
230 +                         0 as libc::c_int as libc::c_ulong
231 +                     } else {
232 +                         (if 1 as libc::c_int != 0 {
233 +                             0 as libc::c_int as libc::c_ulong
234 +                         } else {
235 +                             *x
236 +                         })
237 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
238 +                     })
239 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
240 +                         << (::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
241 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
242 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
243 +                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
244 +                         .wrapping_mul(2 as libc::c_int as libc::c_ulong)
245 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
246 +                 } else {
247 +                     (if 1 as libc::c_int != 0 {
248 +                         0 as libc::c_int as libc::c_ulong
249 +                     } else {
250 +                         (if 1 as libc::c_int != 0 {
251 +                             0 as libc::c_int as libc::c_ulong
252 +                         } else {
253 +                             *x
254 +                         })
255 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
256 +                     })
257 +                         .wrapping_add(0 as libc::c_int as libc::c_ulong)
258 +                 }) < 0 as libc::c_int as libc::c_ulong
259 +                 {
260 +                     ((if 1 as libc::c_int != 0 {
261 +                         0 as libc::c_int as libc::c_ulong
262 +                     } else {
263 +                         *x
264 +                     })
265 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
266 +                         < (if (if 1 as libc::c_int != 0 {
267 +                             0 as libc::c_int as libc::c_ulong
268 +                         } else {
269 +                             (if 1 as libc::c_int != 0 {
270 +                                 0 as libc::c_int as libc::c_ulong
271 +                             } else {
272 +                                 *x
273 +                             })
274 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
275 +                         })
276 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
277 +                             < 0 as libc::c_int as libc::c_ulong
278 +                         {
279 +                             ((if 1 as libc::c_int != 0 {
280 +                                 0 as libc::c_int as libc::c_ulong
281 +                             } else {
282 +                                 (if 1 as libc::c_int != 0 {
283 +                                     0 as libc::c_int as libc::c_ulong
284 +                                 } else {
285 +                                     *x
286 +                                 })
287 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
288 +                             })
289 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
290 +                                 << (::core::mem::size_of::<libc::c_ulong>()
291 +                                     as libc::c_ulong)
292 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
293 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
294 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
295 +                                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
296 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
297 +                         } else {
298 +                             (if 1 as libc::c_int != 0 {
299 +                                 0 as libc::c_int as libc::c_ulong
300 +                             } else {
301 +                                 (if 1 as libc::c_int != 0 {
302 +                                     0 as libc::c_int as libc::c_ulong
303 +                                 } else {
304 +                                     *x
305 +                                 })
306 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
307 +                             })
308 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
309 +                         })
310 +                             .wrapping_neg()) as libc::c_int
311 +                 } else {
312 +                     ((0 as libc::c_int as libc::c_ulong)
313 +                         < (if 1 as libc::c_int != 0 {
314 +                             0 as libc::c_int as libc::c_ulong
315 +                         } else {
316 +                             *x
317 +                         })
318 +                             .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
319 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
320 +                 {
321 +                     if ((if 1 as libc::c_int != 0 {
322 +                         0 as libc::c_int
323 +                     } else {
324 +                         scale_factor
325 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
326 +                     {
327 +                         ((0 as libc::c_int as libc::c_ulong)
328 +                             < (scale_factor as libc::c_ulong)
329 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
330 +                     } else {
331 +                         ((-(1 as libc::c_int) as libc::c_ulong)
332 +                             .wrapping_sub(0 as libc::c_int as uintmax_t)
333 +                             < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
334 +                             as libc::c_int
335 +                     }
336 +                 } else {
337 +                     ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
338 +                         < scale_factor as libc::c_ulong) as libc::c_int
339 +                 }
340 +             } else {
341 +                 ((-(1 as libc::c_int) as uintmax_t)
342 +                     .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
343 +             }
344 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoumax.rs:215:20
    |
215 |               } else {
    |  ____________________^
216 | |                 if *x < 0 as libc::c_int as libc::c_ulong {
217 | |                     if (if (if (if 1 as libc::c_int != 0 {
218 | |                         0 as libc::c_int as libc::c_ulong
...   |
344 | |                 }
345 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
215 ~             } else if *x < 0 as libc::c_int as libc::c_ulong {
216 +                 if (if (if (if 1 as libc::c_int != 0 {
217 +                     0 as libc::c_int as libc::c_ulong
218 +                 } else {
219 +                     (if 1 as libc::c_int != 0 {
220 +                         0 as libc::c_int as libc::c_ulong
221 +                     } else {
222 +                         *x
223 +                     })
224 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
225 +                 })
226 +                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
227 +                     < 0 as libc::c_int as libc::c_ulong
228 +                 {
229 +                     !((if 1 as libc::c_int != 0 {
230 +                         0 as libc::c_int as libc::c_ulong
231 +                     } else {
232 +                         (if 1 as libc::c_int != 0 {
233 +                             0 as libc::c_int as libc::c_ulong
234 +                         } else {
235 +                             *x
236 +                         })
237 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
238 +                     })
239 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
240 +                         << (::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
241 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
242 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
243 +                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
244 +                         .wrapping_mul(2 as libc::c_int as libc::c_ulong)
245 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
246 +                 } else {
247 +                     (if 1 as libc::c_int != 0 {
248 +                         0 as libc::c_int as libc::c_ulong
249 +                     } else {
250 +                         (if 1 as libc::c_int != 0 {
251 +                             0 as libc::c_int as libc::c_ulong
252 +                         } else {
253 +                             *x
254 +                         })
255 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
256 +                     })
257 +                         .wrapping_add(0 as libc::c_int as libc::c_ulong)
258 +                 }) < 0 as libc::c_int as libc::c_ulong
259 +                 {
260 +                     ((if 1 as libc::c_int != 0 {
261 +                         0 as libc::c_int as libc::c_ulong
262 +                     } else {
263 +                         *x
264 +                     })
265 +                         .wrapping_add(0 as libc::c_int as uintmax_t)
266 +                         < (if (if 1 as libc::c_int != 0 {
267 +                             0 as libc::c_int as libc::c_ulong
268 +                         } else {
269 +                             (if 1 as libc::c_int != 0 {
270 +                                 0 as libc::c_int as libc::c_ulong
271 +                             } else {
272 +                                 *x
273 +                             })
274 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)
275 +                         })
276 +                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
277 +                             < 0 as libc::c_int as libc::c_ulong
278 +                         {
279 +                             ((if 1 as libc::c_int != 0 {
280 +                                 0 as libc::c_int as libc::c_ulong
281 +                             } else {
282 +                                 (if 1 as libc::c_int != 0 {
283 +                                     0 as libc::c_int as libc::c_ulong
284 +                                 } else {
285 +                                     *x
286 +                                 })
287 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
288 +                             })
289 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
290 +                                 << (::core::mem::size_of::<libc::c_ulong>()
291 +                                     as libc::c_ulong)
292 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
293 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
294 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
295 +                                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
296 +                                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
297 +                         } else {
298 +                             (if 1 as libc::c_int != 0 {
299 +                                 0 as libc::c_int as libc::c_ulong
300 +                             } else {
301 +                                 (if 1 as libc::c_int != 0 {
302 +                                     0 as libc::c_int as libc::c_ulong
303 +                                 } else {
304 +                                     *x
305 +                                 })
306 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
307 +                             })
308 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
309 +                         })
310 +                             .wrapping_neg()) as libc::c_int
311 +                 } else {
312 +                     ((0 as libc::c_int as libc::c_ulong)
313 +                         < (if 1 as libc::c_int != 0 {
314 +                             0 as libc::c_int as libc::c_ulong
315 +                         } else {
316 +                             *x
317 +                         })
318 +                             .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
319 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
320 +                 {
321 +                     if ((if 1 as libc::c_int != 0 {
322 +                         0 as libc::c_int
323 +                     } else {
324 +                         scale_factor
325 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
326 +                     {
327 +                         ((0 as libc::c_int as libc::c_ulong)
328 +                             < (scale_factor as libc::c_ulong)
329 +                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
330 +                     } else {
331 +                         ((-(1 as libc::c_int) as libc::c_ulong)
332 +                             .wrapping_sub(0 as libc::c_int as uintmax_t)
333 +                             < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
334 +                             as libc::c_int
335 +                     }
336 +                 } else {
337 +                     ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
338 +                         < scale_factor as libc::c_ulong) as libc::c_int
339 +                 }
340 +             } else {
341 +                 ((-(1 as libc::c_int) as uintmax_t)
342 +                     .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
343 +             }
    |

warning: unused variable: `fd`
  --> src/binary_io.rs:15:21
   |
15 | pub fn __gl_setmode(fd: i32, mode: i32) -> i32 {
   |                     ^^ help: if this is intentional, prefix it with an underscore: `_fd`
   |
   = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `mode`
  --> src/binary_io.rs:15:30
   |
15 | pub fn __gl_setmode(fd: i32, mode: i32) -> i32 {
   |                              ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unused variable: `left_quote`
   --> src/quotearg.rs:370:25
    |
370 |                     let left_quote = gettext_quote(
    |                         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_left_quote`

warning: unused variable: `right_quote`
   --> src/quotearg.rs:374:25
    |
374 |                     let right_quote = gettext_quote(
    |                         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_right_quote`

warning: unused variable: `argsize`
    --> src/quotearg.rs:1634:9
     |
1634 |     mut argsize: size_t,
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_argsize`

warning: unused variable: `fd`
  --> src/xbinary_io.rs:42:17
   |
42 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
   |                 ^^ help: if this is intentional, prefix it with an underscore: `_fd`

warning: unused variable: `mode`
  --> src/xbinary_io.rs:42:26
   |
42 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
   |                          ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unused variable: `p`
   --> src/xmalloc.rs:198:9
    |
198 |     mut p: *mut libc::c_void,
    |         ^ help: if this is intentional, prefix it with an underscore: `_p`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:509:13
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
509 |               unsafe { *buffer.offset(len as isize) = '\'' as i8 };
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`
    = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:513:13
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
513 |               unsafe { *buffer.offset(len as isize) = '$' as i8 };
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:517:13
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
517 |               unsafe { *buffer.offset(len as isize) = '\'' as i8 };
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:523:9
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
523 |           unsafe { *buffer.offset(len as isize) = '\\' as i8 };
    |           ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:528:26
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
528 |           && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                            ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:528:70
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
528 |           && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                                                        ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:531:13
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
531 |               unsafe { *buffer.offset(len as isize) = '0' as i8 };
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:535:13
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
535 |               unsafe { *buffer.offset(len as isize) = '0' as i8 };
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:769:27
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
769 |           let byte_buffer = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                             ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:775:27
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
775 |           let byte_buffer = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                             ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:781:27
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
781 |           let byte_buffer = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                             ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:875:24
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
875 |       let buffer_slice = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                          ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/quotearg.rs:937:13
    |
324 | / unsafe extern "C" fn quotearg_buffer_restyled(
325 | |     mut buffer: *mut libc::c_char,
326 | |     mut buffersize: size_t,
327 | |     mut arg: *const libc::c_char,
...   |
333 | |     mut right_quote: *const libc::c_char,
334 | | ) -> size_t {
    | |___________- because it's nested under this `unsafe` fn
...
937 |           c = unsafe { *arg.offset(i as isize) } as u8; // Update c to next character
    |               ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1569:26
     |
1561 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1562 | |     mut n: libc::c_int,
1563 | |     mut left_quote: *const libc::c_char,
1564 | |     mut right_quote: *const libc::c_char,
1565 | |     mut arg: *const libc::c_char,
1566 | |     mut argsize: size_t,
1567 | | ) -> *mut libc::c_char {
     | |______________________- because it's nested under this `unsafe` fn
1568 |       let mut o: quoting_options = default_quoting_options;
1569 |       let left_quote_str = unsafe { CStr::from_ptr(left_quote).to_string_lossy().into_owned() };
     |                            ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/quotearg.rs:1570:23
     |
1561 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1562 | |     mut n: libc::c_int,
1563 | |     mut left_quote: *const libc::c_char,
1564 | |     mut right_quote: *const libc::c_char,
1565 | |     mut arg: *const libc::c_char,
1566 | |     mut argsize: size_t,
1567 | | ) -> *mut libc::c_char {
     | |______________________- because it's nested under this `unsafe` fn
...
1570 |   let right_quote_str = unsafe { CStr::from_ptr(right_quote).to_string_lossy().into_owned() };
     |                         ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoumax.rs:484:32
    |
402 | / pub unsafe extern "C" fn xstrtoumax(
403 | |     mut s: *const libc::c_char,
404 | |     mut ptr: *mut *mut libc::c_char,
405 | |     mut strtol_base: libc::c_int,
406 | |     mut val: *mut uintmax_t,
407 | |     mut valid_suffixes: *const libc::c_char,
408 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
484 |       let valid_suffixes_slice = unsafe { std::ffi::CStr::from_ptr(valid_suffixes).to_string_lossy() };
    |                                  ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoumax.rs:494:23
    |
402 | / pub unsafe extern "C" fn xstrtoumax(
403 | |     mut s: *const libc::c_char,
404 | |     mut ptr: *mut *mut libc::c_char,
405 | |     mut strtol_base: libc::c_int,
406 | |     mut val: *mut uintmax_t,
407 | |     mut valid_suffixes: *const libc::c_char,
408 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
494 |                   match unsafe { *(*p).offset(1) } as u8 as char {
    |                         ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoumax.rs:496:28
    |
402 | / pub unsafe extern "C" fn xstrtoumax(
403 | |     mut s: *const libc::c_char,
404 | |     mut ptr: *mut *mut libc::c_char,
405 | |     mut strtol_base: libc::c_int,
406 | |     mut val: *mut uintmax_t,
407 | |     mut valid_suffixes: *const libc::c_char,
408 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
496 |                           if unsafe { *(*p).offset(2) } as u8 as char == 'B' {
    |                              ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
   --> src/xstrtoumax.rs:561:10
    |
402 | / pub unsafe extern "C" fn xstrtoumax(
403 | |     mut s: *const libc::c_char,
404 | |     mut ptr: *mut *mut libc::c_char,
405 | |     mut strtol_base: libc::c_int,
406 | |     mut val: *mut uintmax_t,
407 | |     mut valid_suffixes: *const libc::c_char,
408 | | ) -> strtol_error {
    | |_________________- because it's nested under this `unsafe` fn
...
561 |       *p = unsafe { (*p).offset(suffixes as isize) };
    |            ^^^^^^ unnecessary `unsafe` block
    |
    = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: this could be a `const fn`
  --> src/binary_io.rs:15:1
   |
15 | / pub fn __gl_setmode(fd: i32, mode: i32) -> i32 {
16 | |     0
17 | | }
   | |_^
   |
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_ctype.rs:20:1
   |
20 | / pub fn c_isalnum(c: i32) -> bool {
21 | |     match c {
22 | |         48..=57 | 65..=90 | 97..=122 => true,
23 | |         _ => false,
24 | |     }
25 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:21:5
   |
21 | /     match c {
22 | |         48..=57 | 65..=90 | 97..=122 => true,
23 | |         _ => false,
24 | |     }
   | |_____^ help: try this: `matches!(c, 48..=57 | 65..=90 | 97..=122)`
   |
   = note: `-W clippy::match-like-matches-macro` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
  --> src/c_ctype.rs:30:1
   |
30 | / pub fn c_isalpha(c: i32) -> bool {
31 | |     matches!(c, 97..=122 | 65..=90)
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_ctype.rs:37:1
   |
37 | / pub fn c_isascii(c: i32) -> bool {
38 | |     match c {
39 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
40 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
...  |
49 | |     }
50 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:38:5
   |
38 | /     match c {
39 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
40 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
41 | |         | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
...  |
48 | |         _ => false,
49 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
   |
38 ~     matches!(c, 32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
39 +         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
40 +         | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
41 +         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
42 +         | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 33 | 34 | 35 | 36 | 37 | 38
43 +         | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58 | 59 | 60 | 61 | 62 | 63 | 64
44 +         | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125 | 126 | 65 | 66 | 67 | 68 | 69
45 +         | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85
46 +         | 86 | 87 | 88 | 89 | 90)
   |

warning: this could be a `const fn`
  --> src/c_ctype.rs:55:1
   |
55 | / pub fn c_isblank(c: i32) -> bool {
56 | |     c == ' ' as i32 || c == '\t' as i32
57 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_ctype.rs:62:1
   |
62 | / pub fn c_iscntrl(c: i32) -> bool {
63 | |     match c {
64 | |         0..=31 | 127 => true,
65 | |         _ => false,
66 | |     }
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:63:5
   |
63 | /     match c {
64 | |         0..=31 | 127 => true,
65 | |         _ => false,
66 | |     }
   | |_____^ help: try this: `matches!(c, 0..=31 | 127)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
  --> src/c_ctype.rs:72:1
   |
72 | / pub fn c_isdigit(c: i32) -> bool {
73 | |     matches!(c, 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57)
74 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_ctype.rs:79:1
   |
79 | / pub fn c_isgraph(c: i32) -> bool {
80 | |     match c {
81 | |         48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126 => true,
82 | |         _ => false,
83 | |     }
84 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:80:5
   |
80 | /     match c {
81 | |         48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126 => true,
82 | |         _ => false,
83 | |     }
   | |_____^ help: try this: `matches!(c, 48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
  --> src/c_ctype.rs:89:1
   |
89 | / pub fn c_islower(c: i32) -> bool {
90 | |     match c {
91 | |         97..=122 => true,
92 | |         _ => false,
93 | |     }
94 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
  --> src/c_ctype.rs:90:5
   |
90 | /     match c {
91 | |         97..=122 => true,
92 | |         _ => false,
93 | |     }
   | |_____^ help: try this: `matches!(c, 97..=122)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
   --> src/c_ctype.rs:99:1
    |
99  | / pub fn c_isprint(c: i32) -> bool {
100 | |     match c {
101 | |         32 | 48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126 | 65..=90 => true,
102 | |         _ => false,
103 | |     }
104 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
   --> src/c_ctype.rs:100:5
    |
100 | /     match c {
101 | |         32 | 48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126 | 65..=90 => true,
102 | |         _ => false,
103 | |     }
    | |_____^ help: try this: `matches!(c, 32 | 48..=57 | 97..=122 | 33..=47 | 58..=64 | 91..=96 | 123..=126 | 65..=90)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
   --> src/c_ctype.rs:109:1
    |
109 | / pub fn c_ispunct(c: i32) -> bool {
110 | |     match c {
111 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
112 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
115 | |     }
116 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
   --> src/c_ctype.rs:110:5
    |
110 | /     match c {
111 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
112 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
113 | |         | 126 => true,
114 | |         _ => false,
115 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro
help: try this
    |
110 ~     matches!(c, 33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
111 +         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
112 +         | 126)
    |

warning: this could be a `const fn`
   --> src/c_ctype.rs:121:1
    |
121 | / pub fn c_isspace(c: i32) -> bool {
122 | |     match c {
123 | |         32 | 9 | 10 | 11 | 12 | 13 => true,
124 | |         _ => false,
125 | |     }
126 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: match expression looks like `matches!` macro
   --> src/c_ctype.rs:122:5
    |
122 | /     match c {
123 | |         32 | 9 | 10 | 11 | 12 | 13 => true,
124 | |         _ => false,
125 | |     }
    | |_____^ help: try this: `matches!(c, 32 | 9 | 10 | 11 | 12 | 13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_like_matches_macro

warning: this could be a `const fn`
   --> src/c_ctype.rs:131:1
    |
131 | / pub fn c_isupper(c: i32) -> bool {
132 | |     matches!(c, 65..=90)
133 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
   --> src/c_ctype.rs:138:1
    |
138 | / pub fn c_isxdigit(c: i32) -> bool {
139 | |     matches!(c, 48..=57 | 97..=102 | 65..=70)
140 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
   --> src/c_ctype.rs:145:1
    |
145 | / pub fn c_tolower(c: i32) -> i32 {
146 | |     match c {
147 | |         65..=90 => c + ('a' as i32 - 'A' as i32),
148 | |         _ => c,
149 | |     }
150 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
   --> src/c_ctype.rs:155:1
    |
155 | / pub fn c_toupper(c: i32) -> i32 {
156 | |     match c {
157 | |         97..=122 => c - ('a' as i32) + ('A' as i32),
158 | |         _ => c,
159 | |     }
160 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
  --> src/c_strcasecmp.rs:6:1
   |
6  | / fn c_tolower(c: i32) -> i32 {
7  | |     match c {
8  | |         65..=90 => c - 'A' as i32 + 'a' as i32,
9  | |         _ => c,
10 | |     }
11 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> src/c_strcasecmp.rs:26:16
   |
26 |         return s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> src/c_strcasecmp.rs:26:16
   |
26 |         return s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
  --> src/c_strcasecmp.rs:26:42
   |
26 |         return s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
  --> src/c_strcasecmp.rs:26:42
   |
26 |         return s1.len() as libc::c_int - s2.len() as libc::c_int;
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary structure name repetition
  --> src/close_stream.rs:31:22
   |
31 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/close_stream.rs:42:29
   |
42 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:52:50
   |
52 |     let some_pending: bool = unsafe { __fpending(stream) != 0 };
   |                                                  ^^^^^^
   |
   = note: `-W clippy::not-unsafe-ptr-arg-deref` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:53:52
   |
53 |     let prev_fail: bool = unsafe { ferror_unlocked(stream) != 0 };
   |                                                    ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/close_stream.rs:54:49
   |
54 |     let fclose_fail: bool = unsafe { rpl_fclose(stream) != 0 };
   |                                                 ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: unneeded `return` statement
  --> src/close_stream.rs:64:5
   |
64 |     return 0;
   |     ^^^^^^^^^ help: remove `return`: `0`
   |
   = note: `-W clippy::needless-return` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/closeout.rs:40:22
   |
40 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/closeout.rs:51:29
   |
51 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: docs for function which may panic missing `# Panics` section
  --> src/closeout.rs:65:1
   |
65 | / pub fn close_stdout_set_file_name(file: &str) {
66 | |     let c_string = std::ffi::CString::new(file).unwrap();
67 | |     unsafe {
68 | |         file_name = c_string.as_ptr();
69 | |         std::mem::forget(c_string); // Prevent CString from being dropped
70 | |     }
71 | | }
   | |_^
   |
   = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
note: first possible panic found here
  --> src/closeout.rs:66:20
   |
66 |     let c_string = std::ffi::CString::new(file).unwrap();
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:75:1
   |
75 | / pub unsafe extern "C" fn close_stdout_set_ignore_EPIPE(mut ignore: bool) {
76 | |     ignore_EPIPE = ignore;
77 | | }
   | |_^
   |
   = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/closeout.rs:79:1
    |
79  | / pub unsafe extern "C" fn close_stdout() {
80  | |     if close_stream(stdout) != 0 as libc::c_int
81  | |         && !(ignore_EPIPE as libc::c_int != 0
82  | |             && *__errno_location() == 32 as libc::c_int)
...   |
173 | |     }
174 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/closeout.rs:81:14
   |
81 |         && !(ignore_EPIPE as libc::c_int != 0
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ignore_EPIPE)`
   |
   = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:85:13
   |
85 |             b"write error\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
   |
   = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
   --> src/closeout.rs:87:9
    |
87  | /         if !file_name.is_null() {
88  | |             if 0 != 0 {
89  | |                 error(
90  | |                     0 as libc::c_int,
...   |
167 | |             };
168 | |         }
    | |_________^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:88:13
    |
88  | /             if 0 != 0 {
89  | |                 error(
90  | |                     0 as libc::c_int,
91  | |                     *__errno_location(),
...   |
127 | |                 });
128 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:88:16
   |
88 |             if 0 != 0 {
   |                ^^^^^^
   |
   = note: `-W clippy::eq-op` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:92:21
   |
92 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/closeout.rs:96:17
   |
96 | /                 if 0 as libc::c_int != 0 as libc::c_int {
97 | |                     unreachable!();
98 | |                 } else {};
   | |_________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:96:20
   |
96 |                 if 0 as libc::c_int != 0 as libc::c_int {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:101:21
    |
101 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:105:25
    |
105 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:109:21
    |
109 | /                     if __errstatus != 0 as libc::c_int {
110 | |                         unreachable!();
111 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:115:21
    |
115 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:119:25
    |
119 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:123:21
    |
123 | /                     if __errstatus != 0 as libc::c_int {
124 | |                         unreachable!();
125 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:130:13
    |
130 | /             if 0 != 0 {
131 | |                 error(
132 | |                     0 as libc::c_int,
133 | |                     *__errno_location(),
...   |
166 | |                 });
167 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:130:16
    |
130 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:134:21
    |
134 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:137:17
    |
137 | /                 if 0 as libc::c_int != 0 as libc::c_int {
138 | |                     unreachable!();
139 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:137:20
    |
137 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:142:21
    |
142 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:146:25
    |
146 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:149:21
    |
149 | /                     if __errstatus != 0 as libc::c_int {
150 | |                         unreachable!();
151 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:155:21
    |
155 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:159:25
    |
159 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:162:21
    |
162 | /                     if __errstatus != 0 as libc::c_int {
163 | |                         unreachable!();
164 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
   --> src/closeout.rs:171:8
    |
171 |     if SANITIZE_ADDRESS as libc::c_int == 0 && close_stream(stderr) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary structure name repetition
  --> src/fclose.rs:33:22
   |
33 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fclose.rs:44:29
   |
44 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item name ends with its containing module's name
  --> src/fclose.rs:53:1
   |
53 | / pub fn rpl_fclose(fp: &mut FILE) -> libc::c_int {
54 | |     let mut saved_errno: libc::c_int = 0;
55 | |     
56 | |     // Unsafe block to call unsafe functions
...  |
77 | |     result
78 | | }
   | |_^
   |
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unnecessary structure name repetition
  --> src/fflush.rs:33:22
   |
33 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fflush.rs:44:29
   |
44 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fflush.rs:54:17
   |
54 |     if unsafe { (*fp)._flags & 0x100 } != 0 {
   |                 ^^^^^^^^^^^^
   |
   = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: item name ends with its containing module's name
  --> src/fflush.rs:60:1
   |
60 | / pub fn rpl_fflush(stream: Option<&mut FILE>) -> libc::c_int {
61 | |     unsafe {
62 | |         if let Some(s) = stream {
63 | |             if __freading(s) != 0 {
...  |
70 | |     }
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: use Option::map_or_else instead of an if let/else
  --> src/fflush.rs:62:9
   |
62 | /         if let Some(s) = stream {
63 | |             if __freading(s) != 0 {
64 | |                 clear_ungetc_buffer_preserving_position(s);
65 | |             }
...  |
68 | |             fflush(std::ptr::null_mut())
69 | |         }
   | |_________^
   |
   = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
   |
62 ~         stream.map_or_else(|| fflush(std::ptr::null_mut()), |s| {
63 +             if __freading(s) != 0 {
64 +                 clear_ungetc_buffer_preserving_position(s);
65 +             }
66 +             fflush(s)
67 +         })
   |

warning: unnecessary structure name repetition
  --> src/fpurge.rs:28:22
   |
28 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fpurge.rs:39:29
   |
39 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this public function might dereference a raw pointer but is not marked `unsafe`
  --> src/fpurge.rs:50:18
   |
50 |         __fpurge(fp);
   |                  ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#not_unsafe_ptr_arg_deref

warning: unnecessary structure name repetition
  --> src/fseeko.rs:31:22
   |
31 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fseeko.rs:42:29
   |
42 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item name ends with its containing module's name
  --> src/fseeko.rs:52:1
   |
52 | / pub fn rpl_fseeko(
53 | |     fp: &mut FILE,
54 | |     offset: off_t,
55 | |     whence: libc::c_int,
...  |
73 | |     }
74 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/fseeko.rs:72:9
   |
72 |         return fseeko(fp, offset, whence);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fseeko(fp, offset, whence)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: used binding `_IO_read_end` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:57:8
   |
57 |     if fp._IO_read_end == fp._IO_read_ptr
   |        ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_read_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:57:27
   |
57 |     if fp._IO_read_end == fp._IO_read_ptr
   |                           ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:58:12
   |
58 |         && fp._IO_write_ptr == fp._IO_write_base && fp._IO_save_base.is_null()
   |            ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:58:32
   |
58 |         && fp._IO_write_ptr == fp._IO_write_base && fp._IO_save_base.is_null()
   |                                ^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_save_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:58:53
   |
58 |         && fp._IO_write_ptr == fp._IO_write_base && fp._IO_save_base.is_null()
   |                                                     ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fseeko.rs:64:19
   |
64 |         if pos == -(1 as libc::c_int) as libc::c_long {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:67:9
   |
67 |         fp._flags &= !(0x10 as libc::c_int);
   |         ^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_offset` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:68:9
   |
68 |         fp._offset = pos;
   |         ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: docs for function which may panic missing `# Panics` section
  --> src/full_read.rs:10:1
   |
10 | / pub fn full_read(
11 | |     fd: libc::c_int,
12 | |     buf: &mut [u8],
13 | | ) -> usize {
...  |
35 | |     total
36 | | }
   | |_^
   |
note: first possible panic found here
  --> src/full_read.rs:21:60
   |
21 |             n_rw = safe_read(fd, ptr as *mut libc::c_void, count.try_into().unwrap());
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: `as` casting between raw pointers without changing its mutability
  --> src/full_read.rs:21:34
   |
21 |             n_rw = safe_read(fd, ptr as *mut libc::c_void, count.try_into().unwrap());
   |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_read.rs:23:20
   |
23 |         if n_rw == !(0 as libc::c_int) as u64 {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/full_read.rs:30:22
   |
30 |             total += n_rw as usize;
   |                      ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/full_read.rs:31:36
   |
31 |             ptr = unsafe { ptr.add(n_rw as usize) };
   |                                    ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/full_read.rs:32:22
   |
32 |             count -= n_rw as usize;
   |                      ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unneeded `return` statement
  --> src/hard_locale.rs:30:5
   |
30 |     return true;
   |     ^^^^^^^^^^^^ help: remove `return`: `true`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:33:8
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |        ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:33:8
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |        ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:33:36
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |                                    ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:33:36
   |
33 |     if n as usize <= usize::MAX && s as usize <= usize::MAX {
   |                                    ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:34:29
   |
34 |         let mut nx: usize = n as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:34:29
   |
34 |         let mut nx: usize = n as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/ialloc.rs:35:29
   |
35 |         let mut sx: usize = s as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/ialloc.rs:35:29
   |
35 |         let mut sx: usize = s as usize;
   |                             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/ialloc.rs:80:8
   |
80 |     if s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::absurd-extreme-comparisons` implied by `-W clippy::all`
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/ialloc.rs:101:8
    |
101 |     if s as usize <= usize::MAX {
    |        ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/ialloc.rs:101:8
    |
101 |     if s as usize <= usize::MAX {
    |        ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/ialloc.rs:102:58
    |
102 |         let layout = std::alloc::Layout::from_size_align(s as usize, 1).ok()?;
    |                                                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/ialloc.rs:102:58
    |
102 |         let layout = std::alloc::Layout::from_size_align(s as usize, 1).ok()?;
    |                                                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/ialloc.rs:107:77
    |
107 |             Some(unsafe { Box::from_raw(std::slice::from_raw_parts_mut(ptr, s as usize)) })
    |                                                                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
   --> src/ialloc.rs:107:77
    |
107 |             Some(unsafe { Box::from_raw(std::slice::from_raw_parts_mut(ptr, s as usize)) })
    |                                                                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/ialloc.rs:118:1
    |
118 | / pub unsafe extern "C" fn _gl_alloc_nomem() -> *mut libc::c_void {
119 | |     *__errno_location() = 12 as libc::c_int;
120 | |     return 0 as *mut libc::c_void;
121 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/ialloc.rs:120:5
    |
120 |     return 0 as *mut libc::c_void;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/ialloc.rs:120:12
    |
120 |     return 0 as *mut libc::c_void;
    |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/localcharset.rs:395:65
    |
395 |     let codeset_ptr: *const libc::c_char = unsafe { nl_langinfo(CODESET as libc::c_int) };
    |                                                                 ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:39:68
   |
39 |     let bytes: &mut [u8] = unsafe { std::slice::from_raw_parts_mut(ps as *mut _ as *mut u8, size) };
   |                                                                    ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(ps as *mut _).cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/mbrtoc32.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_mbrtoc32(
51 | |     mut pwc: *mut char32_t,
52 | |     mut s: *const libc::c_char,
53 | |     mut n: size_t,
...  |
79 | |     return ret;
80 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/mbrtoc32.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_mbrtoc32(
51 | |     mut pwc: *mut char32_t,
52 | |     mut s: *const libc::c_char,
53 | |     mut n: size_t,
...  |
79 | |     return ret;
80 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mbrtoc32.rs:79:5
   |
79 |     return ret;
   |     ^^^^^^^^^^^ help: remove `return`: `ret`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/mbrtoc32.rs:57:15
   |
57 |         pwc = 0 as *mut char32_t;
   |               ^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<char32_t>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:58:13
   |
58 |         s = b"\0" as *const u8 as *const libc::c_char;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:59:13
   |
59 |         n = 1 as libc::c_int as size_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:65:14
   |
65 |     if ret < -(3 as libc::c_int) as size_t && mbsinit(ps) == 0 {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:68:15
   |
68 |     if ret == -(3 as libc::c_int) as size_t {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:71:8
   |
71 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:71:53
   |
71 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/mbrtoc32.rs:75:20
   |
75 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::from(*s as libc::c_uchar)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/mbrtoc32.rs:75:20
   |
75 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:77:16
   |
77 |         return 1 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/mbszero.rs:25:1
   |
25 | / pub unsafe extern "C" fn mbszero(mut ps: *mut mbstate_t) {
26 | |     memset(
27 | |         ps as *mut libc::c_void,
28 | |         0 as libc::c_int,
29 | |         ::core::mem::size_of::<mbstate_t>() as libc::c_ulong,
30 | |     );
31 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbszero.rs:27:9
   |
27 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `usize` to `isize` may wrap around the value
 --> src/offtostr.rs:7:17
  |
7 |     let mut p = buf.len() as isize - 1;
  |                 ^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `isize` to `usize` may lose the sign of the value
 --> src/offtostr.rs:8:9
  |
8 |     buf[p as usize] = 0;
  |         ^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/offtostr.rs:15:31
   |
15 |             buf[p as usize] = ('0' as i32 - (num % 10) as i32) as libc::c_char;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/offtostr.rs:15:17
   |
15 |             buf[p as usize] = ('0' as i32 - (num % 10) as i32) as libc::c_char;
   |                 ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/offtostr.rs:22:27
   |
22 |         buf[p as usize] = '-' as i32 as libc::c_char;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/offtostr.rs:22:13
   |
22 |         buf[p as usize] = '-' as i32 as libc::c_char;
   |             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/offtostr.rs:26:31
   |
26 |             buf[p as usize] = ('0' as i32 + (num % 10) as i32) as libc::c_char;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/offtostr.rs:26:17
   |
26 |             buf[p as usize] = ('0' as i32 + (num % 10) as i32) as libc::c_char;
   |                 ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/offtostr.rs:33:14
   |
33 |     &mut buf[p as usize..]
   |              ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary structure name repetition
  --> src/progname.rs:35:22
   |
35 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/progname.rs:46:29
   |
46 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/progname.rs:59:1
   |
59 | / pub unsafe extern "C" fn set_program_name(mut argv0: *const libc::c_char) {
60 | |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
61 | |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
62 | |     if argv0.is_null() {
...  |
95 | |     program_invocation_name = argv0 as *mut libc::c_char;
96 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `0 as *const _` detected
  --> src/progname.rs:60:42
   |
60 |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
  --> src/progname.rs:61:41
   |
61 |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:64:13
   |
64 | /             b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8
65 | |                 as *const libc::c_char,
   | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
  --> src/progname.rs:71:12
   |
71 |       base = if !slash.is_null() {
   |  ____________^
72 | |         slash.offset(1 as libc::c_int as isize)
73 | |     } else {
74 | |         argv0
75 | |     };
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/progname.rs:76:51
   |
76 |     if base.offset_from(argv0) as libc::c_long >= 7 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(7 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:79:13
   |
79 |             b"/.libs/\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/.libs/\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:80:13
   |
80 |             7 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:86:13
   |
86 |             b"lt-\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lt-\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:87:13
   |
87 |             3 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/propername_lite.rs:8:1
   |
8  | / pub unsafe extern "C" fn proper_name_lite(
9  | |     mut name_ascii: *const libc::c_char,
10 | |     mut name_utf8: *const libc::c_char,
11 | | ) -> *const libc::c_char {
...  |
23 | |     };
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/propername_lite.rs:13:5
   |
13 | /     return if translation != name_ascii {
14 | |         translation
15 | |     } else if c_strcasecmp(
16 | |         locale_charset(),
...  |
22 | |         name_ascii
23 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     if translation != name_ascii {
14 +         translation
15 +     } else if c_strcasecmp(
16 +         locale_charset(),
17 +         b"UTF-8\0" as *const u8 as *const libc::c_char,
18 +     ) == 0 as libc::c_int
19 +     {
20 +         name_utf8
21 +     } else {
22 +         name_ascii
23 +     }
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/propername_lite.rs:17:9
   |
17 |         b"UTF-8\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:162:5
    |
162 |     b"literal\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"literal\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:163:5
    |
163 |     b"shell\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:164:5
    |
164 |     b"shell-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:165:5
    |
165 |     b"shell-escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:166:5
    |
166 |     b"shell-escape-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:167:5
    |
167 |     b"c\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:168:5
    |
168 |     b"c-maybe\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c-maybe\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:169:5
    |
169 |     b"escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:170:5
    |
170 |     b"locale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"locale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:171:5
    |
171 |     b"clocale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"clocale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary closure used to substitute value for `Option::None`
   --> src/quotearg.rs:196:19
    |
196 |     let options = o.unwrap_or_else(|| unsafe { &default_quoting_options });
    |                   ^^------------------------------------------------------
    |                     |
    |                     help: use `unwrap_or(..)` instead: `unwrap_or(unsafe { &default_quoting_options })`
    |
    = note: `-W clippy::unnecessary-lazy-evaluations` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations

warning: using `clone` on type `src::quotearg::quoting_options` which implements the `Copy` trait
   --> src/quotearg.rs:197:5
    |
197 |     options.clone()
    |     ^^^^^^^^^^^^^^^ help: try dereferencing it: `*options`
    |
    = note: `-W clippy::clone-on-copy` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#clone_on_copy

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:236:13
    |
236 |     let r = (*p >> shift & 1) as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:237:11
    |
237 |     *p ^= ((i & 1 ^ r) << shift) as u32;
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/quotearg.rs:254:5
    |
254 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: docs for function which may panic missing `# Panics` section
   --> src/quotearg.rs:258:1
    |
258 | / pub fn set_custom_quoting(
259 | |     mut o: Option<&mut quoting_options>,
260 | |     left_quote: &str,
261 | |     right_quote: &str,
...   |
274 | |     o.right_quote = CString::new(right_quote).expect("CString::new failed").into_raw();
275 | | }
    | |_^
    |
note: first possible panic found here
   --> src/quotearg.rs:270:9
    |
270 |         panic!("Quotes cannot be null");
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unnecessary closure used to substitute value for `Option::None`
   --> src/quotearg.rs:263:13
    |
263 |       let o = o.get_or_insert_with(|| {
    |  _____________^
264 | |         // Create a mutable reference to the default quoting options
265 | |         unsafe { &mut default_quoting_options }
266 | |     });
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_lazy_evaluations
help: use `get_or_insert(..)` instead
    |
263 ~     let o = o.get_or_insert({
264 +         // Create a mutable reference to the default quoting options
265 +         unsafe { &mut default_quoting_options }
266 ~     });
    |

warning: only a `panic!` in `if`-then statement
   --> src/quotearg.rs:269:5
    |
269 | /     if left_quote.is_empty() || right_quote.is_empty() {
270 | |         panic!("Quotes cannot be null");
271 | |     }
    | |_____^ help: try: `assert!(!(left_quote.is_empty() || right_quote.is_empty()), "Quotes cannot be null");`
    |
    = note: `-W clippy::manual-assert` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert

warning: only a `panic!` in `if`-then statement
   --> src/quotearg.rs:278:5
    |
278 | /     if style == custom_quoting_style {
279 | |         panic!("Custom quoting style is not allowed");
280 | |     }
    | |_____^ help: try: `assert!(!(style == custom_quoting_style), "Custom quoting style is not allowed");`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert

warning: unneeded `return` statement
   --> src/quotearg.rs:318:9
    |
318 |         return "\"".to_string(); // Double quote
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `"\"".to_string()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/quotearg.rs:320:9
    |
320 |         return "'".to_string(); // Single quote
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `"'".to_string()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:292:44
    |
292 |     let translation_ptr = unsafe { gettext(msgid.as_ptr() as *const libc::c_char) };
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `msgid.as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: you should use the `starts_with` method
   --> src/quotearg.rs:302:19
    |
302 |         return if msgid.chars().next() == Some('`') {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `msgid.starts_with('`')`
    |
    = note: `-W clippy::chars-next-cmp` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp

warning: you should use the `starts_with` method
   --> src/quotearg.rs:310:19
    |
310 |         return if msgid.chars().next() == Some('`') {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: like this: `msgid.starts_with('`')`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#chars_next_cmp

warning: this boolean expression can be simplified
   --> src/quotearg.rs:829:28
    |
829 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `bytes != 0 as libc::c_int as libc::c_ulong`
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (122/25)
   --> src/quotearg.rs:324:22
    |
324 | unsafe extern "C" fn quotearg_buffer_restyled(
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (838/100)
    --> src/quotearg.rs:324:1
     |
324  | / unsafe extern "C" fn quotearg_buffer_restyled(
325  | |     mut buffer: *mut libc::c_char,
326  | |     mut buffersize: size_t,
327  | |     mut arg: *const libc::c_char,
...    |
1181 | |     };
1182 | | }
     | |_^
     |
     = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/quotearg.rs:1152:13
     |
1152 | /             return quotearg_buffer_restyled(
1153 | |                 buffer,
1154 | |                 buffersize,
1155 | |                 arg,
...    |
1161 | |                 right_quote,
1162 | |             );
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1152 ~             quotearg_buffer_restyled(
1153 +                 buffer,
1154 +                 buffersize,
1155 +                 arg,
1156 +                 argsize,
1157 +                 quoting_style,
1158 +                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1159 +                 0 as *const libc::c_uint,
1160 +                 left_quote,
1161 +                 right_quote,
1162 +             )
     |

warning: unneeded `return` statement
    --> src/quotearg.rs:1179:13
     |
1179 |             return len;
     |             ^^^^^^^^^^^ help: remove `return`: `len`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:338:27
    |
338 |     let mut len: size_t = 0 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:339:39
    |
339 |     let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:340:49
    |
340 |     let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:341:40
    |
341 |     let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:344:12
    |
344 |         == 1 as libc::c_int as libc::c_ulong;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:345:48
    |
345 |     let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:368:24
    |
368 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:368:24
    |
368 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:383:44
    |
383 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:383:44
    |
383 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:386:25
    |
386 |                         len;
    |                         ^^^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/quotearg.rs:388:25
    |
388 |                         quote_string;
    |                         ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:421:56
    |
421 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:421:40
    |
421 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:421:40
    |
421 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:424:21
    |
424 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:427:32
    |
427 |                 quote_string = b"\"\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:428:36
    |
428 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:437:9
    |
437 | /         match current_block_48 {
438 | |             2266290538919981374 => {
439 | |                 if !elide_outer_quotes {
440 | |                     backslash_escapes = 1 as libc::c_int != 0;
...   |
444 | |             _ => {}
445 | |         }
    | |_________^
    |
    = note: `-W clippy::single-match` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
437 ~         if current_block_48 == 2266290538919981374 {
438 +             if !elide_outer_quotes {
439 +                 backslash_escapes = 1 as libc::c_int != 0;
440 +             }
441 +             current_block_48 = 14141891332124833771;
442 +         }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:446:9
    |
446 | /         match current_block_48 {
447 | |             14141891332124833771 => {
448 | |                 quoting_style = shell_always_quoting_style;
449 | |                 if !elide_outer_quotes {
...   |
459 | |             _ => {}
460 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
446 ~         if current_block_48 == 14141891332124833771 {
447 +             quoting_style = shell_always_quoting_style;
448 +             if !elide_outer_quotes {
449 +                 if len < buffersize {
450 +                     *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
451 +                 }
452 +                 len = len.wrapping_add(1);
453 +                 len;
454 +             }
455 +             quote_string = b"'\0" as *const u8 as *const libc::c_char;
456 +             quote_string_len = 1 as libc::c_int as size_t;
457 +         }
    |

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:451:56
    |
451 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:451:40
    |
451 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:451:40
    |
451 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:454:21
    |
454 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:456:32
    |
456 |                 quote_string = b"'\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:457:36
    |
457 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:461:13
    |
461 |         i = 0 as libc::c_int as size_t;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:463:13
    |
463 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize) as libc::c_int == '\0' as i32)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:463:14
    |
463 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:463:26
    |
463 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:463:26
    |
463 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:465:13
    |
465 |             (i == argsize) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(i == argsize)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:473:16
    |
473 |             if backslash_escapes as libc::c_int != 0
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:475:24
    |
475 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:475:24
    |
475 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:484:21
    |
484 | /                         argsize
485 | |                     })
    | |_____________________^
    |
    = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
    = note: the end suggestion probably needs some adjustments to use the expression result correctly
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
484 ~                     }
485 ~                     argsize)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:479:28
    |
479 |                         && (1 as libc::c_int as libc::c_ulong) < quote_string_len
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:487:21
    |
487 |                     arg.offset(i as isize) as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.offset(i as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:487:32
    |
487 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:487:32
    |
487 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:488:21
    |
488 |                     quote_string as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `quote_string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:498:17
    |
498 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:498:29
    |
498 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:498:29
    |
498 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:499:19
    |
499 |             match c as libc::c_int {
    |                   ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:509:37
    |
509 |             unsafe { *buffer.offset(len as isize) = '\'' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:509:37
    |
509 |             unsafe { *buffer.offset(len as isize) = '\'' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:513:37
    |
513 |             unsafe { *buffer.offset(len as isize) = '$' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:513:37
    |
513 |             unsafe { *buffer.offset(len as isize) = '$' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:517:37
    |
517 |             unsafe { *buffer.offset(len as isize) = '\'' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:517:37
    |
517 |             unsafe { *buffer.offset(len as isize) = '\'' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:523:33
    |
523 |         unsafe { *buffer.offset(len as isize) = '\\' as i8 };
    |                                 ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:523:33
    |
523 |         unsafe { *buffer.offset(len as isize) = '\\' as i8 };
    |                                 ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:528:47
    |
528 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:528:47
    |
528 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:528:91
    |
528 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                                                                           ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:528:91
    |
528 |         && ('0' as i8 <= unsafe { *arg.offset((i + 1) as isize) } && unsafe { *arg.offset((i + 1) as isize) } <= '9' as i8)
    |                                                                                           ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:531:37
    |
531 |             unsafe { *buffer.offset(len as isize) = '0' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:531:37
    |
531 |             unsafe { *buffer.offset(len as isize) = '0' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:535:37
    |
535 |             unsafe { *buffer.offset(len as isize) = '0' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:535:37
    |
535 |             unsafe { *buffer.offset(len as isize) = '0' as i8 };
    |                                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:539:9
    |
539 |     c = '0' as u8;
    |         ^^^^^^^^^ help: use a byte literal instead: `b'0'`
    |
    = note: `-W clippy::char-lit-as-u8` implied by `-W clippy::all`
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:541:20
    |
541 | } else if (flags & QA_ELIDE_NULL_BYTES as i32) != 0 {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:560:48
    |
560 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:561:59
    |
561 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:563:44
    |
563 |   ...                   && *arg
    |  __________________________^
564 | | ...                       .offset(
565 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
566 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
563 ~                                         && i32::from(*arg
564 +                                             .offset(
565 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
566 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:565:49
    |
565 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:565:49
    |
565 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:565:64
    |
565 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:568:47
    |
568 |   ...                   match *arg
    |  _____________________________^
569 | | ...                       .offset(
570 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
571 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
568 ~                                         match i32::from(*arg
569 +                                             .offset(
570 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
571 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:570:49
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:570:49
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:570:64
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:578:53
    |
578 |   ...                   c = *arg
    |  ___________________________^
579 | | ...                       .offset(
580 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
581 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:580:57
    |
580 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:580:57
    |
580 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:580:72
    |
580 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:583:67
    |
583 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:586:84
    |
586 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:591:84
    |
591 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:596:84
    |
596 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:596:68
    |
596 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:596:68
    |
596 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:599:49
    |
599 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:601:84
    |
601 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:601:68
    |
601 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:601:68
    |
601 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:604:49
    |
604 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:623:48
    |
623 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:624:59
    |
624 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:626:44
    |
626 |   ...                   && *arg
    |  __________________________^
627 | | ...                       .offset(
628 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
629 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
626 ~                                         && i32::from(*arg
627 +                                             .offset(
628 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
629 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:628:49
    |
628 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:628:49
    |
628 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:628:64
    |
628 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:631:47
    |
631 |   ...                   match *arg
    |  _____________________________^
632 | | ...                       .offset(
633 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
634 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
631 ~                                         match i32::from(*arg
632 +                                             .offset(
633 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
634 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:633:49
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:633:49
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:633:64
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:641:53
    |
641 |   ...                   c = *arg
    |  ___________________________^
642 | | ...                       .offset(
643 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
644 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:643:57
    |
643 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:643:57
    |
643 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:643:72
    |
643 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:646:67
    |
646 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:649:84
    |
649 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:654:84
    |
654 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:659:84
    |
659 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:659:68
    |
659 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:659:68
    |
659 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:662:49
    |
662 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:664:84
    |
664 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:664:68
    |
664 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:664:68
    |
664 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:667:49
    |
667 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:682:27
    |
682 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:682:27
    |
682 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:686:27
    |
686 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:686:27
    |
686 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:690:27
    |
690 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:690:27
    |
690 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:694:27
    |
694 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:694:27
    |
694 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:698:27
    |
698 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:698:27
    |
698 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:702:27
    |
702 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:702:27
    |
702 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:706:27
    |
706 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:706:27
    |
706 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:726:25
    |
726 | /                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
727 | |                             == '\0' as i32) as libc::c_int
    | |__________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
726 ~                         i32::from(*arg.offset(1 as libc::c_int as isize) as libc::c_int
727 +                             == '\0' as i32)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:726:26
    |
726 |                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(1 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:729:25
    |
729 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(argsize == 1 as libc::c_int as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:729:37
    |
729 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:789:1
    |
789 | /     current_block = 253337042034819032;
790 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
789 + }
790 + current_block = 253337042034819032;
    |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:769:75
    |
769 |         let byte_buffer = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                                                                           ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:770:21
    |
770 |         byte_buffer[len as usize] = '\'' as i8;
    |                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:775:75
    |
775 |         let byte_buffer = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                                                                           ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:776:21
    |
776 |         byte_buffer[len as usize] = '\\' as i8;
    |                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:781:75
    |
781 |         let byte_buffer = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                                                                           ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:782:21
    |
782 |         byte_buffer[len as usize] = '\'' as i8;
    |                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `if _ { .. } else { .. }` is an expression
   --> src/quotearg.rs:804:21
    |
804 | /                     let mut printable: bool = false;
805 | |                     if unibyte_locale {
806 | |                         m = 1 as libc::c_int as size_t;
807 | |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
...   |
870 | |                         }
871 | |                     }
    | |_____________________^
    |
    = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
    |
804 ~                     let <mut> printable = if unibyte_locale { ..; *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
805 +                             as libc::c_int
806 +                             & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
807 +                             != 0 as libc::c_int } else { ..; false };
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:806:29
    |
806 |                         m = 1 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:807:37
    |
807 |                           printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |  _____________________________________^
808 | |                             as libc::c_int
    | |__________________________________________^ help: try: `i32::from(*(*__ctype_b_loc()).offset(c as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:807:64
    |
807 |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |                                                                ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:809:31
    |
809 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISprint as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/quotearg.rs:809:31
    |
809 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/quotearg.rs:809:31
    |
809 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:809:31
    |
809 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:817:29
    |
817 |                         m = 0 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:825:42
    |
825 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:825:42
    |
825 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:829:39
    |
829 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:830:41
    |
830 | ...                   if bytes == -(1 as libc::c_int) as size_t {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:832:48
    |
832 | ...                   } else if bytes == -(2 as libc::c_int) as size_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:835:40
    |
835 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i.wrapping_add(m) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:835:52
    |
835 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:835:52
    |
835 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:839:37
    |
839 | ...                   m;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:843:40
    |
843 | ...                   && elide_outer_quotes as libc::c_int != 0
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:845:44
    |
845 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:845:44
    |
845 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:848:41
    |
848 | ...                   j = 1 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:850:47
    |
850 |   ...                   match *arg
    |  _____________________________^
851 | | ...                       .offset(i.wrapping_add(m).wrapping_add(j) as isize)
852 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
850 ~                                         match i32::from(*arg
851 +                                             .offset(i.wrapping_add(m).wrapping_add(j) as isize))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:851:53
    |
851 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:851:53
    |
851 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:861:41
    |
861 | ...                   j;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:875:72
    |
875 |     let buffer_slice = unsafe { std::slice::from_raw_parts_mut(buffer, buffersize as usize) };
    |                                                                        ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:885:50
    |
885 |                     buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                                                  ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:885:34
    |
885 |                     buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:889:50
    |
889 |                     buffer_slice[len as usize] = b'$' as i8; // Add dollar sign
    |                                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:889:34
    |
889 |                     buffer_slice[len as usize] = b'$' as i8; // Add dollar sign
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:893:50
    |
893 |                     buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                                                  ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:893:34
    |
893 |                     buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:899:46
    |
899 |                 buffer_slice[len as usize] = b'\\' as i8; // Add backslash
    |                                              ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:899:30
    |
899 |                 buffer_slice[len as usize] = b'\\' as i8; // Add backslash
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:903:46
    |
903 |                 buffer_slice[len as usize] = ('0' as u8 + (c >> 6)) as i8; // Add first octet
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:903:47
    |
903 |                 buffer_slice[len as usize] = ('0' as u8 + (c >> 6)) as i8; // Add first octet
    |                                               ^^^^^^^^^ help: use a byte literal instead: `b'0'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:903:30
    |
903 |                 buffer_slice[len as usize] = ('0' as u8 + (c >> 6)) as i8; // Add first octet
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:907:46
    |
907 |                 buffer_slice[len as usize] = ('0' as u8 + ((c >> 3) & 7)) as i8; // Add second octet
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:907:47
    |
907 |                 buffer_slice[len as usize] = ('0' as u8 + ((c >> 3) & 7)) as i8; // Add second octet
    |                                               ^^^^^^^^^ help: use a byte literal instead: `b'0'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:907:30
    |
907 |                 buffer_slice[len as usize] = ('0' as u8 + ((c >> 3) & 7)) as i8; // Add second octet
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting a character literal to `u8` truncates
   --> src/quotearg.rs:910:18
    |
910 |             c = ('0' as u8 + (c & 7)) as u8; // Update c to last octet
    |                  ^^^^^^^^^ help: use a byte literal instead: `b'0'`
    |
    = note: `char` is four bytes wide, but `u8` is a single byte
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#char_lit_as_u8

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:913:46
    |
913 |                 buffer_slice[len as usize] = b'\\' as i8; // Add backslash
    |                                              ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:913:30
    |
913 |                 buffer_slice[len as usize] = b'\\' as i8; // Add backslash
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:923:46
    |
923 |                 buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                                              ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:923:30
    |
923 |                 buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:927:46
    |
927 |                 buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                                              ^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:927:30
    |
927 |                 buffer_slice[len as usize] = b'\'' as i8; // Add single quote
    |                              ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:933:42
    |
933 |             buffer_slice[len as usize] = c as i8; // Add current character
    |                                          ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:933:26
    |
933 |             buffer_slice[len as usize] = c as i8; // Add current character
    |                          ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:937:13
    |
937 |         c = unsafe { *arg.offset(i as isize) } as u8; // Update c to next character
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:937:34
    |
937 |         c = unsafe { *arg.offset(i as isize) } as u8; // Update c to next character
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:937:34
    |
937 |         c = unsafe { *arg.offset(i as isize) } as u8; // Update c to next character
    |                                  ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/quotearg.rs:948:21
    |
948 | /                     if i != 0 as libc::c_int as libc::c_ulong {
949 | |                         current_block = 253337042034819032;
950 | |                     } else {
951 | |                         current_block = 4634307283396172174;
952 | |                     }
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:948:29
    |
948 |                     if i != 0 as libc::c_int as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:956:28
    |
956 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:956:28
    |
956 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:957:28
    |
957 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:981:13
    |
981 | /             match current_block {
982 | |                 7549413860336125482 => {
983 | |                     current_block = 13059411171234995867;
984 | |                 }
985 | |                 _ => {}
986 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
981 ~             if current_block == 7549413860336125482 {
982 +                 current_block = 13059411171234995867;
983 +             }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:987:13
    |
987 | /             match current_block {
988 | |                 13059411171234995867 => {
989 | |                     current_block = 16620298045565028098;
990 | |                 }
991 | |                 _ => {}
992 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
987 ~             if current_block == 13059411171234995867 {
988 +                 current_block = 16620298045565028098;
989 +             }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:993:13
    |
993 | /             match current_block {
994 | |                 16620298045565028098 => {
995 | |                     current_block = 15155215915847730705;
996 | |                 }
997 | |                 _ => {}
998 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
993 ~             if current_block == 16620298045565028098 {
994 +                 current_block = 15155215915847730705;
995 +             }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:999:13
     |
999  | /             match current_block {
1000 | |                 15155215915847730705 => {
1001 | |                     if quoting_style as libc::c_uint
1002 | |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1010 | |                 _ => {}
1011 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
999  ~             if current_block == 15155215915847730705 {
1000 +                 if quoting_style as libc::c_uint
1001 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1002 +                     && elide_outer_quotes as libc::c_int != 0
1003 +                 {
1004 +                     current_block = 7928555609993211441;
1005 +                     break 's_25;
1006 +                 }
1007 +                 current_block = 253337042034819032;
1008 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1002:28
     |
1002 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1002:28
     |
1002 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1003:28
     |
1003 |                         && elide_outer_quotes as libc::c_int != 0
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1012:13
     |
1012 | /             match current_block {
1013 | |                 253337042034819032 => {
1014 | |                     if !((backslash_escapes as libc::c_int != 0
1015 | |                         && quoting_style as libc::c_uint
...    |
1039 | |                 _ => {}
1040 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1012 ~             if current_block == 253337042034819032 {
1013 +                 if !((backslash_escapes as libc::c_int != 0
1014 +                     && quoting_style as libc::c_uint
1015 +                         != shell_always_quoting_style as libc::c_int as libc::c_uint
1016 +                     || elide_outer_quotes as libc::c_int != 0)
1017 +                     && !quote_these_too.is_null()
1018 +                     && *quote_these_too
1019 +                         .offset(
1020 +                             (c as libc::c_ulong)
1021 +                                 .wrapping_div(
1022 +                                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1023 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1024 +                                 ) as isize,
1025 +                         )
1026 +                         >> (c as libc::c_ulong)
1027 +                             .wrapping_rem(
1028 +                                 (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1029 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1030 +                             ) & 1 as libc::c_int as libc::c_uint != 0)
1031 +                     && !is_right_quote
1032 +                 {
1033 +                     current_block = 4476262310586904498;
1034 +                 } else {
1035 +                     current_block = 3173013908131212616;
1036 +                 }
1037 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1014:27
     |
1014 |                     if !((backslash_escapes as libc::c_int != 0
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1016:32
     |
1016 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1016:32
     |
1016 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1017:28
     |
1017 |                         || elide_outer_quotes as libc::c_int != 0)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1021:33
     |
1021 | / ...                   (c as libc::c_ulong)
1022 | | ...                       .wrapping_div(
1023 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1024 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1025 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1021:33
     |
1021 | / ...                   (c as libc::c_ulong)
1022 | | ...                       .wrapping_div(
1023 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1024 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1025 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1021:33
     |
1021 | ...                   (c as libc::c_ulong)
     |                       ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1024:59
     |
1024 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1027:32
     |
1027 | ...                   >> (c as libc::c_ulong)
     |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1030:55
     |
1030 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1031:37
     |
1031 | ...                   ) & 1 as libc::c_int as libc::c_uint != 0)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1041:13
     |
1041 | /             match current_block {
1042 | |                 3173013908131212616 => {
1043 | |                     if elide_outer_quotes {
1044 | |                         current_block = 7928555609993211441;
...    |
1076 | |                 _ => {}
1077 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1041 ~             if current_block == 3173013908131212616 {
1042 +                 if elide_outer_quotes {
1043 +                     current_block = 7928555609993211441;
1044 +                     break 's_25;
1045 +                 }
1046 +                 escaping = 1 as libc::c_int != 0;
1047 +                 if quoting_style as libc::c_uint
1048 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1049 +                     && !pending_shell_escape_end
1050 +                 {
1051 +                     if len < buffersize {
1052 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1053 +                     }
1054 +                     len = len.wrapping_add(1);
1055 +                     len;
1056 +                     if len < buffersize {
1057 +                         *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
1058 +                     }
1059 +                     len = len.wrapping_add(1);
1060 +                     len;
1061 +                     if len < buffersize {
1062 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1063 +                     }
1064 +                     len = len.wrapping_add(1);
1065 +                     len;
1066 +                     pending_shell_escape_end = 1 as libc::c_int != 0;
1067 +                 }
1068 +                 if len < buffersize {
1069 +                     *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
1070 +                 }
1071 +                 len = len.wrapping_add(1);
1072 +                 len;
1073 +                 current_block = 4476262310586904498;
1074 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1049:28
     |
1049 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1049:28
     |
1049 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1053:60
     |
1053 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1053:44
     |
1053 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1053:44
     |
1053 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1056:25
     |
1056 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1058:60
     |
1058 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1058:44
     |
1058 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1058:44
     |
1058 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1061:25
     |
1061 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1063:60
     |
1063 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1063:44
     |
1063 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1063:44
     |
1063 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1066:25
     |
1066 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1070:56
     |
1070 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1070:40
     |
1070 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1070:40
     |
1070 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1073:21
     |
1073 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1078:13
     |
1078 | /             match current_block {
1079 | |                 4476262310586904498 => {
1080 | |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1081 | |                         if len < buffersize {
...    |
1102 | |                 _ => {}
1103 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1078 ~             if current_block == 4476262310586904498 {
1079 +                 if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1080 +                     if len < buffersize {
1081 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1082 +                     }
1083 +                     len = len.wrapping_add(1);
1084 +                     len;
1085 +                     if len < buffersize {
1086 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1087 +                     }
1088 +                     len = len.wrapping_add(1);
1089 +                     len;
1090 +                     pending_shell_escape_end = 0 as libc::c_int != 0;
1091 +                 }
1092 +                 if len < buffersize {
1093 +                     *buffer.offset(len as isize) = c as libc::c_char;
1094 +                 }
1095 +                 len = len.wrapping_add(1);
1096 +                 len;
1097 +                 if !c_and_shell_quote_compat {
1098 +                     all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
1099 +                 }
1100 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1080:24
     |
1080 |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1082:60
     |
1082 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1082:44
     |
1082 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1082:44
     |
1082 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1085:25
     |
1085 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1087:60
     |
1087 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1087:44
     |
1087 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1087:44
     |
1087 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1090:25
     |
1090 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
    --> src/quotearg.rs:1094:56
     |
1094 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1094:40
     |
1094 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1094:40
     |
1094 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1097:21
     |
1097 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1105:13
     |
1105 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1107:19
     |
1107 |         if len == 0 as libc::c_int as libc::c_ulong
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1109:20
     |
1109 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1109:20
     |
1109 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1110:16
     |
1110 |             && elide_outer_quotes as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1116:16
     |
1116 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1116:16
     |
1116 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1117:39
     |
1117 |             && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(encountered_single_quote)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1144:5
     |
1144 | /     match current_block {
1145 | |         7928555609993211441 => {
1146 | |             if quoting_style as libc::c_uint
1147 | |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1180 | |         }
1181 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1144 ~     if current_block == 7928555609993211441 {
1145 +         if quoting_style as libc::c_uint
1146 +             == shell_always_quoting_style as libc::c_int as libc::c_uint
1147 +             && backslash_escapes as libc::c_int != 0
1148 +         {
1149 +             quoting_style = shell_escape_always_quoting_style;
1150 +         }
1151 +         return quotearg_buffer_restyled(
1152 +             buffer,
1153 +             buffersize,
1154 +             arg,
1155 +             argsize,
1156 +             quoting_style,
1157 +             flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1158 +             0 as *const libc::c_uint,
1159 +             left_quote,
1160 +             right_quote,
1161 +         );
1162 +     } else {
1163 +         if !quote_string.is_null() && !elide_outer_quotes {
1164 +             while *quote_string != 0 {
1165 +                 if len < buffersize {
1166 +                     *buffer.offset(len as isize) = *quote_string;
1167 +                 }
1168 +                 len = len.wrapping_add(1);
1169 +                 len;
1170 +                 quote_string = quote_string.offset(1);
1171 +                 quote_string;
1172 +             }
1173 +         }
1174 +         if len < buffersize {
1175 +             *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
1176 +         }
1177 +         return len;
1178 ~     };
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1147:20
     |
1147 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1147:20
     |
1147 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1148:20
     |
1148 |                 && backslash_escapes as libc::c_int != 0
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1158:26
     |
1158 |                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *const _` detected
    --> src/quotearg.rs:1159:17
     |
1159 |                 0 as *const libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_uint>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1168:40
     |
1168 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1168:40
     |
1168 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1171:21
     |
1171 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1173:21
     |
1173 |                     quote_string;
     |                     ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1177:48
     |
1177 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1177:32
     |
1177 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1177:32
     |
1177 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1184:1
     |
1184 | / pub fn quotearg_buffer(
1185 | |     buffer: &mut [u8],
1186 | |     arg: &[u8],
1187 | |     o: Option<&quoting_options>,
...    |
1216 | |     r.try_into().unwrap() // Convert u64 to usize
1217 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1216:5
     |
1216 |     r.try_into().unwrap() // Convert u64 to usize
     |     ^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1184:1
     |
1184 | / pub fn quotearg_buffer(
1185 | |     buffer: &mut [u8],
1186 | |     arg: &[u8],
1187 | |     o: Option<&quoting_options>,
...    |
1216 | |     r.try_into().unwrap() // Convert u64 to usize
1217 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1203:13
     |
1203 |             buffer.as_mut_ptr() as *mut libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.as_mut_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1205:13
     |
1205 |             arg.as_ptr() as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1220:1
     |
1220 | / pub fn quotearg_alloc(
1221 | |     arg: &CStr,
1222 | |     argsize: usize,
1223 | |     o: &quoting_options,
...    |
1232 | |     unsafe { CString::from_raw(result_ptr) } // Convert the raw pointer to CString
1233 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1229:55
     |
1229 |         result_ptr = quotearg_alloc_mem(arg.as_ptr(), argsize.try_into().unwrap(), &mut size, o);
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1220:1
     |
1220 | / pub fn quotearg_alloc(
1221 | |     arg: &CStr,
1222 | |     argsize: usize,
1223 | |     o: &quoting_options,
...    |
1232 | |     unsafe { CString::from_raw(result_ptr) } // Convert the raw pointer to CString
1233 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1236:1
     |
1236 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1237 | |     mut arg: *const libc::c_char,
1238 | |     mut argsize: size_t,
1239 | |     mut size: *mut size_t,
...    |
1282 | |     return buf;
1283 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1236:1
     |
1236 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1237 | |     mut arg: *const libc::c_char,
1238 | |     mut argsize: size_t,
1239 | |     mut size: *mut size_t,
...    |
1282 | |     return buf;
1283 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1282:5
     |
1282 |     return buf;
     |     ^^^^^^^^^^^ help: remove `return`: `buf`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1242:41
     |
1242 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1243 | |         o
1244 | |     } else {
1245 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1246 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1245:9
     |
1245 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1249:11
     |
1249 |           | (if !size.is_null() {
     |  ___________^
1250 | |             0 as libc::c_int
1251 | |         } else {
1252 | |             QA_ELIDE_NULL_BYTES as libc::c_int
1253 | |         });
     | |__________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1252:13
     |
1252 |             QA_ELIDE_NULL_BYTES as libc::c_int
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1255:9
     |
1255 |         0 as *mut libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1256:9
     |
1256 |         0 as libc::c_int as size_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1265:23
     |
1265 |         .wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1280:38
     |
1280 |         *size = bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1292:9
     |
1288 | /         let mut init = slotvec {
1289 | |             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1290 | |             val: slot0.as_ptr() as *mut _,
1291 | |         };
     | |__________- unnecessary `let` binding
1292 |           init
     |           ^^^^
     |
     = note: `-W clippy::let-and-return` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1288 ~         
1289 ~         slotvec {
1290 +             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1291 +             val: slot0.as_ptr() as *mut _,
1292 +         }
     |

warning: borrow as raw pointer
    --> src/quotearg.rs:1296:5
     |
1296 |     &slotvec0 as *const slotvec as *mut slotvec
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1299:1
     |
1299 | / pub fn quotearg_free() {
1300 | |     unsafe {
1301 | |         let sv = Vec::from_raw_parts(slotvec, nslots as usize, nslots as usize);
1302 | |         for i in 1..nslots {
...    |
1317 | |     }
1318 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/quotearg.rs:1301:47
     |
1301 |         let sv = Vec::from_raw_parts(slotvec, nslots as usize, nslots as usize);
     |                                               ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/quotearg.rs:1301:64
     |
1301 |         let sv = Vec::from_raw_parts(slotvec, nslots as usize, nslots as usize);
     |                                                                ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: deref which would be done by auto-deref
    --> src/quotearg.rs:1303:23
     |
1303 |             let val = (*sv.get_unchecked(i as usize)).val;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try this: `sv.get_unchecked(i as usize)`
     |
     = note: `-W clippy::explicit-auto-deref` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/quotearg.rs:1303:42
     |
1303 |             let val = (*sv.get_unchecked(i as usize)).val;
     |                                          ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: deref which would be done by auto-deref
    --> src/quotearg.rs:1306:12
     |
1306 |         if (*sv.get_unchecked(0)).val != slot0.as_mut_ptr() {
     |            ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `sv.get_unchecked(0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref

warning: deref which would be done by auto-deref
    --> src/quotearg.rs:1307:23
     |
1307 |             let val = (*sv.get_unchecked(0)).val;
     |                       ^^^^^^^^^^^^^^^^^^^^^^ help: try this: `sv.get_unchecked(0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#explicit_auto_deref

warning: borrow as raw pointer
    --> src/quotearg.rs:1312:27
     |
1312 |         if sv.as_ptr() != &slotvec0 as *const _ as *mut _ {
     |                           ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unneeded `return` statement
    --> src/quotearg.rs:1397:5
     |
1397 |     return val;
     |     ^^^^^^^^^^^ help: remove `return`: `val`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1328:39
     |
1328 |       let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |  _______________________________________^
1329 | |         < 9223372036854775807 as libc::c_long
1330 | |     {
1331 | |         2147483647 as libc::c_int as libc::c_long
1332 | |     } else {
1333 | |         9223372036854775807 as libc::c_long
1334 | |     }) as libc::c_int;
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1328:43
     |
1328 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1331:9
     |
1331 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/quotearg.rs:1339:44
     |
1339 |         let mut preallocated: bool = sv == &mut slotvec0 as *mut slotvec;
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1340:37
     |
1340 |         let mut new_nslots: idx_t = nslots as idx_t;
     |                                     ^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1341:14
     |
1341 |           sv = xpalloc(
     |  ______________^
1342 | |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1343 | |                 as *mut libc::c_void,
1344 | |             &mut new_nslots,
...    |
1347 | |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1348 | |         ) as *mut slotvec;
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1341 ~         sv = xpalloc(
1342 +             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1343 +                 as *mut libc::c_void,
1344 +             &mut new_nslots,
1345 +             (n - nslots + 1 as libc::c_int) as idx_t,
1346 +             nslots_max as ptrdiff_t,
1347 +             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1348 ~         ).cast::<src::quotearg::slotvec>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1342:13
     |
1342 | /             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1343 | |                 as *mut libc::c_void,
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `(if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv }).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/quotearg.rs:1342:13
     |
1342 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1342:17
     |
1342 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(preallocated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1342:52
     |
1342 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                                                    ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<slotvec>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1345:13
     |
1345 |             (n - nslots + 1 as libc::c_int) as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n - nslots + 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1346:13
     |
1346 |             nslots_max as ptrdiff_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots_max)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/quotearg.rs:1347:13
     |
1347 |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1354:13
     |
1354 |             sv.offset(nslots as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.offset(nslots as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1356:13
     |
1356 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1356:28
     |
1356 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1359:18
     |
1359 |         nslots = new_nslots as libc::c_int;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1363:53
     |
1363 |     let mut flags: libc::c_int = (*options).flags | QA_ELIDE_NULL_BYTES as libc::c_int;
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1376:35
     |
1376 |         size = qsize.wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1379:18
     |
1379 |             free(val as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/quotearg.rs:1382:13
     |
1382 |         let ref mut fresh0 = (*sv.offset(n as isize)).val;
     |         ----^^^^^^^^^^^^^^-------------------------------- help: try: `let fresh0 = &mut (*sv.offset(n as isize)).val;`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1400:1
     |
1400 | / pub fn quotearg_n(n: i32, arg: &CStr) -> *mut libc::c_char {
1401 | |     unsafe {
1402 | |         let options = &default_quoting_options;
1403 | |         quotearg_n_options(
...    |
1409 | |     }
1410 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1413:1
     |
1413 | / pub fn quotearg_n_mem(
1414 | |     n: i32,
1415 | |     arg: &str,
1416 | | ) -> *mut libc::c_char {
...    |
1421 | |     }
1422 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1431:1
     |
1431 | / pub fn quotearg_mem(arg: &CStr) -> CString {
1432 | |     let arg_str = arg.to_str().expect("Failed to convert CStr to &str");
1433 | |     let result = quotearg_n_mem(0, arg_str);
1434 | |     unsafe { CString::from_raw(result) }
1435 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1438:1
     |
1438 | / pub fn quotearg_n_style(
1439 | |     n: i32,
1440 | |     s: quoting_style,
1441 | |     arg: &str,
...    |
1446 | |     }
1447 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1445:31
     |
1445 |         quotearg_n_options(n, arg.as_ptr() as *const libc::c_char, u64::MAX, &o)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1450:1
     |
1450 | / pub fn quotearg_n_style_mem(
1451 | |     n: i32,
1452 | |     s: quoting_style,
1453 | |     arg: &str,
...    |
1459 | |     }
1460 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1458:31
     |
1458 |         quotearg_n_options(n, arg.as_ptr() as *const libc::c_char, arg_len, &o)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_style(
1464 | |     mut s: quoting_style,
1465 | |     mut arg: *const libc::c_char,
1466 | | ) -> *mut libc::c_char {
1467 | |     let result = quotearg_n_style(0, s, std::ffi::CStr::from_ptr(arg).to_str().unwrap());
1468 | | return result;
1469 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_style(
1464 | |     mut s: quoting_style,
1465 | |     mut arg: *const libc::c_char,
1466 | | ) -> *mut libc::c_char {
1467 | |     let result = quotearg_n_style(0, s, std::ffi::CStr::from_ptr(arg).to_str().unwrap());
1468 | | return result;
1469 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1467:41
     |
1467 |     let result = quotearg_n_style(0, s, std::ffi::CStr::from_ptr(arg).to_str().unwrap());
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_style(
1464 | |     mut s: quoting_style,
1465 | |     mut arg: *const libc::c_char,
1466 | | ) -> *mut libc::c_char {
1467 | |     let result = quotearg_n_style(0, s, std::ffi::CStr::from_ptr(arg).to_str().unwrap());
1468 | | return result;
1469 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1468:1
     |
1468 | return result;
     | ^^^^^^^^^^^^^^ help: remove `return`: `result`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1471:1
     |
1471 | / pub fn quotearg_style_mem(
1472 | |     s: quoting_style,
1473 | |     arg: &CStr,
1474 | | ) -> CString {
...    |
1477 | |     unsafe { CString::from_raw(result) }
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1481:1
     |
1481 | / pub unsafe extern "C" fn quotearg_char_mem(
1482 | |     mut arg: *const libc::c_char,
1483 | |     mut argsize: size_t,
1484 | |     mut ch: libc::c_char,
...    |
1495 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1496 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1481:1
     |
1481 | / pub unsafe extern "C" fn quotearg_char_mem(
1482 | |     mut arg: *const libc::c_char,
1483 | |     mut argsize: size_t,
1484 | |     mut ch: libc::c_char,
...    |
1495 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1496 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1495:5
     |
1495 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
    --> src/quotearg.rs:1490:21
     |
1490 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1491:22
     |
1491 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i8` to `u8` may lose the sign of the value
    --> src/quotearg.rs:1494:42
     |
1494 |     set_char_quoting(Some(&mut options), ch as u8 as char, 1);
     |                                          ^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1495:63
     |
1495 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |                                                               ^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1498:1
     |
1498 | / pub fn quotearg_char(arg: &CStr, ch: char) -> *mut c_char {
1499 | |     let ch_as_c_char = ch as u8 as c_char;
1500 | |     unsafe { quotearg_char_mem(arg.as_ptr(), u64::MAX, ch_as_c_char) }
1501 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1504:1
     |
1504 | / pub fn quotearg_colon(arg: &CStr) -> CString {
1505 | |     let result_ptr = quotearg_char(arg, ':' as char);
1506 | |     unsafe { CString::from_raw(result_ptr) }
1507 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting to the same type is unnecessary (`char` -> `char`)
    --> src/quotearg.rs:1505:41
     |
1505 |     let result_ptr = quotearg_char(arg, ':' as char);
     |                                         ^^^^^^^^^^^ help: try: `':'`
     |
     = note: `-W clippy::unnecessary-cast` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1510:1
     |
1510 | / pub fn quotearg_colon_mem(arg: &str) -> String {
1511 | |     let argsize = arg.len() as u64;
1512 | |     let ch = ':' as i8;
1513 | |     let c_string = unsafe { quotearg_char_mem(arg.as_ptr() as *const libc::c_char, argsize, ch) };
1514 | |     unsafe { CString::from_raw(c_string).into_string().unwrap() }
1515 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1514:14
     |
1514 |     unsafe { CString::from_raw(c_string).into_string().unwrap() }
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1510:1
     |
1510 | / pub fn quotearg_colon_mem(arg: &str) -> String {
1511 | |     let argsize = arg.len() as u64;
1512 | |     let ch = ':' as i8;
1513 | |     let c_string = unsafe { quotearg_char_mem(arg.as_ptr() as *const libc::c_char, argsize, ch) };
1514 | |     unsafe { CString::from_raw(c_string).into_string().unwrap() }
1515 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1513:47
     |
1513 |     let c_string = unsafe { quotearg_char_mem(arg.as_ptr() as *const libc::c_char, argsize, ch) };
     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.as_ptr().cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1518:1
     |
1518 | / pub fn quotearg_n_style_colon(
1519 | |     n: i32,
1520 | |     s: quoting_style,
1521 | |     arg: &CStr,
...    |
1542 | |     unsafe { CString::from_raw(result) }
1543 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting to the same type is unnecessary (`char` -> `char`)
    --> src/quotearg.rs:1531:42
     |
1531 |     set_char_quoting(Some(&mut options), ':' as char, 1);
     |                                          ^^^^^^^^^^^ help: try: `':'`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1538:13
     |
1538 |             &mut options,
     |             ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1546:1
     |
1546 | / pub unsafe extern "C" fn quotearg_n_custom(
1547 | |     mut n: libc::c_int,
1548 | |     mut left_quote: *const libc::c_char,
1549 | |     mut right_quote: *const libc::c_char,
...    |
1558 | |     );
1559 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1546:1
     |
1546 | / pub unsafe extern "C" fn quotearg_n_custom(
1547 | |     mut n: libc::c_int,
1548 | |     mut left_quote: *const libc::c_char,
1549 | |     mut right_quote: *const libc::c_char,
...    |
1558 | |     );
1559 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1552:5
     |
1552 | /     return quotearg_n_custom_mem(
1553 | |         n,
1554 | |         left_quote,
1555 | |         right_quote,
1556 | |         arg,
1557 | |         18446744073709551615 as libc::c_ulong,
1558 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1552 ~     quotearg_n_custom_mem(
1553 +         n,
1554 +         left_quote,
1555 +         right_quote,
1556 +         arg,
1557 +         18446744073709551615 as libc::c_ulong,
1558 +     )
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1561:1
     |
1561 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1562 | |     mut n: libc::c_int,
1563 | |     mut left_quote: *const libc::c_char,
1564 | |     mut right_quote: *const libc::c_char,
...    |
1572 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1573 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1561:1
     |
1561 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1562 | |     mut n: libc::c_int,
1563 | |     mut left_quote: *const libc::c_char,
1564 | |     mut right_quote: *const libc::c_char,
...    |
1572 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1573 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1572:5
     |
1572 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1572:48
     |
1572 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |                                                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1575:1
     |
1575 | / pub fn quotearg_custom(
1576 | |     left_quote: &str,
1577 | |     right_quote: &str,
1578 | |     arg: &str,
...    |
1588 | |     unsafe { CStr::from_ptr(result).to_string_lossy().into_owned() }
1589 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1580:24
     |
1580 |     let left_quote_c = CString::new(left_quote).unwrap();
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1575:1
     |
1575 | / pub fn quotearg_custom(
1576 | |     left_quote: &str,
1577 | |     right_quote: &str,
1578 | |     arg: &str,
...    |
1588 | |     unsafe { CStr::from_ptr(result).to_string_lossy().into_owned() }
1589 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: docs for function which may panic missing `# Panics` section
    --> src/quotearg.rs:1592:1
     |
1592 | / pub fn quotearg_custom_mem(
1593 | |     left_quote: &CStr,
1594 | |     right_quote: &CStr,
1595 | |     arg: &CStr,
...    |
1607 | |     unsafe { CString::from_raw(result_ptr) }
1608 | | }
     | |_^
     |
note: first possible panic found here
    --> src/quotearg.rs:1604:13
     |
1604 |             argsize.try_into().unwrap(),
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1592:1
     |
1592 | / pub fn quotearg_custom_mem(
1593 | |     left_quote: &CStr,
1594 | |     right_quote: &CStr,
1595 | |     arg: &CStr,
...    |
1607 | |     unsafe { CString::from_raw(result_ptr) }
1608 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1619:5
     |
1612 | /     let mut init = quoting_options {
1613 | |         style: locale_quoting_style,
1614 | |         flags: 0 as libc::c_int,
1615 | |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1616 | |         left_quote: 0 as *const libc::c_char,
1617 | |         right_quote: 0 as *const libc::c_char,
1618 | |     };
     | |______- unnecessary `let` binding
1619 |       init
     |       ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1612 ~     
1613 ~     quoting_options {
1614 +         style: locale_quoting_style,
1615 +         flags: 0 as libc::c_int,
1616 +         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1617 +         left_quote: 0 as *const libc::c_char,
1618 +         right_quote: 0 as *const libc::c_char,
1619 +     }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1615:27
     |
1615 |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1628:5
     |
1627 |     let quoted = unsafe { quotearg_n_options(n, arg.as_ptr(), argsize, &quote_quoting_options) };
     |     --------------------------------------------------------------------------------------------- unnecessary `let` binding
1628 |     quoted
     |     ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1627 ~     
1628 ~     unsafe { quotearg_n_options(n, arg.as_ptr(), argsize, &quote_quoting_options) } as _
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1632:1
     |
1632 | / pub unsafe extern "C" fn quote_mem(
1633 | |     mut arg: *const libc::c_char,
1634 | |     mut argsize: size_t,
1635 | | ) -> *const libc::c_char {
1636 | |     let arg_cstr = CStr::from_ptr(arg);
1637 | | return quote_n_mem(0, arg_cstr);
1638 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1637:1
     |
1637 | return quote_n_mem(0, arg_cstr);
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(0, arg_cstr)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/safe_read.rs:19:40
   |
19 |         let result = unsafe { read(fd, buf.as_mut_ptr() as *mut libc::c_void, count) };
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.as_mut_ptr().cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/safe_read.rs:21:27
   |
21 |             total_read += result as usize;
   |                           ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
  --> src/safe_read.rs:21:27
   |
21 |             total_read += result as usize;
   |                           ^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/safe_read.rs:28:29
   |
28 |             if err == 22 && (SYS_BUFSIZE_MAX as libc::c_ulong) < count {
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(SYS_BUFSIZE_MAX)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_read.rs:29:25
   |
29 |                 count = SYS_BUFSIZE_MAX as libc::c_int as u64;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_read.rs:29:25
   |
29 |                 count = SYS_BUFSIZE_MAX as libc::c_int as u64;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: item name starts with its containing module's name
  --> src/setlocale_null.rs:16:1
   |
16 | / pub fn setlocale_null_r(
17 | |     category: libc::c_int,
18 | |     buf: &mut [u8],
19 | | ) -> libc::c_int {
...  |
25 | |     }
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/setlocale_null.rs:24:9
   |
24 |         return setlocale_null_r_unlocked(category, buf_ptr, bufsize);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_r_unlocked(category, buf_ptr, bufsize)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null.rs:21:19
   |
21 |     let buf_ptr = buf.as_mut_ptr() as *mut libc::c_char;
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.as_mut_ptr().cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:18:1
   |
18 | / pub unsafe extern "C" fn setlocale_null_unlocked(
19 | |     mut category: libc::c_int,
20 | | ) -> *const libc::c_char {
21 | |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
22 | |     return result;
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:22:5
   |
22 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/setlocale_null_unlocked.rs:21:63
   |
21 |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:39:9
   |
39 |         return 22; // EINVAL
   |         ^^^^^^^^^^ help: remove `return`: `22`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:45:13
   |
45 |             return 0; // Success
   |             ^^^^^^^^^ help: remove `return`: `0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:52:13
   |
52 |             return 34; // ERANGE
   |             ^^^^^^^^^^ help: remove `return`: `34`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
  --> src/setlocale_null_unlocked.rs:41:29
   |
41 |         let length: usize = unsafe { strlen(result) } as usize; // Cast to usize
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:43:79
   |
43 |             buf[..length].copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, length) });
   |                                                                               ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:49:88
   |
49 |                 buf[..copy_length].copy_from_slice(unsafe { std::slice::from_raw_parts(result as *const u8, copy_length) });
   |                                                                                        ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `usize` to `isize` may wrap around the value
 --> src/umaxtostr.rs:8:17
  |
8 |     let mut p = buf.len() as isize - 1;
  |                 ^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `isize` to `usize` may lose the sign of the value
 --> src/umaxtostr.rs:9:9
  |
9 |     buf[p as usize] = 0;
  |         ^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: all if blocks contain the same code at the start
  --> src/umaxtostr.rs:11:5
   |
11 | /     if i < 0 {
12 | |         let mut num = i;
   | |________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements before the if
   |
11 ~     let mut num = i;
12 +     if i < 0 {
   |

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/umaxtostr.rs:11:8
   |
11 |     if i < 0 {
   |        ^^^^^
   |
   = help: because `0` is the minimum value for this type, this comparison is always false
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `u64` to `i8` may truncate the value
  --> src/umaxtostr.rs:15:31
   |
15 |             buf[p as usize] = ('0' as i32 as uintmax_t).wrapping_sub(num % 10) as libc::c_char;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/umaxtostr.rs:15:31
   |
15 |             buf[p as usize] = ('0' as i32 as uintmax_t).wrapping_sub(num % 10) as libc::c_char;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/umaxtostr.rs:15:17
   |
15 |             buf[p as usize] = ('0' as i32 as uintmax_t).wrapping_sub(num % 10) as libc::c_char;
   |                 ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/umaxtostr.rs:22:27
   |
22 |         buf[p as usize] = '-' as i32 as libc::c_char;
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/umaxtostr.rs:22:13
   |
22 |         buf[p as usize] = '-' as i32 as libc::c_char;
   |             ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i8` may truncate the value
  --> src/umaxtostr.rs:27:31
   |
27 |             buf[p as usize] = ('0' as i32 as uintmax_t).wrapping_add(num % 10) as libc::c_char;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/umaxtostr.rs:27:31
   |
27 |             buf[p as usize] = ('0' as i32 as uintmax_t).wrapping_add(num % 10) as libc::c_char;
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/umaxtostr.rs:27:17
   |
27 |             buf[p as usize] = ('0' as i32 as uintmax_t).wrapping_add(num % 10) as libc::c_char;
   |                 ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/umaxtostr.rs:34:27
   |
34 |     let len = buf.len() - p as usize - 1;
   |                           ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/umaxtostr.rs:35:22
   |
35 |     let slice = &buf[p as usize..p as usize + len];
   |                      ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `usize` may lose the sign of the value
  --> src/umaxtostr.rs:35:34
   |
35 |     let slice = &buf[p as usize..p as usize + len];
   |                                  ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/umaxtostr.rs:36:52
   |
36 |     String::from_utf8_lossy(&slice.iter().map(|&c| c as u8).collect::<Vec<u8>>()).into_owned()
   |                                                    ^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
 --> src/version.rs:3:47
  |
3 |   pub static mut Version: *const libc::c_char = b"9.5.42-bbc97\0" as *const u8
  |  _______________________________________________^
4 | |     as *const libc::c_char;
  | |__________________________^ help: try `pointer::cast`, a safer alternative: `(b"9.5.42-bbc97\0" as *const u8).cast::<i8>()`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary structure name repetition
  --> src/version_etc.rs:45:22
   |
45 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/version_etc.rs:56:29
   |
56 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (174/100)
   --> src/version_etc.rs:67:1
    |
67  | / pub unsafe extern "C" fn version_etc_arn(
68  | |     mut stream: *mut FILE,
69  | |     mut command_name: *const libc::c_char,
70  | |     mut package: *const libc::c_char,
...   |
248 | |     };
249 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary boolean `not` operation
  --> src/version_etc.rs:75:5
   |
75 | /     if !command_name.is_null() {
76 | |         fprintf(
77 | |             stream,
78 | |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
...  |
89 | |         );
90 | |     }
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:78:13
   |
78 |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s (%s) %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:86:13
   |
86 |             b"%s %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:94:17
   |
94 |         gettext(b"(C)\0" as *const u8 as *const libc::c_char),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"(C)\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
  --> src/version_etc.rs:95:9
   |
95 |         COPYRIGHT_YEAR as libc::c_int,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:97:20
   |
97 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:101:13
    |
101 | /             b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere...
102 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:104:9
    |
104 |         b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://gnu.org/licenses/gpl.html\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:106:20
    |
106 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:112:25
    |
112 |                 gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:120:21
    |
120 |                     b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:130:21
    |
130 |                     b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:141:21
    |
141 | /                     b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
142 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:154:21
    |
154 | /                     b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
155 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:168:21
    |
168 | /                     b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
169 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:183:21
    |
183 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
184 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:199:21
    |
199 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
200 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:216:21
    |
216 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
217 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:234:21
    |
234 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
235 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:251:1
    |
251 | / pub unsafe extern "C" fn version_etc_ar(
252 | |     mut stream: *mut FILE,
253 | |     mut command_name: *const libc::c_char,
254 | |     mut package: *const libc::c_char,
...   |
264 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
265 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:251:1
    |
251 | / pub unsafe extern "C" fn version_etc_ar(
252 | |     mut stream: *mut FILE,
253 | |     mut command_name: *const libc::c_char,
254 | |     mut package: *const libc::c_char,
...   |
264 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
265 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:259:17
    |
259 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:260:29
    |
260 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/version_etc.rs:260:29
    |
260 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/version_etc.rs:262:9
    |
262 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:267:1
    |
267 | / pub unsafe extern "C" fn version_etc_va(
268 | |     mut stream: *mut FILE,
269 | |     mut command_name: *const libc::c_char,
270 | |     mut package: *const libc::c_char,
...   |
293 | |     );
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:267:1
    |
267 | / pub unsafe extern "C" fn version_etc_va(
268 | |     mut stream: *mut FILE,
269 | |     mut command_name: *const libc::c_char,
270 | |     mut package: *const libc::c_char,
...   |
293 | |     );
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/version_etc.rs:275:51
    |
275 |     let mut authtab: [*const libc::c_char; 10] = [0 as *const libc::c_char; 10];
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:276:17
    |
276 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:277:23
    |
277 |     while n_authors < 10 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:279:21
    |
279 |             authtab[n_authors as usize] = authors.arg::<*const libc::c_char>();
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:280:23
    |
280 |             !(authtab[n_authors as usize]).is_null()
    |                       ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
   --> src/version_etc.rs:284:9
    |
284 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:296:1
    |
296 | / pub unsafe extern "C" fn version_etc(
297 | |     mut stream: *mut FILE,
298 | |     mut command_name: *const libc::c_char,
299 | |     mut package: *const libc::c_char,
...   |
305 | |     version_etc_va(stream, command_name, package, version, authors.as_va_list());
306 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:17:5
   |
17 | /     if 0 != 0 {
18 | |         unsafe {
19 | |             error(
20 | |                 exit_failure,
...  |
54 | |         }
55 | |     }
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xalloc_die.rs:17:8
   |
17 |     if 0 != 0 {
   |        ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:22:17
   |
22 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:23:25
   |
23 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:35:17
   |
35 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:36:25
   |
36 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:48:17
   |
48 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:49:25
   |
49 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: non-binding `let` on a type that implements `Drop`
  --> src/xbinary_io.rs:30:5
   |
30 |     let _ = io::stdout().flush(); // Ensure any buffered output is flushed.
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::let-underscore-drop` implied by `-W clippy::pedantic`
   = help: consider using an underscore-prefixed named binding or dropping explicitly with `std::mem::drop`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_underscore_drop

warning: unneeded `return` statement
  --> src/xbinary_io.rs:39:1
   |
39 | return result;
   | ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/xbinary_io.rs:42:1
   |
42 | / fn __gl_setmode(fd: i32, mode: i32) -> i32 {
43 | |     return 0;
44 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/xbinary_io.rs:43:5
   |
43 |     return 0;
   |     ^^^^^^^^^ help: remove `return`: `0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/xdectoumax.rs:28:1
   |
28 | / pub unsafe extern "C" fn xdectoumax(
29 | |     mut n_str: *const libc::c_char,
30 | |     mut min: uintmax_t,
31 | |     mut max: uintmax_t,
...  |
36 | |     return xnumtoumax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
37 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/xdectoumax.rs:36:5
   |
36 |     return xnumtoumax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xnumtoumax(n_str, 10 as libc::c_int, min, max, suffixes, err, err_exit)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xdectoumax.rs:39:1
    |
39  | / pub unsafe extern "C" fn xnumtoumax(
40  | |     mut n_str: *const libc::c_char,
41  | |     mut base: libc::c_int,
42  | |     mut min: uintmax_t,
...   |
133 | |     return tnum;
134 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xdectoumax.rs:133:5
    |
133 |     return tnum;
    |     ^^^^^^^^^^^^ help: remove `return`: `tnum`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/xdectoumax.rs:50:31
   |
50 |     s_err = xstrtoumax(n_str, 0 as *mut *mut libc::c_char, base, &mut tnum, suffixes);
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:51:33
   |
51 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:51:33
   |
51 |     if s_err as libc::c_uint == LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xdectoumax.rs:54:23
   |
54 |             if tnum > (2147483647 as libc::c_int / 2 as libc::c_int) as libc::c_ulong {
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:60:40
   |
60 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:60:40
   |
60 |     } else if s_err as libc::c_uint == LONGINT_OVERFLOW as libc::c_int as libc::c_uint {
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:63:12
   |
63 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:63:12
   |
63 |         == LONGINT_INVALID_SUFFIX_CHAR_WITH_OVERFLOW as libc::c_int as libc::c_uint
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/xdectoumax.rs:67:33
   |
67 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/xdectoumax.rs:67:33
   |
67 |     if s_err as libc::c_uint != LONGINT_OK as libc::c_int as libc::c_uint {
   |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:68:9
    |
68  | /         if 0 != 0 {
69  | |             error(
70  | |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
71  | |                 if *__errno_location() == 22 as libc::c_int {
...   |
129 | |             });
130 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xdectoumax.rs:68:12
   |
68 |         if 0 != 0 {
   |            ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:70:17
   |
70 |                 if err_exit != 0 { err_exit } else { 1 as libc::c_int },
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoumax.rs:76:17
   |
76 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:80:13
   |
80 | /             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
81 | |                 != 0 as libc::c_int
82 | |             {
83 | |                 unreachable!();
84 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:80:16
   |
80 |             if (if err_exit != 0 { err_exit } else { 1 as libc::c_int })
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xdectoumax.rs:87:48
   |
87 |                   let __errstatus: libc::c_int = if err_exit != 0 {
   |  ________________________________________________^
88 | |                     err_exit
89 | |                 } else {
90 | |                     1 as libc::c_int
91 | |                 };
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/xdectoumax.rs:99:21
   |
99 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:103:17
    |
103 | /                 if __errstatus != 0 as libc::c_int {
104 | |                     unreachable!();
105 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:109:48
    |
109 |                   let __errstatus: libc::c_int = if err_exit != 0 {
    |  ________________________________________________^
110 | |                     err_exit
111 | |                 } else {
112 | |                     1 as libc::c_int
113 | |                 };
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/xdectoumax.rs:121:21
    |
121 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/xdectoumax.rs:125:17
    |
125 | /                 if __errstatus != 0 as libc::c_int {
126 | |                     unreachable!();
127 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:53:8
   |
53 |     if s <= usize::MAX {
   |        ^^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
  --> src/xmalloc.rs:55:9
   |
55 |         Box::into_raw(p.into_boxed_slice()) as *mut libc::c_void
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `Box::into_raw(p.into_boxed_slice()).cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:63:8
   |
63 |     if n > usize::MAX {
   |        ^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always false
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:69:8
   |
69 |     if s > usize::MAX {
   |        ^^^^^^^^^^^^^^
   |
   = help: because `usize::MAX` is the maximum value for this type, this comparison is always false
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
  --> src/xmalloc.rs:78:5
   |
78 |     Box::into_raw(boxed_slice) as *mut libc::c_void
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `Box::into_raw(boxed_slice).cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
  --> src/xmalloc.rs:92:13
   |
92 |             return p;
   |             ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:95:9
   |
95 |         return _gl_alloc_nomem();
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:83:8
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `18446744073709551615` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:83:8
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |        ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
  --> src/xmalloc.rs:83:44
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: because `18446744073709551615` is the maximum value for this type, this comparison is always true
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:83:44
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |                                            ^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:105:5
    |
105 |     0 as *mut libc::c_void
    |     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xmalloc.rs:110:8
    |
110 |     if s <= usize::MAX {
    |        ^^^^^^^^^^^^^^^
    |
    = help: because `usize::MAX` is the maximum value for this type, this comparison is always true
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:116:13
    |
116 |             ptr as *mut libc::c_void
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:131:1
    |
131 | / pub unsafe extern "C" fn xmalloc(mut s: size_t) -> *mut libc::c_void {
132 | |     return check_nonnull(malloc(s));
133 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:132:5
    |
132 |     return check_nonnull(malloc(s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(malloc(s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: calling `set_len()` immediately after reserving a buffer creates uninitialized values
   --> src/xmalloc.rs:147:9
    |
147 |         let mut vec = Vec::with_capacity(n);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
148 |         unsafe {
149 |             vec.set_len(n);
    |             ^^^^^^^^^^^^^^
    |
    = note: `-W clippy::uninit-vec` implied by `-W clippy::all`
    = help: initialize the buffer or wrap the content in `MaybeUninit`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec

warning: calling `set_len()` immediately after reserving a buffer creates uninitialized values
   --> src/xmalloc.rs:153:9
    |
153 |         let mut vec = Vec::with_capacity(n * mem::size_of::<libc::c_char>());
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
154 |         unsafe {
155 |             vec.set_len(n * mem::size_of::<libc::c_char>());
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: initialize the buffer or wrap the content in `MaybeUninit`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninit_vec

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:162:1
    |
162 | / pub unsafe extern "C" fn xrealloc(
163 | |     mut p: *mut libc::c_void,
164 | |     mut s: size_t,
165 | | ) -> *mut libc::c_void {
...   |
170 | |     return r;
171 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:170:5
    |
170 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:185:1
    |
185 | / pub unsafe extern "C" fn xreallocarray(
186 | |     mut p: *mut libc::c_void,
187 | |     mut n: size_t,
188 | |     mut s: size_t,
...   |
194 | |     return r;
195 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:194:5
    |
194 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xireallocarray(
198 | |     mut p: *mut libc::c_void,
199 | |     mut n: idx_t,
200 | |     mut s: idx_t,
...   |
203 | | return check_nonnull(result);
204 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:203:1
    |
203 | return check_nonnull(result);
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(result)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:206:1
    |
206 | / pub unsafe extern "C" fn xnmalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
207 | |     return xreallocarray(0 as *mut libc::c_void, n, s);
208 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:207:5
    |
207 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xreallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:207:26
    |
207 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:228:1
    |
228 | / pub unsafe extern "C" fn x2nrealloc(
229 | |     mut p: *mut libc::c_void,
230 | |     mut pn: *mut size_t,
231 | |     mut s: size_t,
...   |
253 | |     return p;
254 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:253:5
    |
253 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:236:17
    |
236 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:236:18
    |
236 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:238:31
    |
238 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:238:31
    |
238 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:244:54
    |
244 |                 (n >> 1 as libc::c_int).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xmalloc.rs:246:10
    |
246 |         *(&mut n as *mut size_t) = fresh0;
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:256:1
    |
256 | / pub unsafe extern "C" fn xpalloc(
257 | |     mut pa: *mut libc::c_void,
258 | |     mut pn: *mut idx_t,
259 | |     mut n_incr_min: idx_t,
...   |
960 | |     return pa;
961 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function has a cognitive complexity of (131/25)
   --> src/xmalloc.rs:256:26
    |
256 | pub unsafe extern "C" fn xpalloc(
    |                          ^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (698/100)
   --> src/xmalloc.rs:256:1
    |
256 | / pub unsafe extern "C" fn xpalloc(
257 | |     mut pa: *mut libc::c_void,
258 | |     mut pn: *mut idx_t,
259 | |     mut n_incr_min: idx_t,
...   |
960 | |     return pa;
961 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xmalloc.rs:960:5
    |
960 |     return pa;
    |     ^^^^^^^^^^ help: remove `return`: `pa`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: borrow as raw pointer
   --> src/xmalloc.rs:266:6
    |
266 |     *(&mut n as *mut idx_t) = fresh2;
    |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:270:8
    |
270 |     if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
   --> src/xmalloc.rs:274:38
    |
274 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
275 | |         < -(1 as libc::c_int) as idx_t
276 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
277 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
608 | |         }) as libc::c_ulong
609 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:274:38
    |
274 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
275 | |         < -(1 as libc::c_int) as idx_t
276 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
277 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
608 | |         }) as libc::c_ulong
609 | |     }) as idx_t;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:274:45
    |
274 |     let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:275:11
    |
275 |         < -(1 as libc::c_int) as idx_t
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:276:13
    |
276 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:276:41
    |
276 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:15
    |
277 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:51
    |
277 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:278:13
    |
278 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:278:41
    |
278 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:279:15
    |
279 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:279:51
    |
279 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:280:20
    |
280 |         && (if s < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:281:20
    |
281 |             if n < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:282:21
    |
282 |                   if ((if 1 as libc::c_int != 0 {
    |  _____________________^
283 | |                     0 as libc::c_int as libc::c_long
284 | |                 } else {
285 | |                     (if 1 as libc::c_int != 0 {
...   |
289 | |                     }) + s
290 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:283:21
    |
283 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:285:21
    |
285 | /                     (if 1 as libc::c_int != 0 {
286 | |                         0 as libc::c_int as libc::c_long
287 | |                     } else {
288 | |                         -(1 as libc::c_int) as idx_t
289 | |                     }) + s
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:286:25
    |
286 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:288:25
    |
288 |                         -(1 as libc::c_int) as idx_t
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:290:22
    |
290 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:290:58
    |
290 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:292:21
    |
292 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:292:26
    |
292 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:294:21
    |
294 | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
295 | |                         0 as libc::c_int as libc::c_long
296 | |                     } else {
297 | |                         s
...   |
359 | |                         -(1 as libc::c_int) as idx_t / -s
360 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |_________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
294 ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
295 +                         0 as libc::c_int as libc::c_long
296 +                     } else {
297 +                         s
298 +                     }) - 1 as libc::c_int as libc::c_long)
299 +                         < 0 as libc::c_int as libc::c_long
300 +                     {
301 +                         !(((((if 1 as libc::c_int != 0 {
302 +                             0 as libc::c_int as libc::c_long
303 +                         } else {
304 +                             s
305 +                         }) + 1 as libc::c_int as libc::c_long)
306 +                             << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
307 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
308 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
309 +                             - 1 as libc::c_int as libc::c_long)
310 +                             * 2 as libc::c_int as libc::c_long
311 +                             + 1 as libc::c_int as libc::c_long)
312 +                     } else {
313 +                         (if 1 as libc::c_int != 0 {
314 +                             0 as libc::c_int as libc::c_long
315 +                         } else {
316 +                             s
317 +                         }) + 0 as libc::c_int as libc::c_long
318 +                     }) < 0 as libc::c_int as libc::c_long
319 +                     {
320 +                         (s
321 +                             < -(if ((if 1 as libc::c_int != 0 {
322 +                                 0 as libc::c_int as libc::c_long
323 +                             } else {
324 +                                 s
325 +                             }) - 1 as libc::c_int as libc::c_long)
326 +                                 < 0 as libc::c_int as libc::c_long
327 +                             {
328 +                                 ((((if 1 as libc::c_int != 0 {
329 +                                     0 as libc::c_int as libc::c_long
330 +                                 } else {
331 +                                     s
332 +                                 }) + 1 as libc::c_int as libc::c_long)
333 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
334 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
335 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
336 +                                     - 1 as libc::c_int as libc::c_long)
337 +                                     * 2 as libc::c_int as libc::c_long
338 +                                     + 1 as libc::c_int as libc::c_long
339 +                             } else {
340 +                                 (if 1 as libc::c_int != 0 {
341 +                                     0 as libc::c_int as libc::c_long
342 +                                 } else {
343 +                                     s
344 +                                 }) - 1 as libc::c_int as libc::c_long
345 +                             })) as libc::c_int
346 +                     } else {
347 +                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
348 +                     }) != 0
349 +                     {
350 +                         (if 1 as libc::c_int != 0 {
351 +                             0 as libc::c_int as libc::c_long
352 +                         } else {
353 +                             s
354 +                         }) + -(1 as libc::c_int) as idx_t
355 +                             >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
356 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
357 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
358 +                     } else {
359 +                         -(1 as libc::c_int) as idx_t / -s
360 +                     }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:294:22
    |
294 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
295 | |                         0 as libc::c_int as libc::c_long
296 | |                     } else {
297 | |                         s
...   |
359 | |                         -(1 as libc::c_int) as idx_t / -s
360 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:294:35
    |
294 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
295 | |                         0 as libc::c_int as libc::c_long
296 | |                     } else {
297 | |                         s
298 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:295:25
    |
295 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:298:26
    |
298 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:299:27
    |
299 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:301:30
    |
301 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
302 | |                             0 as libc::c_int as libc::c_long
303 | |                         } else {
304 | |                             s
305 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:302:29
    |
302 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:305:30
    |
305 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:307:47
    |
307 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:308:47
    |
308 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:309:31
    |
309 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:310:31
    |
310 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:311:31
    |
311 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:313:25
    |
313 | /                         (if 1 as libc::c_int != 0 {
314 | |                             0 as libc::c_int as libc::c_long
315 | |                         } else {
316 | |                             s
317 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:314:29
    |
314 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:317:30
    |
317 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:318:26
    |
318 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:320:25
    |
320 | /                         (s
321 | |                             < -(if ((if 1 as libc::c_int != 0 {
322 | |                                 0 as libc::c_int as libc::c_long
323 | |                             } else {
...   |
344 | |                                 }) - 1 as libc::c_int as libc::c_long
345 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
320 ~                         i32::from(s
321 +                             < -(if ((if 1 as libc::c_int != 0 {
322 +                                 0 as libc::c_int as libc::c_long
323 +                             } else {
324 +                                 s
325 +                             }) - 1 as libc::c_int as libc::c_long)
326 +                                 < 0 as libc::c_int as libc::c_long
327 +                             {
328 +                                 ((((if 1 as libc::c_int != 0 {
329 +                                     0 as libc::c_int as libc::c_long
330 +                                 } else {
331 +                                     s
332 +                                 }) + 1 as libc::c_int as libc::c_long)
333 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
334 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
335 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
336 +                                     - 1 as libc::c_int as libc::c_long)
337 +                                     * 2 as libc::c_int as libc::c_long
338 +                                     + 1 as libc::c_int as libc::c_long
339 +                             } else {
340 +                                 (if 1 as libc::c_int != 0 {
341 +                                     0 as libc::c_int as libc::c_long
342 +                                 } else {
343 +                                     s
344 +                                 }) - 1 as libc::c_int as libc::c_long
345 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:321:37
    |
321 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
322 | | ...                       0 as libc::c_int as libc::c_long
323 | | ...                   } else {
324 | | ...                       s
325 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:322:33
    |
322 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:325:34
    |
325 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:326:35
    |
326 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:328:36
    |
328 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
329 | | ...                       0 as libc::c_int as libc::c_long
330 | | ...                   } else {
331 | | ...                       s
332 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:329:37
    |
329 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:332:38
    |
332 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:334:55
    |
334 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:335:55
    |
335 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:336:39
    |
336 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:337:39
    |
337 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:338:39
    |
338 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:340:33
    |
340 | / ...                   (if 1 as libc::c_int != 0 {
341 | | ...                       0 as libc::c_int as libc::c_long
342 | | ...                   } else {
343 | | ...                       s
344 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:341:37
    |
341 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:344:38
    |
344 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:347:25
    |
347 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:347:26
    |
347 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:350:25
    |
350 | /                         (if 1 as libc::c_int != 0 {
351 | |                             0 as libc::c_int as libc::c_long
352 | |                         } else {
353 | |                             s
354 | |                         }) + -(1 as libc::c_int) as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:351:29
    |
351 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:354:30
    |
354 |                         }) + -(1 as libc::c_int) as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:356:47
    |
356 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:357:47
    |
357 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:359:25
    |
359 |                         -(1 as libc::c_int) as idx_t / -s
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:360:27
    |
360 |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:363:29
    |
363 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
364 | |                     0 as libc::c_int as libc::c_long
365 | |                 } else {
366 | |                     (if 1 as libc::c_int != 0 {
...   |
370 | |                     }) + 0 as libc::c_int as idx_t
371 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:364:21
    |
364 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:366:21
    |
366 | /                     (if 1 as libc::c_int != 0 {
367 | |                         0 as libc::c_int as libc::c_long
368 | |                     } else {
369 | |                         s
370 | |                     }) + 0 as libc::c_int as idx_t
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:367:25
    |
367 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:370:26
    |
370 |                     }) + 0 as libc::c_int as idx_t
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:371:22
    |
371 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:371:58
    |
371 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:373:26
    |
373 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
374 | |                         0 as libc::c_int as libc::c_long
375 | |                     } else {
376 | |                         (if 1 as libc::c_int != 0 {
...   |
380 | |                         }) + 0 as libc::c_int as idx_t
381 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:374:25
    |
374 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:376:25
    |
376 | /                         (if 1 as libc::c_int != 0 {
377 | |                             0 as libc::c_int as libc::c_long
378 | |                         } else {
379 | |                             s
380 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:377:29
    |
377 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:380:30
    |
380 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:381:26
    |
381 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:383:43
    |
383 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:384:43
    |
384 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:385:27
    |
385 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:386:27
    |
386 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:387:27
    |
387 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:389:21
    |
389 | /                     (if 1 as libc::c_int != 0 {
390 | |                         0 as libc::c_int as libc::c_long
391 | |                     } else {
392 | |                         (if 1 as libc::c_int != 0 {
...   |
396 | |                         }) + 0 as libc::c_int as idx_t
397 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:390:25
    |
390 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:392:25
    |
392 | /                         (if 1 as libc::c_int != 0 {
393 | |                             0 as libc::c_int as libc::c_long
394 | |                         } else {
395 | |                             s
396 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:393:29
    |
393 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:396:30
    |
396 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:397:26
    |
397 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:398:22
    |
398 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:400:21
    |
400 | /                     (((if 1 as libc::c_int != 0 {
401 | |                         0 as libc::c_int as libc::c_long
402 | |                     } else {
403 | |                         s
...   |
440 | |                             }) - 1 as libc::c_int as libc::c_long
441 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
400 ~                     i32::from(((if 1 as libc::c_int != 0 {
401 +                         0 as libc::c_int as libc::c_long
402 +                     } else {
403 +                         s
404 +                     }) + 0 as libc::c_int as idx_t)
405 +                         < -(if ((if 1 as libc::c_int != 0 {
406 +                             0 as libc::c_int as libc::c_long
407 +                         } else {
408 +                             (if 1 as libc::c_int != 0 {
409 +                                 0 as libc::c_int as libc::c_long
410 +                             } else {
411 +                                 s
412 +                             }) + 0 as libc::c_int as idx_t
413 +                         }) - 1 as libc::c_int as libc::c_long)
414 +                             < 0 as libc::c_int as libc::c_long
415 +                         {
416 +                             ((((if 1 as libc::c_int != 0 {
417 +                                 0 as libc::c_int as libc::c_long
418 +                             } else {
419 +                                 (if 1 as libc::c_int != 0 {
420 +                                     0 as libc::c_int as libc::c_long
421 +                                 } else {
422 +                                     s
423 +                                 }) + 0 as libc::c_int as idx_t
424 +                             }) + 1 as libc::c_int as libc::c_long)
425 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
426 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
427 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
428 +                                 - 1 as libc::c_int as libc::c_long)
429 +                                 * 2 as libc::c_int as libc::c_long
430 +                                 + 1 as libc::c_int as libc::c_long
431 +                         } else {
432 +                             (if 1 as libc::c_int != 0 {
433 +                                 0 as libc::c_int as libc::c_long
434 +                             } else {
435 +                                 (if 1 as libc::c_int != 0 {
436 +                                     0 as libc::c_int as libc::c_long
437 +                                 } else {
438 +                                     s
439 +                                 }) + 0 as libc::c_int as idx_t
440 +                             }) - 1 as libc::c_int as libc::c_long
441 +                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:400:23
    |
400 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
401 | |                         0 as libc::c_int as libc::c_long
402 | |                     } else {
403 | |                         s
404 | |                     }) + 0 as libc::c_int as idx_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:401:25
    |
401 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:404:26
    |
404 |                     }) + 0 as libc::c_int as idx_t)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:405:33
    |
405 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
406 | |                             0 as libc::c_int as libc::c_long
407 | |                         } else {
408 | |                             (if 1 as libc::c_int != 0 {
...   |
412 | |                             }) + 0 as libc::c_int as idx_t
413 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:406:29
    |
406 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:408:29
    |
408 | / ...                   (if 1 as libc::c_int != 0 {
409 | | ...                       0 as libc::c_int as libc::c_long
410 | | ...                   } else {
411 | | ...                       s
412 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:409:33
    |
409 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:412:34
    |
412 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:413:30
    |
413 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:414:31
    |
414 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:416:32
    |
416 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
417 | | ...                       0 as libc::c_int as libc::c_long
418 | | ...                   } else {
419 | | ...                       (if 1 as libc::c_int != 0 {
...   |
423 | | ...                       }) + 0 as libc::c_int as idx_t
424 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:417:33
    |
417 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:419:33
    |
419 | / ...                   (if 1 as libc::c_int != 0 {
420 | | ...                       0 as libc::c_int as libc::c_long
421 | | ...                   } else {
422 | | ...                       s
423 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:420:37
    |
420 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:423:38
    |
423 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:424:34
    |
424 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:426:51
    |
426 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:427:51
    |
427 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:428:35
    |
428 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:429:35
    |
429 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:430:35
    |
430 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:432:29
    |
432 | / ...                   (if 1 as libc::c_int != 0 {
433 | | ...                       0 as libc::c_int as libc::c_long
434 | | ...                   } else {
435 | | ...                       (if 1 as libc::c_int != 0 {
...   |
439 | | ...                       }) + 0 as libc::c_int as idx_t
440 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:433:33
    |
433 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:435:33
    |
435 | / ...                   (if 1 as libc::c_int != 0 {
436 | | ...                       0 as libc::c_int as libc::c_long
437 | | ...                   } else {
438 | | ...                       s
439 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:436:37
    |
436 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:439:38
    |
439 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:440:34
    |
440 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:443:21
    |
443 | /                     ((0 as libc::c_int as libc::c_long)
444 | |                         < (if 1 as libc::c_int != 0 {
445 | |                             0 as libc::c_int as libc::c_long
446 | |                         } else {
447 | |                             s
448 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |______________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
443 ~                     i32::from((0 as libc::c_int as libc::c_long)
444 +                         < (if 1 as libc::c_int != 0 {
445 +                             0 as libc::c_int as libc::c_long
446 +                         } else {
447 +                             s
448 +                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:443:22
    |
443 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:444:27
    |
444 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
445 | |                             0 as libc::c_int as libc::c_long
446 | |                         } else {
447 | |                             s
448 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:445:29
    |
445 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:448:30
    |
448 |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:449:33
    |
449 |                 }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:451:25
    |
451 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
452 | |                         0 as libc::c_int as libc::c_long
453 | |                     } else {
454 | |                         n
455 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:452:25
    |
452 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:455:26
    |
455 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:456:27
    |
456 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:458:25
    |
458 | /                         ((0 as libc::c_int as libc::c_long)
459 | |                             < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
458 ~                         i32::from((0 as libc::c_int as libc::c_long)
459 +                             < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:458:26
    |
458 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:459:35
    |
459 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:461:25
    |
461 | /                         ((0 as libc::c_int as libc::c_long) < n
462 | |                             && (-(1 as libc::c_int) as libc::c_long
463 | |                                 - 0 as libc::c_int as idx_t)
464 | |                                 < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
461 ~                         i32::from((0 as libc::c_int as libc::c_long) < n
462 +                             && (-(1 as libc::c_int) as libc::c_long
463 +                                 - 0 as libc::c_int as idx_t)
464 +                                 < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:461:26
    |
461 |                         ((0 as libc::c_int as libc::c_long) < n
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:462:33
    |
462 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:463:35
    |
463 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:464:39
    |
464 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:467:21
    |
467 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:467:22
    |
467 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:471:21
    |
471 |             if s == 0 as libc::c_int as libc::c_long {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:474:24
    |
474 |                 if n < 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:475:33
    |
475 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
476 | |                         0 as libc::c_int as libc::c_long
477 | |                     } else {
478 | |                         (if 1 as libc::c_int != 0 {
...   |
482 | |                         }) + 0 as libc::c_int as idx_t
483 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:476:25
    |
476 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:478:25
    |
478 | /                         (if 1 as libc::c_int != 0 {
479 | |                             0 as libc::c_int as libc::c_long
480 | |                         } else {
481 | |                             n
482 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:479:29
    |
479 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:482:30
    |
482 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:483:26
    |
483 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:484:27
    |
484 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:486:30
    |
486 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
487 | |                             0 as libc::c_int as libc::c_long
488 | |                         } else {
489 | |                             (if 1 as libc::c_int != 0 {
...   |
493 | |                             }) + 0 as libc::c_int as idx_t
494 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:487:29
    |
487 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:489:29
    |
489 | / ...                   (if 1 as libc::c_int != 0 {
490 | | ...                       0 as libc::c_int as libc::c_long
491 | | ...                   } else {
492 | | ...                       n
493 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:490:33
    |
490 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:493:34
    |
493 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:494:30
    |
494 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:496:47
    |
496 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:497:47
    |
497 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:498:31
    |
498 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:499:31
    |
499 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:500:31
    |
500 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:502:25
    |
502 | /                         (if 1 as libc::c_int != 0 {
503 | |                             0 as libc::c_int as libc::c_long
504 | |                         } else {
505 | |                             (if 1 as libc::c_int != 0 {
...   |
509 | |                             }) + 0 as libc::c_int as idx_t
510 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:503:29
    |
503 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:505:29
    |
505 | / ...                   (if 1 as libc::c_int != 0 {
506 | | ...                       0 as libc::c_int as libc::c_long
507 | | ...                   } else {
508 | | ...                       n
509 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:506:33
    |
506 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:509:34
    |
509 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:510:30
    |
510 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:511:26
    |
511 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:513:25
    |
513 | /                         (((if 1 as libc::c_int != 0 {
514 | |                             0 as libc::c_int as libc::c_long
515 | |                         } else {
516 | |                             n
...   |
553 | |                                 }) - 1 as libc::c_int as libc::c_long
554 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
513 ~                         i32::from(((if 1 as libc::c_int != 0 {
514 +                             0 as libc::c_int as libc::c_long
515 +                         } else {
516 +                             n
517 +                         }) + 0 as libc::c_int as idx_t)
518 +                             < -(if ((if 1 as libc::c_int != 0 {
519 +                                 0 as libc::c_int as libc::c_long
520 +                             } else {
521 +                                 (if 1 as libc::c_int != 0 {
522 +                                     0 as libc::c_int as libc::c_long
523 +                                 } else {
524 +                                     n
525 +                                 }) + 0 as libc::c_int as idx_t
526 +                             }) - 1 as libc::c_int as libc::c_long)
527 +                                 < 0 as libc::c_int as libc::c_long
528 +                             {
529 +                                 ((((if 1 as libc::c_int != 0 {
530 +                                     0 as libc::c_int as libc::c_long
531 +                                 } else {
532 +                                     (if 1 as libc::c_int != 0 {
533 +                                         0 as libc::c_int as libc::c_long
534 +                                     } else {
535 +                                         n
536 +                                     }) + 0 as libc::c_int as idx_t
537 +                                 }) + 1 as libc::c_int as libc::c_long)
538 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
539 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
540 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
541 +                                     - 1 as libc::c_int as libc::c_long)
542 +                                     * 2 as libc::c_int as libc::c_long
543 +                                     + 1 as libc::c_int as libc::c_long
544 +                             } else {
545 +                                 (if 1 as libc::c_int != 0 {
546 +                                     0 as libc::c_int as libc::c_long
547 +                                 } else {
548 +                                     (if 1 as libc::c_int != 0 {
549 +                                         0 as libc::c_int as libc::c_long
550 +                                     } else {
551 +                                         n
552 +                                     }) + 0 as libc::c_int as idx_t
553 +                                 }) - 1 as libc::c_int as libc::c_long
554 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:513:27
    |
513 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
514 | |                             0 as libc::c_int as libc::c_long
515 | |                         } else {
516 | |                             n
517 | |                         }) + 0 as libc::c_int as idx_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:514:29
    |
514 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:517:30
    |
517 |                         }) + 0 as libc::c_int as idx_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:518:37
    |
518 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
519 | | ...                       0 as libc::c_int as libc::c_long
520 | | ...                   } else {
521 | | ...                       (if 1 as libc::c_int != 0 {
...   |
525 | | ...                       }) + 0 as libc::c_int as idx_t
526 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:519:33
    |
519 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:521:33
    |
521 | / ...                   (if 1 as libc::c_int != 0 {
522 | | ...                       0 as libc::c_int as libc::c_long
523 | | ...                   } else {
524 | | ...                       n
525 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:522:37
    |
522 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:525:38
    |
525 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:526:34
    |
526 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:527:35
    |
527 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:529:36
    |
529 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
530 | | ...                       0 as libc::c_int as libc::c_long
531 | | ...                   } else {
532 | | ...                       (if 1 as libc::c_int != 0 {
...   |
536 | | ...                       }) + 0 as libc::c_int as idx_t
537 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:530:37
    |
530 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:532:37
    |
532 | / ...                   (if 1 as libc::c_int != 0 {
533 | | ...                       0 as libc::c_int as libc::c_long
534 | | ...                   } else {
535 | | ...                       n
536 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:533:41
    |
533 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:536:42
    |
536 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:537:38
    |
537 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:539:55
    |
539 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:540:55
    |
540 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:541:39
    |
541 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:542:39
    |
542 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:543:39
    |
543 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:545:33
    |
545 | / ...                   (if 1 as libc::c_int != 0 {
546 | | ...                       0 as libc::c_int as libc::c_long
547 | | ...                   } else {
548 | | ...                       (if 1 as libc::c_int != 0 {
...   |
552 | | ...                       }) + 0 as libc::c_int as idx_t
553 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:546:37
    |
546 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:548:37
    |
548 | / ...                   (if 1 as libc::c_int != 0 {
549 | | ...                       0 as libc::c_int as libc::c_long
550 | | ...                   } else {
551 | | ...                       n
552 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:549:41
    |
549 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:552:42
    |
552 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:553:38
    |
553 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:556:25
    |
556 | /                         ((0 as libc::c_int as libc::c_long)
557 | |                             < (if 1 as libc::c_int != 0 {
558 | |                                 0 as libc::c_int as libc::c_long
559 | |                             } else {
560 | |                                 n
561 | |                             }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
556 ~                         i32::from((0 as libc::c_int as libc::c_long)
557 +                             < (if 1 as libc::c_int != 0 {
558 +                                 0 as libc::c_int as libc::c_long
559 +                             } else {
560 +                                 n
561 +                             }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:556:26
    |
556 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:557:31
    |
557 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
558 | | ...                       0 as libc::c_int as libc::c_long
559 | | ...                   } else {
560 | | ...                       n
561 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:558:33
    |
558 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:561:34
    |
561 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:562:37
    |
562 |                     }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:564:29
    |
564 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
565 | |                             0 as libc::c_int as libc::c_long
566 | |                         } else {
567 | |                             s
568 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:565:29
    |
565 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:568:30
    |
568 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:569:31
    |
569 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:571:29
    |
571 | / ...                   ((0 as libc::c_int as libc::c_long)
572 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
571 ~                             i32::from((0 as libc::c_int as libc::c_long)
572 +                                 < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:571:30
    |
571 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:572:39
    |
572 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:574:29
    |
574 | / ...                   ((-(1 as libc::c_int) as libc::c_long
575 | | ...                       - 0 as libc::c_int as idx_t)
576 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
574 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
575 +                                 - 0 as libc::c_int as idx_t)
576 +                                 < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:574:31
    |
574 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:575:35
    |
575 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:576:39
    |
576 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:579:25
    |
579 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:579:26
    |
579 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:582:21
    |
582 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:582:22
    |
582 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:588:10
    |
588 |         *(&mut nbytes as *mut idx_t) = fresh8;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:592:10
    |
592 |         *(&mut nbytes as *mut idx_t) = fresh10;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:593:9
    |
593 |         fresh11 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:596:12
    |
596 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:599:13
    |
599 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:604:9
    |
604 | /         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
605 | |             DEFAULT_MXFAST_0 as libc::c_int
606 | |         } else {
607 | |             0 as libc::c_int
608 | |         }) as libc::c_ulong
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:604:22
    |
604 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(DEFAULT_MXFAST_0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:604:22
    |
604 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:605:13
    |
605 |             DEFAULT_MXFAST_0 as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:615:15
    |
615 |         *pn = 0 as libc::c_int as idx_t;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:620:14
    |
620 |             *(&mut n as *mut idx_t) = fresh12;
    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:621:13
    |
621 |             fresh13 as libc::c_int != 0
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:622:20
    |
622 |                 || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:623:24
    |
623 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:623:54
    |
623 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:624:25
    |
624 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
625 | |                         0 as libc::c_int as libc::c_long
626 | |                     } else {
627 | |                         n
628 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:625:25
    |
625 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:628:26
    |
628 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:629:27
    |
629 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:630:25
    |
630 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
631 | |                         0 as libc::c_int as libc::c_long
632 | |                     } else {
633 | |                         s
634 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:631:25
    |
631 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:634:26
    |
634 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:635:27
    |
635 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:636:32
    |
636 |                     && (if s < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:637:32
    |
637 |                         if n < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:638:33
    |
638 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
639 | | ...                       0 as libc::c_int as libc::c_long
640 | | ...                   } else {
641 | | ...                       (if 1 as libc::c_int != 0 {
...   |
645 | | ...                       }) + s
646 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:639:33
    |
639 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:641:33
    |
641 | / ...                   (if 1 as libc::c_int != 0 {
642 | | ...                       0 as libc::c_int as libc::c_long
643 | | ...                   } else {
644 | | ...                       -(1 as libc::c_int) as idx_t
645 | | ...                   }) + s
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:642:37
    |
642 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:644:37
    |
644 | ...                   -(1 as libc::c_int) as idx_t
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:646:34
    |
646 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:647:35
    |
647 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:649:33
    |
649 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:649:38
    |
649 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:651:33
    |
651 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
652 | | ...                       0 as libc::c_int as libc::c_long
653 | | ...                   } else {
654 | | ...                       s
...   |
717 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
718 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
651 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
652 +                                     0 as libc::c_int as libc::c_long
653 +                                 } else {
654 +                                     s
655 +                                 }) - 1 as libc::c_int as libc::c_long)
656 +                                     < 0 as libc::c_int as libc::c_long
657 +                                 {
658 +                                     !(((((if 1 as libc::c_int != 0 {
659 +                                         0 as libc::c_int as libc::c_long
660 +                                     } else {
661 +                                         s
662 +                                     }) + 1 as libc::c_int as libc::c_long)
663 +                                         << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
664 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
665 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
666 +                                         - 1 as libc::c_int as libc::c_long)
667 +                                         * 2 as libc::c_int as libc::c_long
668 +                                         + 1 as libc::c_int as libc::c_long)
669 +                                 } else {
670 +                                     (if 1 as libc::c_int != 0 {
671 +                                         0 as libc::c_int as libc::c_long
672 +                                     } else {
673 +                                         s
674 +                                     }) + 0 as libc::c_int as libc::c_long
675 +                                 }) < 0 as libc::c_int as libc::c_long
676 +                                 {
677 +                                     (s
678 +                                         < -(if ((if 1 as libc::c_int != 0 {
679 +                                             0 as libc::c_int as libc::c_long
680 +                                         } else {
681 +                                             s
682 +                                         }) - 1 as libc::c_int as libc::c_long)
683 +                                             < 0 as libc::c_int as libc::c_long
684 +                                         {
685 +                                             ((((if 1 as libc::c_int != 0 {
686 +                                                 0 as libc::c_int as libc::c_long
687 +                                             } else {
688 +                                                 s
689 +                                             }) + 1 as libc::c_int as libc::c_long)
690 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
691 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
692 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
693 +                                                 - 1 as libc::c_int as libc::c_long)
694 +                                                 * 2 as libc::c_int as libc::c_long
695 +                                                 + 1 as libc::c_int as libc::c_long
696 +                                         } else {
697 +                                             (if 1 as libc::c_int != 0 {
698 +                                                 0 as libc::c_int as libc::c_long
699 +                                             } else {
700 +                                                 s
701 +                                             }) - 1 as libc::c_int as libc::c_long
702 +                                         })) as libc::c_int
703 +                                 } else {
704 +                                     ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
705 +                                 }) != 0
706 +                                 {
707 +                                     (if 1 as libc::c_int != 0 {
708 +                                         0 as libc::c_int as libc::c_long
709 +                                     } else {
710 +                                         s
711 +                                     }) + -(1 as libc::c_int) as idx_t
712 +                                         >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
713 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
714 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
715 +                                 } else {
716 +                                     -(1 as libc::c_int) as idx_t / -s
717 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:651:34
    |
651 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ________________________^
652 | | ...                       0 as libc::c_int as libc::c_long
653 | | ...                   } else {
654 | | ...                       s
...   |
716 | | ...                       -(1 as libc::c_int) as idx_t / -s
717 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:651:47
    |
651 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________________^
652 | | ...                       0 as libc::c_int as libc::c_long
653 | | ...                   } else {
654 | | ...                       s
655 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:652:37
    |
652 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:655:38
    |
655 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:656:39
    |
656 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:658:42
    |
658 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
659 | | ...                       0 as libc::c_int as libc::c_long
660 | | ...                   } else {
661 | | ...                       s
662 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:659:41
    |
659 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:662:42
    |
662 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:664:59
    |
664 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:665:59
    |
665 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:666:43
    |
666 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:667:43
    |
667 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:668:43
    |
668 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:670:37
    |
670 | / ...                   (if 1 as libc::c_int != 0 {
671 | | ...                       0 as libc::c_int as libc::c_long
672 | | ...                   } else {
673 | | ...                       s
674 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:671:41
    |
671 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:674:42
    |
674 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:675:38
    |
675 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:677:37
    |
677 | / ...                   (s
678 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
679 | | ...                           0 as libc::c_int as libc::c_long
680 | | ...                       } else {
...   |
701 | | ...                           }) - 1 as libc::c_int as libc::c_long
702 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
677 ~                                     i32::from(s
678 +                                         < -(if ((if 1 as libc::c_int != 0 {
679 +                                             0 as libc::c_int as libc::c_long
680 +                                         } else {
681 +                                             s
682 +                                         }) - 1 as libc::c_int as libc::c_long)
683 +                                             < 0 as libc::c_int as libc::c_long
684 +                                         {
685 +                                             ((((if 1 as libc::c_int != 0 {
686 +                                                 0 as libc::c_int as libc::c_long
687 +                                             } else {
688 +                                                 s
689 +                                             }) + 1 as libc::c_int as libc::c_long)
690 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
691 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
692 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
693 +                                                 - 1 as libc::c_int as libc::c_long)
694 +                                                 * 2 as libc::c_int as libc::c_long
695 +                                                 + 1 as libc::c_int as libc::c_long
696 +                                         } else {
697 +                                             (if 1 as libc::c_int != 0 {
698 +                                                 0 as libc::c_int as libc::c_long
699 +                                             } else {
700 +                                                 s
701 +                                             }) - 1 as libc::c_int as libc::c_long
702 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:678:49
    |
678 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
679 | | ...                       0 as libc::c_int as libc::c_long
680 | | ...                   } else {
681 | | ...                       s
682 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:679:45
    |
679 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:682:46
    |
682 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:683:47
    |
683 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:685:48
    |
685 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
686 | | ...                       0 as libc::c_int as libc::c_long
687 | | ...                   } else {
688 | | ...                       s
689 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:686:49
    |
686 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:689:50
    |
689 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:691:67
    |
691 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:692:67
    |
692 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:693:51
    |
693 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:694:51
    |
694 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:695:51
    |
695 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:697:45
    |
697 | / ...                   (if 1 as libc::c_int != 0 {
698 | | ...                       0 as libc::c_int as libc::c_long
699 | | ...                   } else {
700 | | ...                       s
701 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:698:49
    |
698 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:701:50
    |
701 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:704:37
    |
704 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:704:38
    |
704 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:707:37
    |
707 | / ...                   (if 1 as libc::c_int != 0 {
708 | | ...                       0 as libc::c_int as libc::c_long
709 | | ...                   } else {
710 | | ...                       s
711 | | ...                   }) + -(1 as libc::c_int) as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:708:41
    |
708 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:711:42
    |
711 | ...                   }) + -(1 as libc::c_int) as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:713:59
    |
713 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:714:59
    |
714 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:716:37
    |
716 | ...                   -(1 as libc::c_int) as idx_t / -s
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:717:39
    |
717 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:721:41
    |
721 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
722 | | ...                       0 as libc::c_int as libc::c_long
723 | | ...                   } else {
724 | | ...                       (if 1 as libc::c_int != 0 {
...   |
728 | | ...                       }) + 0 as libc::c_int as idx_t
729 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:722:33
    |
722 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:724:33
    |
724 | / ...                   (if 1 as libc::c_int != 0 {
725 | | ...                       0 as libc::c_int as libc::c_long
726 | | ...                   } else {
727 | | ...                       s
728 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:725:37
    |
725 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:728:38
    |
728 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:729:34
    |
729 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:730:35
    |
730 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:732:38
    |
732 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
733 | | ...                       0 as libc::c_int as libc::c_long
734 | | ...                   } else {
735 | | ...                       (if 1 as libc::c_int != 0 {
...   |
739 | | ...                       }) + 0 as libc::c_int as idx_t
740 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:733:37
    |
733 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:735:37
    |
735 | / ...                   (if 1 as libc::c_int != 0 {
736 | | ...                       0 as libc::c_int as libc::c_long
737 | | ...                   } else {
738 | | ...                       s
739 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:736:41
    |
736 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:739:42
    |
739 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:740:38
    |
740 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:742:55
    |
742 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:743:55
    |
743 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:744:39
    |
744 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:745:39
    |
745 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:746:39
    |
746 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:748:33
    |
748 | / ...                   (if 1 as libc::c_int != 0 {
749 | | ...                       0 as libc::c_int as libc::c_long
750 | | ...                   } else {
751 | | ...                       (if 1 as libc::c_int != 0 {
...   |
755 | | ...                       }) + 0 as libc::c_int as idx_t
756 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:749:37
    |
749 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:751:37
    |
751 | / ...                   (if 1 as libc::c_int != 0 {
752 | | ...                       0 as libc::c_int as libc::c_long
753 | | ...                   } else {
754 | | ...                       s
755 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:752:41
    |
752 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:755:42
    |
755 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:756:38
    |
756 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:757:34
    |
757 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:759:33
    |
759 | / ...                   (((if 1 as libc::c_int != 0 {
760 | | ...                       0 as libc::c_int as libc::c_long
761 | | ...                   } else {
762 | | ...                       s
...   |
799 | | ...                           }) - 1 as libc::c_int as libc::c_long
800 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
759 ~                                 i32::from(((if 1 as libc::c_int != 0 {
760 +                                     0 as libc::c_int as libc::c_long
761 +                                 } else {
762 +                                     s
763 +                                 }) + 0 as libc::c_int as idx_t)
764 +                                     < -(if ((if 1 as libc::c_int != 0 {
765 +                                         0 as libc::c_int as libc::c_long
766 +                                     } else {
767 +                                         (if 1 as libc::c_int != 0 {
768 +                                             0 as libc::c_int as libc::c_long
769 +                                         } else {
770 +                                             s
771 +                                         }) + 0 as libc::c_int as idx_t
772 +                                     }) - 1 as libc::c_int as libc::c_long)
773 +                                         < 0 as libc::c_int as libc::c_long
774 +                                     {
775 +                                         ((((if 1 as libc::c_int != 0 {
776 +                                             0 as libc::c_int as libc::c_long
777 +                                         } else {
778 +                                             (if 1 as libc::c_int != 0 {
779 +                                                 0 as libc::c_int as libc::c_long
780 +                                             } else {
781 +                                                 s
782 +                                             }) + 0 as libc::c_int as idx_t
783 +                                         }) + 1 as libc::c_int as libc::c_long)
784 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
785 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
786 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
787 +                                             - 1 as libc::c_int as libc::c_long)
788 +                                             * 2 as libc::c_int as libc::c_long
789 +                                             + 1 as libc::c_int as libc::c_long
790 +                                     } else {
791 +                                         (if 1 as libc::c_int != 0 {
792 +                                             0 as libc::c_int as libc::c_long
793 +                                         } else {
794 +                                             (if 1 as libc::c_int != 0 {
795 +                                                 0 as libc::c_int as libc::c_long
796 +                                             } else {
797 +                                                 s
798 +                                             }) + 0 as libc::c_int as idx_t
799 +                                         }) - 1 as libc::c_int as libc::c_long
800 +                                     }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:759:35
    |
759 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
760 | | ...                       0 as libc::c_int as libc::c_long
761 | | ...                   } else {
762 | | ...                       s
763 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:760:37
    |
760 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:763:38
    |
763 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:764:45
    |
764 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
765 | | ...                       0 as libc::c_int as libc::c_long
766 | | ...                   } else {
767 | | ...                       (if 1 as libc::c_int != 0 {
...   |
771 | | ...                       }) + 0 as libc::c_int as idx_t
772 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:765:41
    |
765 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:767:41
    |
767 | / ...                   (if 1 as libc::c_int != 0 {
768 | | ...                       0 as libc::c_int as libc::c_long
769 | | ...                   } else {
770 | | ...                       s
771 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:768:45
    |
768 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:771:46
    |
771 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:772:42
    |
772 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:773:43
    |
773 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:775:44
    |
775 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
776 | | ...                       0 as libc::c_int as libc::c_long
777 | | ...                   } else {
778 | | ...                       (if 1 as libc::c_int != 0 {
...   |
782 | | ...                       }) + 0 as libc::c_int as idx_t
783 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:776:45
    |
776 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:778:45
    |
778 | / ...                   (if 1 as libc::c_int != 0 {
779 | | ...                       0 as libc::c_int as libc::c_long
780 | | ...                   } else {
781 | | ...                       s
782 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:779:49
    |
779 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:782:50
    |
782 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:783:46
    |
783 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:785:63
    |
785 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:786:63
    |
786 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:787:47
    |
787 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:788:47
    |
788 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:789:47
    |
789 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:791:41
    |
791 | / ...                   (if 1 as libc::c_int != 0 {
792 | | ...                       0 as libc::c_int as libc::c_long
793 | | ...                   } else {
794 | | ...                       (if 1 as libc::c_int != 0 {
...   |
798 | | ...                       }) + 0 as libc::c_int as idx_t
799 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:792:45
    |
792 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:794:45
    |
794 | / ...                   (if 1 as libc::c_int != 0 {
795 | | ...                       0 as libc::c_int as libc::c_long
796 | | ...                   } else {
797 | | ...                       s
798 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:795:49
    |
795 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:798:50
    |
798 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:799:46
    |
799 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:802:33
    |
802 | / ...                   ((0 as libc::c_int as libc::c_long)
803 | | ...                       < (if 1 as libc::c_int != 0 {
804 | | ...                           0 as libc::c_int as libc::c_long
805 | | ...                       } else {
806 | | ...                           s
807 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
802 ~                                 i32::from((0 as libc::c_int as libc::c_long)
803 +                                     < (if 1 as libc::c_int != 0 {
804 +                                         0 as libc::c_int as libc::c_long
805 +                                     } else {
806 +                                         s
807 +                                     }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:802:34
    |
802 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:803:39
    |
803 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
804 | | ...                       0 as libc::c_int as libc::c_long
805 | | ...                   } else {
806 | | ...                       s
807 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:804:41
    |
804 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:807:42
    |
807 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:808:45
    |
808 | ...                   }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:810:37
    |
810 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
811 | | ...                       0 as libc::c_int as libc::c_long
812 | | ...                   } else {
813 | | ...                       n
814 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:811:37
    |
811 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:814:38
    |
814 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:815:39
    |
815 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:817:37
    |
817 | / ...                   ((0 as libc::c_int as libc::c_long)
818 | | ...                       < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
817 ~                                     i32::from((0 as libc::c_int as libc::c_long)
818 +                                         < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:817:38
    |
817 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:818:47
    |
818 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:820:37
    |
820 | / ...                   ((0 as libc::c_int as libc::c_long) < n
821 | | ...                       && (-(1 as libc::c_int) as libc::c_long
822 | | ...                           - 0 as libc::c_int as idx_t)
823 | | ...                           < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |____________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
820 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n
821 +                                         && (-(1 as libc::c_int) as libc::c_long
822 +                                             - 0 as libc::c_int as idx_t)
823 +                                             < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:820:38
    |
820 | ...                   ((0 as libc::c_int as libc::c_long) < n
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:821:45
    |
821 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:822:47
    |
822 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:823:51
    |
823 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:826:33
    |
826 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:826:34
    |
826 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:830:33
    |
830 |                         if s == 0 as libc::c_int as libc::c_long {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:833:36
    |
833 | ...                   if n < 0 as libc::c_int as libc::c_long {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:834:45
    |
834 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
835 | | ...                       0 as libc::c_int as libc::c_long
836 | | ...                   } else {
837 | | ...                       (if 1 as libc::c_int != 0 {
...   |
841 | | ...                       }) + 0 as libc::c_int as idx_t
842 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:835:37
    |
835 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:837:37
    |
837 | / ...                   (if 1 as libc::c_int != 0 {
838 | | ...                       0 as libc::c_int as libc::c_long
839 | | ...                   } else {
840 | | ...                       n
841 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:838:41
    |
838 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:841:42
    |
841 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:842:38
    |
842 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:843:39
    |
843 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:845:42
    |
845 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
846 | | ...                       0 as libc::c_int as libc::c_long
847 | | ...                   } else {
848 | | ...                       (if 1 as libc::c_int != 0 {
...   |
852 | | ...                       }) + 0 as libc::c_int as idx_t
853 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:846:41
    |
846 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:848:41
    |
848 | / ...                   (if 1 as libc::c_int != 0 {
849 | | ...                       0 as libc::c_int as libc::c_long
850 | | ...                   } else {
851 | | ...                       n
852 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:849:45
    |
849 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:852:46
    |
852 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:853:42
    |
853 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:855:59
    |
855 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:856:59
    |
856 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:857:43
    |
857 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:858:43
    |
858 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:859:43
    |
859 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:861:37
    |
861 | / ...                   (if 1 as libc::c_int != 0 {
862 | | ...                       0 as libc::c_int as libc::c_long
863 | | ...                   } else {
864 | | ...                       (if 1 as libc::c_int != 0 {
...   |
868 | | ...                       }) + 0 as libc::c_int as idx_t
869 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:862:41
    |
862 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:864:41
    |
864 | / ...                   (if 1 as libc::c_int != 0 {
865 | | ...                       0 as libc::c_int as libc::c_long
866 | | ...                   } else {
867 | | ...                       n
868 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:865:45
    |
865 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:868:46
    |
868 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:869:42
    |
869 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:870:38
    |
870 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:872:37
    |
872 | / ...                   (((if 1 as libc::c_int != 0 {
873 | | ...                       0 as libc::c_int as libc::c_long
874 | | ...                   } else {
875 | | ...                       n
...   |
912 | | ...                           }) - 1 as libc::c_int as libc::c_long
913 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
872 ~                                     i32::from(((if 1 as libc::c_int != 0 {
873 +                                         0 as libc::c_int as libc::c_long
874 +                                     } else {
875 +                                         n
876 +                                     }) + 0 as libc::c_int as idx_t)
877 +                                         < -(if ((if 1 as libc::c_int != 0 {
878 +                                             0 as libc::c_int as libc::c_long
879 +                                         } else {
880 +                                             (if 1 as libc::c_int != 0 {
881 +                                                 0 as libc::c_int as libc::c_long
882 +                                             } else {
883 +                                                 n
884 +                                             }) + 0 as libc::c_int as idx_t
885 +                                         }) - 1 as libc::c_int as libc::c_long)
886 +                                             < 0 as libc::c_int as libc::c_long
887 +                                         {
888 +                                             ((((if 1 as libc::c_int != 0 {
889 +                                                 0 as libc::c_int as libc::c_long
890 +                                             } else {
891 +                                                 (if 1 as libc::c_int != 0 {
892 +                                                     0 as libc::c_int as libc::c_long
893 +                                                 } else {
894 +                                                     n
895 +                                                 }) + 0 as libc::c_int as idx_t
896 +                                             }) + 1 as libc::c_int as libc::c_long)
897 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
898 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
899 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
900 +                                                 - 1 as libc::c_int as libc::c_long)
901 +                                                 * 2 as libc::c_int as libc::c_long
902 +                                                 + 1 as libc::c_int as libc::c_long
903 +                                         } else {
904 +                                             (if 1 as libc::c_int != 0 {
905 +                                                 0 as libc::c_int as libc::c_long
906 +                                             } else {
907 +                                                 (if 1 as libc::c_int != 0 {
908 +                                                     0 as libc::c_int as libc::c_long
909 +                                                 } else {
910 +                                                     n
911 +                                                 }) + 0 as libc::c_int as idx_t
912 +                                             }) - 1 as libc::c_int as libc::c_long
913 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:872:39
    |
872 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
873 | | ...                       0 as libc::c_int as libc::c_long
874 | | ...                   } else {
875 | | ...                       n
876 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:873:41
    |
873 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:876:42
    |
876 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:877:49
    |
877 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
878 | | ...                       0 as libc::c_int as libc::c_long
879 | | ...                   } else {
880 | | ...                       (if 1 as libc::c_int != 0 {
...   |
884 | | ...                       }) + 0 as libc::c_int as idx_t
885 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:878:45
    |
878 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:880:45
    |
880 | / ...                   (if 1 as libc::c_int != 0 {
881 | | ...                       0 as libc::c_int as libc::c_long
882 | | ...                   } else {
883 | | ...                       n
884 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:881:49
    |
881 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:884:50
    |
884 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:885:46
    |
885 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:886:47
    |
886 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:888:48
    |
888 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
889 | | ...                       0 as libc::c_int as libc::c_long
890 | | ...                   } else {
891 | | ...                       (if 1 as libc::c_int != 0 {
...   |
895 | | ...                       }) + 0 as libc::c_int as idx_t
896 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:889:49
    |
889 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:891:49
    |
891 | / ...                   (if 1 as libc::c_int != 0 {
892 | | ...                       0 as libc::c_int as libc::c_long
893 | | ...                   } else {
894 | | ...                       n
895 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:892:53
    |
892 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:895:54
    |
895 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:896:50
    |
896 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:898:67
    |
898 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:899:67
    |
899 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:900:51
    |
900 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:901:51
    |
901 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:902:51
    |
902 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:904:45
    |
904 | / ...                   (if 1 as libc::c_int != 0 {
905 | | ...                       0 as libc::c_int as libc::c_long
906 | | ...                   } else {
907 | | ...                       (if 1 as libc::c_int != 0 {
...   |
911 | | ...                       }) + 0 as libc::c_int as idx_t
912 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:905:49
    |
905 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:907:49
    |
907 | / ...                   (if 1 as libc::c_int != 0 {
908 | | ...                       0 as libc::c_int as libc::c_long
909 | | ...                   } else {
910 | | ...                       n
911 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:908:53
    |
908 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:911:54
    |
911 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:912:50
    |
912 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:915:37
    |
915 | / ...                   ((0 as libc::c_int as libc::c_long)
916 | | ...                       < (if 1 as libc::c_int != 0 {
917 | | ...                           0 as libc::c_int as libc::c_long
918 | | ...                       } else {
919 | | ...                           n
920 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
915 ~                                     i32::from((0 as libc::c_int as libc::c_long)
916 +                                         < (if 1 as libc::c_int != 0 {
917 +                                             0 as libc::c_int as libc::c_long
918 +                                         } else {
919 +                                             n
920 +                                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:915:38
    |
915 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:916:43
    |
916 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
917 | | ...                       0 as libc::c_int as libc::c_long
918 | | ...                   } else {
919 | | ...                       n
920 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:917:45
    |
917 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:920:46
    |
920 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:921:49
    |
921 | ...                   }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:923:41
    |
923 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
924 | | ...                       0 as libc::c_int as libc::c_long
925 | | ...                   } else {
926 | | ...                       s
927 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:924:41
    |
924 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:927:42
    |
927 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:928:43
    |
928 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:930:41
    |
930 | / ...                   ((0 as libc::c_int as libc::c_long)
931 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
930 ~                                         i32::from((0 as libc::c_int as libc::c_long)
931 +                                             < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:930:42
    |
930 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:931:51
    |
931 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:933:41
    |
933 | / ...                   ((-(1 as libc::c_int) as libc::c_long
934 | | ...                       - 0 as libc::c_int as idx_t)
935 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
933 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
934 +                                             - 0 as libc::c_int as idx_t)
935 +                                             < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:933:43
    |
933 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:934:47
    |
934 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:935:51
    |
935 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:938:37
    |
938 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:938:38
    |
938 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:941:33
    |
941 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:941:34
    |
941 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:947:22
    |
947 |                     *(&mut nbytes as *mut idx_t) = fresh18;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:951:22
    |
951 |                     *(&mut nbytes as *mut idx_t) = fresh20;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:952:21
    |
952 |                     fresh21 as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh21)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:958:23
    |
958 |     pa = xrealloc(pa, nbytes as size_t);
    |                       ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:976:1
    |
976 | / pub unsafe extern "C" fn xcalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
977 | |     return check_nonnull(calloc(n, s));
978 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:977:5
    |
977 |     return check_nonnull(calloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(calloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:983:5
    |
983 |     Box::into_raw(allocation) as *mut libc::c_void
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `Box::into_raw(allocation).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: the function has a cognitive complexity of (58/25)
  --> src/xstrtoumax.rs:42:22
   |
42 | unsafe extern "C" fn bkm_scale(
   |                      ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (336/100)
   --> src/xstrtoumax.rs:42:1
    |
42  | / unsafe extern "C" fn bkm_scale(
43  | |     mut x: *mut uintmax_t,
44  | |     mut scale_factor: libc::c_int,
45  | | ) -> strtol_error {
...   |
383 | |     return LONGINT_OK;
384 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoumax.rs:383:5
    |
383 |     return LONGINT_OK;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `LONGINT_OK`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:47:11
   |
47 |     if if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:47:45
   |
47 |     if if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t
   |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:48:12
   |
48 |         && (if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_ulong } else { *x })
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:48:40
   |
48 |         && (if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_ulong } else { *x })
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:49:27
   |
49 |             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:50:15
   |
50 |             < 0 as libc::c_int as libc::c_ulong
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:51:13
   |
51 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:54:21
   |
54 |             if *x < 0 as libc::c_int as libc::c_ulong {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:55:20
   |
55 |                   if (if 1 as libc::c_int != 0 {
   |  ____________________^
56 | |                     0 as libc::c_int as libc::c_ulong
57 | |                 } else {
58 | |                     (if 1 as libc::c_int != 0 {
...  |
63 | |                         .wrapping_add(scale_factor as libc::c_ulong)
64 | |                 })
   | |__________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:56:21
   |
56 |                     0 as libc::c_int as libc::c_ulong
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:58:21
   |
58 | /                     (if 1 as libc::c_int != 0 {
59 | |                         0 as libc::c_int as libc::c_ulong
60 | |                     } else {
61 | |                         -(1 as libc::c_int) as uintmax_t
62 | |                     })
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:59:25
   |
59 |                         0 as libc::c_int as libc::c_ulong
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:61:25
   |
61 |                         -(1 as libc::c_int) as uintmax_t
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:63:39
   |
63 |                         .wrapping_add(scale_factor as libc::c_ulong)
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:65:35
   |
65 |                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
   |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:66:23
   |
66 |                     < 0 as libc::c_int as libc::c_ulong
   |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xstrtoumax.rs:68:21
   |
68 | /                     (*x
69 | |                         < (-(1 as libc::c_int) as uintmax_t)
70 | |                             .wrapping_div(scale_factor as libc::c_ulong)) as libc::c_int
   | |________________________________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
   |
68 ~                     i32::from(*x
69 +                         < (-(1 as libc::c_int) as uintmax_t)
70 +                             .wrapping_div(scale_factor as libc::c_ulong))
   |

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:69:27
   |
69 |                         < (-(1 as libc::c_int) as uintmax_t)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:70:43
   |
70 | ...                   .wrapping_div(scale_factor as libc::c_ulong)) as libc::c_int
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:72:21
    |
72  | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
73  | |                         0 as libc::c_int
74  | |                     } else {
75  | |                         scale_factor
...   |
134 | |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
135 | |                         as libc::c_int
    | |______________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
72  ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
73  +                         0 as libc::c_int
74  +                     } else {
75  +                         scale_factor
76  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
77  +                     {
78  +                         !(((((if 1 as libc::c_int != 0 {
79  +                             0 as libc::c_int
80  +                         } else {
81  +                             scale_factor
82  +                         }) + 1 as libc::c_int)
83  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
84  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
85  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
86  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
87  +                     } else {
88  +                         (if 1 as libc::c_int != 0 {
89  +                             0 as libc::c_int
90  +                         } else {
91  +                             scale_factor
92  +                         }) + 0 as libc::c_int
93  +                     }) < 0 as libc::c_int
94  +                     {
95  +                         (scale_factor
96  +                             < -(if ((if 1 as libc::c_int != 0 {
97  +                                 0 as libc::c_int
98  +                             } else {
99  +                                 scale_factor
100 +                             }) - 1 as libc::c_int) < 0 as libc::c_int
101 +                             {
102 +                                 ((((if 1 as libc::c_int != 0 {
103 +                                     0 as libc::c_int
104 +                                 } else {
105 +                                     scale_factor
106 +                                 }) + 1 as libc::c_int)
107 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
108 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
109 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
110 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
111 +                             } else {
112 +                                 (if 1 as libc::c_int != 0 {
113 +                                     0 as libc::c_int
114 +                                 } else {
115 +                                     scale_factor
116 +                                 }) - 1 as libc::c_int
117 +                             })) as libc::c_int
118 +                     } else {
119 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
120 +                     }) != 0
121 +                     {
122 +                         ((if 1 as libc::c_int != 0 {
123 +                             0 as libc::c_int
124 +                         } else {
125 +                             scale_factor
126 +                         }) as libc::c_ulong)
127 +                             .wrapping_add(-(1 as libc::c_int) as uintmax_t)
128 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
129 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
130 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
131 +                     } else {
132 +                         (-(1 as libc::c_int) as uintmax_t)
133 +                             .wrapping_div(-scale_factor as libc::c_ulong)
134 +                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:72:22
    |
72  |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
73  | |                         0 as libc::c_int
74  | |                     } else {
75  | |                         scale_factor
...   |
133 | |                             .wrapping_div(-scale_factor as libc::c_ulong)
134 | |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:72:35
   |
72 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
   |  ___________________________________^
73 | |                         0 as libc::c_int
74 | |                     } else {
75 | |                         scale_factor
76 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:78:30
   |
78 |                           !(((((if 1 as libc::c_int != 0 {
   |  ______________________________^
79 | |                             0 as libc::c_int
80 | |                         } else {
81 | |                             scale_factor
82 | |                         }) + 1 as libc::c_int)
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:84:47
   |
84 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoumax.rs:85:47
   |
85 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoumax.rs:88:25
   |
88 | /                         (if 1 as libc::c_int != 0 {
89 | |                             0 as libc::c_int
90 | |                         } else {
91 | |                             scale_factor
92 | |                         }) + 0 as libc::c_int
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:95:25
    |
95  | /                         (scale_factor
96  | |                             < -(if ((if 1 as libc::c_int != 0 {
97  | |                                 0 as libc::c_int
98  | |                             } else {
...   |
116 | |                                 }) - 1 as libc::c_int
117 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
95  ~                         i32::from(scale_factor
96  +                             < -(if ((if 1 as libc::c_int != 0 {
97  +                                 0 as libc::c_int
98  +                             } else {
99  +                                 scale_factor
100 +                             }) - 1 as libc::c_int) < 0 as libc::c_int
101 +                             {
102 +                                 ((((if 1 as libc::c_int != 0 {
103 +                                     0 as libc::c_int
104 +                                 } else {
105 +                                     scale_factor
106 +                                 }) + 1 as libc::c_int)
107 +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
108 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
109 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
110 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
111 +                             } else {
112 +                                 (if 1 as libc::c_int != 0 {
113 +                                     0 as libc::c_int
114 +                                 } else {
115 +                                     scale_factor
116 +                                 }) - 1 as libc::c_int
117 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:96:37
    |
96  |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
97  | | ...                       0 as libc::c_int
98  | | ...                   } else {
99  | | ...                       scale_factor
100 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:102:36
    |
102 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
103 | | ...                       0 as libc::c_int
104 | | ...                   } else {
105 | | ...                       scale_factor
106 | | ...                   }) + 1 as libc::c_int)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:108:55
    |
108 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:109:55
    |
109 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:112:33
    |
112 | / ...                   (if 1 as libc::c_int != 0 {
113 | | ...                       0 as libc::c_int
114 | | ...                   } else {
115 | | ...                       scale_factor
116 | | ...                   }) - 1 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:119:25
    |
119 |                         ((0 as libc::c_int) < scale_factor) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:122:25
    |
122 | /                         ((if 1 as libc::c_int != 0 {
123 | |                             0 as libc::c_int
124 | |                         } else {
125 | |                             scale_factor
126 | |                         }) as libc::c_ulong)
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:122:26
    |
122 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
123 | |                             0 as libc::c_int
124 | |                         } else {
125 | |                             scale_factor
126 | |                         }) as libc::c_ulong)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:127:43
    |
127 | ...                   .wrapping_add(-(1 as libc::c_int) as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:129:47
    |
129 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:130:47
    |
130 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:132:25
    |
132 |                         (-(1 as libc::c_int) as uintmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:133:43
    |
133 | ...                   .wrapping_div(-scale_factor as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:134:27
    |
134 |                     }) <= (-(1 as libc::c_int) as libc::c_ulong).wrapping_sub(*x))
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:138:42
    |
138 |                 let scale_factor_value = if scale_factor != 0 { scale_factor } else { 0 };
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xstrtoumax.rs:141:8
    |
141 |   if (if (if (if 1 != 0 {
    |  ________^
142 | |                     0
143 | |                 } else {
144 | |                     (scale_factor_value as u64).wrapping_add(0)
...   |
160 | |                     (scale_factor_value as u64).wrapping_add(0)
161 | |                 }) < 0 {
    | |______________________^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xstrtoumax.rs:141:12
    |
141 |   if (if (if (if 1 != 0 {
    |  ____________^
142 | |                     0
143 | |                 } else {
144 | |                     (scale_factor_value as u64).wrapping_add(0)
145 | |                 })
146 | |                     .wrapping_sub(1)
147 | |                     < 0 {
    | |_______________________^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:141:12
    |
141 |   if (if (if (if 1 != 0 {
    |  ____________^
142 | |                     0
143 | |                 } else {
144 | |                     (scale_factor_value as u64).wrapping_add(0)
145 | |                 })
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:144:21
    |
144 |                     (scale_factor_value as u64).wrapping_add(0)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:148:23
    |
148 |                       !((if 1 != 0 {
    |  _______________________^
149 | |                         0
150 | |                     } else {
151 | |                         (scale_factor_value as u64).wrapping_add(0)
152 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:151:25
    |
151 |                         (scale_factor_value as u64).wrapping_add(0)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:160:21
    |
160 |                     (scale_factor_value as u64).wrapping_add(0)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:162:21
    |
162 | /                     (((if 1 != 0 {
163 | |                         0
164 | |                     } else {
165 | |                         scale_factor_value
...   |
191 | |                         })
192 | |                             .wrapping_neg()) as i32
    | |___________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
162 ~                     i32::from(((if 1 != 0 {
163 +                         0
164 +                     } else {
165 +                         scale_factor_value
166 +                     }) as u64)
167 +                         .wrapping_add(0)
168 +                         < (if (if 1 != 0 {
169 +                             0
170 +                         } else {
171 +                             (scale_factor_value as u64).wrapping_add(0)
172 +                         })
173 +                             .wrapping_sub(1)
174 +                             < 0 {
175 +                             ((if 1 != 0 {
176 +                                 0
177 +                             } else {
178 +                                 scale_factor_value
179 +                             }) as u64)
180 +                                 .wrapping_add(1)
181 +                                 << (std::mem::size_of::<u64>() as u64 * 8 - 2)
182 +                                 .wrapping_sub(1)
183 +                                 .wrapping_mul(2)
184 +                                 .wrapping_add(1)
185 +                         } else {
186 +                             (if 1 != 0 {
187 +                                 0
188 +                             } else {
189 +                                 scale_factor_value
190 +                             }).wrapping_sub(1) as u64
191 +                         })
192 +                             .wrapping_neg())
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:162:22
    |
162 |                       (((if 1 != 0 {
    |  ______________________^
163 | |                         0
164 | |                     } else {
165 | |                         scale_factor_value
166 | |                     }) as u64)
    | |______________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:162:23
    |
162 |                       (((if 1 != 0 {
    |  _______________________^
163 | |                         0
164 | |                     } else {
165 | |                         scale_factor_value
166 | |                     }) as u64)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xstrtoumax.rs:168:31
    |
168 |                           < (if (if 1 != 0 {
    |  _______________________________^
169 | |                             0
170 | |                         } else {
171 | |                             (scale_factor_value as u64).wrapping_add(0)
172 | |                         })
173 | |                             .wrapping_sub(1)
174 | |                             < 0 {
    | |_______________________________^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:168:31
    |
168 |                           < (if (if 1 != 0 {
    |  _______________________________^
169 | |                             0
170 | |                         } else {
171 | |                             (scale_factor_value as u64).wrapping_add(0)
172 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:171:29
    |
171 | ...                   (scale_factor_value as u64).wrapping_add(0)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:175:29
    |
175 | / ...                   ((if 1 != 0 {
176 | | ...                       0
177 | | ...                   } else {
178 | | ...                       scale_factor_value
179 | | ...                   }) as u64)
    | |________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:175:30
    |
175 |   ...                   ((if 1 != 0 {
    |  ________________________^
176 | | ...                       0
177 | | ...                   } else {
178 | | ...                       scale_factor_value
179 | | ...                   }) as u64)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:186:29
    |
186 | / ...                   (if 1 != 0 {
187 | | ...                       0
188 | | ...                   } else {
189 | | ...                       scale_factor_value
190 | | ...                   }).wrapping_sub(1) as u64
    | |_______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:186:29
    |
186 | / ...                   (if 1 != 0 {
187 | | ...                       0
188 | | ...                   } else {
189 | | ...                       scale_factor_value
190 | | ...                   }).wrapping_sub(1) as u64
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:194:21
    |
194 |                     (0 < (scale_factor_value as u64)) as i32
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 < (scale_factor_value as u64))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:194:26
    |
194 |                     (0 < (scale_factor_value as u64)) as i32
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/xstrtoumax.rs:196:24
    |
196 |                       if (if 1 != 0 {
    |  ________________________^
197 | |                         0
198 | |                     } else {
199 | |                         x_value
200 | |                     })
201 | |                         .wrapping_sub(1)
202 | |                         < 0 {
    | |___________________________^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:196:24
    |
196 |                       if (if 1 != 0 {
    |  ________________________^
197 | |                         0
198 | |                     } else {
199 | |                         x_value
200 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:203:25
    |
203 |                         (0 < x_value.wrapping_add(0)) as i32
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 < x_value.wrapping_add(0))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:205:25
    |
205 |                         (0 < x_value && (-1i32 as u64).wrapping_sub(0) < x_value.wrapping_sub(1)) as i32
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 < x_value && (-1i32 as u64).wrapping_sub(0) < x_value.wrapping_sub(1))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:205:41
    |
205 |                         (0 < x_value && (-1i32 as u64).wrapping_sub(0) < x_value.wrapping_sub(1)) as i32
    |                                         ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:208:21
    |
208 |                     (0u64.wrapping_div(scale_factor as u64) < x_value) as i32
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0u64.wrapping_div(scale_factor as u64) < x_value)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:208:40
    |
208 |                     (0u64.wrapping_div(scale_factor as u64) < x_value) as i32
    |                                        ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:216:25
    |
216 |                 if *x < 0 as libc::c_int as libc::c_ulong {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:217:32
    |
217 |                       if (if (if (if 1 as libc::c_int != 0 {
    |  ________________________________^
218 | |                         0 as libc::c_int as libc::c_ulong
219 | |                     } else {
220 | |                         (if 1 as libc::c_int != 0 {
...   |
225 | |                             .wrapping_add(0 as libc::c_int as uintmax_t)
226 | |                     })
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:218:25
    |
218 |                         0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:220:25
    |
220 | /                         (if 1 as libc::c_int != 0 {
221 | |                             0 as libc::c_int as libc::c_ulong
222 | |                         } else {
223 | |                             *x
224 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:221:29
    |
221 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:225:43
    |
225 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:227:39
    |
227 |                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:228:27
    |
228 |                         < 0 as libc::c_int as libc::c_ulong
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:230:27
    |
230 |                           !((if 1 as libc::c_int != 0 {
    |  ___________________________^
231 | |                             0 as libc::c_int as libc::c_ulong
232 | |                         } else {
233 | |                             (if 1 as libc::c_int != 0 {
...   |
238 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)
239 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:231:29
    |
231 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:233:29
    |
233 | / ...                   (if 1 as libc::c_int != 0 {
234 | | ...                       0 as libc::c_int as libc::c_ulong
235 | | ...                   } else {
236 | | ...                       *x
237 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:234:33
    |
234 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:238:47
    |
238 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:240:43
    |
240 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:242:47
    |
242 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:243:47
    |
243 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:244:43
    |
244 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:245:43
    |
245 | ...                   .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:246:43
    |
246 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:248:25
    |
248 | /                         (if 1 as libc::c_int != 0 {
249 | |                             0 as libc::c_int as libc::c_ulong
250 | |                         } else {
251 | |                             (if 1 as libc::c_int != 0 {
...   |
256 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)
257 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:249:29
    |
249 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:251:29
    |
251 | / ...                   (if 1 as libc::c_int != 0 {
252 | | ...                       0 as libc::c_int as libc::c_ulong
253 | | ...                   } else {
254 | | ...                       *x
255 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:252:33
    |
252 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:256:47
    |
256 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:258:43
    |
258 | ...                   .wrapping_add(0 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:259:26
    |
259 |                     }) < 0 as libc::c_int as libc::c_ulong
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:261:25
    |
261 | /                         ((if 1 as libc::c_int != 0 {
262 | |                             0 as libc::c_int as libc::c_ulong
263 | |                         } else {
264 | |                             *x
...   |
310 | |                             })
311 | |                                 .wrapping_neg()) as libc::c_int
    | |_______________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
261 ~                         i32::from((if 1 as libc::c_int != 0 {
262 +                             0 as libc::c_int as libc::c_ulong
263 +                         } else {
264 +                             *x
265 +                         })
266 +                             .wrapping_add(0 as libc::c_int as uintmax_t)
267 +                             < (if (if 1 as libc::c_int != 0 {
268 +                                 0 as libc::c_int as libc::c_ulong
269 +                             } else {
270 +                                 (if 1 as libc::c_int != 0 {
271 +                                     0 as libc::c_int as libc::c_ulong
272 +                                 } else {
273 +                                     *x
274 +                                 })
275 +                                     .wrapping_add(0 as libc::c_int as uintmax_t)
276 +                             })
277 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
278 +                                 < 0 as libc::c_int as libc::c_ulong
279 +                             {
280 +                                 ((if 1 as libc::c_int != 0 {
281 +                                     0 as libc::c_int as libc::c_ulong
282 +                                 } else {
283 +                                     (if 1 as libc::c_int != 0 {
284 +                                         0 as libc::c_int as libc::c_ulong
285 +                                     } else {
286 +                                         *x
287 +                                     })
288 +                                         .wrapping_add(0 as libc::c_int as uintmax_t)
289 +                                 })
290 +                                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
291 +                                     << (::core::mem::size_of::<libc::c_ulong>()
292 +                                         as libc::c_ulong)
293 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
294 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
295 +                                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
296 +                                     .wrapping_mul(2 as libc::c_int as libc::c_ulong)
297 +                                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
298 +                             } else {
299 +                                 (if 1 as libc::c_int != 0 {
300 +                                     0 as libc::c_int as libc::c_ulong
301 +                                 } else {
302 +                                     (if 1 as libc::c_int != 0 {
303 +                                         0 as libc::c_int as libc::c_ulong
304 +                                     } else {
305 +                                         *x
306 +                                     })
307 +                                         .wrapping_add(0 as libc::c_int as uintmax_t)
308 +                                 })
309 +                                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
310 +                             })
311 +                                 .wrapping_neg())
    |

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:261:26
    |
261 |                           ((if 1 as libc::c_int != 0 {
    |  __________________________^
262 | |                             0 as libc::c_int as libc::c_ulong
263 | |                         } else {
264 | |                             *x
265 | |                         })
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:262:29
    |
262 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:266:43
    |
266 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:267:35
    |
267 |   ...                   < (if (if 1 as libc::c_int != 0 {
    |  _____________________________^
268 | | ...                       0 as libc::c_int as libc::c_ulong
269 | | ...                   } else {
270 | | ...                       (if 1 as libc::c_int != 0 {
...   |
275 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
276 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:268:33
    |
268 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:270:33
    |
270 | / ...                   (if 1 as libc::c_int != 0 {
271 | | ...                       0 as libc::c_int as libc::c_ulong
272 | | ...                   } else {
273 | | ...                       *x
274 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:271:37
    |
271 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:275:51
    |
275 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:277:47
    |
277 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:278:35
    |
278 | ...                   < 0 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:280:34
    |
280 |   ...                   ((if 1 as libc::c_int != 0 {
    |  ________________________^
281 | | ...                       0 as libc::c_int as libc::c_ulong
282 | | ...                   } else {
283 | | ...                       (if 1 as libc::c_int != 0 {
...   |
288 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
289 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:281:37
    |
281 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:283:37
    |
283 | / ...                   (if 1 as libc::c_int != 0 {
284 | | ...                       0 as libc::c_int as libc::c_ulong
285 | | ...                   } else {
286 | | ...                       *x
287 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:284:41
    |
284 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:288:55
    |
288 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:290:51
    |
290 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:293:55
    |
293 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:294:55
    |
294 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:295:51
    |
295 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:296:51
    |
296 | ...                   .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:297:51
    |
297 | ...                   .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:299:33
    |
299 | / ...                   (if 1 as libc::c_int != 0 {
300 | | ...                       0 as libc::c_int as libc::c_ulong
301 | | ...                   } else {
302 | | ...                       (if 1 as libc::c_int != 0 {
...   |
307 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)
308 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:300:37
    |
300 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:302:37
    |
302 | / ...                   (if 1 as libc::c_int != 0 {
303 | | ...                       0 as libc::c_int as libc::c_ulong
304 | | ...                   } else {
305 | | ...                       *x
306 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:303:41
    |
303 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:307:55
    |
307 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:309:51
    |
309 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:313:25
    |
313 | /                         ((0 as libc::c_int as libc::c_ulong)
314 | |                             < (if 1 as libc::c_int != 0 {
315 | |                                 0 as libc::c_int as libc::c_ulong
316 | |                             } else {
317 | |                                 *x
318 | |                             })
319 | |                                 .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    | |____________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
313 ~                         i32::from((0 as libc::c_int as libc::c_ulong)
314 +                             < (if 1 as libc::c_int != 0 {
315 +                                 0 as libc::c_int as libc::c_ulong
316 +                             } else {
317 +                                 *x
318 +                             })
319 +                                 .wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:313:26
    |
313 |                         ((0 as libc::c_int as libc::c_ulong)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:314:31
    |
314 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
315 | | ...                       0 as libc::c_int as libc::c_ulong
316 | | ...                   } else {
317 | | ...                       *x
318 | | ...                   })
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:315:33
    |
315 | ...                   0 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:319:47
    |
319 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:320:38
    |
320 |                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_ulong
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoumax.rs:322:29
    |
322 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
323 | |                             0 as libc::c_int
324 | |                         } else {
325 | |                             scale_factor
326 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:328:29
    |
328 | / ...                   ((0 as libc::c_int as libc::c_ulong)
329 | | ...                       < (scale_factor as libc::c_ulong)
330 | | ...                           .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    | |__________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
328 ~                             i32::from((0 as libc::c_int as libc::c_ulong)
329 +                                 < (scale_factor as libc::c_ulong)
330 +                                     .wrapping_add(0 as libc::c_int as uintmax_t))
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:328:30
    |
328 | ...                   ((0 as libc::c_int as libc::c_ulong)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:329:35
    |
329 | ...                   < (scale_factor as libc::c_ulong)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:330:51
    |
330 | ...                   .wrapping_add(0 as libc::c_int as uintmax_t)) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:332:29
    |
332 | / ...                   ((-(1 as libc::c_int) as libc::c_ulong)
333 | | ...                       .wrapping_sub(0 as libc::c_int as uintmax_t)
334 | | ...                       < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
335 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
332 ~                             i32::from((-(1 as libc::c_int) as libc::c_ulong)
333 +                                 .wrapping_sub(0 as libc::c_int as uintmax_t)
334 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:332:30
    |
332 | ...                   ((-(1 as libc::c_int) as libc::c_ulong)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:333:47
    |
333 | ...                   .wrapping_sub(0 as libc::c_int as uintmax_t)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:334:35
    |
334 | ...                   < (scale_factor - 1 as libc::c_int) as libc::c_ulong)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:338:25
    |
338 | /                         ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
339 | |                             < scale_factor as libc::c_ulong) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
338 ~                         i32::from((0 as libc::c_int as uintmax_t).wrapping_div(*x)
339 +                             < scale_factor as libc::c_ulong)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:338:26
    |
338 |                         ((0 as libc::c_int as uintmax_t).wrapping_div(*x)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:339:31
    |
339 | ...                   < scale_factor as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:342:21
    |
342 | /                     ((-(1 as libc::c_int) as uintmax_t)
343 | |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
342 ~                     i32::from((-(1 as libc::c_int) as uintmax_t)
343 +                         .wrapping_div(scale_factor as libc::c_ulong) < *x)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:342:22
    |
342 |                     ((-(1 as libc::c_int) as uintmax_t)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:343:39
    |
343 |                         .wrapping_div(scale_factor as libc::c_ulong) < *x) as libc::c_int
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xstrtoumax.rs:349:10
    |
349 |         *(&mut scaled as *mut uintmax_t) = fresh4;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xstrtoumax.rs:353:10
    |
353 |         *(&mut scaled as *mut uintmax_t) = fresh6;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoumax.rs:354:9
    |
354 |         fresh7 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh7)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:357:22
    |
357 |         *x = if *x < 0 as libc::c_int as libc::c_ulong {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:358:17
    |
358 |             !if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:358:51
    |
358 |             !if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:359:17
    |
359 |                 -(1 as libc::c_int) as uintmax_t
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:361:18
    |
361 |                 ((1 as libc::c_int as uintmax_t)
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:363:39
    |
363 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:364:39
    |
364 |                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:365:35
    |
365 |                     .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:366:35
    |
366 |                     .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:367:35
    |
367 |                     .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:369:19
    |
369 |         } else if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:369:53
    |
369 |         } else if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:370:13
    |
370 |             -(1 as libc::c_int) as uintmax_t
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:372:14
    |
372 |             ((1 as libc::c_int as uintmax_t)
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:374:35
    |
374 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:375:35
    |
375 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:376:31
    |
376 |                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:377:31
    |
377 |                 .wrapping_mul(2 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:378:31
    |
378 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xstrtoumax.rs:402:1
    |
402 | / pub unsafe extern "C" fn xstrtoumax(
403 | |     mut s: *const libc::c_char,
404 | |     mut ptr: *mut *mut libc::c_char,
405 | |     mut strtol_base: libc::c_int,
...   |
568 | |
569 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this function has too many lines (155/100)
   --> src/xstrtoumax.rs:402:1
    |
402 | / pub unsafe extern "C" fn xstrtoumax(
403 | |     mut s: *const libc::c_char,
404 | |     mut ptr: *mut *mut libc::c_char,
405 | |     mut strtol_base: libc::c_int,
...   |
568 | |
569 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoumax.rs:567:1
    |
567 | return err;
    | ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xstrtoumax.rs:409:40
    |
409 |     let mut t_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/xstrtoumax.rs:410:41
    |
410 |     let mut p: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:415:13
    |
415 | /             b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
416 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:417:13
    |
417 |             b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:418:13
    |
418 |             86 as libc::c_int as libc::c_uint,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoumax.rs:419:15
    |
419 |               (*::core::mem::transmute::<
    |  _______________^
420 | |                 &[u8; 79],
421 | |                 &[libc::c_char; 79],
422 | |             >(
423 | |                 b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
424 | |             ))
    | |_____________^ help: try: `&*(b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0" as *const [u8; 79] as *const [i8; 79])`
    |
    = note: `-W clippy::transmute-ptr-to-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
   --> src/xstrtoumax.rs:428:5
    |
428 | /     'c_2256: {
429 | |         if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
430 | |             __assert_fail(
431 | |                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
...   |
443 | |         }
444 | |     };
    | |______^
    |
    = note: `-W clippy::unnecessary-operation` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
428 ~     if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
429 +             __assert_fail(
430 +                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
431 +                     as *const libc::c_char,
432 +                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
433 +                 86 as libc::c_int as libc::c_uint,
434 +                 (*::core::mem::transmute::<
435 +                     &[u8; 79],
436 +                     &[libc::c_char; 79],
437 +                 >(
438 +                     b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
439 +                 ))
440 +                     .as_ptr(),
441 +             );
442 +         };
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:431:17
    |
431 | /                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
432 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoumax.rs:433:17
    |
433 |                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoumax.rs:434:17
    |
434 |                 86 as libc::c_int as libc::c_uint,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoumax.rs:435:19
    |
435 |                   (*::core::mem::transmute::<
    |  ___________________^
436 | |                     &[u8; 79],
437 | |                     &[libc::c_char; 79],
438 | |                 >(
439 | |                     b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0",
440 | |                 ))
    | |_________________^ help: try: `&*(b"strtol_error xstrtoumax(const char *, char **, int, uintmax_t *, const char *)\0" as *const [u8; 79] as *const [i8; 79])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary boolean `not` operation
   --> src/xstrtoumax.rs:445:9
    |
445 |     p = if !ptr.is_null() { ptr } else { &mut t_ptr };
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:447:8
    |
447 |     if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:447:42
    |
447 |     if (0 as libc::c_int as uintmax_t) < -(1 as libc::c_int) as uintmax_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:449:37
    |
449 |         let mut ch: libc::c_uchar = *q as libc::c_uchar;
    |                                     ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:450:15
    |
450 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*__ctype_b_loc()).offset(ch as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:450:42
    |
450 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:451:15
    |
451 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/xstrtoumax.rs:451:15
    |
451 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/xstrtoumax.rs:451:15
    |
451 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoumax.rs:451:15
    |
451 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:454:18
    |
454 |             ch = *q as libc::c_uchar;
    |                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:456:12
    |
456 |         if ch as libc::c_int == '-' as i32 {
    |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:462:41
    |
462 |         if !valid_suffixes.is_null() && **p as libc::c_int != 0
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoumax.rs:463:41
    |
463 |             && !(strchr(valid_suffixes, **p as libc::c_int)).is_null()
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoumax.rs:465:19
    |
465 |             tmp = 1 as libc::c_int as uintmax_t;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:485:24
    |
485 |     let current_char = **p as u8 as char;
    |                        ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:494:23
    |
494 |                 match unsafe { *(*p).offset(1) } as u8 as char {
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoumax.rs:496:28
    |
496 |                         if unsafe { *(*p).offset(2) } as u8 as char == 'B' {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: path statement with no effect
   --> src/quotearg.rs:386:25
    |
386 |                         len;
    |                         ^^^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/quotearg.rs:388:25
    |
388 |                         quote_string;
    |                         ^^^^^^^^^^^^^

warning: path statement with no effect
   --> src/quotearg.rs:424:21
    |
424 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:454:21
    |
454 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:599:49
    |
599 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:604:49
    |
604 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:662:49
    |
662 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:667:49
    |
667 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:839:37
    |
839 | ...                   m;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:861:41
    |
861 | ...                   j;
    |                       ^^

warning: path statement with no effect
    --> src/quotearg.rs:1056:25
     |
1056 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1061:25
     |
1061 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1066:25
     |
1066 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1073:21
     |
1073 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1085:25
     |
1085 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1090:25
     |
1090 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1097:21
     |
1097 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1105:13
     |
1105 |             i;
     |             ^^

warning: path statement with no effect
    --> src/quotearg.rs:1171:21
     |
1171 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1173:21
     |
1173 |                     quote_string;
     |                     ^^^^^^^^^^^^^

warning: comparison is useless due to type limits
  --> src/umaxtostr.rs:11:8
   |
11 |     if i < 0 {
   |        ^^^^^
   |
   = note: `#[warn(unused_comparisons)]` on by default

warning: path statement with no effect
   --> src/version_etc.rs:262:9
    |
262 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/version_etc.rs:284:9
    |
284 |         n_authors;
    |         ^^^^^^^^^^

warning: comparison is useless due to type limits
  --> src/xmalloc.rs:83:8
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: comparison is useless due to type limits
  --> src/xmalloc.rs:83:44
   |
83 |     if n as u64 <= 18446744073709551615 && s as u64 <= 18446744073709551615 {
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: comparison is useless due to type limits
   --> src/xstrtoumax.rs:141:8
    |
141 |   if (if (if (if 1 != 0 {
    |  ________^
142 | |                     0
143 | |                 } else {
144 | |                     (scale_factor_value as u64).wrapping_add(0)
...   |
160 | |                     (scale_factor_value as u64).wrapping_add(0)
161 | |                 }) < 0 {
    | |______________________^

warning: comparison is useless due to type limits
   --> src/xstrtoumax.rs:141:12
    |
141 |   if (if (if (if 1 != 0 {
    |  ____________^
142 | |                     0
143 | |                 } else {
144 | |                     (scale_factor_value as u64).wrapping_add(0)
145 | |                 })
146 | |                     .wrapping_sub(1)
147 | |                     < 0 {
    | |_______________________^

warning: comparison is useless due to type limits
   --> src/xstrtoumax.rs:168:31
    |
168 |                           < (if (if 1 != 0 {
    |  _______________________________^
169 | |                             0
170 | |                         } else {
171 | |                             (scale_factor_value as u64).wrapping_add(0)
172 | |                         })
173 | |                             .wrapping_sub(1)
174 | |                             < 0 {
    | |_______________________________^

warning: comparison is useless due to type limits
   --> src/xstrtoumax.rs:196:24
    |
196 |                       if (if 1 != 0 {
    |  ________________________^
197 | |                         0
198 | |                     } else {
199 | |                         x_value
200 | |                     })
201 | |                         .wrapping_sub(1)
202 | |                         < 0 {
    | |___________________________^

warning: `rust` (lib) generated 1860 warnings
warning: literal with an empty format string
   --> src/head.rs:327:9
    |
327 |         "GNU coreutils",
    |         ^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::print-literal` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
326 -         "{} online help: <{}>",
326 +         "GNU coreutils online help: <{}>",
    |

warning: literal with an empty format string
   --> src/head.rs:328:9
    |
328 |         "https://www.gnu.org/software/coreutils/"
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
326 ~         "{} online help: <https://www.gnu.org/software/coreutils/>",
327 ~         "GNU coreutils"
    |

warning: literal with an empty format string
   --> src/head.rs:339:13
    |
339 |             "Report any translation bugs to <https://translationproject.org/team/>"
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
338 -             "{}",
338 +             "Report any translation bugs to <https://translationproject.org/team/>"
    |

warning: literal with an empty format string
   --> src/head.rs:351:9
    |
351 |         "https://www.gnu.org/software/coreutils/",
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#print_literal
help: try this
    |
350 -         "Full documentation <{}{}>",
350 +         "Full documentation <https://www.gnu.org/software/coreutils/{}>",
    |

warning: long literal lacking separators
   --> src/head.rs:275:12
    |
275 |     mode & 0o170000 == 0o100000 || 
    |            ^^^^^^^^ help: consider: `0o170_000`
    |
    = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/head.rs:275:24
    |
275 |     mode & 0o170000 == 0o100000 || 
    |                        ^^^^^^^^ help: consider: `0o100_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/head.rs:276:12
    |
276 |     mode & 0o170000 == 0o120000 || 
    |            ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/head.rs:276:24
    |
276 |     mode & 0o170000 == 0o120000 || 
    |                        ^^^^^^^^ help: consider: `0o120_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
   --> src/head.rs:904:24
    |
904 |                   } else {
    |  ________________________^
905 | |                     if n_read <= n_elide {
906 | |                         if !first {
907 | |                             delta = n_elide.wrapping_sub(n_read);
...   |
910 | |                     eof = 1 as libc::c_int != 0;
911 | |                 }
    | |_________________^
    |
    = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: this `if` statement can be collapsed
   --> src/head.rs:905:21
    |
905 | /                     if n_read <= n_elide {
906 | |                         if !first {
907 | |                             delta = n_elide.wrapping_sub(n_read);
908 | |                         }
909 | |                     }
    | |_____________________^
    |
    = note: `-W clippy::collapsible-if` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
    |
905 ~                     if n_read <= n_elide && !first {
906 +                         delta = n_elide.wrapping_sub(n_read);
907 +                     }
    |

warning: long literal lacking separators
   --> src/head.rs:953:36
    |
953 |                 current_block_69 = 10753070352654377903;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `10_753_070_352_654_377_903`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/head.rs:1037:24
     |
1037 |                   } else {
     |  ________________________^
1038 | |                     eof_0 = 1 as libc::c_int != 0;
1039 | |                 }
     | |_________________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/head.rs:1035:40
     |
1035 |                     current_block_69 = 10121186216371937393;
     |                                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `10_121_186_216_371_937_393`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/head.rs:1056:5
     |
1056 |     10753070352654377903 => {
     |     ^^^^^^^^^^^^^^^^^^^^ help: consider: `10_753_070_352_654_377_903`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/head.rs:1116:12
     |
1116 |       } else {
     |  ____________^
1117 | |         let mut diff: off_t = size - current_pos;
1118 | |         let mut bytes_remaining: off_t = if diff < 0 as libc::c_int as libc::c_long {
1119 | |             0 as libc::c_int as libc::c_long
...    |
1132 | |         return 0 as libc::c_int != 0;
1133 | |     };
     | |_____^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: this `else { if .. }` block can be collapsed
    --> src/head.rs:1311:16
     |
1311 |           } else {
     |  ________________^
1312 | |             if let Some(nl) = buffer[..n as usize].iter().rposition(|&x| x == line_end as i8) {
1313 | |                 n = nl;
1314 | |             } else {
1315 | |                 break;
1316 | |             }
1317 | |         }
     | |_________^
     |
     = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1311 ~         } else if let Some(nl) = buffer[..n as usize].iter().rposition(|&x| x == line_end as i8) {
1312 +             n = nl;
1313 +         } else {
1314 +             break;
1315 +         }
     |

warning: redundant else block
    --> src/head.rs:1382:12
     |
1382 |       } else {
     |  ____________^
1383 | |         return size <= current_pos
1384 | |             || elide_tail_lines_seekable(filename, fd, n_elide, current_pos, size)
1385 | |                 as libc::c_int != 0
1386 | |     };
     | |_____^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/head.rs:1524:37
     |
1524 |                     || st.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                     ^^^^^^^^ help: consider: `0o170_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/head.rs:1525:28
     |
1525 |                         == 0o100000 as libc::c_int as libc::c_uint
     |                            ^^^^^^^^ help: consider: `0o100_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/head.rs:1625:16
     |
1625 |           } else {
     |  ________________^
1626 | |             return elide_tail_bytes_file(filename, fd, n_units, &mut st, current_pos)
1627 | |         }
     | |_________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
    --> src/head.rs:1631:12
     |
1631 |       } else {
     |  ____________^
1632 | |     let filename_cstr = CStr::from_ptr(filename);
1633 | |     return head_bytes(filename_cstr, fd, n_units.try_into().unwrap());
1634 | | };
     | |_^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/head.rs:1751:21
     |
1751 |     let max_value = 18446744073709551615u64;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615_u64`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/head.rs:1772:9
     |
1772 |     mut argv: *mut *mut libc::c_char,
     |         ^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/head.rs:1771:9
     |
1771 |     mut argc: libc::c_int,
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/head.rs:1781:5
     |
1781 | /     static mut default_file_list: [*const libc::c_char; 2] = [
1782 | |         b"-\0" as *const u8 as *const libc::c_char,
1783 | |         0 as *const libc::c_char,
1784 | |     ];
     | |______^
     |
     = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: binding's name is too similar to existing binding
    --> src/head.rs:2115:9
     |
2115 |     let argc = args.len() as libc::c_int;
     |         ^^^^
     |
note: existing binding defined here
    --> src/head.rs:2111:9
     |
2111 |     let args: Vec<CString> = ::std::env::args()
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
    --> src/head.rs:2116:9
     |
2116 |     let argv: Vec<*mut libc::c_char> = args.iter()
     |         ^^^^
     |
note: existing binding defined here
    --> src/head.rs:2111:9
     |
2111 |     let args: Vec<CString> = ::std::env::args()
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: unused variable: `fd`
   --> src/head.rs:392:17
    |
392 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
    |                 ^^ help: if this is intentional, prefix it with an underscore: `_fd`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `mode`
   --> src/head.rs:392:26
    |
392 | fn __gl_setmode(fd: i32, mode: i32) -> i32 {
    |                          ^^^^ help: if this is intentional, prefix it with an underscore: `_mode`

warning: unused variable: `filename_str`
   --> src/head.rs:590:9
    |
590 |     let filename_str = unsafe { std::ffi::CStr::from_ptr(filename).to_str().unwrap() };
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_filename_str`

warning: unused variable: `buffer_end`
    --> src/head.rs:1246:13
     |
1246 |         let buffer_end = unsafe { &(*tmp).buffer[(*tmp).nbytes as usize..] };
     |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_buffer_end`

warning: unnecessary `unsafe` block
   --> src/head.rs:408:5
    |
408 |     unsafe {
    |     ^^^^^^ unnecessary `unsafe` block
    |
    = note: `#[warn(unused_unsafe)]` on by default

warning: unnecessary `unsafe` block
    --> src/head.rs:1233:8
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1233 |       if unsafe { (*last).nbytes } != 0 && unsafe { (*last).buffer[(*last).nbytes as usize - 1] } != line_end {
     |          ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`
     = note: `#[allow(unsafe_op_in_unsafe_fn)]` on by default

warning: unnecessary `unsafe` block
    --> src/head.rs:1233:42
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1233 |       if unsafe { (*last).nbytes } != 0 && unsafe { (*last).buffer[(*last).nbytes as usize - 1] } != line_end {
     |                                            ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1234:9
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1234 |           unsafe { (*last).nlines += 1 };
     |           ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1238:35
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1238 |       while n_elide < total_lines - unsafe { (*tmp).nlines } {
     |                                     ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1239:24
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1239 |           desired_pos += unsafe { (*tmp).nbytes };
     |                          ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1240:23
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1240 |           xwrite_stdout(unsafe { (*tmp).buffer.as_ptr() }, unsafe { (*tmp).nbytes });
     |                         ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1240:58
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1240 |           xwrite_stdout(unsafe { (*tmp).buffer.as_ptr() }, unsafe { (*tmp).nbytes });
     |                                                            ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1241:24
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1241 |           total_lines -= unsafe { (*tmp).nlines };
     |                          ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1242:15
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1242 |           tmp = unsafe { (*tmp).next };
     |                 ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1246:26
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1246 |           let buffer_end = unsafe { &(*tmp).buffer[(*tmp).nbytes as usize..] };
     |                            ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1247:21
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1247 |           let mut p = unsafe { &(*tmp).buffer[..] };
     |                       ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1250:13
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1250 |               unsafe { (*tmp).nlines += 1 };
     |               ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1253:47
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1253 |           desired_pos += p.as_ptr().offset_from(unsafe { (*tmp).buffer.as_ptr() }) as u64;
     |                                                 ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1254:23
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1254 |           xwrite_stdout(unsafe { (*tmp).buffer.as_ptr() }, p.as_ptr().offset_from(unsafe { (*tmp).buffer.as_ptr() }) as u64);
     |                         ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1254:81
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1254 |           xwrite_stdout(unsafe { (*tmp).buffer.as_ptr() }, p.as_ptr().offset_from(unsafe { (*tmp).buffer.as_ptr() }) as u64);
     |                                                                                   ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1258:16
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
1139 | |     mut current_pos: off_t,
1140 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
...
1258 |       let next = unsafe { (*first).next };
     |                  ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1544:28
     |
1536 | / unsafe extern "C" fn head(
1537 | |     mut filename: *const libc::c_char,
1538 | |     mut fd: libc::c_int,
1539 | |     mut n_units: uintmax_t,
1540 | |     mut count_lines: bool,
1541 | |     mut elide_from_end: bool,
1542 | | ) -> bool {
     | |_________- because it's nested under this `unsafe` fn
1543 |       if print_headers {
1544 |           let filename_str = unsafe { CStr::from_ptr(filename).to_string_lossy().into_owned() };
     |                              ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1900:28
     |
1770 | / unsafe fn main_0(
1771 | |     mut argc: libc::c_int,
1772 | |     mut argv: *mut *mut libc::c_char,
1773 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1900 |           let n_string_ref = unsafe { CStr::from_ptr(n_string) };
     |                              ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1920:22
     |
1770 | / unsafe fn main_0(
1771 | |     mut argc: libc::c_int,
1772 | |     mut argv: *mut *mut libc::c_char,
1773 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1920 |       let optarg_str = unsafe { std::ffi::CStr::from_ptr(optarg) };
     |                        ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1931:54
     |
1770 | / unsafe fn main_0(
1771 | |     mut argc: libc::c_int,
1772 | |     mut argv: *mut *mut libc::c_char,
1773 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1931 |               n_units = string_to_integer(count_lines, unsafe { std::ffi::CStr::from_ptr(optarg) });
     |                                                        ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary `unsafe` block
    --> src/head.rs:1939:54
     |
1770 | / unsafe fn main_0(
1771 | |     mut argc: libc::c_int,
1772 | |     mut argv: *mut *mut libc::c_char,
1773 | | ) -> libc::c_int {
     | |________________- because it's nested under this `unsafe` fn
...
1939 |               n_units = string_to_integer(count_lines, unsafe { std::ffi::CStr::from_ptr(optarg) });
     |                                                        ^^^^^^ unnecessary `unsafe` block
     |
     = note: this `unsafe` block does contain unsafe operations, but those are already allowed in an `unsafe fn`

warning: unnecessary structure name repetition
   --> src/head.rs:177:22
    |
177 |     pub _chain: *mut _IO_FILE,
    |                      ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src/head.rs:188:29
    |
188 |     pub _freeres_list: *mut _IO_FILE,
    |                             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src/head.rs:270:20
    |
270 |     pub next: *mut linebuffer,
    |                    ^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this boolean expression can be simplified
   --> src/head.rs:275:5
    |
275 | /     mode & 0o170000 == 0o100000 || 
276 | |     mode & 0o170000 == 0o120000 || 
277 | |     mode.wrapping_sub(mode) != 0 || 
278 | |     false
    | |_________^ help: try: `mode & 0o170000 == 0o100000 || mode & 0o170000 == 0o120000 || mode.wrapping_sub(mode) != 0`
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this could be a `const fn`
   --> src/head.rs:273:1
    |
273 | / fn usable_st_size(sb: &stat) -> bool {
274 | |     let mode = sb.st_mode;
275 | |     mode & 0o170000 == 0o100000 || 
276 | |     mode & 0o170000 == 0o120000 || 
277 | |     mode.wrapping_sub(mode) != 0 || 
278 | |     false
279 | | }
    | |_^
    |
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:336:64
    |
336 |     if !lc_messages.is_null() && unsafe { strncmp(lc_messages, b"en_\0".as_ptr() as *const i8, 3) } != 0 {
    |                                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"en_\0".as_ptr().cast::<i8>()`
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:343:60
    |
343 |     let url_program = if unsafe { strcmp(program.as_ptr(), b"[\0".as_ptr() as *const i8) } == 0 {
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b"[\0".as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
   --> src/head.rs:372:5
    |
372 |     return xreallocarray(p, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xreallocarray(p, n, s)`
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:377:47
    |
377 |     let translated_message = unsafe { gettext(message.as_ptr() as *const libc::c_char) };
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `message.as_ptr().cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this could be a `const fn`
   --> src/head.rs:392:1
    |
392 | / fn __gl_setmode(fd: i32, mode: i32) -> i32 {
393 | |     0
394 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this could be a `const fn`
   --> src/head.rs:402:1
    |
402 | / fn xset_binary_mode_error() {
403 | |     // Function body can be implemented here if needed.
404 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: returning the result of a `let` binding from a block
   --> src/head.rs:427:9
    |
421 | /         let mut init = option {
422 | |             name: b"bytes\0" as *const u8 as *const libc::c_char,
423 | |             has_arg: 1 as libc::c_int,
424 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
425 | |             val: 'c' as i32,
426 | |         };
    | |__________- unnecessary `let` binding
427 |           init
    |           ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
421 ~         
422 ~         option {
423 +             name: b"bytes\0" as *const u8 as *const libc::c_char,
424 +             has_arg: 1 as libc::c_int,
425 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
426 +             val: 'c' as i32,
427 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:422:19
    |
422 |             name: b"bytes\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"bytes\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:436:9
    |
430 | /         let mut init = option {
431 | |             name: b"lines\0" as *const u8 as *const libc::c_char,
432 | |             has_arg: 1 as libc::c_int,
433 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
434 | |             val: 'n' as i32,
435 | |         };
    | |__________- unnecessary `let` binding
436 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
430 ~         
431 ~         option {
432 +             name: b"lines\0" as *const u8 as *const libc::c_char,
433 +             has_arg: 1 as libc::c_int,
434 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
435 +             val: 'n' as i32,
436 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:431:19
    |
431 |             name: b"lines\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lines\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:445:9
    |
439 | /         let mut init = option {
440 | |             name: b"-presume-input-pipe\0" as *const u8 as *const libc::c_char,
441 | |             has_arg: 0 as libc::c_int,
442 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
443 | |             val: PRESUME_INPUT_PIPE_OPTION as libc::c_int,
444 | |         };
    | |__________- unnecessary `let` binding
445 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
439 ~         
440 ~         option {
441 +             name: b"-presume-input-pipe\0" as *const u8 as *const libc::c_char,
442 +             has_arg: 0 as libc::c_int,
443 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
444 +             val: PRESUME_INPUT_PIPE_OPTION as libc::c_int,
445 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:440:19
    |
440 |             name: b"-presume-input-pipe\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-presume-input-pipe\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/head.rs:443:18
    |
443 |             val: PRESUME_INPUT_PIPE_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/head.rs:454:9
    |
448 | /         let mut init = option {
449 | |             name: b"quiet\0" as *const u8 as *const libc::c_char,
450 | |             has_arg: 0 as libc::c_int,
451 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
452 | |             val: 'q' as i32,
453 | |         };
    | |__________- unnecessary `let` binding
454 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
448 ~         
449 ~         option {
450 +             name: b"quiet\0" as *const u8 as *const libc::c_char,
451 +             has_arg: 0 as libc::c_int,
452 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
453 +             val: 'q' as i32,
454 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:449:19
    |
449 |             name: b"quiet\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"quiet\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:463:9
    |
457 | /         let mut init = option {
458 | |             name: b"silent\0" as *const u8 as *const libc::c_char,
459 | |             has_arg: 0 as libc::c_int,
460 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
461 | |             val: 'q' as i32,
462 | |         };
    | |__________- unnecessary `let` binding
463 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
457 ~         
458 ~         option {
459 +             name: b"silent\0" as *const u8 as *const libc::c_char,
460 +             has_arg: 0 as libc::c_int,
461 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
462 +             val: 'q' as i32,
463 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:458:19
    |
458 |             name: b"silent\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"silent\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:472:9
    |
466 | /         let mut init = option {
467 | |             name: b"verbose\0" as *const u8 as *const libc::c_char,
468 | |             has_arg: 0 as libc::c_int,
469 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
470 | |             val: 'v' as i32,
471 | |         };
    | |__________- unnecessary `let` binding
472 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
466 ~         
467 ~         option {
468 +             name: b"verbose\0" as *const u8 as *const libc::c_char,
469 +             has_arg: 0 as libc::c_int,
470 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
471 +             val: 'v' as i32,
472 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:467:19
    |
467 |             name: b"verbose\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"verbose\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:481:9
    |
475 | /         let mut init = option {
476 | |             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
477 | |             has_arg: 0 as libc::c_int,
478 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
479 | |             val: 'z' as i32,
480 | |         };
    | |__________- unnecessary `let` binding
481 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
475 ~         
476 ~         option {
477 +             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
478 +             has_arg: 0 as libc::c_int,
479 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
480 +             val: 'z' as i32,
481 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:476:19
    |
476 |             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"zero-terminated\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:490:9
    |
484 | /         let mut init = option {
485 | |             name: b"help\0" as *const u8 as *const libc::c_char,
486 | |             has_arg: 0 as libc::c_int,
487 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
488 | |             val: GETOPT_HELP_CHAR as libc::c_int,
489 | |         };
    | |__________- unnecessary `let` binding
490 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
484 ~         
485 ~         option {
486 +             name: b"help\0" as *const u8 as *const libc::c_char,
487 +             has_arg: 0 as libc::c_int,
488 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
489 +             val: GETOPT_HELP_CHAR as libc::c_int,
490 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:485:19
    |
485 |             name: b"help\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"help\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:499:9
    |
493 | /         let mut init = option {
494 | |             name: b"version\0" as *const u8 as *const libc::c_char,
495 | |             has_arg: 0 as libc::c_int,
496 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
497 | |             val: GETOPT_VERSION_CHAR as libc::c_int,
498 | |         };
    | |__________- unnecessary `let` binding
499 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
493 ~         
494 ~         option {
495 +             name: b"version\0" as *const u8 as *const libc::c_char,
496 +             has_arg: 0 as libc::c_int,
497 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
498 +             val: GETOPT_VERSION_CHAR as libc::c_int,
499 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:494:19
    |
494 |             name: b"version\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"version\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/head.rs:508:9
    |
502 | /         let mut init = option {
503 | |             name: 0 as *const libc::c_char,
504 | |             has_arg: 0 as libc::c_int,
505 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
506 | |             val: 0 as libc::c_int,
507 | |         };
    | |__________- unnecessary `let` binding
508 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
502 ~         
503 ~         option {
504 +             name: 0 as *const libc::c_char,
505 +             has_arg: 0 as libc::c_int,
506 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
507 +             val: 0 as libc::c_int,
508 +         }
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/head.rs:512:1
    |
512 | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
513 | |     if status != 0 as libc::c_int {
514 | |         fprintf(
515 | |             stderr,
...   |
584 | |     exit(status);
585 | | }
    | |_^
    |
    = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/head.rs:512:1
    |
512 | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
513 | |     if status != 0 as libc::c_int {
514 | |         fprintf(
515 | |             stderr,
...   |
584 | |     exit(status);
585 | | }
    | |_^
    |
    = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
note: first possible panic found here
   --> src/head.rs:581:28
    |
581 |         let program_cstr = CStr::from_bytes_with_nul(b"head\0").unwrap();
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unnecessary `!=` operation
   --> src/head.rs:513:5
    |
513 | /     if status != 0 as libc::c_int {
514 | |         fprintf(
515 | |             stderr,
516 | |             gettext(
...   |
582 | | emit_ancillary_info(&program_cstr);
583 | |     }
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:517:17
    |
517 | /                 b"Try '%s --help' for more information.\n\0" as *const u8
518 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Try '%s --help' for more information.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:525:17
    |
525 | /                 b"Usage: %s [OPTION]... [FILE]...\n\0" as *const u8
526 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Usage: %s [OPTION]... [FILE]...\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:532:17
    |
532 | /                 b"Print the first %d lines of each FILE to standard output.\nWith more than one FILE, precede each with a header giving t...
533 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Print the first %d lines of each FILE to standard output.\nWith more than one FILE, precede each with a header giving the file name.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:541:17
    |
541 | /                 b"  -c, --bytes=[-]NUM       print the first NUM bytes of each file;\n                             with the leading '-', ...
542 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -c, --bytes=[-]NUM       print the first NUM bytes of each file;\n                             with the leading '-', print all but the last\n                             NUM bytes of each file\n  -n, --lines=[-]NUM       print the first NUM lines instead of the first %d;\n                             with the leading '-', print all but the last\n                             NUM lines of each file\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:548:17
    |
548 | /                 b"  -q, --quiet, --silent    never print headers giving file names\n  -v, --verbose            always print headers givin...
549 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -q, --quiet, --silent    never print headers giving file names\n  -v, --verbose            always print headers giving file names\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:555:17
    |
555 | /                 b"  -z, --zero-terminated    line delimiter is NUL, not newline\n\0"
556 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -z, --zero-terminated    line delimiter is NUL, not newline\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:562:17
    |
562 | /                 b"      --help        display this help and exit\n\0" as *const u8
563 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --help        display this help and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:569:17
    |
569 | /                 b"      --version     output version information and exit\n\0"
570 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --version     output version information and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:576:17
    |
576 | /                 b"\nNUM may have a multiplier suffix:\nb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\nGB 1000*1000*1000, G 1024*1024...
577 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nNUM may have a multiplier suffix:\nb 512, kB 1000, K 1024, MB 1000*1000, M 1024*1024,\nGB 1000*1000*1000, G 1024*1024*1024, and so on for T, P, E, Z, Y, R, Q.\nBinary prefixes can be used, too: KiB=K, MiB=M, and so on.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this expression creates a reference which is immediately dereferenced by the compiler
   --> src/head.rs:582:21
    |
582 | emit_ancillary_info(&program_cstr);
    |                     ^^^^^^^^^^^^^ help: change this to: `program_cstr`
    |
    = note: `-W clippy::needless-borrow` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:599:29
    |
599 |                     gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:613:29
    |
613 |                     gettext(b"%s: file has shrunk too much\0" as *const u8 as *const libc::c_char),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: file has shrunk too much\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:638:18
    |
638 |     if n_bytes > 0 as libc::c_int as libc::c_ulong
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:640:13
    |
640 |             buffer as *const libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:641:13
    |
641 |             1 as libc::c_int as size_t,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/head.rs:648:9
    |
648 | /         if 0 != 0 {
649 | |             error(
650 | |                 1 as libc::c_int,
651 | |                 *__errno_location(),
...   |
693 | |             });
694 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/head.rs:648:12
    |
648 |         if 0 != 0 {
    |            ^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:652:25
    |
652 |                 gettext(b"error writing %s\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error writing %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:655:21
    |
655 |                     b"standard output\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"standard output\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:658:13
    |
658 | /             if 1 as libc::c_int != 0 as libc::c_int {
659 | |                 unreachable!();
660 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/head.rs:663:17
    |
663 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:667:29
    |
667 |                     gettext(b"error writing %s\0" as *const u8 as *const libc::c_char),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error writing %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:670:25
    |
670 |                         b"standard output\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"standard output\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:673:17
    |
673 | /                 if __errstatus != 0 as libc::c_int {
674 | |                     unreachable!();
675 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/head.rs:679:17
    |
679 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:683:29
    |
683 |                     gettext(b"error writing %s\0" as *const u8 as *const libc::c_char),
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error writing %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:686:25
    |
686 |                         b"standard output\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"standard output\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:689:17
    |
689 | /                 if __errstatus != 0 as libc::c_int {
690 | |                     unreachable!();
691 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/head.rs:702:38
    |
702 |         let n_to_read = buf_size.min(n_bytes as usize);
    |                                      ^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:705:31
    |
705 |             safe_read(src_fd, buf.as_mut_ptr() as *mut libc::c_void, n_to_read.try_into().unwrap())
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.as_mut_ptr().cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:708:22
    |
708 |         if n_read == -(1 as libc::c_int) as size_t {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/head.rs:812:5
    |
812 |     return new_offset;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `new_offset`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/head.rs:733:21
    |
733 |     if new_offset < 0 as libc::c_int as libc::c_long {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/head.rs:734:9
    |
734 | /         if 0 != 0 {
735 | |             error(
736 | |                 0 as libc::c_int,
737 | |                 *__errno_location(),
...   |
809 | |             });
810 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/head.rs:734:12
    |
734 |         if 0 != 0 {
    |            ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:740:25
    |
740 | /                         b"%s: cannot seek to offset %s\0" as *const u8
741 | |                             as *const libc::c_char
    | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot seek to offset %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:743:25
    |
743 | /                         b"%s: cannot seek to relative offset %s\0" as *const u8
744 | |                             as *const libc::c_char
    | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot seek to relative offset %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:754:13
    |
754 | /             if 0 as libc::c_int != 0 as libc::c_int {
755 | |                 unreachable!();
756 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/head.rs:754:16
    |
754 |             if 0 as libc::c_int != 0 as libc::c_int {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/head.rs:759:17
    |
759 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:765:29
    |
765 | / ...                   b"%s: cannot seek to offset %s\0" as *const u8
766 | | ...                       as *const libc::c_char
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot seek to offset %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:768:29
    |
768 | / ...                   b"%s: cannot seek to relative offset %s\0" as *const u8
769 | | ...                       as *const libc::c_char
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot seek to relative offset %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:779:17
    |
779 | /                 if __errstatus != 0 as libc::c_int {
780 | |                     unreachable!();
781 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/head.rs:785:17
    |
785 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:791:29
    |
791 | / ...                   b"%s: cannot seek to offset %s\0" as *const u8
792 | | ...                       as *const libc::c_char
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot seek to offset %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:794:29
    |
794 | / ...                   b"%s: cannot seek to relative offset %s\0" as *const u8
795 | | ...                       as *const libc::c_char
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: cannot seek to relative offset %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:805:17
    |
805 | /                 if __errstatus != 0 as libc::c_int {
806 | |                     unreachable!();
807 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: the function has a cognitive complexity of (35/25)
   --> src/head.rs:814:22
    |
814 | unsafe extern "C" fn elide_tail_bytes_pipe(
    |                      ^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (258/100)
    --> src/head.rs:814:1
     |
814  | / unsafe extern "C" fn elide_tail_bytes_pipe(
815  | |     mut filename: *const libc::c_char,
816  | |     mut fd: libc::c_int,
817  | |     mut n_elide_0: uintmax_t,
...    |
1091 | |
1092 | | }
     | |_^
     |
     = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/head.rs:821:28
    |
821 | let mut desired_pos: u64 = current_pos as u64;
    |                            ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/head.rs:824:4
    |
824 | if n_elide_0.wrapping_add(8192) > u64::MAX {
    |    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::absurd-extreme-comparisons` implied by `-W clippy::all`
    = help: because `u64::MAX` is the maximum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:830:17
    |
830 |         gettext(b"%s: number of bytes is too large\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: number of bytes is too large\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:839:37
    |
839 |         let mut n_to_read: size_t = (8192 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
   --> src/head.rs:842:46
    |
842 |         let mut b: [*mut libc::c_char; 2] = [0 as *mut libc::c_char; 2];
    |                                              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:844:25
    |
844 |               as usize] = xnmalloc(2 as libc::c_int as size_t, n_to_read)
    |  _________________________^
845 | |             as *mut libc::c_char;
    | |________________________________^ help: try `pointer::cast`, a safer alternative: `xnmalloc(2 as libc::c_int as size_t, n_to_read).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:844:34
    |
844 |             as usize] = xnmalloc(2 as libc::c_int as size_t, n_to_read)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
   --> src/head.rs:843:11
    |
843 |           b[0 as libc::c_int
    |  ___________^
844 | |             as usize] = xnmalloc(2 as libc::c_int as size_t, n_to_read)
    | |____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
   --> src/head.rs:847:28
    |
847 |             as usize] = (b[0 as libc::c_int as usize]).offset(n_to_read as isize);
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/head.rs:847:63
    |
847 |             as usize] = (b[0 as libc::c_int as usize]).offset(n_to_read as isize);
    |                                                               ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/head.rs:847:63
    |
847 |             as usize] = (b[0 as libc::c_int as usize]).offset(n_to_read as isize);
    |                                                               ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `usize` may lose the sign of the value
   --> src/head.rs:846:11
    |
846 |           b[1 as libc::c_int
    |  ___________^
847 | |             as usize] = (b[0 as libc::c_int as usize]).offset(n_to_read as isize);
    | |____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:852:17
    |
852 |                 b[i as usize] as *mut libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b[i as usize].cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `usize` is more cleanly stated with `usize::from(_)`
   --> src/head.rs:852:19
    |
852 |                 b[i as usize] as *mut libc::c_void,
    |                   ^^^^^^^^^^ help: try: `usize::from(i)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:855:37
    |
855 |             let mut delta: size_t = 0 as libc::c_int as size_t;
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/head.rs:857:17
    |
857 | /                 if *__errno_location() != 0 as libc::c_int {
858 | |                     if 0 != 0 {
859 | |                         error(
860 | |                             0 as libc::c_int,
...   |
910 | |                     eof = 1 as libc::c_int != 0;
911 | |                 }
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/head.rs:858:21
    |
858 | /                     if 0 != 0 {
859 | |                         error(
860 | |                             0 as libc::c_int,
861 | |                             *__errno_location(),
...   |
900 | |                         });
901 | |                     };
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/head.rs:858:24
    |
858 |                     if 0 != 0 {
    |                        ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:863:33
    |
863 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:867:25
    |
867 | /                         if 0 as libc::c_int != 0 as libc::c_int {
868 | |                             unreachable!();
869 | |                         } else {};
    | |_________________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/head.rs:867:28
    |
867 |                         if 0 as libc::c_int != 0 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/head.rs:872:29
    |
872 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:877:37
    |
877 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:881:29
    |
881 | / ...                   if __errstatus != 0 as libc::c_int {
882 | | ...                       unreachable!();
883 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/head.rs:887:29
    |
887 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:892:37
    |
892 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/head.rs:896:29
    |
896 | / ...                   if __errstatus != 0 as libc::c_int {
897 | | ...                       unreachable!();
898 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
   --> src/head.rs:917:24
    |
917 |                     (b[!i as libc::c_int as usize]).offset(8192 as libc::c_int as isize),
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/head.rs:917:24
    |
917 |                     (b[!i as libc::c_int as usize]).offset(8192 as libc::c_int as isize),
    |                        ^^^^^^^^^^^^^^^^^ help: try: `i32::from(!i)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `usize` is more cleanly stated with `usize::from(_)`
   --> src/head.rs:926:33
    |
926 |                 xwrite_stdout(b[i as usize], n_read.wrapping_sub(n_elide));
    |                                 ^^^^^^^^^^ help: try: `usize::from(i)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:930:14
    |
930 |         free(b[0 as libc::c_int as usize] as *mut libc::c_void);
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b[0 as libc::c_int as usize].cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `usize` may lose the sign of the value
   --> src/head.rs:930:16
    |
930 |         free(b[0 as libc::c_int as usize] as *mut libc::c_void);
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
   --> src/head.rs:939:47
    |
939 |         let mut b_0: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:940:31
    |
940 |         let mut rem: size_t = (8192 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:941:48
    |
941 |             .wrapping_sub(n_elide.wrapping_rem(8192 as libc::c_int as libc::c_ulong));
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:944:27
    |
944 |             .wrapping_div(8192 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:945:27
    |
945 |             .wrapping_add(1 as libc::c_int as libc::c_ulong);
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:946:35
    |
946 |         let mut n_alloc: size_t = 0 as libc::c_int as size_t;
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:947:41
    |
947 |         let mut n_array_alloc: size_t = 0 as libc::c_int as size_t;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:949:15
    |
949 |         i_0 = 0 as libc::c_int as size_t;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:950:18
    |
950 |         i_next = 1 as libc::c_int as size_t;
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:957:37
    |
957 |                 if n_array_alloc == 0 as libc::c_int as libc::c_ulong {
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:958:49
    |
958 |                     n_array_alloc = if n_bufs < 16 as libc::c_int as libc::c_ulong {
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:961:25
    |
961 |                         16 as libc::c_int as libc::c_ulong
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:964:44
    |
964 |                     <= n_bufs.wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:967:39
    |
967 |                         .wrapping_mul(2 as libc::c_int as libc::c_ulong) as size_t
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:972:23
    |
972 |                   b_0 = xnrealloc(
    |  _______________________^
973 | |                     b_0 as *mut libc::c_void,
974 | |                     n_array_alloc,
975 | |                     ::core::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,
976 | |                 ) as *mut *mut libc::c_char;
    | |___________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
972 ~                 b_0 = xnrealloc(
973 +                     b_0 as *mut libc::c_void,
974 +                     n_array_alloc,
975 +                     ::core::mem::size_of::<*mut libc::c_char>() as libc::c_ulong,
976 ~                 ).cast::<*mut i8>();
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:973:21
    |
973 |                     b_0 as *mut libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b_0.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
   --> src/head.rs:979:21
    |
979 |                 let ref mut fresh0 = *b_0.offset(i_0 as isize);
    |                 ----^^^^^^^^^^^^^^----------------------------- help: try: `let fresh0 = &mut (*b_0.offset(i_0 as isize));`
    |
    = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/head.rs:979:50
    |
979 |                 let ref mut fresh0 = *b_0.offset(i_0 as isize);
    |                                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/head.rs:979:50
    |
979 |                 let ref mut fresh0 = *b_0.offset(i_0 as isize);
    |                                                  ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:980:27
    |
980 |                 *fresh0 = xmalloc(8192 as libc::c_int as size_t) as *mut libc::c_char;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `xmalloc(8192 as libc::c_int as size_t).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:980:35
    |
980 |                 *fresh0 = xmalloc(8192 as libc::c_int as size_t) as *mut libc::c_char;
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:981:44
    |
981 |                 n_alloc = i_0.wrapping_add(1 as libc::c_int as libc::c_ulong);
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:985:17
    |
985 |                 *b_0.offset(i_0 as isize) as *mut libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*b_0.offset(i_0 as isize)).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/head.rs:985:29
    |
985 |                 *b_0.offset(i_0 as isize) as *mut libc::c_void,
    |                             ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/head.rs:985:29
    |
985 |                 *b_0.offset(i_0 as isize) as *mut libc::c_void,
    |                             ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:986:17
    |
986 |                 8192 as libc::c_int as size_t,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/head.rs:988:27
    |
988 |             if n_read_0 < 8192 as libc::c_int as libc::c_ulong {
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/head.rs:989:17
     |
989  | /                 if *__errno_location() != 0 as libc::c_int {
990  | |                     if 0 != 0 {
991  | |                         error(
992  | |                             0 as libc::c_int,
...    |
1038 | |                     eof_0 = 1 as libc::c_int != 0;
1039 | |                 }
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/head.rs:990:21
     |
990  | /                     if 0 != 0 {
991  | |                         error(
992  | |                             0 as libc::c_int,
993  | |                             *__errno_location(),
...    |
1032 | |                         });
1033 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/head.rs:990:24
    |
990 |                     if 0 != 0 {
    |                        ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/head.rs:995:33
    |
995 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:999:25
     |
999  | /                         if 0 as libc::c_int != 0 as libc::c_int {
1000 | |                             unreachable!();
1001 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/head.rs:999:28
    |
999 |                         if 0 as libc::c_int != 0 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1004:29
     |
1004 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1009:37
     |
1009 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1013:29
     |
1013 | / ...                   if __errstatus != 0 as libc::c_int {
1014 | | ...                       unreachable!();
1015 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1019:29
     |
1019 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1024:37
     |
1024 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1028:29
     |
1028 | / ...                   if __errstatus != 0 as libc::c_int {
1029 | | ...                       unreachable!();
1030 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1041:33
     |
1041 |             if i_0.wrapping_add(1 as libc::c_int as libc::c_ulong) == n_bufs {
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1047:43
     |
1047 |                 xwrite_stdout(*b_0.offset(i_next as isize), n_read_0);
     |                                           ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1047:43
     |
1047 |                 xwrite_stdout(*b_0.offset(i_next as isize), n_read_0);
     |                                           ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1051:31
     |
1051 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/head.rs:1055:6
     |
1055 | /      match current_block_69 {
1056 | |     10753070352654377903 => {
1057 | |         if rem != 0 {
1058 | |             if buffered_enough {
...    |
1075 | |     _ => {}
1076 | | }
     | |_^
     |
     = note: `-W clippy::single-match` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1055 ~      if current_block_69 == 10753070352654377903 {
1056 +          if rem != 0 {
1057 +              if buffered_enough {
1058 +                  let n_bytes_left_in_b_i: usize = 8192 - n_read_0 as usize;
1059 +                  desired_pos = desired_pos.wrapping_add(rem);
1060 +                  if rem < n_bytes_left_in_b_i as u64 {
1061 +                      xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), rem);
1062 +                  } else {
1063 +                      xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), n_bytes_left_in_b_i as u64);
1064 +                      xwrite_stdout(*b_0.offset(i_next as isize), rem.wrapping_sub(n_bytes_left_in_b_i as u64));
1065 +                  }
1066 +              } else if i_0 + 1 == n_bufs {
1067 +                  let y: usize = 8192 - rem as usize;
1068 +                  let x: usize = n_read_0 as usize - y;
1069 +                  desired_pos = desired_pos.wrapping_add(x as u64);
1070 +                  xwrite_stdout(*b_0.offset(i_next as isize), x as u64);
1071 +              }
1072 +          }
1073 +      }
     |

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1059:57
     |
1059 |                 let n_bytes_left_in_b_i: usize = 8192 - n_read_0 as usize;
     |                                                         ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1062:48
     |
1062 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), rem);
     |                                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1062:48
     |
1062 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), rem);
     |                                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1062:70
     |
1062 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), rem);
     |                                                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1062:70
     |
1062 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), rem);
     |                                                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1064:48
     |
1064 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), n_bytes_left_in_b_i as u64);
     |                                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1064:48
     |
1064 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), n_bytes_left_in_b_i as u64);
     |                                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1064:70
     |
1064 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), n_bytes_left_in_b_i as u64);
     |                                                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1064:70
     |
1064 |                     xwrite_stdout((*b_0.offset(i_0 as isize)).offset(n_read_0 as isize), n_bytes_left_in_b_i as u64);
     |                                                                      ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1065:47
     |
1065 |                     xwrite_stdout(*b_0.offset(i_next as isize), rem.wrapping_sub(n_bytes_left_in_b_i as u64));
     |                                               ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1065:47
     |
1065 |                     xwrite_stdout(*b_0.offset(i_next as isize), rem.wrapping_sub(n_bytes_left_in_b_i as u64));
     |                                               ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1068:39
     |
1068 |                 let y: usize = 8192 - rem as usize;
     |                                       ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1069:32
     |
1069 |                 let x: usize = n_read_0 as usize - y;
     |                                ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1071:43
     |
1071 |                 xwrite_stdout(*b_0.offset(i_next as isize), x as u64);
     |                                           ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1071:43
     |
1071 |                 xwrite_stdout(*b_0.offset(i_next as isize), x as u64);
     |                                           ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1079:10
     |
1079 |     free(*b_0.offset(i as isize) as *mut libc::c_void);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*b_0.offset(i as isize)).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1079:22
     |
1079 |     free(*b_0.offset(i as isize) as *mut libc::c_void);
     |                      ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1079:22
     |
1079 |     free(*b_0.offset(i as isize) as *mut libc::c_void);
     |                      ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1081:6
     |
1081 | free(b_0 as *mut libc::c_void);
     |      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `b_0.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `i64` may wrap around the value
    --> src/head.rs:1086:35
     |
1086 | if current_pos >= 0 && elseek(fd, desired_pos as i64, 0, filename) < 0 {
     |                                   ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
    --> src/head.rs:1115:9
     |
1115 |         return elide_tail_bytes_pipe(filename, fd, n_elide, current_pos)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `elide_tail_bytes_pipe(filename, fd, n_elide, current_pos)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
    --> src/head.rs:1132:9
     |
1132 |         return 0 as libc::c_int != 0;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:1101:8
     |
1101 |     if presume_input_pipe as libc::c_int != 0
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(presume_input_pipe)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1102:26
     |
1102 |         || current_pos < 0 as libc::c_int as libc::c_long
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1104:16
     |
1104 |               <= (if (0 as libc::c_int) < (*st).st_blksize
     |  ________________^
1105 | |                 && (*st).st_blksize as libc::c_ulong
1106 | |                     <= (-(1 as libc::c_int) as size_t)
1107 | |                         .wrapping_div(8 as libc::c_int as libc::c_ulong)
...    |
1112 | |                 512 as libc::c_int
1113 | |             }) as libc::c_long
     | |______________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1104 ~             <= i64::from((if (0 as libc::c_int) < (*st).st_blksize
1105 +                 && (*st).st_blksize as libc::c_ulong
1106 +                     <= (-(1 as libc::c_int) as size_t)
1107 +                         .wrapping_div(8 as libc::c_int as libc::c_ulong)
1108 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
1109 +             {
1110 +                 (*st).st_blksize
1111 +             } else {
1112 +                 512 as libc::c_int
1113 +             }))
     |

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1105:20
     |
1105 |                 && (*st).st_blksize as libc::c_ulong
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1106:24
     |
1106 |                     <= (-(1 as libc::c_int) as size_t)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1107:39
     |
1107 |                         .wrapping_div(8 as libc::c_int as libc::c_ulong)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1108:39
     |
1108 |                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1118:52
     |
1118 |         let mut bytes_remaining: off_t = if diff < 0 as libc::c_int as libc::c_long {
     |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1119:13
     |
1119 |             0 as libc::c_int as libc::c_long
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/head.rs:1123:12
     |
1123 |         if bytes_remaining as libc::c_ulong <= n_elide {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/head.rs:1126:29
     |
1126 |         let bytes_to_copy = (bytes_remaining as libc::c_ulong).wrapping_sub(n_elide);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1128:35
     |
1128 |         if err as libc::c_uint == COPY_FD_OK as libc::c_int as libc::c_uint {
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/head.rs:1128:35
     |
1128 |         if err as libc::c_uint == COPY_FD_OK as libc::c_int as libc::c_uint {
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: this boolean expression can be simplified
    --> src/head.rs:1181:20
     |
1181 |                 if !(p < buffer_end as *const libc::c_char) {
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `p >= buffer_end as *const libc::c_char`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (125/100)
    --> src/head.rs:1135:1
     |
1135 | / unsafe extern "C" fn elide_tail_lines_pipe(
1136 | |     mut filename: *const libc::c_char,
1137 | |     mut fd: libc::c_int,
1138 | |     mut n_elide: uintmax_t,
...    |
1266 | |
1267 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/head.rs:1141:38
     |
1141 |     let mut desired_pos: uintmax_t = current_pos as uintmax_t;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
    --> src/head.rs:1142:35
     |
1142 |     let mut first: *mut LBUFFER = 0 as *mut LBUFFER;
     |                                   ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<LBUFFER>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/head.rs:1143:34
     |
1143 |     let mut last: *mut LBUFFER = 0 as *mut LBUFFER;
     |                                  ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<LBUFFER>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/head.rs:1144:33
     |
1144 |     let mut tmp: *mut LBUFFER = 0 as *mut LBUFFER;
     |                                 ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<LBUFFER>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1145:35
     |
1145 |     let mut total_lines: size_t = 0 as libc::c_int as size_t;
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1148:12
     |
1148 |     last = xmalloc(::core::mem::size_of::<LBUFFER>() as libc::c_ulong) as *mut LBUFFER;
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `xmalloc(::core::mem::size_of::<LBUFFER>() as libc::c_ulong).cast::<linebuffer>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1150:23
     |
1150 |     (*first).nlines = 0 as libc::c_int as size_t;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
    --> src/head.rs:1152:21
     |
1152 |     (*first).next = 0 as *mut linebuffer;
     |                     ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1153:11
     |
1153 |     tmp = xmalloc(::core::mem::size_of::<LBUFFER>() as libc::c_ulong) as *mut LBUFFER;
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `xmalloc(::core::mem::size_of::<LBUFFER>() as libc::c_ulong).cast::<linebuffer>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1157:13
     |
1157 |             ((*tmp).buffer).as_mut_ptr() as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `((*tmp).buffer).as_mut_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1158:13
     |
1158 |             8192 as libc::c_int as size_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1160:22
     |
1160 |         if n_read == 0 as libc::c_int as libc::c_ulong
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1161:26
     |
1161 |             || n_read == -(1 as libc::c_int) as size_t
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1171:29
     |
1171 |             (*tmp).nlines = 0 as libc::c_int as size_t;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
    --> src/head.rs:1172:27
     |
1172 |             (*tmp).next = 0 as *mut linebuffer;
     |                           ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1175:25
     |
1175 |                 .offset(n_read as isize);
     |                         ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1175:25
     |
1175 |                 .offset(n_read as isize);
     |                         ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1179:31
     |
1179 |                 p = rawmemchr(p as *const libc::c_void, line_end as libc::c_int)
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `p.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1179:57
     |
1179 |                 p = rawmemchr(p as *const libc::c_void, line_end as libc::c_int)
     |                                                         ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(line_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
    --> src/head.rs:1185:17
     |
1185 |                 p;
     |                 ^^
     |
     = note: `-W clippy::no-effect` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/head.rs:1187:17
     |
1187 |                 (*tmp).nlines;
     |                 ^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1192:19
     |
1192 |                 < 8192 as libc::c_int as libc::c_ulong
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1195:21
     |
1195 | /                     &mut *((*last).buffer).as_mut_ptr().offset((*last).nbytes as isize)
1196 | |                         as *mut libc::c_char as *mut libc::c_void,
     | |_________________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(&mut *((*last).buffer).as_mut_ptr().offset((*last).nbytes as isize) as *mut libc::c_char).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: borrow as raw pointer
    --> src/head.rs:1195:21
     |
1195 | /                     &mut *((*last).buffer).as_mut_ptr().offset((*last).nbytes as isize)
1196 | |                         as *mut libc::c_char as *mut libc::c_void,
     | |____________________________________________^ help: try: `std::ptr::addr_of_mut!(*((*last).buffer).as_mut_ptr().offset((*last).nbytes as isize))`
     |
     = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1195:64
     |
1195 |                     &mut *((*last).buffer).as_mut_ptr().offset((*last).nbytes as isize)
     |                                                                ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:1195:64
     |
1195 |                     &mut *((*last).buffer).as_mut_ptr().offset((*last).nbytes as isize)
     |                                                                ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1218:27
     |
1218 |                       tmp = xmalloc(::core::mem::size_of::<LBUFFER>() as libc::c_ulong)
     |  ___________________________^
1219 | |                         as *mut LBUFFER;
     | |_______________________________________^ help: try `pointer::cast`, a safer alternative: `xmalloc(::core::mem::size_of::<LBUFFER>() as libc::c_ulong).cast::<linebuffer>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1224:10
     |
1224 |     free(tmp as *mut libc::c_void);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `tmp.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1233:66
     |
1233 |     if unsafe { (*last).nbytes } != 0 && unsafe { (*last).buffer[(*last).nbytes as usize - 1] } != line_end {
     |                                                                  ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1246:50
     |
1246 |         let buffer_end = unsafe { &(*tmp).buffer[(*tmp).nbytes as usize..] };
     |                                                  ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: called `is_some()` after searching an `Iterator` with `position`
    --> src/head.rs:1248:34
     |
1248 |         while n != 0 && p.iter().position(|&x| x == line_end).is_some() {
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use `any()` instead: `any(|&x| x == line_end)`
     |
     = note: `-W clippy::search-is-some` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#search_is_some

warning: casting `isize` to `u64` may lose the sign of the value
    --> src/head.rs:1253:24
     |
1253 |         desired_pos += p.as_ptr().offset_from(unsafe { (*tmp).buffer.as_ptr() }) as u64;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `isize` to `u64` may lose the sign of the value
    --> src/head.rs:1254:58
     |
1254 |         xwrite_stdout(unsafe { (*tmp).buffer.as_ptr() }, p.as_ptr().offset_from(unsafe { (*tmp).buffer.as_ptr() }) as u64);
     |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1259:10
     |
1259 |     free(first as *mut libc::c_void);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `first.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `i64` may wrap around the value
    --> src/head.rs:1262:35
     |
1262 | if current_pos >= 0 && elseek(fd, desired_pos as i64, 0, filename) < 0 {
     |                                   ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/head.rs:1278:14
     |
1278 | bytes_read = ((pos - start_pos) % 8192) as u64;
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
    --> src/head.rs:1282:8
     |
1282 | pos -= bytes_read as i64;
     |        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1288:28
     |
1288 | bytes_read = safe_read(fd, buffer.as_mut_ptr() as *mut libc::c_void, bytes_read);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.as_mut_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1293:17
     |
1293 |         gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1301:15
     |
1301 |     && buffer[bytes_read.wrapping_sub(1) as usize] != line_end
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1307:24
     |
1307 |     let mut n: usize = bytes_read as usize;
     |                        ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/head.rs:1326:35
     |
1326 |                 err = copy_fd(fd, (pos - start_pos) as u64);
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1327:34
     |
1327 |                 if err as u32 != COPY_FD_OK as i32 as u32 {
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/head.rs:1327:34
     |
1327 |                 if err as u32 != COPY_FD_OK as i32 as u32 {
     |                                  ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
    --> src/head.rs:1333:31
     |
1333 |             return elseek(fd, (pos as u64 + n as u64 + 1) as i64, 0, pretty_filename) <= 0;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/head.rs:1333:32
     |
1333 |             return elseek(fd, (pos as u64 + n as u64 + 1) as i64, 0, pretty_filename) <= 0;
     |                                ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1343:32
     |
1343 |     bytes_read = safe_read(fd, buffer.as_mut_ptr() as *mut libc::c_void, 8192);
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.as_mut_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1348:21
     |
1348 |             gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
    --> src/head.rs:1381:9
     |
1381 |         return elide_tail_lines_pipe(filename, fd, n_elide, current_pos)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `elide_tail_lines_pipe(filename, fd, n_elide, current_pos)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
    --> src/head.rs:1383:9
     |
1383 | /         return size <= current_pos
1384 | |             || elide_tail_lines_seekable(filename, fd, n_elide, current_pos, size)
1385 | |                 as libc::c_int != 0
     | |___________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1383 ~         size <= current_pos
1384 +             || elide_tail_lines_seekable(filename, fd, n_elide, current_pos, size)
1385 +                 as libc::c_int != 0
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:1367:8
     |
1367 |     if presume_input_pipe as libc::c_int != 0
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(presume_input_pipe)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1368:26
     |
1368 |         || current_pos < 0 as libc::c_int as libc::c_long
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1370:16
     |
1370 |               <= (if (0 as libc::c_int) < (*st).st_blksize
     |  ________________^
1371 | |                 && (*st).st_blksize as libc::c_ulong
1372 | |                     <= (-(1 as libc::c_int) as size_t)
1373 | |                         .wrapping_div(8 as libc::c_int as libc::c_ulong)
...    |
1378 | |                 512 as libc::c_int
1379 | |             }) as libc::c_long
     | |______________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1370 ~             <= i64::from((if (0 as libc::c_int) < (*st).st_blksize
1371 +                 && (*st).st_blksize as libc::c_ulong
1372 +                     <= (-(1 as libc::c_int) as size_t)
1373 +                         .wrapping_div(8 as libc::c_int as libc::c_ulong)
1374 +                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
1375 +             {
1376 +                 (*st).st_blksize
1377 +             } else {
1378 +                 512 as libc::c_int
1379 +             }))
     |

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1371:20
     |
1371 |                 && (*st).st_blksize as libc::c_ulong
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1372:24
     |
1372 |                     <= (-(1 as libc::c_int) as size_t)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1373:39
     |
1373 |                         .wrapping_div(8 as libc::c_int as libc::c_ulong)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1374:39
     |
1374 |                         .wrapping_add(1 as libc::c_int as libc::c_ulong)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:1384:16
     |
1384 |               || elide_tail_lines_seekable(filename, fd, n_elide, current_pos, size)
     |  ________________^
1385 | |                 as libc::c_int != 0
     | |______________________________^ help: try: `i32::from(elide_tail_lines_seekable(filename, fd, n_elide, current_pos, size))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1402:27
     |
1402 |             safe_read(fd, buffer.as_mut_ptr() as *mut libc::c_void, bytes_to_read)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.as_mut_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1405:26
     |
1405 |         if bytes_read == !(0 as libc::c_int) as u64 {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1411:29
     |
1411 |                     gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1422:47
     |
1422 |         std::io::stdout().write_all(&buffer[..bytes_read as usize]).unwrap();
     |                                               ^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unneeded `return` statement
    --> src/head.rs:1534:5
     |
1534 |     return 1 as libc::c_int != 0;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1437:13
     |
1437 |             buffer.as_mut_ptr() as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.as_mut_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1438:13
     |
1438 |             8192 as libc::c_int as size_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1440:42
     |
1440 |         let mut bytes_to_write: size_t = 0 as libc::c_int as size_t;
     |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1441:26
     |
1441 |         if bytes_read == -(1 as libc::c_int) as size_t {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/head.rs:1442:13
     |
1442 | /             if 0 != 0 {
1443 | |                 error(
1444 | |                     0 as libc::c_int,
1445 | |                     *__errno_location(),
...    |
1482 | |                 });
1483 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1442:16
     |
1442 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1446:29
     |
1446 |                     gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1449:17
     |
1449 | /                 if 0 as libc::c_int != 0 as libc::c_int {
1450 | |                     unreachable!();
1451 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1449:20
     |
1449 |                 if 0 as libc::c_int != 0 as libc::c_int {
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1454:21
     |
1454 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1459:29
     |
1459 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1463:21
     |
1463 | /                     if __errstatus != 0 as libc::c_int {
1464 | |                         unreachable!();
1465 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1469:21
     |
1469 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1474:29
     |
1474 | ...                   b"error reading %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1478:21
     |
1478 | /                     if __errstatus != 0 as libc::c_int {
1479 | |                         unreachable!();
1480 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1486:26
     |
1486 |         if bytes_read == 0 as libc::c_int as libc::c_ulong {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1492:18
     |
1492 |             if !(buffer[fresh2 as usize] as libc::c_int == line_end as libc::c_int
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(buffer[fresh2 as usize])`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:1492:25
     |
1492 |             if !(buffer[fresh2 as usize] as libc::c_int == line_end as libc::c_int
     |                         ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1492:60
     |
1492 |             if !(buffer[fresh2 as usize] as libc::c_int == line_end as libc::c_int
     |                                                            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(line_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1495:39
     |
1495 |                     lines_to_write == 0 as libc::c_int as libc::c_ulong
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
    --> src/head.rs:1500:47
     |
1500 |               let mut n_bytes_past_EOL: off_t = bytes_read.wrapping_sub(bytes_to_write)
     |  _______________________________________________^
1501 | |                 as off_t;
     | |________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1503:19
     |
1503 |                 < 0 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1524:37
     |
1524 |                     || st.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1525:28
     |
1525 |                         == 0o100000 as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
    --> src/head.rs:1630:9
     |
1630 |         return head_lines(filename, fd, n_units)
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `head_lines(filename, fd, n_units)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
    --> src/head.rs:1633:5
     |
1633 |     return head_bytes(filename_cstr, fd, n_units.try_into().unwrap());
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `head_bytes(filename_cstr, fd, n_units.try_into().unwrap())`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1548:38
     |
1548 |         let mut current_pos: off_t = -(1 as libc::c_int) as off_t;
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/head.rs:1568:13
     |
1568 | /             if 0 != 0 {
1569 | |                 error(
1570 | |                     0 as libc::c_int,
1571 | |                     *__errno_location(),
...    |
1608 | |                 });
1609 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1568:16
     |
1568 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1572:29
     |
1572 |                     gettext(b"cannot fstat %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cannot fstat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1575:17
     |
1575 | /                 if 0 as libc::c_int != 0 as libc::c_int {
1576 | |                     unreachable!();
1577 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1575:20
     |
1575 |                 if 0 as libc::c_int != 0 as libc::c_int {
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1580:21
     |
1580 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1585:29
     |
1585 | ...                   b"cannot fstat %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cannot fstat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1589:21
     |
1589 | /                     if __errstatus != 0 as libc::c_int {
1590 | |                         unreachable!();
1591 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1595:21
     |
1595 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1600:29
     |
1600 | ...                   b"cannot fstat %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cannot fstat %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1604:21
     |
1604 | /                     if __errstatus != 0 as libc::c_int {
1605 | |                         unreachable!();
1606 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:1612:35
     |
1612 |         if !presume_input_pipe && usable_st_size(&mut st) as libc::c_int != 0 {
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(usable_st_size(&mut st))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: the function `usable_st_size` doesn't need a mutable reference
    --> src/head.rs:1612:50
     |
1612 |         if !presume_input_pipe && usable_st_size(&mut st) as libc::c_int != 0 {
     |                                                  ^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1615:17
     |
1615 |                 0 as libc::c_int as off_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1619:30
     |
1619 |             if current_pos < 0 as libc::c_int as libc::c_long {
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: the function `elide_tail_lines_file` doesn't need a mutable reference
    --> src/head.rs:1624:65
     |
1624 |             return elide_tail_lines_file(filename, fd, n_units, &mut st, current_pos)
     |                                                                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: the function `elide_tail_bytes_file` doesn't need a mutable reference
    --> src/head.rs:1626:65
     |
1626 |             return elide_tail_bytes_file(filename, fd, n_units, &mut st, current_pos)
     |                                                                 ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: useless conversion to the same type: `u64`
    --> src/head.rs:1633:42
     |
1633 |     return head_bytes(filename_cstr, fd, n_units.try_into().unwrap());
     |                                          ^^^^^^^^^^^^^^^^^^
     |
     = note: `-W clippy::useless-conversion` implied by `-W clippy::all`
     = help: consider removing `.try_into()`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_conversion

warning: this function has too many lines (103/100)
    --> src/head.rs:1636:1
     |
1636 | / unsafe extern "C" fn head_file(
1637 | |     mut filename: *const libc::c_char,
1638 | |     mut n_units: uintmax_t,
1639 | |     mut count_lines: bool,
...    |
1748 | |     return ok;
1749 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/head.rs:1748:5
     |
1748 |     return ok;
     |     ^^^^^^^^^^ help: remove `return`: `ok`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1644:47
     |
1644 |     let mut is_stdin: bool = strcmp(filename, b"-\0" as *const u8 as *const libc::c_char)
     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1649:28
     |
1649 |         filename = gettext(b"standard input\0" as *const u8 as *const libc::c_char);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"standard input\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: equal expressions as operands to `|`
    --> src/head.rs:1654:29
     |
1654 |         fd = open(filename, 0 as libc::c_int | 0 as libc::c_int);
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: unnecessary `!=` operation
    --> src/head.rs:1656:13
     |
1656 | /             if 0 != 0 {
1657 | |                 error(
1658 | |                     0 as libc::c_int,
1659 | |                     *__errno_location(),
...    |
1701 | |                 });
1702 | |             };
     | |_____________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1656:16
     |
1656 |             if 0 != 0 {
     |                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1661:25
     |
1661 | /                         b"cannot open %s for reading\0" as *const u8
1662 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot open %s for reading\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1666:17
     |
1666 | /                 if 0 as libc::c_int != 0 as libc::c_int {
1667 | |                     unreachable!();
1668 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1666:20
     |
1666 |                 if 0 as libc::c_int != 0 as libc::c_int {
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1671:21
     |
1671 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1676:29
     |
1676 | / ...                   b"cannot open %s for reading\0" as *const u8
1677 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot open %s for reading\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1681:21
     |
1681 | /                     if __errstatus != 0 as libc::c_int {
1682 | |                         unreachable!();
1683 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1687:21
     |
1687 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1692:29
     |
1692 | / ...                   b"cannot open %s for reading\0" as *const u8
1693 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot open %s for reading\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1697:21
     |
1697 | /                     if __errstatus != 0 as libc::c_int {
1698 | |                         unreachable!();
1699 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/head.rs:1708:9
     |
1708 | /         if 0 != 0 {
1709 | |             error(
1710 | |                 0 as libc::c_int,
1711 | |                 *__errno_location(),
...    |
1744 | |             });
1745 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1708:12
     |
1708 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1712:25
     |
1712 |                 gettext(b"failed to close %s\0" as *const u8 as *const libc::c_char),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to close %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1715:13
     |
1715 | /             if 0 as libc::c_int != 0 as libc::c_int {
1716 | |                 unreachable!();
1717 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1715:16
     |
1715 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1720:17
     |
1720 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1724:29
     |
1724 |                     gettext(b"failed to close %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to close %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1727:17
     |
1727 | /                 if __errstatus != 0 as libc::c_int {
1728 | |                     unreachable!();
1729 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1733:17
     |
1733 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1737:29
     |
1737 |                     gettext(b"failed to close %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"failed to close %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:1740:17
     |
1740 | /                 if __errstatus != 0 as libc::c_int {
1741 | |                     unreachable!();
1742 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1753:26
     |
1753 |         unsafe { gettext(b"invalid number of lines\0" as *const u8 as *const libc::c_char) }
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1755:26
     |
1755 |         unsafe { gettext(b"invalid number of bytes\0" as *const u8 as *const libc::c_char) }
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of bytes\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1763:13
     |
1763 |             b"bkKmMGTPEZYRQ0\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"bkKmMGTPEZYRQ0\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
    --> src/head.rs:1812:16
     |
1812 |               if !((*a as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
     |  ________________^
1813 | |                 <= 9 as libc::c_int as libc::c_uint)
     | |____________________________________________________^ help: try: `(*a as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint) > 9 as libc::c_int as libc::c_uint`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (30/25)
    --> src/head.rs:1770:11
     |
1770 | unsafe fn main_0(
     |           ^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (328/100)
    --> src/head.rs:1770:1
     |
1770 | / unsafe fn main_0(
1771 | |     mut argc: libc::c_int,
1772 | |     mut argv: *mut *mut libc::c_char,
1773 | | ) -> libc::c_int {
...    |
2108 | |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
2109 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/head.rs:2108:5
     |
2108 |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int }`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1778:34
     |
1778 |     let mut n_units: uintmax_t = 10 as libc::c_int as uintmax_t;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1782:9
     |
1782 |         b"-\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *const _` detected
    --> src/head.rs:1785:53
     |
1785 |     let mut file_list: *const *const libc::c_char = 0 as *const *const libc::c_char;
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<*const libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1787:33
     |
1787 |     setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1789:9
     |
1789 |         b"coreutils\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1790:9
     |
1790 |         b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/usr/local/share/locale\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1792:16
     |
1792 |     textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/head.rs:1796:16
     |
1796 |     line_end = '\n' as i32 as libc::c_char;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1798:12
     |
1798 |           && *(*argv.offset(1 as libc::c_int as isize)).offset(0 as libc::c_int as isize)
     |  ____________^
1799 | |             as libc::c_int == '-' as i32
     | |__________________________^ help: try: `i32::from(*(*argv.offset(1 as libc::c_int as isize)).offset(0 as libc::c_int as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u32` may lose the sign of the value
    --> src/head.rs:1800:12
     |
1800 |           && (*(*argv.offset(1 as libc::c_int as isize)).offset(1 as libc::c_int as isize)
     |  ____________^
1801 | |             as libc::c_uint)
     | |____________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1802:27
     |
1802 |             .wrapping_sub('0' as i32 as libc::c_uint) <= 9 as libc::c_int as libc::c_uint
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1802:58
     |
1802 |             .wrapping_sub('0' as i32 as libc::c_uint) <= 9 as libc::c_int as libc::c_uint
     |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
    --> src/head.rs:1807:51
     |
1807 |         let mut end_n_string: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                                   ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/head.rs:1808:49
     |
1808 |         let mut multiplier_char: libc::c_char = 0 as libc::c_int as libc::c_char;
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
    --> src/head.rs:1811:13
     |
1811 |             a;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `u32` may lose the sign of the value
    --> src/head.rs:1812:18
     |
1812 |             if !((*a as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
     |                  ^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1812:52
     |
1812 |             if !((*a as libc::c_uint).wrapping_sub('0' as i32 as libc::c_uint)
     |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1813:20
     |
1813 |                 <= 9 as libc::c_int as libc::c_uint)
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1820:19
     |
1820 |             match *a as libc::c_int {
     |                   ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*a)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/head.rs:1823:39
     |
1823 |                     multiplier_char = 0 as libc::c_int as libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/head.rs:1839:32
     |
1839 |                     line_end = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
    --> src/head.rs:1842:21
     |
1842 | /                     if 0 != 0 {
1843 | |                         error(
1844 | |                             0 as libc::c_int,
1845 | |                             0 as libc::c_int,
...    |
1887 | |                         });
1888 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1842:24
     |
1842 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1847:33
     |
1847 | / ...                   b"invalid trailing option -- %c\0" as *const u8
1848 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid trailing option -- %c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1850:29
     |
1850 | ...                   *a as libc::c_int,
     |                       ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*a)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/head.rs:1852:25
     |
1852 | /                         if 0 as libc::c_int != 0 as libc::c_int {
1853 | |                             unreachable!();
1854 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:1852:28
     |
1852 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1857:29
     |
1857 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1862:37
     |
1862 | / ...                   b"invalid trailing option -- %c\0" as *const u8
1863 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid trailing option -- %c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1865:33
     |
1865 | ...                   *a as libc::c_int,
     |                       ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*a)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/head.rs:1867:29
     |
1867 | / ...                   if __errstatus != 0 as libc::c_int {
1868 | | ...                       unreachable!();
1869 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:1873:29
     |
1873 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1878:37
     |
1878 | / ...                   b"invalid trailing option -- %c\0" as *const u8
1879 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid trailing option -- %c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/head.rs:1881:33
     |
1881 | ...                   *a as libc::c_int,
     |                       ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*a)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/head.rs:1883:29
     |
1883 | / ...                   if __errstatus != 0 as libc::c_int {
1884 | | ...                       unreachable!();
1885 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/head.rs:1893:13
     |
1893 |             a;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/head.rs:1898:29
     |
1898 |             *end_n_string = 0 as libc::c_int as libc::c_char;
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/head.rs:1902:13
     |
1902 |         let ref mut fresh3 = *argv.offset(1 as libc::c_int as isize);
     |         ----^^^^^^^^^^^^^^------------------------------------------- help: try: `let fresh3 = &mut (*argv.offset(1 as libc::c_int as isize));`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: statement with no effect
    --> src/head.rs:1905:9
     |
1905 |         argv;
     |         ^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/head.rs:1907:9
     |
1907 |         argc;
     |         ^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1913:9
     |
1913 |         b"c:n:qvz0123456789\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c:n:qvz0123456789\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/head.rs:1948:24
     |
1948 |             line_end = '\0' as i32 as libc::c_char;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1956:17
     |
1956 |                 b"head\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"head\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1957:17
     |
1957 |                 b"GNU coreutils\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1960:21
     |
1960 |                     b"David MacKenzie\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"David MacKenzie\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1961:21
     |
1961 |                     b"David MacKenzie\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"David MacKenzie\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1964:21
     |
1964 |                     b"Jim Meyering\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Jim Meyering\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1965:21
     |
1965 |                     b"Jim Meyering\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Jim Meyering\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1972:16
     |
1972 |             if (c as u32).wrapping_sub('0' as i32 as u32) <= 9 {
     |                ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/head.rs:1972:40
     |
1972 |             if (c as u32).wrapping_sub('0' as i32 as u32) <= 9 {
     |                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:1976:29
     |
1976 |                     gettext(b"invalid trailing option -- %c\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid trailing option -- %c\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:1988:24
     |
1988 |     if !count_lines && elide_from_end as libc::c_int != 0
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_from_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/head.rs:1989:12
     |
1989 |           && ((if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
     |  ____________^
1990 | |             -(1 as libc::c_int) as off_t
1991 | |         } else {
1992 | |             (((1 as libc::c_int as off_t)
...    |
1997 | |                 + 1 as libc::c_int as libc::c_long
1998 | |         }) as libc::c_ulong) < n_units
     | |____________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1989:17
     |
1989 |         && ((if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1989:47
     |
1989 |         && ((if (0 as libc::c_int as off_t) < -(1 as libc::c_int) as off_t {
     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1990:13
     |
1990 |             -(1 as libc::c_int) as off_t
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1992:15
     |
1992 |             (((1 as libc::c_int as off_t)
     |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1994:35
     |
1994 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:1995:35
     |
1995 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1996:19
     |
1996 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1996:55
     |
1996 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
     |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/head.rs:1997:19
     |
1997 |                 + 1 as libc::c_int as libc::c_long
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/head.rs:2001:9
     |
2001 | /         if 0 != 0 {
2002 | |             error(
2003 | |                 1 as libc::c_int,
2004 | |                 75 as libc::c_int,
...    |
2046 | |             });
2047 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:2001:12
     |
2001 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2005:17
     |
2005 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2007:21
     |
2007 |                     b"invalid number of bytes\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of bytes\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:2011:13
     |
2011 | /             if 1 as libc::c_int != 0 as libc::c_int {
2012 | |                 unreachable!();
2013 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:2016:17
     |
2016 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2020:21
     |
2020 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2022:25
     |
2022 |                         b"invalid number of bytes\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of bytes\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:2026:17
     |
2026 | /                 if __errstatus != 0 as libc::c_int {
2027 | |                     unreachable!();
2028 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:2032:17
     |
2032 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2036:21
     |
2036 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2038:25
     |
2038 |                         b"invalid number of bytes\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of bytes\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:2042:17
     |
2042 | /                 if __errstatus != 0 as libc::c_int {
2043 | |                     unreachable!();
2044 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/head.rs:2050:9
     |
2050 |         &mut *argv.offset(optind as isize) as *mut *mut libc::c_char
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(*argv.offset(optind as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/head.rs:2058:9
     |
2058 |     i = 0 as libc::c_int as size_t;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:2059:31
     |
2059 |     while !(*file_list.offset(i as isize)).is_null() {
     |                               ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:2059:31
     |
2059 |     while !(*file_list.offset(i as isize)).is_null() {
     |                               ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:2060:15
     |
2060 |         ok = (ok as libc::c_int
     |               ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:2061:15
     |
2061 |               & head_file(
     |  _______________^
2062 | |                 *file_list.offset(i as isize),
2063 | |                 n_units,
2064 | |                 count_lines,
2065 | |                 elide_from_end,
2066 | |             ) as libc::c_int) != 0;
     | |____________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
2061 ~             & i32::from(head_file(
2062 +                 *file_list.offset(i as isize),
2063 +                 n_units,
2064 +                 count_lines,
2065 +                 elide_from_end,
2066 ~             ))) != 0;
     |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/head.rs:2062:35
     |
2062 |                 *file_list.offset(i as isize),
     |                                   ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/head.rs:2062:35
     |
2062 |                 *file_list.offset(i as isize),
     |                                   ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/head.rs:2068:9
     |
2068 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:2070:8
     |
2070 |     if have_read_stdin as libc::c_int != 0 && close(0 as libc::c_int) < 0 as libc::c_int
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(have_read_stdin)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/head.rs:2072:9
     |
2072 | /         if 0 != 0 {
2073 | |             error(
2074 | |                 1 as libc::c_int,
2075 | |                 *__errno_location(),
...    |
2105 | |             });
2106 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/head.rs:2072:12
     |
2072 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2076:17
     |
2076 |                 b"-\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:2078:13
     |
2078 | /             if 1 as libc::c_int != 0 as libc::c_int {
2079 | |                 unreachable!();
2080 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:2083:17
     |
2083 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2087:21
     |
2087 |                     b"-\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:2089:17
     |
2089 | /                 if __errstatus != 0 as libc::c_int {
2090 | |                     unreachable!();
2091 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/head.rs:2095:17
     |
2095 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/head.rs:2099:21
     |
2099 |                     b"-\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/head.rs:2101:17
     |
2101 | /                 if __errstatus != 0 as libc::c_int {
2102 | |                     unreachable!();
2103 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/head.rs:2108:12
     |
2108 |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/head.rs:2108:15
     |
2108 |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
     |               ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
    --> src/head.rs:2115:16
     |
2115 |     let argc = args.len() as libc::c_int;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
    --> src/head.rs:2115:16
     |
2115 |     let argc = args.len() as libc::c_int;
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: path statement with no effect
    --> src/head.rs:1185:17
     |
1185 |                 p;
     |                 ^^
     |
     = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
    --> src/head.rs:1811:13
     |
1811 |             a;
     |             ^^

warning: path statement with no effect
    --> src/head.rs:1893:13
     |
1893 |             a;
     |             ^^

warning: path statement with no effect
    --> src/head.rs:1905:9
     |
1905 |         argv;
     |         ^^^^^

warning: path statement with no effect
    --> src/head.rs:1907:9
     |
1907 |         argc;
     |         ^^^^^

warning: path statement with no effect
    --> src/head.rs:2068:9
     |
2068 |         i;
     |         ^^

warning: `rust` (bin "head") generated 495 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 7.94s
