    Updating crates.io index
 Downloading crates ...
  Downloaded cfg-if v1.0.0
  Downloaded minimal-lexical v0.2.1
  Downloaded rustc-hash v2.1.1
  Downloaded shlex v1.3.0
  Downloaded proc-macro2 v1.0.94
  Downloaded clang-sys v1.8.1
  Downloaded quote v1.0.39
  Downloaded nom v7.1.3
  Downloaded prettyplease v0.2.30
  Downloaded libloading v0.8.6
  Downloaded either v1.15.0
  Downloaded cexpr v0.6.0
  Downloaded bitflags v2.9.0
  Downloaded log v0.4.26
  Downloaded regex v1.11.1
  Downloaded glob v0.3.2
  Downloaded syn v2.0.100
  Downloaded bindgen v0.71.1
  Downloaded regex-automata v0.4.9
  Downloaded libc v0.2.170
warning: package `foo` is missing `package.description` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata
  = note: `-W clippy::cargo-common-metadata` implied by `-W clippy::cargo`
  = help: to override `-W clippy::cargo` add `#[allow(clippy::cargo_common_metadata)]`

warning: package `foo` is missing `either package.license or package.license_file` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.repository` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.readme` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.keywords` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.categories` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: this function has too many lines (136/100)
   --> build.rs:33:1
    |
33  | / fn main() {
34  | |     let cargo_manifest_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
35  | |     let c_build_path = env::var("C_BUILD_PATH").expect("C_BUILD_PATH not set");
...   |
218 | |         .expect("Couldn't write bindings!");
219 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`

warning: variables can be used directly in the `format!` string
  --> build.rs:38:47
   |
38 |     let compile_commands_path = PathBuf::from(format!("{}/compile_commands.json", c_build_path));
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
   = note: `-W clippy::uninlined-format-args` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::uninlined_format_args)]`
help: change this to
   |
38 -     let compile_commands_path = PathBuf::from(format!("{}/compile_commands.json", c_build_path));
38 +     let compile_commands_path = PathBuf::from(format!("{c_build_path}/compile_commands.json"));
   |

warning: avoid using `collect()` when not needed
  --> build.rs:58:8
   |
58 |     }).collect::<Vec<_>>();
   |        ^^^^^^^
...
67 |     if source_paths.is_empty() {
   |        ----------------------- the iterator could be used here instead
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect
   = note: `-W clippy::needless-collect` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::needless_collect)]`
help: check if the original Iterator has anything instead of collecting it and seeing if it's empty
   |
44 ~     
45 |
...
52 |
53 ~     if files.iter().map(|file| {
54 +         let file = file.as_object().expect("Expected an object");
55 +         let directory = file.get("directory").expect("Expected a directory").as_str().expect("Expected a string");
56 +         let file_path = file.get("file").expect("Expected a file path").as_str().expect("Expected a string");
57 +         // Check if the file path is absolute or relative
58 +         // If it's relative, make it absolute by joining with the directory
59 +         // If it's absolute, just use it as is
60 +         // Create a PathBuf depending on whether the path is absolute
61 +         let full_path = if Path::new(file_path).is_absolute() {
62 +             PathBuf::from(file_path)
63 +         } else {
64 +             Path::new(directory).join(file_path)
65 +         };
66 +         full_path
67 ~     }).next().is_none() {
   |

warning: only a `panic!` in `if`-then statement
  --> build.rs:67:5
   |
67 | /     if source_paths.is_empty() {
68 | |         panic!("No .c files found in compile_commands.json");
69 | |     }
   | |_____^ help: try instead: `assert!(!source_paths.is_empty(), "No .c files found in compile_commands.json");`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert
   = note: `-W clippy::manual-assert` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::manual_assert)]`

warning: casting `i64` to `i32` may truncate the value
  --> build.rs:94:29
   |
94 |             main_num_args = function.get("num_args").expect("Expected a num_args").as_i64().expect("Expected an integer") as i32;
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
   = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`
help: ... or use `try_from` and handle the error accordingly
   |
94 |             main_num_args = i32::try_from(function.get("num_args").expect("Expected a num_args").as_i64().expect("Expected an integer"));
   |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: variables can be used directly in the `format!` string
  --> build.rs:99:5
   |
99 |     println!("cargo::rustc-link-search=native={}", c_build_path);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
99 -     println!("cargo::rustc-link-search=native={}", c_build_path);
99 +     println!("cargo::rustc-link-search=native={c_build_path}");
   |

warning: stripping a prefix manually
   --> build.rs:132:40
    |
132 |                     let include_path = arg[2..].trim_start().to_string();
    |                                        ^^^^^^^^
    |
note: the prefix was tested here
   --> build.rs:131:17
    |
131 |                 if arg.starts_with("-I") {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
    = note: `-W clippy::manual-strip` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::manual_strip)]`
help: try using the `strip_prefix` method
    |
131 ~                 if let Some(<stripped>) = arg.strip_prefix("-I") {
132 ~                     let include_path = <stripped>.trim_start().to_string();
    |

warning: variables can be used directly in the `format!` string
   --> build.rs:151:39
    |
151 |         bindings = bindings.clang_arg(format!("-I{}", include_path));
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
151 -         bindings = bindings.clang_arg(format!("-I{}", include_path));
151 +         bindings = bindings.clang_arg(format!("-I{include_path}"));
    |

warning: use Option::map_or_else instead of an if let/else
   --> build.rs:156:34
    |
156 |       let blocklist: Vec<String> = match std::fs::read_to_string("bindgen_blocklist.txt") {
    |  __________________________________^
157 | |         Ok(blocklist) => {
158 | |             blocklist.lines().map(String::from).collect()
159 | |         },
160 | |         Err(_) => Vec::new(),
161 | |     };
    | |_____^ help: try: `std::fs::read_to_string("bindgen_blocklist.txt").map_or_else(Vec::new, |blocklist| blocklist.lines().map(String::from).collect())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
    = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`

warning: variables can be used directly in the `format!` string
   --> build.rs:179:35
    |
179 |     let main_file = PathBuf::from(format!("{}/src/main_func.rs", cargo_manifest_dir));
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
179 -     let main_file = PathBuf::from(format!("{}/src/main_func.rs", cargo_manifest_dir));
179 +     let main_file = PathBuf::from(format!("{cargo_manifest_dir}/src/main_func.rs"));
    |

warning: useless use of `format!`
   --> build.rs:181:9
    |
181 | /         format!(r#"
182 | | pub fn main() {{
183 | |     let mut args: Vec<*mut libc::c_char> = Vec::new();
184 | |     for arg in ::std::env::args() {{
...   |
197 | |     }}
198 | | }}"#)
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format
    = note: `-W clippy::useless-format` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::useless_format)]`
help: consider using `.to_string()`
    |
181 ~         r#"
182 + pub fn main() {
183 +     let mut args: Vec<*mut libc::c_char> = Vec::new();
184 +     for arg in ::std::env::args() {
185 +         args.push(
186 +             (::std::ffi::CString::new(arg))
187 +                 .expect("Failed to convert argument into CString.")
188 +                 .into_raw(),
189 +         );
190 +     }
191 +     args.push(::core::ptr::null_mut());
192 +     unsafe {
193 +         ::std::process::exit(main_0(
194 +             (args.len() - 1) as libc::c_int,
195 +             args.as_mut_ptr() as *mut *mut libc::c_char,
196 +         ) as i32)
197 +     }
198 + }"#.to_string()
    |

warning: useless use of `format!`
   --> build.rs:200:9
    |
200 | /         format!(r#"
201 | | pub fn main() {{
202 | |     unsafe {{
203 | |         ::std::process::exit(main_0() as i32)
204 | |     }}
205 | | }}"#)
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format
help: consider using `.to_string()`
    |
200 ~         r#"
201 + pub fn main() {
202 +     unsafe {
203 +         ::std::process::exit(main_0() as i32)
204 +     }
205 + }"#.to_string()
    |

warning: variables can be used directly in the `format!` string
   --> build.rs:208:9
    |
208 |         panic!("main_0 has {} arguments, expected 0 or 2", main_num_args);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
208 -         panic!("main_0 has {} arguments, expected 0 or 2", main_num_args);
208 +         panic!("main_0 has {main_num_args} arguments, expected 0 or 2");
    |

warning: `foo` (build script) generated 19 warnings
   Compiling foo v0.1.0 (/app/output/cat_36BjRnDjej)
warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
   --> src/main.rs:217:1
    |
217 | / #[no_mangle]
218 | |
219 | | fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | |_
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr
    = note: `-W clippy::empty-line-after-outer-attr` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::empty_line_after_outer_attr)]`

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1112:1
     |
1112 | / #[no_mangle]
1113 | |
1114 | | /// Checks if the error code corresponds to "Operation not supported"
1115 | | fn is_ENOTSUP_rust(err: i32) -> bool {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1124:1
     |
1124 | / #[no_mangle]
1125 | |
1126 | | pub struct InfileWrapper {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1264:1
     |
1264 | / #[no_mangle]
1265 | |
1266 | | /// Allocates memory with the specified alignment and size.
1267 | | /// Returns a pointer to the allocated memory.
1268 | | /// Panics if allocation fails.
1269 | | fn xalignalloc_rust(alignment: usize, size: usize) -> NonNull<u8> {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1390:1
     |
1390 | / #[no_mangle]
1391 | |
1392 | | /// Attempts to write the entire buffer to the given file descriptor.
1393 | | /// Returns the total number of bytes written.
1394 | | fn full_write_rust(fd: RawFd, buf: &[u8]) -> usize {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: unused imports: `Mutex`, `atomic::AtomicBool`, and `time::SystemTime`
 --> src/main.rs:6:12
  |
6 |     sync::{atomic::AtomicBool, Mutex},
  |            ^^^^^^^^^^^^^^^^^^  ^^^^^
7 |     time::SystemTime,
  |     ^^^^^^^^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `EINTR`, `EINVAL`, and `ssize_t`
  --> src/main.rs:11:20
   |
11 | use libc::{size_t, ssize_t, EINTR, EINVAL};
   |                    ^^^^^^^  ^^^^^  ^^^^^^

warning: unused imports: `AtomicI32`, `AtomicPtr`, `Once`, `Ordering`, `OsString`, and `ffi::OsStringExt`
  --> src/main.rs:25:26
   |
25 |     ffi::{CStr, CString, OsString},
   |                          ^^^^^^^^
...
30 |         unix::{ffi::OsStringExt, fs::MetadataExt},
   |                ^^^^^^^^^^^^^^^^
...
34 |         atomic::{AtomicI32, AtomicPtr, Ordering},
   |                  ^^^^^^^^^  ^^^^^^^^^  ^^^^^^^^
35 |         Once,
   |         ^^^^

warning: long literal lacking separators
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6619:42
     |
6619 | pub const O_PATHSEARCH: _bindgen_ty_15 = 2097152;
     |                                          ^^^^^^^ help: consider: `2_097_152`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal
     = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::unreadable_literal)]`

warning: long literal lacking separators
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6916:41
     |
6916 | pub const TIMESPEC_HZ: _bindgen_ty_18 = 1000000000;
     |                                         ^^^^^^^^^^ help: consider: `1_000_000_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6920:49
     |
6920 | pub const TIMESPEC_RESOLUTION: _bindgen_ty_20 = 1000000000;
     |                                                 ^^^^^^^^^^ help: consider: `1_000_000_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:7786:40
     |
7786 | pub const IO_BUFSIZE: _bindgen_ty_24 = 262144;
     |                                        ^^^^^^ help: consider: `262_144`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/main.rs:264:25
    |
264 |     if (127 * 2 + 1) <= 2147483647 {
    |                         ^^^^^^^^^^ help: consider: `2_147_483_647`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/main.rs:452:13
    |
452 |     let mut authors = Vec::new();
    |             ^^^^^^^
    |
note: existing binding defined here
   --> src/main.rs:421:5
    |
421 |     author1: *const c_char,
    |     ^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names
    = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::similar_names)]`

warning: this `else { if .. }` block can be collapsed
   --> src/main.rs:977:18
    |
977 |               else {
    |  __________________^
978 | |                 if let Some(void_ptr) = ptr_arg {
979 | |                     let result = unsafe { libc::fcntl(fd, action, void_ptr) };
980 | |                     if result == -1 {
...   |
990 | |                 }
991 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
    = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::collapsible_else_if)]`
help: collapse nested if block
    |
977 ~             else if let Some(void_ptr) = ptr_arg {
978 +                 let result = unsafe { libc::fcntl(fd, action, void_ptr) };
979 +                 if result == -1 {
980 +                     Err(io::Error::last_os_error())
981 +                 } else {
982 +                     Ok(result)
983 +                 }
984 +             } else {
985 +                 Err(io::Error::new(
986 +                     io::ErrorKind::Unsupported,
987 +                     format!("Missing pointer argument for fcntl command: {}", action),
988 +                 ))
989 +             }
    |

warning: long literal lacking separators
    --> src/main.rs:1323:32
     |
1323 | const SYS_BUFSIZE_MAX: usize = 0x7ffff000;
     |                                ^^^^^^^^^^ help: consider: `0x7fff_f000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: attribute should be applied to a free function, impl method or static
    --> src/main.rs:1124:1
     |
1124 |   #[no_mangle]
     |   ^^^^^^^^^^^^
1125 |
1126 | / pub struct InfileWrapper {
1127 | |     val: Option<String>,
1128 | | }
     | |_- not a free function, impl method or static
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: `#[warn(unused_attributes)]` on by default

warning: creating a mutable reference to mutable static is discouraged
   --> src/main.rs:728:26
    |
728 |         None => unsafe { &mut DEFAULT_QUOTING_OPTIONS },
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ mutable reference to mutable static
    |
    = note: for more information, see issue #114447 <https://github.com/rust-lang/rust/issues/114447>
    = note: this will be a hard error in the 2024 edition
    = note: this mutable reference has lifetime `'static`, but if the static gets accessed (read or written) by any other means, or any other reference is created, then any further use of this mutable reference is Undefined Behavior
    = note: `#[warn(static_mut_refs)]` on by default
help: use `addr_of_mut!` instead to create a raw pointer
    |
728 |         None => unsafe { addr_of_mut!(DEFAULT_QUOTING_OPTIONS) },
    |                          ~~~~~~~~~~~~~                       +

warning: unused variable: `error_msg`
   --> src/main.rs:144:13
    |
144 |         let error_msg = b"A NULL argv[0] was passed through an exec system call.\n\0";
    |             ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_error_msg`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: variable does not need to be mutable
   --> src/main.rs:547:9
    |
547 |     let mut temp_metadata = match std::fs::metadata("/dev/null") {
    |         ----^^^^^^^^^^^^^
    |         |
    |         help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/main.rs:683:9
    |
683 |     let mut c_options: quoting_options = unsafe { std::mem::zeroed() };
    |         ----^^^^^^^^^
    |         |
    |         help: remove this `mut`

warning: unused variable: `options`
   --> src/main.rs:804:31
    |
804 | fn convert_to_quoting_options(options: &mut quoting_options_rust) -> QuotingOptions {
    |                               ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `options`
   --> src/main.rs:812:5
    |
812 |     options: &mut quoting_options_rust,
    |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `quoting_options`
   --> src/main.rs:813:5
    |
813 |     quoting_options: &QuotingOptions,
    |     ^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_quoting_options`

warning: unused variable: `n`
   --> src/main.rs:821:5
    |
821 |     n: i32,
    |     ^ help: if this is intentional, prefix it with an underscore: `_n`

warning: unused variable: `arg_len`
   --> src/main.rs:823:5
    |
823 |     arg_len: usize,
    |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_arg_len`

warning: unused variable: `options`
   --> src/main.rs:824:5
    |
824 |     options: &quoting_options_rust,
    |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: unused variable: `fd_copy`
    --> src/main.rs:1353:9
     |
1353 |     let fd_copy = fd;
     |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_fd_copy`

warning: field `val` is never read
   --> src/main.rs:351:5
    |
350 | pub struct VersionEtcCopyrightWrapper {
    |            -------------------------- field in this struct
351 |     val: String,
    |     ^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: field `val` is never read
   --> src/main.rs:766:5
    |
765 | pub struct ExitFailureWrapper {
    |            ------------------ field in this struct
766 |     val: i32,
    |     ^^^

warning: field `val` is never read
    --> src/main.rs:1127:5
     |
1126 | pub struct InfileWrapper {
     |            ------------- field in this struct
1127 |     val: Option<String>,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1158:5
     |
1157 | pub struct InputDescWrapper {
     |            ---------------- field in this struct
1158 |     val: i32,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1566:5
     |
1565 | pub struct LineNumPrintWrapper {
     |            ------------------- field in this struct
1566 |     val: Option<String>,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1579:5
     |
1578 | pub struct LineBufWrapper {
     |            -------------- field in this struct
1579 |     val: String,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1590:5
     |
1589 | pub struct LineNumStartWrapper {
     |            ------------------- field in this struct
1590 |     val: Option<String>,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1603:5
     |
1602 | pub struct LineNumEndWrapper {
     |            ----------------- field in this struct
1603 |     val: Option<String>,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1616:5
     |
1615 | pub struct PendingCrWrapper {
     |            ---------------- field in this struct
1616 |     val: bool,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1627:5
     |
1626 | pub struct Newlines2Wrapper {
     |            ---------------- field in this struct
1627 |     val: i32,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:1650:5
     |
1649 | pub struct VersionWrapper {
     |            -------------- field in this struct
1650 |     val: String,
     |     ^^^

warning: this could be a `const fn`
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:19:5
   |
19 | /     fn extract_bit(byte: u8, index: usize) -> bool {
20 | |         let bit_index = if cfg!(target_endian = "big") {
21 | |             7 - (index % 8)
22 | |         } else {
...  |
26 | |         byte & mask == mask
27 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`
help: make the function `const`
   |
19 |     const fn extract_bit(byte: u8, index: usize) -> bool {
   |     +++++

warning: unsafe function's docs are missing a `# Safety` section
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:36:5
   |
36 |     pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc
   = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::missing_safety_doc)]`

warning: use of `offset` with a `usize` casted to an `isize`
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:39:21
   |
39 |         let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(core::ptr::addr_of!((*this).storage) as *const u8).add(byte_index)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast
   = note: `-W clippy::ptr-offset-with-cast` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::ptr_offset_with_cast)]`

warning: `as` casting between raw pointers without changing their constness
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:39:21
   |
39 |         let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `_.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
   = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::ptr_as_ptr)]`

warning: casting `usize` to `isize` may wrap around the value
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:39:80
   |
39 |         let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
   |                                                                                ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
   = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_wrap)]`

warning: this could be a `const fn`
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:43:5
   |
43 | /     fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
44 | |         let bit_index = if cfg!(target_endian = "big") {
45 | |             7 - (index % 8)
46 | |         } else {
...  |
54 | |         }
55 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
43 |     const fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
   |     +++++

warning: unsafe function's docs are missing a `# Safety` section
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:64:5
   |
64 |     pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: use of `offset` with a `usize` casted to an `isize`
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:68:13
   |
68 |             (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(core::ptr::addr_of_mut!((*this).storage) as *mut u8).add(byte_index)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast

warning: `as` casting between raw pointers without changing their constness
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:68:13
   |
68 |             (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `_.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `usize` to `isize` may wrap around the value
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:68:74
   |
68 |             (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
   |                                                                          ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs are missing a `# Safety` section
  --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:90:5
   |
90 |     pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs are missing a `# Safety` section
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:124:5
    |
124 |     pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this method could have a `#[must_use]` attribute
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:145:5
    |
145 |     pub const fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub const fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
    = note: `-W clippy::must-use-candidate` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::must_use_candidate)]`

warning: unnecessary structure name repetition
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:146:9
    |
146 |         __IncompleteArrayField(::std::marker::PhantomData, [])
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::use_self)]`

warning: this could be a `const fn`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:149:5
    |
149 | /     pub fn as_ptr(&self) -> *const T {
150 | |         self as *const _ as *const T
151 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
149 |     pub const fn as_ptr(&self) -> *const T {
    |         +++++

warning: `as` casting between raw pointers without changing their constness
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:150:9
    |
150 |         self as *const _ as *const T
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(self as *const _).cast::<T>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: reference as raw pointer
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:150:9
    |
150 |         self as *const _ as *const T
    |         ^^^^^^^^^^^^^^^^ help: try: `std::ptr::from_ref(self)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr
    = note: `-W clippy::ref-as-ptr` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::ref_as_ptr)]`

warning: `as` casting between raw pointers without changing their constness
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:154:9
    |
154 |         self as *mut _ as *mut T
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(self as *mut _).cast::<T>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: reference as raw pointer
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:154:9
    |
154 |         self as *mut _ as *mut T
    |         ^^^^^^^^^^^^^^ help: try: `std::ptr::from_mut(self)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr

warning: unsafe function's docs are missing a `# Safety` section
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:157:5
    |
157 |     pub unsafe fn as_slice(&self, len: usize) -> &[T] {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs are missing a `# Safety` section
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:161:5
    |
161 |     pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:235:5
    |
235 |     pub __val: [::std::os::raw::c_int; 2usize],
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields
    = note: `-W clippy::pub-underscore-fields` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::pub_underscore_fields)]`

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:273:5
    |
273 |     pub __count: ::std::os::raw::c_int,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:274:5
    |
274 |     pub __value: __mbstate_t__bindgen_ty_1,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:305:5
    |
305 |     pub __pos: __off_t,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:306:5
    |
306 |     pub __state: __mbstate_t,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:319:5
    |
319 |     pub __pos: __off64_t,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:320:5
    |
320 |     pub __state: __mbstate_t,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:352:5
    |
352 |     pub _flags: ::std::os::raw::c_int,
    |     ^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:353:5
    |
353 |     pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:354:5
    |
354 |     pub _IO_read_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:355:5
    |
355 |     pub _IO_read_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:356:5
    |
356 |     pub _IO_write_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:357:5
    |
357 |     pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:358:5
    |
358 |     pub _IO_write_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:359:5
    |
359 |     pub _IO_buf_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:360:5
    |
360 |     pub _IO_buf_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:361:5
    |
361 |     pub _IO_save_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:362:5
    |
362 |     pub _IO_backup_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:363:5
    |
363 |     pub _IO_save_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:364:5
    |
364 |     pub _markers: *mut _IO_marker,
    |     ^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:365:5
    |
365 |     pub _chain: *mut _IO_FILE,
    |     ^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:366:5
    |
366 |     pub _fileno: ::std::os::raw::c_int,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:367:5
    |
367 |     pub _flags2: ::std::os::raw::c_int,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:368:5
    |
368 |     pub _old_offset: __off_t,
    |     ^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:369:5
    |
369 |     pub _cur_column: ::std::os::raw::c_ushort,
    |     ^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:370:5
    |
370 |     pub _vtable_offset: ::std::os::raw::c_schar,
    |     ^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:371:5
    |
371 |     pub _shortbuf: [::std::os::raw::c_char; 1usize],
    |     ^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:372:5
    |
372 |     pub _lock: *mut _IO_lock_t,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:373:5
    |
373 |     pub _offset: __off64_t,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:374:5
    |
374 |     pub _codecvt: *mut _IO_codecvt,
    |     ^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:375:5
    |
375 |     pub _wide_data: *mut _IO_wide_data,
    |     ^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:376:5
    |
376 |     pub _freeres_list: *mut _IO_FILE,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:377:5
    |
377 |     pub _freeres_buf: *mut ::std::os::raw::c_void,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:378:5
    |
378 |     pub __pad5: usize,
    |     ^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:379:5
    |
379 |     pub _mode: ::std::os::raw::c_int,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:380:5
    |
380 |     pub _unused2: [::std::os::raw::c_char; 20usize],
    |     ^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1161:5
     |
1161 |     pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1162:5
     |
1162 |     pub __bindgen_padding_0: u64,
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1163:5
     |
1163 |     pub __clang_max_align_nonce2: u128,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1211:5
     |
1211 |     pub __val: [::std::os::raw::c_ulong; 16usize],
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1294:5
     |
1294 |     pub __prev: *mut __pthread_internal_list,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1295:5
     |
1295 |     pub __next: *mut __pthread_internal_list,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1311:5
     |
1311 |     pub __next: *mut __pthread_internal_slist,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1326:5
     |
1326 |     pub __lock: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1327:5
     |
1327 |     pub __count: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1328:5
     |
1328 |     pub __owner: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1329:5
     |
1329 |     pub __nusers: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1330:5
     |
1330 |     pub __kind: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1331:5
     |
1331 |     pub __spins: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1332:5
     |
1332 |     pub __list: __pthread_list_t,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1356:5
     |
1356 |     pub __readers: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1357:5
     |
1357 |     pub __writers: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1358:5
     |
1358 |     pub __wrphase_futex: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1359:5
     |
1359 |     pub __writers_futex: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1360:5
     |
1360 |     pub __pad3: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1361:5
     |
1361 |     pub __pad4: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1362:5
     |
1362 |     pub __cur_writer: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1363:5
     |
1363 |     pub __shared: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1364:5
     |
1364 |     pub __pad1: ::std::os::raw::c_ulong,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1365:5
     |
1365 |     pub __pad2: ::std::os::raw::c_ulong,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1366:5
     |
1366 |     pub __flags: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1399:5
     |
1399 |     pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1400:5
     |
1400 |     pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1401:5
     |
1401 |     pub __g_refs: [::std::os::raw::c_uint; 2usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1402:5
     |
1402 |     pub __g_size: [::std::os::raw::c_uint; 2usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1403:5
     |
1403 |     pub __g1_orig_size: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1404:5
     |
1404 |     pub __wrefs: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1405:5
     |
1405 |     pub __g_signals: [::std::os::raw::c_uint; 2usize],
     |     ^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1416:5
     |
1416 |     pub __low: ::std::os::raw::c_uint,
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1417:5
     |
1417 |     pub __high: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1450:5
     |
1450 |     pub __low: ::std::os::raw::c_uint,
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1451:5
     |
1451 |     pub __high: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1831:5
     |
1831 |     pub _bitfield_align_1: [u8; 0],
     |     ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1832:5
     |
1832 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
     |     ^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1912:5
     |
1912 |     pub __locales: [*mut __locale_data; 13usize],
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1913:5
     |
1913 |     pub __ctype_b: *const ::std::os::raw::c_ushort,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1914:5
     |
1914 |     pub __ctype_tolower: *const ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1915:5
     |
1915 |     pub __ctype_toupper: *const ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:1916:5
     |
1916 |     pub __names: [*const ::std::os::raw::c_char; 13usize],
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2152:5
     |
2152 |     pub _bitfield_align_1: [u8; 0],
     |     ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2153:5
     |
2153 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2154:5
     |
2154 |     pub __bindgen_padding_0: [u8; 3usize],
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: this method could have a `#[must_use]` attribute
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2165:5
     |
2165 |     pub fn __floating_time_t_unsupported(&self) -> ::std::os::raw::c_uint {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn __floating_time_t_unsupported(&self) -> ::std::os::raw::c_uint`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: transmute from a type (`u32`) to itself
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2166:18
     |
2166 |         unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute
     = note: `-W clippy::useless-transmute` implied by `-W clippy::all`
     = help: to override `-W clippy::all` add `#[allow(clippy::useless_transmute)]`

warning: casting `u64` to `u32` may truncate the value
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2166:40
     |
2166 |         unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
     = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`
help: ... or use `try_from` and handle the error accordingly
     |
2166 |         unsafe { ::std::mem::transmute(u32::try_from(self._bitfield_1.get(0usize, 1u8))) }
     |                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2166:40
     |
2166 |         unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
     |                                        ^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2153:5
     |
2153 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding
     = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::used_underscore_binding)]`

warning: consider adding a `;` to the last statement for consistent formatting
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2172:13
     |
2172 |             self._bitfield_1.set(0usize, 1u8, val as u64)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `self._bitfield_1.set(0usize, 1u8, val as u64);`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
     = note: `-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::semicolon_if_nothing_returned)]`

warning: transmute from a type (`u32`) to itself
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2171:28
     |
2171 |             let val: u32 = ::std::mem::transmute(val);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2172:13
     |
2172 |             self._bitfield_1.set(0usize, 1u8, val as u64)
     |             ^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2153:5
     |
2153 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2172:47
     |
2172 |             self._bitfield_1.set(0usize, 1u8, val as u64)
     |                                               ^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
     = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_lossless)]`
help: use `u64::from` instead
     |
2172 |             self._bitfield_1.set(0usize, 1u8, u64::from(val))
     |                                               ~~~~~~~~~~~~~~

warning: unsafe function's docs are missing a `# Safety` section
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2176:5
     |
2176 |     pub unsafe fn __floating_time_t_unsupported_raw(this: *const Self) -> ::std::os::raw::c_uint {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this method could have a `#[must_use]` attribute
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2176:5
     |
2176 |     pub unsafe fn __floating_time_t_unsupported_raw(this: *const Self) -> ::std::os::raw::c_uint {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub unsafe fn __floating_time_t_unsupported_raw(this: *const Self) -> ::std::os::raw::c_uint`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: transmute from a type (`u32`) to itself
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2178:13
     |
2178 | /             ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
2179 | |                 ::std::ptr::addr_of!((*this)._bitfield_1),
2180 | |                 0usize,
2181 | |                 1u8,
2182 | |             ) as u32)
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: casting `u64` to `u32` may truncate the value
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2178:35
     |
2178 |               ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
     |  ___________________________________^
2179 | |                 ::std::ptr::addr_of!((*this)._bitfield_1),
2180 | |                 0usize,
2181 | |                 1u8,
2182 | |             ) as u32)
     | |____________________^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
2178 ~             ::std::mem::transmute(u32::try_from(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
2179 +                 ::std::ptr::addr_of!((*this)._bitfield_1),
2180 +                 0usize,
2181 +                 1u8,
2182 ~             )))
     |

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2179:38
     |
2179 |                 ::std::ptr::addr_of!((*this)._bitfield_1),
     |                                      ^^^^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2153:5
     |
2153 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unsafe function's docs are missing a `# Safety` section
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2186:5
     |
2186 | /     pub unsafe fn set___floating_time_t_unsupported_raw(
2187 | |         this: *mut Self,
2188 | |         val: ::std::os::raw::c_uint,
2189 | |     ) {
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: consider adding a `;` to the last statement for consistent formatting
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2192:13
     |
2192 | /             <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
2193 | |                 ::std::ptr::addr_of_mut!((*this)._bitfield_1),
2194 | |                 0usize,
2195 | |                 1u8,
2196 | |                 val as u64,
2197 | |             )
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
help: add a `;` here
     |
2192 ~             <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
2193 +                 ::std::ptr::addr_of_mut!((*this)._bitfield_1),
2194 +                 0usize,
2195 +                 1u8,
2196 +                 val as u64,
2197 +             );
     |

warning: transmute from a type (`u32`) to itself
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2191:28
     |
2191 |             let val: u32 = ::std::mem::transmute(val);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2193:42
     |
2193 |                 ::std::ptr::addr_of_mut!((*this)._bitfield_1),
     |                                          ^^^^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2153:5
     |
2153 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2196:17
     |
2196 |                 val as u64,
     |                 ^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
     |
2196 |                 u64::from(val),
     |                 ~~~~~~~~~~~~~~

warning: this method could have a `#[must_use]` attribute
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2201:5
     |
2201 | /     pub fn new_bitfield_1(
2202 | |         __floating_time_t_unsupported: ::std::os::raw::c_uint,
2203 | |     ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
2201 ~     #[must_use] pub fn new_bitfield_1(
2202 +         __floating_time_t_unsupported: ::std::os::raw::c_uint,
2203 ~     ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
     |

warning: calling `__BindgenBitfieldUnit::default()` is more clear than this expression
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2204:80
     |
2204 |         let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
     |                                                                                ^^^^^^^^^^^^^^^^^^ help: try: `__BindgenBitfieldUnit::default()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access
     = note: `-W clippy::default-trait-access` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::default_trait_access)]`

warning: transmute from a type (`u32`) to itself
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2207:26
     |
2207 |                 unsafe { ::std::mem::transmute(__floating_time_t_unsupported) };
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2208:13
     |
2208 |             __floating_time_t_unsupported as u64
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
     |
2208 |             u64::from(__floating_time_t_unsupported)
     |

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2261:5
     |
2261 |     pub __pad1: __dev_t,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2264:5
     |
2264 |     pub __pad2: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2269:5
     |
2269 |     pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2303:5
     |
2303 |     pub __pad1: __dev_t,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2306:5
     |
2306 |     pub __pad2: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2311:5
     |
2311 |     pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2635:5
     |
2635 |     pub __reserved: __s32,
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2658:5
     |
2658 |     pub __spare0: [__u16; 1usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2671:5
     |
2671 |     pub __spare2: [__u64; 14usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2736:5
     |
2736 |     pub __pad0: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2737:5
     |
2737 |     pub _sifields: siginfo_t__bindgen_ty_1,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2839:5
     |
2839 |     pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2850:5
     |
2850 |     pub _lower: *mut ::std::os::raw::c_void,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2851:5
     |
2851 |     pub _upper: *mut ::std::os::raw::c_void,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2912:5
     |
2912 |     pub _call_addr: *mut ::std::os::raw::c_void,
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2913:5
     |
2913 |     pub _syscall: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:2914:5
     |
2914 |     pub _arch: ::std::os::raw::c_uint,
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3036:5
     |
3036 |     pub _sigev_un: sigevent__bindgen_ty_1,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3048:5
     |
3048 |     pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3049:5
     |
3049 |     pub _attribute: *mut pthread_attr_t,
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3200:5
     |
3200 |     pub __sigaction_handler: sigaction__bindgen_ty_1,
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3307:5
     |
3307 |     pub __bindgen_padding_0: [u8; 8usize],
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3308:5
     |
3308 |     pub __reserved: [__u8; 4096usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3377:5
     |
3377 |     pub __reserved: [__u32; 3usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3395:5
     |
3395 |     pub __reserved: [__u16; 3usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3694:5
     |
3694 |     pub __bindgen_padding_0: [u8; 8usize],
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3695:5
     |
3695 |     pub __reserved: [::std::os::raw::c_uchar; 4096usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:3718:5
     |
3718 |     pub __bindgen_padding_0: u64,
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5820:5
     |
5820 |     pub __x: [::std::os::raw::c_ushort; 3usize],
     |     ^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5821:5
     |
5821 |     pub __old_x: [::std::os::raw::c_ushort; 3usize],
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5822:5
     |
5822 |     pub __c: ::std::os::raw::c_ushort,
     |     ^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5823:5
     |
5823 |     pub __init: ::std::os::raw::c_ushort,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5824:5
     |
5824 |     pub __a: ::std::os::raw::c_ulonglong,
     |     ^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:7885:5
     |
7885 |     pub _address: u8,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: casting raw pointers to the same type and constness is unnecessary (`*mut *mut i8` -> `*mut *mut i8`)
  --> src/main_func.rs:15:13
   |
15 |             args.as_mut_ptr() as *mut *mut libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.as_mut_ptr()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast
   = note: `-W clippy::unnecessary-cast` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::unnecessary_cast)]`

warning: `as` casting between raw pointers without changing their constness
  --> src/main_func.rs:15:13
   |
15 |             args.as_mut_ptr() as *mut *mut libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `args.as_mut_ptr().cast::<*mut libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: you should consider adding a `Default` implementation for `ProgramNameWrapper`
  --> src/main.rs:45:5
   |
45 | /     pub fn new() -> Self {
46 | |         Self {
47 | |             val: Self::get_global(),
48 | |         }
49 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
   = note: `-W clippy::new-without-default` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::new_without_default)]`
help: try adding this
   |
44 + impl Default for ProgramNameWrapper {
45 +     fn default() -> Self {
46 +         Self::new()
47 +     }
48 + }
   |

warning: this method could have a `#[must_use]` attribute
  --> src/main.rs:45:5
   |
45 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: docs for function which may panic missing `# Panics` section
  --> src/main.rs:52:5
   |
52 |     pub fn set(&mut self, val: Option<String>) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/main.rs:59:29
   |
59 |                 let c_str = std::ffi::CString::new(s.clone()).unwrap();
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
   = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`

warning: this argument is passed by value, but not consumed in the function body
  --> src/main.rs:52:32
   |
52 |     pub fn set(&mut self, val: Option<String>) {
   |                                ^^^^^^^^^^^^^^ help: consider taking a reference instead: `&Option<String>`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
   = note: `-W clippy::needless-pass-by-value` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::needless_pass_by_value)]`

warning: assigning the result of `Clone::clone()` may be inefficient
  --> src/main.rs:53:9
   |
53 |         self.val = val.clone();
   |         ^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `self.val.clone_from(&val)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones
   = note: `-W clippy::assigning-clones` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::assigning_clones)]`

warning: `as` casting between raw pointers while changing only its constness
  --> src/main.rs:60:32
   |
60 |                 program_name = c_str.into_raw() as *const ::std::os::raw::c_char;
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `c_str.into_raw().cast_const()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness
   = note: `-W clippy::ptr-cast-constness` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::ptr_cast_constness)]`

warning: use Option::map_or instead of an if let/else
  --> src/main.rs:90:16
   |
90 |       let base = match argv0.rfind('/') {
   |  ________________^
91 | |         Some(pos) => &argv0[pos + 1..],
92 | |         None => argv0,
93 | |     };
   | |_____^ help: try: `argv0.rfind('/').map_or(argv0, |pos| &argv0[pos + 1..])`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
   = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`

warning: stripping a prefix manually
   --> src/main.rs:104:32
    |
104 |                 let new_base = &base[3..];
    |                                ^^^^^^^^^^
    |
note: the prefix was tested here
   --> src/main.rs:102:13
    |
102 |             if base.starts_with("lt-") {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
    = note: `-W clippy::manual-strip` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::manual_strip)]`
help: try using the `strip_prefix` method
    |
102 ~             if let Some(<stripped>) = base.strip_prefix("lt-") {
103 |                 // On glibc systems, remove the "lt-" prefix from program_invocation_short_name
104 ~                 let new_base = <stripped>;
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:137:1
    |
137 | pub unsafe extern "C" fn set_program_name(argv0: *const c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be rewritten as `let...else`
   --> src/main.rs:150:5
    |
150 | /     let argv0_str = match CStr::from_ptr(argv0).to_str() {
151 | |         Ok(s) => s,
152 | |         Err(_) => {
153 | |             // If the string is not valid UTF-8, we'll still need to process it
...   |
157 | |         }
158 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
    = note: `-W clippy::manual-let-else` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::manual_let_else)]`
help: consider writing
    |
150 ~     let Ok(argv0_str) = CStr::from_ptr(argv0).to_str() else {
151 +             // If the string is not valid UTF-8, we'll still need to process it
152 +             // This is a fallback that tries to handle invalid UTF-8
153 +             eprintln!("Warning: argv[0] contains invalid UTF-8");
154 +             return;
155 +         };
    |

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> src/main.rs:150:21
    |
150 |       let argv0_str = match CStr::from_ptr(argv0).to_str() {
    |  _____________________^
151 | |         Ok(s) => s,
152 | |         Err(_) => {
153 | |             // If the string is not valid UTF-8, we'll still need to process it
...   |
157 | |         }
158 | |     };
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
    = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::single_match_else)]`
help: try
    |
150 ~     let argv0_str = if let Ok(s) = CStr::from_ptr(argv0).to_str() { s } else {
151 +         // If the string is not valid UTF-8, we'll still need to process it
152 +         // This is a fallback that tries to handle invalid UTF-8
153 +         eprintln!("Warning: argv[0] contains invalid UTF-8");
154 +         return;
155 ~     };
    |

warning: use Option::map_or_else instead of an if let/else
   --> src/main.rs:175:19
    |
175 |       let codeset = match env::var("LC_ALL")
    |  ___________________^
176 | |         .or_else(|_| env::var("LC_CTYPE"))
177 | |         .or_else(|_| env::var("LANG"))
178 | |     {
...   |
183 | |         Err(_) => String::new(),
184 | |     };
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
175 ~     let codeset = env::var("LC_ALL")
176 +         .or_else(|_| env::var("LC_CTYPE"))
177 ~         .or_else(|_| env::var("LANG")).map_or_else(String::new, |locale| locale.split('.').nth(1).unwrap_or("").to_string());
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:195:1
    |
195 | pub unsafe extern "C" fn locale_charset() -> *const c_char {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/main.rs:195:1
    |
195 | pub unsafe extern "C" fn locale_charset() -> *const c_char {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/main.rs:203:49
    |
203 |     let c_str = CString::new(charset).unwrap_or(CString::new("ASCII").unwrap());
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: use of `unwrap_or` followed by a function call
   --> src/main.rs:203:39
    |
203 |     let c_str = CString::new(charset).unwrap_or(CString::new("ASCII").unwrap());
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unwrap_or_else(|_| CString::new("ASCII").unwrap())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call
    = note: `-W clippy::or-fun-call` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::or_fun_call)]`

warning: `as` casting between raw pointers while changing only its constness
   --> src/main.rs:204:5
    |
204 |     c_str.into_raw() as *const c_char
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `c_str.into_raw().cast_const()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness

warning: this could be a `const fn`
   --> src/main.rs:207:1
    |
207 | / fn c_tolower_rust(c: i32) -> i32 {
208 | |     // Check if the character is an uppercase ASCII letter
209 | |     if c >= 'A' as i32 && c <= 'Z' as i32 {
210 | |         // Convert to lowercase by adding the difference between 'a' and 'A'
...   |
215 | |     }
216 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
207 | const fn c_tolower_rust(c: i32) -> i32 {
    | +++++

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
   --> src/main.rs:219:1
    |
219 | fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
    = note: `-W clippy::no-mangle-with-rust-abi` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::no_mangle_with_rust_abi)]`
help: set an ABI
    |
219 | extern "C" fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | ++++++++++
help: or explicitly set the default
    |
219 | extern "Rust" fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | +++++++++++++

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:231:18
    |
231 |           let c1 = match iter1.next() {
    |  __________________^
232 | |             Some(c) => c_tolower_rust(c as i32),
233 | |             None => 0, // End of string
234 | |         };
    | |_________^ help: try: `iter1.next().map_or(0, |c| c_tolower_rust(c as i32))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:232:39
    |
232 |             Some(c) => c_tolower_rust(c as i32),
    |                                       ^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
232 |             Some(c) => c_tolower_rust(i32::from(c)),
    |                                       ~~~~~~~~~~~~

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:236:18
    |
236 |           let c2 = match iter2.next() {
    |  __________________^
237 | |             Some(c) => c_tolower_rust(c as i32),
238 | |             None => 0, // End of string
239 | |         };
    | |_________^ help: try: `iter2.next().map_or(0, |c| c_tolower_rust(c as i32))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:237:39
    |
237 |             Some(c) => c_tolower_rust(c as i32),
    |                                       ^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
237 |             Some(c) => c_tolower_rust(i32::from(c)),
    |                                       ~~~~~~~~~~~~

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:253:14
    |
253 |       let c1 = match iter1.next() {
    |  ______________^
254 | |         Some(c) => c_tolower_rust(c as i32),
255 | |         None => 0,
256 | |     };
    | |_____^ help: try: `iter1.next().map_or(0, |c| c_tolower_rust(c as i32))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:254:35
    |
254 |         Some(c) => c_tolower_rust(c as i32),
    |                                   ^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
254 |         Some(c) => c_tolower_rust(i32::from(c)),
    |                                   ~~~~~~~~~~~~

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:258:14
    |
258 |       let c2 = match iter2.next() {
    |  ______________^
259 | |         Some(c) => c_tolower_rust(c as i32),
260 | |         None => 0,
261 | |     };
    | |_____^ help: try: `iter2.next().map_or(0, |c| c_tolower_rust(c as i32))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:259:35
    |
259 |         Some(c) => c_tolower_rust(c as i32),
    |                                   ^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
259 |         Some(c) => c_tolower_rust(i32::from(c)),
    |                                   ~~~~~~~~~~~~

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/main.rs:264:8
    |
264 |     if (127 * 2 + 1) <= 2147483647 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: because `2147483647` is the maximum value for this type, this comparison is always true
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons
    = note: `-W clippy::absurd-extreme-comparisons` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::absurd_extreme_comparisons)]`

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:276:1
    |
276 | pub unsafe extern "C" fn c_strcasecmp(s1: *const c_char, s2: *const c_char) -> c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be rewritten as `let...else`
   --> src/main.rs:288:5
    |
288 | /     let rust_s1 = match CStr::from_ptr(s1).to_str() {
289 | |         Ok(s) => s,
290 | |         Err(_) => return 0, // Invalid UTF-8
291 | |     };
    | |______^ help: consider writing: `let Ok(rust_s1) = CStr::from_ptr(s1).to_str() else { return 0 };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: this could be rewritten as `let...else`
   --> src/main.rs:293:5
    |
293 | /     let rust_s2 = match CStr::from_ptr(s2).to_str() {
294 | |         Ok(s) => s,
295 | |         Err(_) => return 0, // Invalid UTF-8
296 | |     };
    | |______^ help: consider writing: `let Ok(rust_s2) = CStr::from_ptr(s2).to_str() else { return 0 };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:324:1
    |
324 | / pub unsafe extern "C" fn proper_name_lite(
325 | |     name_ascii: *const c_char,
326 | |     name_utf8: *const c_char,
327 | | ) -> *const c_char {
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/main.rs:324:1
    |
324 | / pub unsafe extern "C" fn proper_name_lite(
325 | |     name_ascii: *const c_char,
326 | |     name_utf8: *const c_char,
327 | | ) -> *const c_char {
    | |__________________^
    |
note: first possible panic found here
   --> src/main.rs:346:20
    |
346 |     let c_result = CString::new(result).unwrap();
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: `as` casting between raw pointers while changing only its constness
   --> src/main.rs:347:5
    |
347 |     c_result.into_raw() as *const c_char
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `c_result.into_raw().cast_const()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness

warning: docs for function returning `Result` missing `# Errors` section
   --> src/main.rs:362:1
    |
362 | / pub fn version_etc_rust<W: io::Write>(
363 | |     writer: &mut W,
364 | |     command_name: Option<&str>,
365 | |     package: Option<&str>,
366 | |     version: Option<&str>,
367 | |     authors: &[&str],
368 | | ) -> io::Result<()> {
    | |___________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
    = note: `-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_errors_doc)]`

warning: variables can be used directly in the `format!` string
   --> src/main.rs:373:9
    |
373 |         writeln!(writer, "{}", pkg)?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
    = note: `-W clippy::uninlined-format-args` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::uninlined_format_args)]`
help: change this to
    |
373 -         writeln!(writer, "{}", pkg)?;
373 +         writeln!(writer, "{pkg}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:378:9
    |
378 |         writeln!(writer, "version {}", ver)?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
378 -         writeln!(writer, "version {}", ver)?;
378 +         writeln!(writer, "version {ver}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:404:21
    |
404 |                     write!(writer, ", {}", author)?;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
404 -                     write!(writer, ", {}", author)?;
404 +                     write!(writer, ", {author}")?;
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:416:1
    |
416 | / pub unsafe extern "C" fn version_etc(
417 | |     stream: *mut libc::FILE,
418 | |     command_name: *const c_char,
419 | |     package: *const c_char,
...   |
430 | |     author10: *const c_char,
431 | | ) {
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
   --> src/main.rs:433:20
    |
433 |       let cmd_name = if !command_name.is_null() {
    |  ____________________^
434 | |         CStr::from_ptr(command_name).to_str().ok()
435 | |     } else {
436 | |         None
437 | |     };
    | |_____^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::if_not_else)]`

warning: unnecessary boolean `not` operation
   --> src/main.rs:439:15
    |
439 |       let pkg = if !package.is_null() {
    |  _______________^
440 | |         CStr::from_ptr(package).to_str().ok()
441 | |     } else {
442 | |         None
443 | |     };
    | |_____^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary boolean `not` operation
   --> src/main.rs:445:15
    |
445 |       let ver = if !version.is_null() {
    |  _______________^
446 | |         CStr::from_ptr(version).to_str().ok()
447 | |     } else {
448 | |         None
449 | |     };
    | |_____^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/main.rs:503:22
    |
503 |     let st_blksize = metadata.blksize() as isize;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
503 |     let st_blksize = isize::try_from(metadata.blksize());
    |                      ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/main.rs:503:22
    |
503 |     let st_blksize = metadata.blksize() as isize;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `u32` may truncate the value on targets with 64-bit wide pointers
   --> src/main.rs:523:44
    |
523 |         let power = 1_u64.checked_shl(64 - leading_zeros as u32).and_then(|p| {
    |                                            ^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
523 |         let power = 1_u64.checked_shl(64 - u32::try_from(leading_zeros)).and_then(|p| {
    |                                            ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: checked cast can be simplified
   --> src/main.rs:524:16
    |
524 |             if p <= isize::MAX as u64 {
    |                ^^^^^^^^^^^^^^^^^^^^^^ help: try: `isize::try_from(p).is_ok()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#checked_conversions
    = note: `-W clippy::checked-conversions` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::checked_conversions)]`

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/main.rs:525:22
    |
525 |                 Some(p as isize)
    |                      ^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
525 |                 Some(isize::try_from(p))
    |                      ~~~~~~~~~~~~~~~~~~

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/main.rs:525:22
    |
525 |                 Some(p as isize)
    |                      ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `isize` may wrap around the value
   --> src/main.rs:537:41
    |
537 |     let max_safe_size = min(isize::MAX, usize::MAX as isize) / 2 + 1;
    |                                         ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:541:1
    |
541 | pub unsafe extern "C" fn io_blksize(st: *const libc::stat) -> libc::ssize_t {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> src/main.rs:556:5
    |
556 | /     struct CustomMetadata {
557 | |         inner: Metadata,
558 | |         blksize: u64,
559 | |         mode: u32,
560 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements
    = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::items_after_statements)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> src/main.rs:562:5
    |
562 | /     impl std::ops::Deref for CustomMetadata {
563 | |         type Target = Metadata;
564 | |
565 | |         fn deref(&self) -> &Self::Target {
566 | |             &self.inner
567 | |         }
568 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
   --> src/main.rs:570:5
    |
570 | /     impl MetadataExt for CustomMetadata {
571 | |         fn dev(&self) -> u64 {
572 | |             self.inner.dev()
573 | |         }
...   |
618 | |         }
619 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/main.rs:623:18
    |
623 |         blksize: (*st).st_blksize as u64,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_sign_loss)]`

warning: casting to the same type is unnecessary (`u32` -> `u32`)
   --> src/main.rs:624:15
    |
624 |         mode: (*st).st_mode as u32,
    |               ^^^^^^^^^^^^^^^^^^^^ help: try: `(*st).st_mode`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: item in documentation is missing backticks
   --> src/main.rs:635:50
    |
635 |     /// Additional flags. Bitwise combination of quoting_flags.
    |                                                  ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
    = note: `-W clippy::doc-markdown` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::doc_markdown)]`
help: try
    |
635 |     /// Additional flags. Bitwise combination of `quoting_flags`.
    |                                                  ~~~~~~~~~~~~~~~

warning: item in documentation is missing backticks
   --> src/main.rs:642:28
    |
642 |     /// The left quote for custom_quoting_style.
    |                            ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
642 |     /// The left quote for `custom_quoting_style`.
    |                            ~~~~~~~~~~~~~~~~~~~~~~

warning: item in documentation is missing backticks
   --> src/main.rs:645:29
    |
645 |     /// The right quote for custom_quoting_style.
    |                             ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
645 |     /// The right quote for `custom_quoting_style`.
    |                             ~~~~~~~~~~~~~~~~~~~~~~

warning: this could be a `const fn`
   --> src/main.rs:654:1
    |
654 | / fn quoting_options_from_style_rust(style: u32) -> quoting_options_rust {
655 | |     // We don't have the exact value of custom_quoting_style, so we'll check in the wrapper
656 | |
657 | |     quoting_options_rust {
...   |
663 | |     }
664 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
654 | const fn quoting_options_from_style_rust(style: u32) -> quoting_options_rust {
    | +++++

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:666:1
    |
666 | pub unsafe extern "C" fn quoting_options_from_style(style: libc::c_int) -> quoting_options {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/main.rs:676:21
    |
676 |     let style_u32 = style as u32;
    |                     ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this method could have a `#[must_use]` attribute
   --> src/main.rs:704:5
    |
704 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:726:19
    |
726 |       let options = match o {
    |  ___________________^
727 | |         Some(opts) => opts,
728 | |         None => unsafe { &mut DEFAULT_QUOTING_OPTIONS },
729 | |     };
    | |_____^ help: try: `o.map_or(unsafe { &mut DEFAULT_QUOTING_OPTIONS }, |opts| opts)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casts from `u8` to `u32` can be expressed infallibly using `From`
   --> src/main.rs:732:17
    |
732 |     let shift = (c % 32) as u32;
    |                 ^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u32::from` instead
    |
732 |     let shift = u32::from(c % 32);
    |                 ~~~~~~~~~~~~~~~~~

warning: casting `u32` to `i32` may wrap around the value
   --> src/main.rs:735:13
    |
735 |     let r = ((options.quote_these_too[index] & mask) >> shift) as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:745:1
    |
745 | / pub unsafe extern "C" fn set_char_quoting(
746 | |     o: *mut libc::c_void, // Using c_void for the opaque struct pointer
747 | |     c: c_char,
748 | |     i: c_int,
749 | | ) -> c_int {
    | |__________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/main.rs:751:16
    |
751 |     let c_u8 = c as u8;
    |                ^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting to the same type is unnecessary (`i32` -> `i32`)
   --> src/main.rs:752:17
    |
752 |     let i_i32 = i as i32;
    |                 ^^^^^^^^ help: try: `i`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: `as` casting between raw pointers without changing their constness
   --> src/main.rs:758:20
    |
758 |         Some(&mut *(o as *mut QuotingOptions))
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `o.cast::<QuotingOptions>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:831:1
    |
831 | / pub unsafe extern "C" fn quotearg_n_style_colon(
832 | |     n: c_int,
833 | |     s: c_int,
834 | |     arg: *const c_char,
835 | | ) -> *mut c_char {
    | |________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this pattern reimplements `Result::unwrap_or`
   --> src/main.rs:840:9
    |
840 | /         match CStr::from_ptr(arg).to_str() {
841 | |             Ok(s) => s,
842 | |             Err(_) => "",
843 | |         }
    | |_________^ help: replace with: `CStr::from_ptr(arg).to_str().unwrap_or("")`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or
    = note: `-W clippy::manual-unwrap-or` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::manual_unwrap_or)]`

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:840:9
    |
840 | /         match CStr::from_ptr(arg).to_str() {
841 | |             Ok(s) => s,
842 | |             Err(_) => "",
843 | |         }
    | |_________^ help: try: `CStr::from_ptr(arg).to_str().map_or("", |s| s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: match can be simplified with `.unwrap_or_default()`
   --> src/main.rs:840:9
    |
840 | /         match CStr::from_ptr(arg).to_str() {
841 | |             Ok(s) => s,
842 | |             Err(_) => "",
843 | |         }
    | |_________^ help: replace it with: `CStr::from_ptr(arg).to_str().unwrap_or_default()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or_default
    = note: `-W clippy::manual-unwrap-or-default` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::manual_unwrap_or_default)]`

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/main.rs:847:49
    |
847 |     let result = quotearg_n_style_colon_rust(n, s as u32, arg_str);
    |                                                 ^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:871:1
    |
871 | pub unsafe extern "C" fn fdadvise(fd: c_int, offset: libc::off_t, len: libc::off_t, advice: c_int) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item in documentation is missing backticks
   --> src/main.rs:875:28
    |
875 | /// Rust implementation of rpl_fcntl
    |                            ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
875 | /// Rust implementation of `rpl_fcntl`
    |                            ~~~~~~~~~~~

warning: item in documentation is missing backticks
   --> src/main.rs:878:43
    |
878 | /// that were previously handled by the C rpl_fcntl function.
    |                                           ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
    |
878 | /// that were previously handled by the C `rpl_fcntl` function.
    |                                           ~~~~~~~~~~~

warning: use Option::map_or_else instead of an if let/else
   --> src/main.rs:888:13
    |
888 | /             if let Some(target) = arg {
889 | |                 // Use the libc dup2 function to duplicate the file descriptor
890 | |                 let result = unsafe { libc::dup2(fd, target) };
891 | |                 if result == -1 {
...   |
900 | |                 ))
901 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
888 ~             arg.map_or_else(|| Err(io::Error::new(
889 +                     io::ErrorKind::InvalidInput,
890 +                     "Missing target argument for F_DUPFD",
891 +                 )), |target| {
892 +                 // Use the libc dup2 function to duplicate the file descriptor
893 +                 let result = unsafe { libc::dup2(fd, target) };
894 +                 if result == -1 {
895 +                     Err(io::Error::last_os_error())
896 +                 } else {
897 +                     Ok(result)
898 +                 }
899 +             })
    |

warning: use Option::map_or_else instead of an if let/else
   --> src/main.rs:962:17
    |
962 | /                 if let Some(int_arg) = arg {
963 | |                     let result = unsafe { libc::fcntl(fd, action, int_arg) };
964 | |                     if result == -1 {
965 | |                         Err(io::Error::last_os_error())
...   |
973 | |                     ))
974 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
962 ~                 arg.map_or_else(|| Err(io::Error::new(
963 +                         io::ErrorKind::InvalidInput,
964 +                         "Missing integer argument for fcntl command",
965 +                     )), |int_arg| {
966 +                     let result = unsafe { libc::fcntl(fd, action, int_arg) };
967 +                     if result == -1 {
968 +                         Err(io::Error::last_os_error())
969 +                     } else {
970 +                         Ok(result)
971 +                     }
972 +                 })
    |

warning: use Option::map_or_else instead of an if let/else
   --> src/main.rs:978:17
    |
978 | /                 if let Some(void_ptr) = ptr_arg {
979 | |                     let result = unsafe { libc::fcntl(fd, action, void_ptr) };
980 | |                     if result == -1 {
981 | |                         Err(io::Error::last_os_error())
...   |
989 | |                     ))
990 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
978 ~                 ptr_arg.map_or_else(|| Err(io::Error::new(
979 +                         io::ErrorKind::Unsupported,
980 +                         format!("Missing pointer argument for fcntl command: {}", action),
981 +                     )), |void_ptr| {
982 +                     let result = unsafe { libc::fcntl(fd, action, void_ptr) };
983 +                     if result == -1 {
984 +                         Err(io::Error::last_os_error())
985 +                     } else {
986 +                         Ok(result)
987 +                     }
988 +                 })
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:988:25
    |
988 |                         format!("Missing pointer argument for fcntl command: {}", action),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
988 -                         format!("Missing pointer argument for fcntl command: {}", action),
988 +                         format!("Missing pointer argument for fcntl command: {action}"),
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:998:1
    |
998 | pub unsafe extern "C" fn rpl_fcntl(fd: c_int, action: c_int, arg1: c_int) -> c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this match arm has an identical body to another arm
    --> src/main.rs:1008:9
     |
1008 | /         1030 => match rpl_fcntl_rust(fd, action, Some(arg1), None) {
1009 | |             Ok(result) => result,
1010 | |             Err(_) => -1,
1011 | |         },
     | |_________^
     |
     = help: try changing either arm body
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms
     = note: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::match_same_arms)]`
help: or try merging the arm patterns
     |
1008 |         1030 | 0 => match rpl_fcntl_rust(fd, action, Some(arg1), None) {
     |         ~~~~~~~~
help: and remove this obsolete arm
     |
1002 -         0 => match rpl_fcntl_rust(fd, action, Some(arg1), None) {
1003 -             Ok(result) => result,
1004 -             Err(_) => -1,
1005 -         },
1006 - 
     |

warning: this pattern reimplements `Result::unwrap_or`
    --> src/main.rs:1002:14
     |
1002 |           0 => match rpl_fcntl_rust(fd, action, Some(arg1), None) {
     |  ______________^
1003 | |             Ok(result) => result,
1004 | |             Err(_) => -1,
1005 | |         },
     | |_________^ help: replace with: `rpl_fcntl_rust(fd, action, Some(arg1), None).unwrap_or(-1)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or

warning: use Option::map_or instead of an if let/else
    --> src/main.rs:1002:14
     |
1002 |           0 => match rpl_fcntl_rust(fd, action, Some(arg1), None) {
     |  ______________^
1003 | |             Ok(result) => result,
1004 | |             Err(_) => -1,
1005 | |         },
     | |_________^ help: try: `rpl_fcntl_rust(fd, action, Some(arg1), None).map_or(-1, |result| result)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: this pattern reimplements `Result::unwrap_or`
    --> src/main.rs:1008:17
     |
1008 |           1030 => match rpl_fcntl_rust(fd, action, Some(arg1), None) {
     |  _________________^
1009 | |             Ok(result) => result,
1010 | |             Err(_) => -1,
1011 | |         },
     | |_________^ help: replace with: `rpl_fcntl_rust(fd, action, Some(arg1), None).unwrap_or(-1)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or

warning: use Option::map_or instead of an if let/else
    --> src/main.rs:1008:17
     |
1008 |           1030 => match rpl_fcntl_rust(fd, action, Some(arg1), None) {
     |  _________________^
1009 | |             Ok(result) => result,
1010 | |             Err(_) => -1,
1011 | |         },
     | |_________^ help: try: `rpl_fcntl_rust(fd, action, Some(arg1), None).map_or(-1, |result| result)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: this pattern reimplements `Result::unwrap_or`
    --> src/main.rs:1014:48
     |
1014 |           1 | 3 | 1025 | 9 | 1032 | 1034 | 11 => match rpl_fcntl_rust(fd, action, None, None) {
     |  ________________________________________________^
1015 | |             Ok(result) => result,
1016 | |             Err(_) => -1,
1017 | |         },
     | |_________^ help: replace with: `rpl_fcntl_rust(fd, action, None, None).unwrap_or(-1)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or

warning: use Option::map_or instead of an if let/else
    --> src/main.rs:1014:48
     |
1014 |           1 | 3 | 1025 | 9 | 1032 | 1034 | 11 => match rpl_fcntl_rust(fd, action, None, None) {
     |  ________________________________________________^
1015 | |             Ok(result) => result,
1016 | |             Err(_) => -1,
1017 | |         },
     | |_________^ help: try: `rpl_fcntl_rust(fd, action, None, None).map_or(-1, |result| result)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: this pattern reimplements `Result::unwrap_or`
    --> src/main.rs:1021:13
     |
1021 | /             match rpl_fcntl_rust(fd, action, Some(arg1), None) {
1022 | |                 Ok(result) => result,
1023 | |                 Err(_) => -1,
1024 | |             }
     | |_____________^ help: replace with: `rpl_fcntl_rust(fd, action, Some(arg1), None).unwrap_or(-1)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or

warning: use Option::map_or instead of an if let/else
    --> src/main.rs:1021:13
     |
1021 | /             match rpl_fcntl_rust(fd, action, Some(arg1), None) {
1022 | |                 Ok(result) => result,
1023 | |                 Err(_) => -1,
1024 | |             }
     | |_____________^ help: try: `rpl_fcntl_rust(fd, action, Some(arg1), None).map_or(-1, |result| result)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: this pattern reimplements `Result::unwrap_or`
    --> src/main.rs:1032:13
     |
1032 | /             match rpl_fcntl_rust(fd, action, None, Some(ptr)) {
1033 | |                 Ok(result) => result,
1034 | |                 Err(_) => -1,
1035 | |             }
     | |_____________^ help: replace with: `rpl_fcntl_rust(fd, action, None, Some(ptr)).unwrap_or(-1)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_unwrap_or

warning: use Option::map_or instead of an if let/else
    --> src/main.rs:1032:13
     |
1032 | /             match rpl_fcntl_rust(fd, action, None, Some(ptr)) {
1033 | |                 Ok(result) => result,
1034 | |                 Err(_) => -1,
1035 | |             }
     | |_____________^ help: try: `rpl_fcntl_rust(fd, action, None, Some(ptr)).map_or(-1, |result| result)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: reference as raw pointer
    --> src/main.rs:1087:66
     |
1087 |         let pinoff_ptr = pinoff.map_or(std::ptr::null_mut(), |p| p as *mut i64);
     |                                                                  ^^^^^^^^^^^^^ help: try: `std::ptr::from_mut::<i64>(p)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr

warning: reference as raw pointer
    --> src/main.rs:1088:68
     |
1088 |         let poutoff_ptr = poutoff.map_or(std::ptr::null_mut(), |p| p as *mut i64);
     |                                                                    ^^^^^^^^^^^^^ help: try: `std::ptr::from_mut::<i64>(p)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1094:17
     |
1094 |                 pinoff_ptr as *mut libc::off_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `pinoff_ptr.cast::<libc::off_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1096:17
     |
1096 |                 poutoff_ptr as *mut libc::off_t,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `poutoff_ptr.cast::<libc::off_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
    --> src/main.rs:1115:1
     |
1115 | fn is_ENOTSUP_rust(err: i32) -> bool {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
help: set an ABI
     |
1115 | extern "C" fn is_ENOTSUP_rust(err: i32) -> bool {
     | ++++++++++
help: or explicitly set the default
     |
1115 | extern "Rust" fn is_ENOTSUP_rust(err: i32) -> bool {
     | +++++++++++++

warning: this could be a `const fn`
    --> src/main.rs:1115:1
     |
1115 | / fn is_ENOTSUP_rust(err: i32) -> bool {
1116 | |     // In the original C code, there's a redundant check that will always be false:
1117 | |     // (95 != 95 && err == 95)
1118 | |     // We'll simplify this to just check if err == 95 (ENOTSUP)
...    |
1122 | |     err == libc::ENOTSUP
1123 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
     |
1115 | const fn is_ENOTSUP_rust(err: i32) -> bool {
     | +++++

warning: you should consider adding a `Default` implementation for `InfileWrapper`
    --> src/main.rs:1133:5
     |
1133 | /     pub fn new() -> Self {
1134 | |         let val = Self::read_global();
1135 | |         InfileWrapper { val }
1136 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
     |
1132 + impl Default for InfileWrapper {
1133 +     fn default() -> Self {
1134 +         Self::new()
1135 +     }
1136 + }
     |

warning: this method could have a `#[must_use]` attribute
    --> src/main.rs:1133:5
     |
1133 |     pub fn new() -> Self {
     |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: unnecessary structure name repetition
    --> src/main.rs:1135:9
     |
1135 |         InfileWrapper { val }
     |         ^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this method could have a `#[must_use]` attribute
    --> src/main.rs:1138:5
     |
1138 |     pub fn get(&self) -> Option<String> {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get(&self) -> Option<String>`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: redundant closure
    --> src/main.rs:1151:55
     |
1151 |                 CStr::from_ptr(ptr).to_str().ok().map(|s| s.to_string())
     |                                                       ^^^^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::ToString::to_string`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls
     = note: `-W clippy::redundant-closure-for-method-calls` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::redundant_closure_for_method_calls)]`

warning: you should consider adding a `Default` implementation for `InputDescWrapper`
    --> src/main.rs:1162:5
     |
1162 | /     pub fn new() -> Self {
1163 | |         // Read the current value of the global variable
1164 | |         let current_value = unsafe { input_desc };
1165 | |         Self { val: current_value }
1166 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
     |
1161 + impl Default for InputDescWrapper {
1162 +     fn default() -> Self {
1163 +         Self::new()
1164 +     }
1165 + }
     |

warning: this method could have a `#[must_use]` attribute
    --> src/main.rs:1162:5
     |
1162 |     pub fn new() -> Self {
     |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
    --> src/main.rs:1168:5
     |
1168 |     pub fn get(&self) -> i32 {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get(&self) -> i32`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: boolean to int conversion using if
    --> src/main.rs:1194:29
     |
1194 |             Ok(0) => return if some_copied { 1 } else { 0 },
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: replace with from: `i32::from(some_copied)`
     |
     = note: `some_copied as i32` or `some_copied.into()` can also be valid options
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if
     = note: `-W clippy::bool-to-int-with-if` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::bool_to_int_with_if)]`

warning: this could be a `const fn`
    --> src/main.rs:1228:1
     |
1228 | / fn shell_escape_quoting_style() -> u32 {
1229 | |     // This is a placeholder for the actual value from the C code
1230 | |     // In a real implementation, this would be properly defined
1231 | |     2 // Assuming 2 is the value for shell_escape_quoting_style
1232 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
     |
1228 | const fn shell_escape_quoting_style() -> u32 {
     | +++++

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1234:1
     |
1234 | pub unsafe extern "C" fn copy_cat() -> c_int {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: use Option::map_or instead of an if let/else
    --> src/main.rs:1250:5
     |
1250 | /     match Layout::from_size_align(size, alignment) {
1251 | |         Ok(layout) => {
1252 | |             // Allocate memory with the specified layout
1253 | |             let ptr = unsafe { alloc::alloc(layout) };
...    |
1261 | |         Err(_) => None,
1262 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
     |
1250 ~     Layout::from_size_align(size, alignment).map_or(None, |layout| {
1251 +             // Allocate memory with the specified layout
1252 +             let ptr = unsafe { alloc::alloc(layout) };
1253 + 
1254 +             if ptr.is_null() {
1255 +                 None
1256 +             } else {
1257 +                 Some(ptr)
1258 +             }
1259 +         })
     |

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
    --> src/main.rs:1269:1
     |
1269 | fn xalignalloc_rust(alignment: usize, size: usize) -> NonNull<u8> {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
help: set an ABI
     |
1269 | extern "C" fn xalignalloc_rust(alignment: usize, size: usize) -> NonNull<u8> {
     | ++++++++++
help: or explicitly set the default
     |
1269 | extern "Rust" fn xalignalloc_rust(alignment: usize, size: usize) -> NonNull<u8> {
     | +++++++++++++

warning: use Option::map_or_else instead of an if let/else
    --> src/main.rs:1270:5
     |
1270 | /     match alignalloc_rust(alignment, size) {
1271 | |         Some(ptr) => unsafe { NonNull::new_unchecked(ptr) },
1272 | |         None => {
1273 | |             // Instead of calling xalloc_die, we'll panic with a descriptive message
...    |
1276 | |         }
1277 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
     |
1270 ~     alignalloc_rust(alignment, size).map_or_else(|| {
1271 +             // Instead of calling xalloc_die, we'll panic with a descriptive message
1272 +             // which is more idiomatic in Rust
1273 +             panic!("Memory allocation failed");
1274 +         }, |ptr| unsafe { NonNull::new_unchecked(ptr) })
     |

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1280:1
     |
1280 | pub unsafe extern "C" fn xalignalloc(alignment: libc::size_t, size: libc::size_t) -> *mut c_void {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1281:11
     |
1281 |     match xalignalloc_rust(alignment as usize, size as usize).as_ptr() as *mut c_void {
     |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `xalignalloc_rust(alignment as usize, size as usize).as_ptr().cast::<c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting to the same type is unnecessary (`usize` -> `usize`)
    --> src/main.rs:1281:28
     |
1281 |     match xalignalloc_rust(alignment as usize, size as usize).as_ptr() as *mut c_void {
     |                            ^^^^^^^^^^^^^^^^^^ help: try: `alignment`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: casting to the same type is unnecessary (`usize` -> `usize`)
    --> src/main.rs:1281:48
     |
1281 |     match xalignalloc_rust(alignment as usize, size as usize).as_ptr() as *mut c_void {
     |                                                ^^^^^^^^^^^^^ help: try: `size`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: this expression borrows a value the compiler would automatically borrow
    --> src/main.rs:1297:26
     |
1297 |             let result = (&mut file).read(&mut buf[0..remaining_count]);
     |                          ^^^^^^^^^^^ help: change this to: `file`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_borrow
     = note: `-W clippy::needless-borrow` implied by `-W clippy::all`
     = help: to override `-W clippy::all` add `#[allow(clippy::needless_borrow)]`

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1325:1
     |
1325 | / pub unsafe extern "C" fn safe_read(
1326 | |     fd: libc::c_int,
1327 | |     buf: *mut c_void,
1328 | |     count: libc::size_t,
1329 | | ) -> libc::size_t {
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1335:49
     |
1335 |     let buffer = std::slice::from_raw_parts_mut(buf as *mut u8, count);
     |                                                 ^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
    --> src/main.rs:1394:1
     |
1394 | fn full_write_rust(fd: RawFd, buf: &[u8]) -> usize {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
help: set an ABI
     |
1394 | extern "C" fn full_write_rust(fd: RawFd, buf: &[u8]) -> usize {
     | ++++++++++
help: or explicitly set the default
     |
1394 | extern "Rust" fn full_write_rust(fd: RawFd, buf: &[u8]) -> usize {
     | +++++++++++++

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1421:1
     |
1421 | pub unsafe extern "C" fn full_write(fd: libc::c_int, buf: *const c_void, count: size_t) -> size_t {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1427:45
     |
1427 |     let buffer = std::slice::from_raw_parts(buf as *const u8, count);
     |                                             ^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1446:1
     |
1446 | pub unsafe extern "C" fn fpurge(fp: *mut libc::FILE) -> c_int {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1488:21
     |
1488 |                     eprintln!("Error reading input: {}", e);
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1488 -                     eprintln!("Error reading input: {}", e);
1488 +                     eprintln!("Error reading input: {e}");
     |

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1509:1
     |
1509 | pub unsafe extern "C" fn simple_cat(buf: *mut libc::c_char, bufsize: size_t) -> libc::c_int {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1511:52
     |
1511 |     let buf_slice = std::slice::from_raw_parts_mut(buf as *mut u8, bufsize);
     |                                                    ^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: boolean to int conversion using if
    --> src/main.rs:1518:5
     |
1518 | /     if simple_cat_rust(buf_slice, &input_desc_wrapper, &infile_wrapper) {
1519 | |         1 // Return true
1520 | |     } else {
1521 | |         0 // Return false
1522 | |     }
     | |_____^ help: replace with from: `i32::from(simple_cat_rust(buf_slice, &input_desc_wrapper, &infile_wrapper))`
     |
     = note: `simple_cat_rust(buf_slice, &input_desc_wrapper, &infile_wrapper) as i32` or `simple_cat_rust(buf_slice, &input_desc_wrapper, &infile_wrapper).into()` can also be valid options
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1543:1
     |
1543 | pub unsafe extern "C" fn write_pending(outbuf: *mut c_char, bpout: *mut *mut c_char) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `isize` to `usize` may lose the sign of the value
    --> src/main.rs:1549:18
     |
1549 |     let offset = (*bpout).offset_from(outbuf) as usize;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1553:55
     |
1553 |     let buffer_slice = std::slice::from_raw_parts_mut(outbuf as *mut u8, buffer_len);
     |                                                       ^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outbuf.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: item in documentation is missing backticks
    --> src/main.rs:1638:19
     |
1638 | /// simply called free() on a pointer.
     |                   ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
     |
1638 | /// simply called `free()` on a pointer.
     |                   ~~~~~~~~

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1641:1
     |
1641 | pub unsafe extern "C" fn alignfree(ptr: *mut c_void) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this argument is a mutable reference, but not used mutably
   --> src/main.rs:804:40
    |
804 | fn convert_to_quoting_options(options: &mut quoting_options_rust) -> QuotingOptions {
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing to: `&quoting_options_rust`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_ref_mut
    = note: `-W clippy::needless-pass-by-ref-mut` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::needless_pass_by_ref_mut)]`

warning: this argument is a mutable reference, but not used mutably
   --> src/main.rs:812:14
    |
812 |     options: &mut quoting_options_rust,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider changing to: `&quoting_options_rust`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_ref_mut

warning: this argument is a mutable reference, but not used mutably
    --> src/main.rs:1531:31
     |
1531 | fn write_pending_rust(outbuf: &mut [u8], bpout: &mut usize) {
     |                               ^^^^^^^^^ help: consider changing to: `&[u8]`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_ref_mut

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5430:10
     |
5430 |     ) -> u128;
     |          ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI
     = note: `#[warn(improper_ctypes)]` on by default

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5451:10
     |
5451 |     ) -> _Float128;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5465:10
     |
5465 |     ) -> _Float64x;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5539:14
     |
5539 |         __f: u128,
     |              ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5566:14
     |
5566 |         __f: _Float128,
     |              ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5584:14
     |
5584 |         __f: _Float64x,
     |              ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5645:10
     |
5645 |     ) -> u128;
     |          ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5669:10
     |
5669 |     ) -> _Float128;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:5685:10
     |
5685 |     ) -> _Float64x;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6185:18
     |
6185 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6194:18
     |
6194 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6203:18
     |
6203 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6233:18
     |
6233 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/cat_36BjRnDjej/target/debug/build/foo-231262516476aec2/out/bindings.rs:6244:18
     |
6244 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: comparison is useless due to type limits
   --> src/main.rs:264:8
    |
264 |     if (127 * 2 + 1) <= 2147483647 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(unused_comparisons)]` on by default

warning: `foo` (bin "cat") generated 356 warnings (6 duplicates) (run `cargo clippy --fix --bin "cat"` to apply 90 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.59s
