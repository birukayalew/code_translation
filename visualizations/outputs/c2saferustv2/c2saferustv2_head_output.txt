warning: package `foo` is missing `package.description` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata
  = note: `-W clippy::cargo-common-metadata` implied by `-W clippy::cargo`
  = help: to override `-W clippy::cargo` add `#[allow(clippy::cargo_common_metadata)]`

warning: package `foo` is missing `either package.license or package.license_file` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.repository` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.readme` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.keywords` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: package `foo` is missing `package.categories` metadata
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cargo_common_metadata

warning: this function has too many lines (136/100)
   --> build.rs:33:1
    |
33  | / fn main() {
34  | |     let cargo_manifest_dir = env::var("CARGO_MANIFEST_DIR").unwrap();
35  | |     let c_build_path = env::var("C_BUILD_PATH").expect("C_BUILD_PATH not set");
...   |
218 | |         .expect("Couldn't write bindings!");
219 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`

warning: variables can be used directly in the `format!` string
  --> build.rs:38:47
   |
38 |     let compile_commands_path = PathBuf::from(format!("{}/compile_commands.json", c_build_path));
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
   = note: `-W clippy::uninlined-format-args` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::uninlined_format_args)]`
help: change this to
   |
38 -     let compile_commands_path = PathBuf::from(format!("{}/compile_commands.json", c_build_path));
38 +     let compile_commands_path = PathBuf::from(format!("{c_build_path}/compile_commands.json"));
   |

warning: avoid using `collect()` when not needed
  --> build.rs:58:8
   |
58 |     }).collect::<Vec<_>>();
   |        ^^^^^^^
...
67 |     if source_paths.is_empty() {
   |        ----------------------- the iterator could be used here instead
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_collect
   = note: `-W clippy::needless-collect` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::needless_collect)]`
help: check if the original Iterator has anything instead of collecting it and seeing if it's empty
   |
44 ~     
45 |
...
52 |
53 ~     if files.iter().map(|file| {
54 +         let file = file.as_object().expect("Expected an object");
55 +         let directory = file.get("directory").expect("Expected a directory").as_str().expect("Expected a string");
56 +         let file_path = file.get("file").expect("Expected a file path").as_str().expect("Expected a string");
57 +         // Check if the file path is absolute or relative
58 +         // If it's relative, make it absolute by joining with the directory
59 +         // If it's absolute, just use it as is
60 +         // Create a PathBuf depending on whether the path is absolute
61 +         let full_path = if Path::new(file_path).is_absolute() {
62 +             PathBuf::from(file_path)
63 +         } else {
64 +             Path::new(directory).join(file_path)
65 +         };
66 +         full_path
67 ~     }).next().is_none() {
   |

warning: only a `panic!` in `if`-then statement
  --> build.rs:67:5
   |
67 | /     if source_paths.is_empty() {
68 | |         panic!("No .c files found in compile_commands.json");
69 | |     }
   | |_____^ help: try instead: `assert!(!source_paths.is_empty(), "No .c files found in compile_commands.json");`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_assert
   = note: `-W clippy::manual-assert` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::manual_assert)]`

warning: casting `i64` to `i32` may truncate the value
  --> build.rs:94:29
   |
94 |             main_num_args = function.get("num_args").expect("Expected a num_args").as_i64().expect("Expected an integer") as i32;
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
   = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`
help: ... or use `try_from` and handle the error accordingly
   |
94 |             main_num_args = i32::try_from(function.get("num_args").expect("Expected a num_args").as_i64().expect("Expected an integer"));
   |                             ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: variables can be used directly in the `format!` string
  --> build.rs:99:5
   |
99 |     println!("cargo::rustc-link-search=native={}", c_build_path);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
   |
99 -     println!("cargo::rustc-link-search=native={}", c_build_path);
99 +     println!("cargo::rustc-link-search=native={c_build_path}");
   |

warning: stripping a prefix manually
   --> build.rs:132:40
    |
132 |                     let include_path = arg[2..].trim_start().to_string();
    |                                        ^^^^^^^^
    |
note: the prefix was tested here
   --> build.rs:131:17
    |
131 |                 if arg.starts_with("-I") {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
    = note: `-W clippy::manual-strip` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::manual_strip)]`
help: try using the `strip_prefix` method
    |
131 ~                 if let Some(<stripped>) = arg.strip_prefix("-I") {
132 ~                     let include_path = <stripped>.trim_start().to_string();
    |

warning: variables can be used directly in the `format!` string
   --> build.rs:151:39
    |
151 |         bindings = bindings.clang_arg(format!("-I{}", include_path));
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
151 -         bindings = bindings.clang_arg(format!("-I{}", include_path));
151 +         bindings = bindings.clang_arg(format!("-I{include_path}"));
    |

warning: use Option::map_or_else instead of an if let/else
   --> build.rs:156:34
    |
156 |       let blocklist: Vec<String> = match std::fs::read_to_string("bindgen_blocklist.txt") {
    |  __________________________________^
157 | |         Ok(blocklist) => {
158 | |             blocklist.lines().map(String::from).collect()
159 | |         },
160 | |         Err(_) => Vec::new(),
161 | |     };
    | |_____^ help: try: `std::fs::read_to_string("bindgen_blocklist.txt").map_or_else(Vec::new, |blocklist| blocklist.lines().map(String::from).collect())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
    = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`

warning: variables can be used directly in the `format!` string
   --> build.rs:179:35
    |
179 |     let main_file = PathBuf::from(format!("{}/src/main_func.rs", cargo_manifest_dir));
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
179 -     let main_file = PathBuf::from(format!("{}/src/main_func.rs", cargo_manifest_dir));
179 +     let main_file = PathBuf::from(format!("{cargo_manifest_dir}/src/main_func.rs"));
    |

warning: useless use of `format!`
   --> build.rs:181:9
    |
181 | /         format!(r#"
182 | | pub fn main() {{
183 | |     let mut args: Vec<*mut libc::c_char> = Vec::new();
184 | |     for arg in ::std::env::args() {{
...   |
197 | |     }}
198 | | }}"#)
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format
    = note: `-W clippy::useless-format` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::useless_format)]`
help: consider using `.to_string()`
    |
181 ~         r#"
182 + pub fn main() {
183 +     let mut args: Vec<*mut libc::c_char> = Vec::new();
184 +     for arg in ::std::env::args() {
185 +         args.push(
186 +             (::std::ffi::CString::new(arg))
187 +                 .expect("Failed to convert argument into CString.")
188 +                 .into_raw(),
189 +         );
190 +     }
191 +     args.push(::core::ptr::null_mut());
192 +     unsafe {
193 +         ::std::process::exit(main_0(
194 +             (args.len() - 1) as libc::c_int,
195 +             args.as_mut_ptr() as *mut *mut libc::c_char,
196 +         ) as i32)
197 +     }
198 + }"#.to_string()
    |

warning: useless use of `format!`
   --> build.rs:200:9
    |
200 | /         format!(r#"
201 | | pub fn main() {{
202 | |     unsafe {{
203 | |         ::std::process::exit(main_0() as i32)
204 | |     }}
205 | | }}"#)
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_format
help: consider using `.to_string()`
    |
200 ~         r#"
201 + pub fn main() {
202 +     unsafe {
203 +         ::std::process::exit(main_0() as i32)
204 +     }
205 + }"#.to_string()
    |

warning: variables can be used directly in the `format!` string
   --> build.rs:208:9
    |
208 |         panic!("main_0 has {} arguments, expected 0 or 2", main_num_args);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
208 -         panic!("main_0 has {} arguments, expected 0 or 2", main_num_args);
208 +         panic!("main_0 has {main_num_args} arguments, expected 0 or 2");
    |

warning: `foo` (build script) generated 19 warnings
   Compiling foo v0.1.0 (/app/output/head_I0I39KQwWC)
warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
   --> src/main.rs:357:1
    |
357 | / #[no_mangle]
358 | |
359 | | fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | |_
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr
    = note: `-W clippy::empty-line-after-outer-attr` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::empty_line_after_outer_attr)]`

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
   --> src/main.rs:556:1
    |
556 | / #[no_mangle]
557 | |
558 | | fn string_to_integer_rust(count_lines: bool, n_string: &str) -> usize {
    | |_
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1216:1
     |
1216 | / #[no_mangle]
1217 | |
1218 | | fn quotearg_style_rust(s: u32, arg: &str) -> String {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1350:1
     |
1350 | / #[no_mangle]
1351 | |
1352 | | /// Purges the buffer of a file stream.
1353 | | ///
1354 | | /// This is a Rust implementation of the C `fpurge` function.
1355 | | /// It discards any buffered data in the given file stream.
1356 | | fn fpurge_rust() -> io::Result<()> {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1362:1
     |
1362 | / #[no_mangle]
1363 | |
1364 | | /// Writes a buffer to stdout, handling errors appropriately.
1365 | | ///
1366 | | /// This is a Rust reimplementation of the C `xwrite_stdout` function.
1367 | | fn xwrite_stdout_rust(buffer: &[u8]) {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1636:1
     |
1636 | / #[no_mangle]
1637 | |
1638 | | #[derive(Debug, PartialEq, Eq)]
1639 | | pub enum CopyFdStatus {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: found an empty line after an outer attribute. Perhaps you forgot to add a `!` to make it an inner attribute?
    --> src/main.rs:1814:1
     |
1814 | / #[no_mangle]
1815 | |
1816 | | pub struct PresumeInputPipeWrapper {
     | |_
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#empty_line_after_outer_attr

warning: unused import: `ErrorKind`
 --> src/main.rs:9:17
  |
9 |     io::{Error, ErrorKind},
  |                 ^^^^^^^^^
  |
  = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `EINTR` and `ssize_t`
  --> src/main.rs:18:20
   |
18 | use libc::{size_t, ssize_t, EINTR, EINVAL};
   |                    ^^^^^^^  ^^^^^

warning: unused import: `fs::FileTypeExt`
  --> src/main.rs:23:9
   |
23 |         fs::FileTypeExt,
   |         ^^^^^^^^^^^^^^^

warning: unused imports: `AtomicI32`, `AtomicPtr`, `Mutex`, `num::Wrapping`, and `ops::BitOr`
  --> src/main.rs:34:5
   |
34 |     num::Wrapping,
   |     ^^^^^^^^^^^^^
35 |     ops::BitOr,
   |     ^^^^^^^^^^
...
38 |         atomic::{AtomicI32, AtomicPtr, Ordering},
   |                  ^^^^^^^^^  ^^^^^^^^^
39 |         Mutex, Once,
   |         ^^^^^

warning: long literal lacking separators
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6592:42
     |
6592 | pub const O_PATHSEARCH: _bindgen_ty_15 = 2097152;
     |                                          ^^^^^^^ help: consider: `2_097_152`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal
     = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::unreadable_literal)]`

warning: long literal lacking separators
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6889:41
     |
6889 | pub const TIMESPEC_HZ: _bindgen_ty_18 = 1000000000;
     |                                         ^^^^^^^^^^ help: consider: `1_000_000_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6893:49
     |
6893 | pub const TIMESPEC_RESOLUTION: _bindgen_ty_20 = 1000000000;
     |                                                 ^^^^^^^^^^ help: consider: `1_000_000_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/main.rs:391:25
    |
391 |     if (127 * 2 + 1) <= 2147483647 {
    |                         ^^^^^^^^^^ help: consider: `2_147_483_647`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/main.rs:1114:13
     |
1114 |     let mut authors = Vec::new();
     |             ^^^^^^^
     |
note: existing binding defined here
    --> src/main.rs:1077:5
     |
1077 |     author1: *const c_char,
     |     ^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::similar_names)]`

warning: long literal lacking separators
    --> src/main.rs:1245:25
     |
1245 |     const S_IFMT: u32 = 0o170000; // File type mask
     |                         ^^^^^^^^ help: consider: `0o170_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/main.rs:1246:26
     |
1246 |     const S_IFREG: u32 = 0o100000; // Regular file
     |                          ^^^^^^^^ help: consider: `0o100_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/main.rs:1247:26
     |
1247 |     const S_IFLNK: u32 = 0o120000; // Symbolic link
     |                          ^^^^^^^^ help: consider: `0o120_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/main.rs:1349:32
     |
1349 | const SYS_BUFSIZE_MAX: usize = 0x7ffff000;
     |                                ^^^^^^^^^^ help: consider: `0x7fff_f000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/main.rs:2251:9
     |
2251 |     let filename_str = match filename_cstr.to_str() {
     |         ^^^^^^^^^^^^
     |
note: existing binding defined here
    --> src/main.rs:2244:9
     |
2244 |     let filename_cstr = if !filename.is_null() {
     |         ^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: attribute should be applied to a free function, impl method or static
    --> src/main.rs:1636:1
     |
1636 |   #[no_mangle]
     |   ^^^^^^^^^^^^
...
1639 | / pub enum CopyFdStatus {
1640 | |     Ok,
1641 | |     ReadError,
1642 | |     UnexpectedEof,
1643 | | }
     | |_- not a free function, impl method or static
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!
     = note: `#[warn(unused_attributes)]` on by default

warning: attribute should be applied to a free function, impl method or static
    --> src/main.rs:1814:1
     |
1814 |   #[no_mangle]
     |   ^^^^^^^^^^^^
1815 |
1816 | / pub struct PresumeInputPipeWrapper {
1817 | |     val: bool,
1818 | | }
     | |_- not a free function, impl method or static
     |
     = warning: this was previously accepted by the compiler but is being phased out; it will become a hard error in a future release!

warning: unused import: `fs::MetadataExt`
  --> src/main.rs:10:31
   |
10 |     os::unix::{ffi::OsStrExt, fs::MetadataExt},
   |                               ^^^^^^^^^^^^^^^

warning: variable does not need to be mutable
   --> src/main.rs:818:17
    |
818 |             let mut parts = format.split("%s");
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`
    |
    = note: `#[warn(unused_mut)]` on by default

warning: variable does not need to be mutable
   --> src/main.rs:838:17
    |
838 |             let mut parts = format.split("%s");
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/main.rs:858:17
    |
858 |             let mut parts = format.split("%s");
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/main.rs:879:17
    |
879 |             let mut parts = format.split("%s");
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/main.rs:900:17
    |
900 |             let mut parts = format.split("%s");
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: variable does not need to be mutable
   --> src/main.rs:923:17
    |
923 |             let mut parts = format.split("%s");
    |                 ----^^^^^
    |                 |
    |                 help: remove this `mut`

warning: unused variable: `n`
    --> src/main.rs:1204:5
     |
1204 |     n: i32,
     |     ^ help: if this is intentional, prefix it with an underscore: `_n`
     |
     = note: `#[warn(unused_variables)]` on by default

warning: unused variable: `size`
    --> src/main.rs:1206:5
     |
1206 |     size: u64,
     |     ^^^^ help: if this is intentional, prefix it with an underscore: `_size`

warning: unused variable: `options`
    --> src/main.rs:1207:5
     |
1207 |     options: &crate::quoting_options_rust,
     |     ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_options`

warning: variable does not need to be mutable
    --> src/main.rs:1319:9
     |
1319 |     let mut file = unsafe { std::fs::File::from_raw_fd(fd) };
     |         ----^^^^
     |         |
     |         help: remove this `mut`

warning: value assigned to `last_read_size` is never read
    --> src/main.rs:1515:13
     |
1515 |     let mut last_read_size = 0;
     |             ^^^^^^^^^^^^^^
     |
     = help: maybe it is overwritten before being read?
     = note: `#[warn(unused_assignments)]` on by default

warning: variable does not need to be mutable
    --> src/main.rs:2141:29
     |
2141 |                         let mut file = unsafe { ManuallyDrop::new(File::from_raw_fd(fd)) };
     |                             ----^^^^
     |                             |
     |                             help: remove this `mut`

warning: unnecessary `unsafe` block
    --> src/main.rs:2318:9
     |
2318 |         unsafe {
     |         ^^^^^^ unnecessary `unsafe` block
     |
     = note: `#[warn(unused_unsafe)]` on by default

warning: field `val` is never read
   --> src/main.rs:296:5
    |
295 | pub struct ExitFailureWrapper {
    |            ------------------ field in this struct
296 |     val: i32,
    |     ^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: static `INIT` is never used
   --> src/main.rs:491:8
    |
491 | static INIT: Once = Once::new();
    |        ^^^^

warning: field `val` is never read
   --> src/main.rs:494:5
    |
493 | pub struct QuoteQuotingOptionsWrapper {
    |            -------------------------- field in this struct
494 |     val: QuotingOptions,
    |     ^^^

warning: field `val` is never read
   --> src/main.rs:651:5
    |
650 | pub struct VersionEtcCopyrightWrapper {
    |            -------------------------- field in this struct
651 |     val: String,
    |     ^^^

warning: field `val` is never read
    --> src/main.rs:1817:5
     |
1816 | pub struct PresumeInputPipeWrapper {
     |            ----------------------- field in this struct
1817 |     val: bool,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:2269:5
     |
2268 | pub struct PrintHeadersWrapper {
     |            ------------------- field in this struct
2269 |     val: bool,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:2278:5
     |
2277 | pub struct HaveReadStdinWrapper {
     |            -------------------- field in this struct
2278 |     val: bool,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:2291:5
     |
2290 | pub struct VersionWrapper {
     |            -------------- field in this struct
2291 |     val: String,
     |     ^^^

warning: field `val` is never read
    --> src/main.rs:2300:5
     |
2299 | pub struct LongOptionsWrapper {
     |            ------------------ field in this struct
2300 |     val: Vec<CommandOption>,
     |     ^^^

warning: associated function `get_global` is never used
    --> src/main.rs:2317:8
     |
2312 | impl LongOptionsWrapper {
     | ----------------------- associated function in this implementation
...
2317 |     fn get_global() -> Vec<CommandOption> {
     |        ^^^^^^^^^^

warning: function `version_etc_va` is never used
    --> src/main.rs:1082:12
     |
1082 |         fn version_etc_va(
     |            ^^^^^^^^^^^^^^

warning: this could be a `const fn`
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:19:5
   |
19 | /     fn extract_bit(byte: u8, index: usize) -> bool {
20 | |         let bit_index = if cfg!(target_endian = "big") {
21 | |             7 - (index % 8)
22 | |         } else {
...  |
26 | |         byte & mask == mask
27 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::missing_const_for_fn)]`
help: make the function `const`
   |
19 |     const fn extract_bit(byte: u8, index: usize) -> bool {
   |     +++++

warning: unsafe function's docs are missing a `# Safety` section
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:36:5
   |
36 |     pub unsafe fn raw_get_bit(this: *const Self, index: usize) -> bool {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc
   = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::missing_safety_doc)]`

warning: use of `offset` with a `usize` casted to an `isize`
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:39:21
   |
39 |         let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(core::ptr::addr_of!((*this).storage) as *const u8).add(byte_index)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast
   = note: `-W clippy::ptr-offset-with-cast` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::ptr_offset_with_cast)]`

warning: `as` casting between raw pointers without changing their constness
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:39:21
   |
39 |         let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `_.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
   = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::ptr_as_ptr)]`

warning: casting `usize` to `isize` may wrap around the value
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:39:80
   |
39 |         let byte = *(core::ptr::addr_of!((*this).storage) as *const u8).offset(byte_index as isize);
   |                                                                                ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap
   = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_wrap)]`

warning: this could be a `const fn`
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:43:5
   |
43 | /     fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
44 | |         let bit_index = if cfg!(target_endian = "big") {
45 | |             7 - (index % 8)
46 | |         } else {
...  |
54 | |         }
55 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
   |
43 |     const fn change_bit(byte: u8, index: usize, val: bool) -> u8 {
   |     +++++

warning: unsafe function's docs are missing a `# Safety` section
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:64:5
   |
64 |     pub unsafe fn raw_set_bit(this: *mut Self, index: usize, val: bool) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: use of `offset` with a `usize` casted to an `isize`
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:68:13
   |
68 |             (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `(core::ptr::addr_of_mut!((*this).storage) as *mut u8).add(byte_index)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_offset_with_cast

warning: `as` casting between raw pointers without changing their constness
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:68:13
   |
68 |             (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `_.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `usize` to `isize` may wrap around the value
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:68:74
   |
68 |             (core::ptr::addr_of_mut!((*this).storage) as *mut u8).offset(byte_index as isize);
   |                                                                          ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs are missing a `# Safety` section
  --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:90:5
   |
90 |     pub unsafe fn raw_get(this: *const Self, bit_offset: usize, bit_width: u8) -> u64 {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs are missing a `# Safety` section
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:124:5
    |
124 |     pub unsafe fn raw_set(this: *mut Self, bit_offset: usize, bit_width: u8, val: u64) {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this method could have a `#[must_use]` attribute
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:145:5
    |
145 |     pub const fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub const fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
    = note: `-W clippy::must-use-candidate` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::must_use_candidate)]`

warning: unnecessary structure name repetition
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:146:9
    |
146 |         __IncompleteArrayField(::std::marker::PhantomData, [])
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::use_self)]`

warning: this could be a `const fn`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:149:5
    |
149 | /     pub fn as_ptr(&self) -> *const T {
150 | |         self as *const _ as *const T
151 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
149 |     pub const fn as_ptr(&self) -> *const T {
    |         +++++

warning: `as` casting between raw pointers without changing their constness
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:150:9
    |
150 |         self as *const _ as *const T
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(self as *const _).cast::<T>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: reference as raw pointer
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:150:9
    |
150 |         self as *const _ as *const T
    |         ^^^^^^^^^^^^^^^^ help: try: `std::ptr::from_ref(self)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr
    = note: `-W clippy::ref-as-ptr` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::ref_as_ptr)]`

warning: `as` casting between raw pointers without changing their constness
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:154:9
    |
154 |         self as *mut _ as *mut T
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(self as *mut _).cast::<T>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: reference as raw pointer
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:154:9
    |
154 |         self as *mut _ as *mut T
    |         ^^^^^^^^^^^^^^ help: try: `std::ptr::from_mut(self)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ref_as_ptr

warning: unsafe function's docs are missing a `# Safety` section
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:157:5
    |
157 |     pub unsafe fn as_slice(&self, len: usize) -> &[T] {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs are missing a `# Safety` section
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:161:5
    |
161 |     pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:235:5
    |
235 |     pub __val: [::std::os::raw::c_int; 2usize],
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields
    = note: `-W clippy::pub-underscore-fields` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::pub_underscore_fields)]`

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:273:5
    |
273 |     pub __count: ::std::os::raw::c_int,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:274:5
    |
274 |     pub __value: __mbstate_t__bindgen_ty_1,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:305:5
    |
305 |     pub __pos: __off_t,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:306:5
    |
306 |     pub __state: __mbstate_t,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:319:5
    |
319 |     pub __pos: __off64_t,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:320:5
    |
320 |     pub __state: __mbstate_t,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:352:5
    |
352 |     pub _flags: ::std::os::raw::c_int,
    |     ^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:353:5
    |
353 |     pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:354:5
    |
354 |     pub _IO_read_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:355:5
    |
355 |     pub _IO_read_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:356:5
    |
356 |     pub _IO_write_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:357:5
    |
357 |     pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:358:5
    |
358 |     pub _IO_write_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:359:5
    |
359 |     pub _IO_buf_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:360:5
    |
360 |     pub _IO_buf_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:361:5
    |
361 |     pub _IO_save_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:362:5
    |
362 |     pub _IO_backup_base: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:363:5
    |
363 |     pub _IO_save_end: *mut ::std::os::raw::c_char,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:364:5
    |
364 |     pub _markers: *mut _IO_marker,
    |     ^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:365:5
    |
365 |     pub _chain: *mut _IO_FILE,
    |     ^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:366:5
    |
366 |     pub _fileno: ::std::os::raw::c_int,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:367:5
    |
367 |     pub _flags2: ::std::os::raw::c_int,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:368:5
    |
368 |     pub _old_offset: __off_t,
    |     ^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:369:5
    |
369 |     pub _cur_column: ::std::os::raw::c_ushort,
    |     ^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:370:5
    |
370 |     pub _vtable_offset: ::std::os::raw::c_schar,
    |     ^^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:371:5
    |
371 |     pub _shortbuf: [::std::os::raw::c_char; 1usize],
    |     ^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:372:5
    |
372 |     pub _lock: *mut _IO_lock_t,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:373:5
    |
373 |     pub _offset: __off64_t,
    |     ^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:374:5
    |
374 |     pub _codecvt: *mut _IO_codecvt,
    |     ^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:375:5
    |
375 |     pub _wide_data: *mut _IO_wide_data,
    |     ^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:376:5
    |
376 |     pub _freeres_list: *mut _IO_FILE,
    |     ^^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:377:5
    |
377 |     pub _freeres_buf: *mut ::std::os::raw::c_void,
    |     ^^^^^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:378:5
    |
378 |     pub __pad5: usize,
    |     ^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:379:5
    |
379 |     pub _mode: ::std::os::raw::c_int,
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:380:5
    |
380 |     pub _unused2: [::std::os::raw::c_char; 20usize],
    |     ^^^^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1161:5
     |
1161 |     pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1162:5
     |
1162 |     pub __bindgen_padding_0: u64,
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1163:5
     |
1163 |     pub __clang_max_align_nonce2: u128,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1211:5
     |
1211 |     pub __val: [::std::os::raw::c_ulong; 16usize],
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1294:5
     |
1294 |     pub __prev: *mut __pthread_internal_list,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1295:5
     |
1295 |     pub __next: *mut __pthread_internal_list,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1311:5
     |
1311 |     pub __next: *mut __pthread_internal_slist,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1326:5
     |
1326 |     pub __lock: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1327:5
     |
1327 |     pub __count: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1328:5
     |
1328 |     pub __owner: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1329:5
     |
1329 |     pub __nusers: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1330:5
     |
1330 |     pub __kind: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1331:5
     |
1331 |     pub __spins: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1332:5
     |
1332 |     pub __list: __pthread_list_t,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1356:5
     |
1356 |     pub __readers: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1357:5
     |
1357 |     pub __writers: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1358:5
     |
1358 |     pub __wrphase_futex: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1359:5
     |
1359 |     pub __writers_futex: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1360:5
     |
1360 |     pub __pad3: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1361:5
     |
1361 |     pub __pad4: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1362:5
     |
1362 |     pub __cur_writer: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1363:5
     |
1363 |     pub __shared: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1364:5
     |
1364 |     pub __pad1: ::std::os::raw::c_ulong,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1365:5
     |
1365 |     pub __pad2: ::std::os::raw::c_ulong,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1366:5
     |
1366 |     pub __flags: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1399:5
     |
1399 |     pub __bindgen_anon_1: __pthread_cond_s__bindgen_ty_1,
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1400:5
     |
1400 |     pub __bindgen_anon_2: __pthread_cond_s__bindgen_ty_2,
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1401:5
     |
1401 |     pub __g_refs: [::std::os::raw::c_uint; 2usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1402:5
     |
1402 |     pub __g_size: [::std::os::raw::c_uint; 2usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1403:5
     |
1403 |     pub __g1_orig_size: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1404:5
     |
1404 |     pub __wrefs: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1405:5
     |
1405 |     pub __g_signals: [::std::os::raw::c_uint; 2usize],
     |     ^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1416:5
     |
1416 |     pub __low: ::std::os::raw::c_uint,
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1417:5
     |
1417 |     pub __high: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1450:5
     |
1450 |     pub __low: ::std::os::raw::c_uint,
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1451:5
     |
1451 |     pub __high: ::std::os::raw::c_uint,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1785:5
     |
1785 |     pub _bitfield_align_1: [u8; 0],
     |     ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1786:5
     |
1786 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 44usize]>,
     |     ^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1866:5
     |
1866 |     pub __locales: [*mut __locale_data; 13usize],
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1867:5
     |
1867 |     pub __ctype_b: *const ::std::os::raw::c_ushort,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1868:5
     |
1868 |     pub __ctype_tolower: *const ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1869:5
     |
1869 |     pub __ctype_toupper: *const ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:1870:5
     |
1870 |     pub __names: [*const ::std::os::raw::c_char; 13usize],
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2106:5
     |
2106 |     pub _bitfield_align_1: [u8; 0],
     |     ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2107:5
     |
2107 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2108:5
     |
2108 |     pub __bindgen_padding_0: [u8; 3usize],
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: this method could have a `#[must_use]` attribute
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2119:5
     |
2119 |     pub fn __floating_time_t_unsupported(&self) -> ::std::os::raw::c_uint {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn __floating_time_t_unsupported(&self) -> ::std::os::raw::c_uint`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: transmute from a type (`u32`) to itself
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2120:18
     |
2120 |         unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute
     = note: `-W clippy::useless-transmute` implied by `-W clippy::all`
     = help: to override `-W clippy::all` add `#[allow(clippy::useless_transmute)]`

warning: casting `u64` to `u32` may truncate the value
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2120:40
     |
2120 |         unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
     = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_possible_truncation)]`
help: ... or use `try_from` and handle the error accordingly
     |
2120 |         unsafe { ::std::mem::transmute(u32::try_from(self._bitfield_1.get(0usize, 1u8))) }
     |                                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2120:40
     |
2120 |         unsafe { ::std::mem::transmute(self._bitfield_1.get(0usize, 1u8) as u32) }
     |                                        ^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2107:5
     |
2107 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding
     = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::used_underscore_binding)]`

warning: consider adding a `;` to the last statement for consistent formatting
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2126:13
     |
2126 |             self._bitfield_1.set(0usize, 1u8, val as u64)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add a `;` here: `self._bitfield_1.set(0usize, 1u8, val as u64);`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
     = note: `-W clippy::semicolon-if-nothing-returned` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::semicolon_if_nothing_returned)]`

warning: transmute from a type (`u32`) to itself
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2125:28
     |
2125 |             let val: u32 = ::std::mem::transmute(val);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2126:13
     |
2126 |             self._bitfield_1.set(0usize, 1u8, val as u64)
     |             ^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2107:5
     |
2107 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2126:47
     |
2126 |             self._bitfield_1.set(0usize, 1u8, val as u64)
     |                                               ^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
     = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_lossless)]`
help: use `u64::from` instead
     |
2126 |             self._bitfield_1.set(0usize, 1u8, u64::from(val))
     |                                               ~~~~~~~~~~~~~~

warning: unsafe function's docs are missing a `# Safety` section
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2130:5
     |
2130 |     pub unsafe fn __floating_time_t_unsupported_raw(this: *const Self) -> ::std::os::raw::c_uint {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this method could have a `#[must_use]` attribute
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2130:5
     |
2130 |     pub unsafe fn __floating_time_t_unsupported_raw(this: *const Self) -> ::std::os::raw::c_uint {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub unsafe fn __floating_time_t_unsupported_raw(this: *const Self) -> ::std::os::raw::c_uint`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: transmute from a type (`u32`) to itself
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2132:13
     |
2132 | /             ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
2133 | |                 ::std::ptr::addr_of!((*this)._bitfield_1),
2134 | |                 0usize,
2135 | |                 1u8,
2136 | |             ) as u32)
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: casting `u64` to `u32` may truncate the value
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2132:35
     |
2132 |               ::std::mem::transmute(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
     |  ___________________________________^
2133 | |                 ::std::ptr::addr_of!((*this)._bitfield_1),
2134 | |                 0usize,
2135 | |                 1u8,
2136 | |             ) as u32)
     | |____________________^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
2132 ~             ::std::mem::transmute(u32::try_from(<__BindgenBitfieldUnit<[u8; 1usize]>>::raw_get(
2133 +                 ::std::ptr::addr_of!((*this)._bitfield_1),
2134 +                 0usize,
2135 +                 1u8,
2136 ~             )))
     |

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2133:38
     |
2133 |                 ::std::ptr::addr_of!((*this)._bitfield_1),
     |                                      ^^^^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2107:5
     |
2107 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unsafe function's docs are missing a `# Safety` section
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2140:5
     |
2140 | /     pub unsafe fn set___floating_time_t_unsupported_raw(
2141 | |         this: *mut Self,
2142 | |         val: ::std::os::raw::c_uint,
2143 | |     ) {
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: consider adding a `;` to the last statement for consistent formatting
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2146:13
     |
2146 | /             <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
2147 | |                 ::std::ptr::addr_of_mut!((*this)._bitfield_1),
2148 | |                 0usize,
2149 | |                 1u8,
2150 | |                 val as u64,
2151 | |             )
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#semicolon_if_nothing_returned
help: add a `;` here
     |
2146 ~             <__BindgenBitfieldUnit<[u8; 1usize]>>::raw_set(
2147 +                 ::std::ptr::addr_of_mut!((*this)._bitfield_1),
2148 +                 0usize,
2149 +                 1u8,
2150 +                 val as u64,
2151 +             );
     |

warning: transmute from a type (`u32`) to itself
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2145:28
     |
2145 |             let val: u32 = ::std::mem::transmute(val);
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: used binding `_bitfield_1` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2147:42
     |
2147 |                 ::std::ptr::addr_of_mut!((*this)._bitfield_1),
     |                                          ^^^^^^^^^^^^^^^^^^^
     |
note: `_bitfield_1` is defined here
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2107:5
     |
2107 |     pub _bitfield_1: __BindgenBitfieldUnit<[u8; 1usize]>,
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2150:17
     |
2150 |                 val as u64,
     |                 ^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
     |
2150 |                 u64::from(val),
     |                 ~~~~~~~~~~~~~~

warning: this method could have a `#[must_use]` attribute
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2155:5
     |
2155 | /     pub fn new_bitfield_1(
2156 | |         __floating_time_t_unsupported: ::std::os::raw::c_uint,
2157 | |     ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate
help: add the attribute
     |
2155 ~     #[must_use] pub fn new_bitfield_1(
2156 +         __floating_time_t_unsupported: ::std::os::raw::c_uint,
2157 ~     ) -> __BindgenBitfieldUnit<[u8; 1usize]> {
     |

warning: calling `__BindgenBitfieldUnit::default()` is more clear than this expression
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2158:80
     |
2158 |         let mut __bindgen_bitfield_unit: __BindgenBitfieldUnit<[u8; 1usize]> = Default::default();
     |                                                                                ^^^^^^^^^^^^^^^^^^ help: try: `__BindgenBitfieldUnit::default()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#default_trait_access
     = note: `-W clippy::default-trait-access` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::default_trait_access)]`

warning: transmute from a type (`u32`) to itself
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2161:26
     |
2161 |                 unsafe { ::std::mem::transmute(__floating_time_t_unsupported) };
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2162:13
     |
2162 |             __floating_time_t_unsupported as u64
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: an `as` cast can become silently lossy if the types change in the future
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
     |
2162 |             u64::from(__floating_time_t_unsupported)
     |

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2215:5
     |
2215 |     pub __pad1: __dev_t,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2218:5
     |
2218 |     pub __pad2: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2223:5
     |
2223 |     pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2257:5
     |
2257 |     pub __pad1: __dev_t,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2260:5
     |
2260 |     pub __pad2: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2265:5
     |
2265 |     pub __glibc_reserved: [::std::os::raw::c_int; 2usize],
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2589:5
     |
2589 |     pub __reserved: __s32,
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2612:5
     |
2612 |     pub __spare0: [__u16; 1usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2625:5
     |
2625 |     pub __spare2: [__u64; 14usize],
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2690:5
     |
2690 |     pub __pad0: ::std::os::raw::c_int,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2691:5
     |
2691 |     pub _sifields: siginfo_t__bindgen_ty_1,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2793:5
     |
2793 |     pub _bounds: siginfo_t__bindgen_ty_1__bindgen_ty_5__bindgen_ty_1,
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2804:5
     |
2804 |     pub _lower: *mut ::std::os::raw::c_void,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2805:5
     |
2805 |     pub _upper: *mut ::std::os::raw::c_void,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2866:5
     |
2866 |     pub _call_addr: *mut ::std::os::raw::c_void,
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2867:5
     |
2867 |     pub _syscall: ::std::os::raw::c_int,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2868:5
     |
2868 |     pub _arch: ::std::os::raw::c_uint,
     |     ^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:2990:5
     |
2990 |     pub _sigev_un: sigevent__bindgen_ty_1,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3002:5
     |
3002 |     pub _function: ::std::option::Option<unsafe extern "C" fn(arg1: __sigval_t)>,
     |     ^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3003:5
     |
3003 |     pub _attribute: *mut pthread_attr_t,
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3154:5
     |
3154 |     pub __sigaction_handler: sigaction__bindgen_ty_1,
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3261:5
     |
3261 |     pub __bindgen_padding_0: [u8; 8usize],
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3262:5
     |
3262 |     pub __reserved: [__u8; 4096usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3331:5
     |
3331 |     pub __reserved: [__u32; 3usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3349:5
     |
3349 |     pub __reserved: [__u16; 3usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3648:5
     |
3648 |     pub __bindgen_padding_0: [u8; 8usize],
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3649:5
     |
3649 |     pub __reserved: [::std::os::raw::c_uchar; 4096usize],
     |     ^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:3672:5
     |
3672 |     pub __bindgen_padding_0: u64,
     |     ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5785:5
     |
5785 |     pub __x: [::std::os::raw::c_ushort; 3usize],
     |     ^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5786:5
     |
5786 |     pub __old_x: [::std::os::raw::c_ushort; 3usize],
     |     ^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5787:5
     |
5787 |     pub __c: ::std::os::raw::c_ushort,
     |     ^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5788:5
     |
5788 |     pub __init: ::std::os::raw::c_ushort,
     |     ^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5789:5
     |
5789 |     pub __a: ::std::os::raw::c_ulonglong,
     |     ^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: field marked as public but also inferred as unused because it's prefixed with `_`
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:7818:5
     |
7818 |     pub _address: u8,
     |     ^^^^^^^^^^^^
     |
     = help: consider removing the underscore, or making the field private
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: casting raw pointers to the same type and constness is unnecessary (`*mut *mut i8` -> `*mut *mut i8`)
  --> src/main_func.rs:15:13
   |
15 |             args.as_mut_ptr() as *mut *mut libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `args.as_mut_ptr()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast
   = note: `-W clippy::unnecessary-cast` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::unnecessary_cast)]`

warning: `as` casting between raw pointers without changing their constness
  --> src/main_func.rs:15:13
   |
15 |             args.as_mut_ptr() as *mut *mut libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `args.as_mut_ptr().cast::<*mut libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: you should consider adding a `Default` implementation for `ProgramNameWrapper`
  --> src/main.rs:49:5
   |
49 | /     pub fn new() -> Self {
50 | |         Self {
51 | |             val: Self::read_global(),
52 | |         }
53 | |     }
   | |_____^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
   = note: `-W clippy::new-without-default` implied by `-W clippy::all`
   = help: to override `-W clippy::all` add `#[allow(clippy::new_without_default)]`
help: try adding this
   |
48 + impl Default for ProgramNameWrapper {
49 +     fn default() -> Self {
50 +         Self::new()
51 +     }
52 + }
   |

warning: this method could have a `#[must_use]` attribute
  --> src/main.rs:49:5
   |
49 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: docs for function which may panic missing `# Panics` section
  --> src/main.rs:56:5
   |
56 |     pub fn set(&mut self, val: Option<String>) {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
note: first possible panic found here
  --> src/main.rs:63:29
   |
63 |                 let c_str = std::ffi::CString::new(s.clone()).unwrap();
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc
   = note: `-W clippy::missing-panics-doc` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_panics_doc)]`

warning: this argument is passed by value, but not consumed in the function body
  --> src/main.rs:56:32
   |
56 |     pub fn set(&mut self, val: Option<String>) {
   |                                ^^^^^^^^^^^^^^ help: consider taking a reference instead: `&Option<String>`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_pass_by_value
   = note: `-W clippy::needless-pass-by-value` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::needless_pass_by_value)]`

warning: assigning the result of `Clone::clone()` may be inefficient
  --> src/main.rs:57:9
   |
57 |         self.val = val.clone();
   |         ^^^^^^^^^^^^^^^^^^^^^^ help: use `clone_from()`: `self.val.clone_from(&val)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assigning_clones
   = note: `-W clippy::assigning-clones` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::assigning_clones)]`

warning: `as` casting between raw pointers while changing only its constness
  --> src/main.rs:64:32
   |
64 |                 program_name = c_str.into_raw() as *const ::std::os::raw::c_char;
   |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `c_str.into_raw().cast_const()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness
   = note: `-W clippy::ptr-cast-constness` implied by `-W clippy::pedantic`
   = help: to override `-W clippy::pedantic` add `#[allow(clippy::ptr_cast_constness)]`

warning: use Option::map_or instead of an if let/else
  --> src/main.rs:94:16
   |
94 |       let base = match argv0.rfind('/') {
   |  ________________^
95 | |         Some(pos) => &argv0[pos + 1..],
96 | |         None => argv0,
97 | |     };
   | |_____^ help: try: `argv0.rfind('/').map_or(argv0, |pos| &argv0[pos + 1..])`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
   = note: `-W clippy::option-if-let-else` implied by `-W clippy::nursery`
   = help: to override `-W clippy::nursery` add `#[allow(clippy::option_if_let_else)]`

warning: stripping a prefix manually
   --> src/main.rs:109:34
    |
109 |                 let final_name = &new_argv0[3..];
    |                                  ^^^^^^^^^^^^^^^
    |
note: the prefix was tested here
   --> src/main.rs:107:13
    |
107 |             if new_argv0.starts_with("lt-") {
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_strip
    = note: `-W clippy::manual-strip` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::manual_strip)]`
help: try using the `strip_prefix` method
    |
107 ~             if let Some(<stripped>) = new_argv0.strip_prefix("lt-") {
108 |                 // Remove the "lt-" prefix
109 ~                 let final_name = <stripped>;
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:138:1
    |
138 | pub unsafe extern "C" fn set_program_name(argv0: *const c_char) {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
   --> src/main.rs:148:9
    |
148 | /         match c_str.to_str() {
149 | |             Ok(s) => set_program_name_rust(s, &mut program_name_wrapper),
150 | |             Err(_) => {
151 | |                 // If string contains invalid UTF-8, write error and abort
...   |
154 | |             }
155 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
    = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::single_match_else)]`
help: try
    |
148 ~         if let Ok(s) = c_str.to_str() { set_program_name_rust(s, &mut program_name_wrapper) } else {
149 +             // If string contains invalid UTF-8, write error and abort
150 +             let _ = io::stderr().write_all(b"Invalid UTF-8 in program name\n");
151 +             process::abort();
152 +         }
    |

warning: casts from `u32` to `u64` can be expressed infallibly using `From`
   --> src/main.rs:189:26
    |
189 |             let abs_sf = sf.unsigned_abs() as u64;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `u64::from` instead
    |
189 |             let abs_sf = u64::from(sf.unsigned_abs());
    |                          ~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/main.rs:200:26
    |
200 |             let sf_u64 = sf as u64;
    |                          ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::cast_sign_loss)]`

warning: item in documentation is missing backticks
   --> src/main.rs:216:30
    |
216 | /// C-compatible wrapper for bkm_scale_rust
    |                              ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
    = note: `-W clippy::doc-markdown` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::doc_markdown)]`
help: try
    |
216 | /// C-compatible wrapper for `bkm_scale_rust`
    |                              ~~~~~~~~~~~~~~~~

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:221:1
    |
221 | / pub unsafe extern "C" fn bkm_scale(
222 | |     x: *mut libc::uintmax_t,
223 | |     scale_factor: libc::c_int,
224 | | ) -> libc::c_int {
    | |________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting to the same type is unnecessary (`u64` -> `u64`)
   --> src/main.rs:230:22
    |
230 |     let x_val = &mut (*x as u64);
    |                      ^^^^^^^^^^^ help: try: `{ *x }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/main.rs:241:21
    |
241 |             *x = if *x_val < 0 {
    |                     ^^^^^^^^^^
    |
    = help: because `0` is the minimum value for this type, this comparison is always false
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons
    = note: `-W clippy::absurd-extreme-comparisons` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::absurd_extreme_comparisons)]`

warning: usage of a legacy numeric constant
   --> src/main.rs:243:17
    |
243 |                 std::u64::MAX / 2 + 1
    |                 ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants
    = note: `-W clippy::legacy-numeric-constants` implied by `-W clippy::all`
    = help: to override `-W clippy::all` add `#[allow(clippy::legacy_numeric_constants)]`
help: use the associated constant instead
    |
243 |                 u64::MAX / 2 + 1
    |                 ~~~~~~~~

warning: usage of a legacy numeric constant
   --> src/main.rs:245:17
    |
245 |                 std::u64::MAX
    |                 ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#legacy_numeric_constants
help: use the associated constant instead
    |
245 |                 u64::MAX
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:279:1
    |
279 | / pub unsafe extern "C" fn bkm_scale_by_power(
280 | |     x: *mut libc::uintmax_t,
281 | |     base: c_int,
282 | |     power: c_int,
283 | | ) -> StrtolError {
    | |________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting to the same type is unnecessary (`u64` -> `u64`)
   --> src/main.rs:285:21
    |
285 |     let mut value = *x as u64;
    |                     ^^^^^^^^^ help: try: `{ *x }`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: use Option::map_or_else instead of an if let/else
   --> src/main.rs:316:19
    |
316 |       let codeset = match env::var("LC_ALL")
    |  ___________________^
317 | |         .or_else(|_| env::var("LC_CTYPE"))
318 | |         .or_else(|_| env::var("LANG"))
319 | |     {
...   |
324 | |         Err(_) => String::new(),
325 | |     };
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
    |
316 ~     let codeset = env::var("LC_ALL")
317 +         .or_else(|_| env::var("LC_CTYPE"))
318 ~         .or_else(|_| env::var("LANG")).map_or_else(String::new, |locale| locale.split('.').nth(1).unwrap_or("").to_string());
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:335:1
    |
335 | pub unsafe extern "C" fn locale_charset() -> *const c_char {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
   --> src/main.rs:335:1
    |
335 | pub unsafe extern "C" fn locale_charset() -> *const c_char {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
note: first possible panic found here
   --> src/main.rs:343:49
    |
343 |     let c_str = CString::new(charset).unwrap_or(CString::new("ASCII").unwrap());
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: use of `unwrap_or` followed by a function call
   --> src/main.rs:343:39
    |
343 |     let c_str = CString::new(charset).unwrap_or(CString::new("ASCII").unwrap());
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `unwrap_or_else(|_| CString::new("ASCII").unwrap())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#or_fun_call
    = note: `-W clippy::or-fun-call` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::or_fun_call)]`

warning: `as` casting between raw pointers while changing only its constness
   --> src/main.rs:344:5
    |
344 |     c_str.into_raw() as *const c_char
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `c_str.into_raw().cast_const()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness

warning: this could be a `const fn`
   --> src/main.rs:347:1
    |
347 | / fn c_tolower_rust(c: i32) -> i32 {
348 | |     // Check if the character is an uppercase ASCII letter
349 | |     if c >= 'A' as i32 && c <= 'Z' as i32 {
350 | |         // Convert to lowercase by adding the difference between 'a' and 'A'
...   |
355 | |     }
356 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
    |
347 | const fn c_tolower_rust(c: i32) -> i32 {
    | +++++

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
   --> src/main.rs:359:1
    |
359 | fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
    = note: `-W clippy::no-mangle-with-rust-abi` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::no_mangle_with_rust_abi)]`
help: set an ABI
    |
359 | extern "C" fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | ++++++++++
help: or explicitly set the default
    |
359 | extern "Rust" fn c_strcasecmp_rust(s1: &str, s2: &str) -> i32 {
    | +++++++++++++

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:374:14
    |
374 |           c1 = match p1.next() {
    |  ______________^
375 | |             Some(c) => c_tolower_rust(c as i32) as u8,
376 | |             None => 0,
377 | |         };
    | |_________^ help: try: `p1.next().map_or(0, |c| c_tolower_rust(c as i32) as u8)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casting `i32` to `u8` may truncate the value
   --> src/main.rs:375:24
    |
375 |             Some(c) => c_tolower_rust(c as i32) as u8,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
375 |             Some(c) => u8::try_from(c_tolower_rust(c as i32)),
    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/main.rs:375:24
    |
375 |             Some(c) => c_tolower_rust(c as i32) as u8,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:375:39
    |
375 |             Some(c) => c_tolower_rust(c as i32) as u8,
    |                                       ^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
375 |             Some(c) => c_tolower_rust(i32::from(c)) as u8,
    |                                       ~~~~~~~~~~~~

warning: use Option::map_or instead of an if let/else
   --> src/main.rs:379:14
    |
379 |           c2 = match p2.next() {
    |  ______________^
380 | |             Some(c) => c_tolower_rust(c as i32) as u8,
381 | |             None => 0,
382 | |         };
    | |_________^ help: try: `p2.next().map_or(0, |c| c_tolower_rust(c as i32) as u8)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casting `i32` to `u8` may truncate the value
   --> src/main.rs:380:24
    |
380 |             Some(c) => c_tolower_rust(c as i32) as u8,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
380 |             Some(c) => u8::try_from(c_tolower_rust(c as i32)),
    |                        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/main.rs:380:24
    |
380 |             Some(c) => c_tolower_rust(c as i32) as u8,
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:380:39
    |
380 |             Some(c) => c_tolower_rust(c as i32) as u8,
    |                                       ^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
380 |             Some(c) => c_tolower_rust(i32::from(c)) as u8,
    |                                       ~~~~~~~~~~~~

warning: this comparison involving the minimum or maximum element for this type contains a case that is always true or always false
   --> src/main.rs:391:8
    |
391 |     if (127 * 2 + 1) <= 2147483647 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: because `2147483647` is the maximum value for this type, this comparison is always true
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#absurd_extreme_comparisons

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:392:9
    |
392 |         (c1 as i32) - (c2 as i32)
    |         ^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
392 |         i32::from(c1) - (c2 as i32)
    |         ~~~~~~~~~~~~~

warning: casts from `u8` to `i32` can be expressed infallibly using `From`
   --> src/main.rs:392:23
    |
392 |         (c1 as i32) - (c2 as i32)
    |                       ^^^^^^^^^^^
    |
    = help: an `as` cast can become silently lossy if the types change in the future
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: use `i32::from` instead
    |
392 |         (c1 as i32) - i32::from(c2)
    |                       ~~~~~~~~~~~~~

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:404:1
    |
404 | pub unsafe extern "C" fn c_strcasecmp(s1: *const c_char, s2: *const c_char) -> c_int {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be rewritten as `let...else`
   --> src/main.rs:416:5
    |
416 | /     let r_s1 = match CStr::from_ptr(s1).to_str() {
417 | |         Ok(s) => s,
418 | |         Err(_) => return 0, // Handle invalid UTF-8
419 | |     };
    | |______^ help: consider writing: `let Ok(r_s1) = CStr::from_ptr(s1).to_str() else { return 0 };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
    = note: `-W clippy::manual-let-else` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::manual_let_else)]`

warning: this could be rewritten as `let...else`
   --> src/main.rs:421:5
    |
421 | /     let r_s2 = match CStr::from_ptr(s2).to_str() {
422 | |         Ok(s) => s,
423 | |         Err(_) => return 0, // Handle invalid UTF-8
424 | |     };
    | |______^ help: consider writing: `let Ok(r_s2) = CStr::from_ptr(s2).to_str() else { return 0 };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: field marked as public but also inferred as unused because it's prefixed with `_`
   --> src/main.rs:432:5
    |
432 |     pub __val: [i32; 2],
    |     ^^^^^^^^^
    |
    = help: consider removing the underscore, or making the field private
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#pub_underscore_fields

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:450:1
    |
450 | pub unsafe extern "C" fn check_nonnull(p: *mut libc::c_void) -> *mut libc::c_void {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be rewritten as `let...else`
   --> src/main.rs:462:5
    |
462 | /     let layout = match Layout::from_size_align(size, std::mem::align_of::<usize>()) {
463 | |         Ok(layout) => layout,
464 | |         Err(_) => return std::ptr::null_mut(), // Should be caught by check_nonnull
465 | |     };
    | |______^ help: consider writing: `let Ok(layout) = Layout::from_size_align(size, std::mem::align_of::<usize>()) else { return std::ptr::null_mut() };`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:474:1
    |
474 | pub unsafe extern "C" fn xmalloc(s: libc::size_t) -> *mut libc::c_void {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
   --> src/main.rs:475:5
    |
475 |     xmalloc_rust(s as usize) as *mut libc::c_void
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `xmalloc_rust(s as usize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting to the same type is unnecessary (`usize` -> `usize`)
   --> src/main.rs:475:18
    |
475 |     xmalloc_rust(s as usize) as *mut libc::c_void
    |                  ^^^^^^^^^^ help: try: `s`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: use Option::map_or_else instead of an if let/else
   --> src/main.rs:532:22
    |
532 |       let suffixes_c = match suffixes {
    |  ______________________^
533 | |         Some(s) => CString::new(s).unwrap(),
534 | |         None => CString::new("").unwrap(),
535 | |     };
    | |_____^ help: try: `suffixes.map_or_else(|| CString::new("").unwrap(), |s| CString::new(s).unwrap())`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/main.rs:541:9
    |
541 | /         xnumtoumax(
542 | |             n_str_c.as_ptr(),
543 | |             10, // base 10 for decimal
544 | |             min as libc::uintmax_t,
...   |
552 | |             err_exit,
553 | |         ) as usize
    | |__________________^
    |
    = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
    |
541 ~         usize::try_from(xnumtoumax(
542 +             n_str_c.as_ptr(),
543 +             10, // base 10 for decimal
544 +             min as libc::uintmax_t,
545 +             max as libc::uintmax_t,
546 +             if suffixes.is_some() {
547 +                 suffixes_c.as_ptr()
548 +             } else {
549 +                 std::ptr::null()
550 +             },
551 +             err_c.as_ptr(),
552 +             err_exit,
553 +         ))
    |

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
   --> src/main.rs:558:1
    |
558 | fn string_to_integer_rust(count_lines: bool, n_string: &str) -> usize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
help: set an ABI
    |
558 | extern "C" fn string_to_integer_rust(count_lines: bool, n_string: &str) -> usize {
    | ++++++++++
help: or explicitly set the default
    |
558 | extern "Rust" fn string_to_integer_rust(count_lines: bool, n_string: &str) -> usize {
    | +++++++++++++

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:575:1
    |
575 | pub unsafe extern "C" fn string_to_integer(count_lines: bool, n_string: *const c_char) -> usize {
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
   --> src/main.rs:576:23
    |
576 |       let n_string_rs = if !n_string.is_null() {
    |  _______________________^
577 | |         CStr::from_ptr(n_string).to_string_lossy().into_owned()
578 | |     } else {
579 | |         return 0; // Handle null pointer case
580 | |     };
    | |_____^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::if_not_else)]`

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:613:1
    |
613 | / pub unsafe extern "C" fn proper_name_lite(
614 | |     name_ascii: *const c_char,
615 | |     name_utf8: *const c_char,
616 | | ) -> *const c_char {
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers while changing only its constness
   --> src/main.rs:647:5
    |
647 |     c_result as *const c_char
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast_const`, a safer alternative: `c_result.cast_const()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_cast_constness

warning: you should consider adding a `Default` implementation for `VersionEtcCopyrightWrapper`
   --> src/main.rs:655:5
    |
655 | /     pub fn new() -> Self {
656 | |         let val = Self::get_global_value();
657 | |         Self { val }
658 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
    |
654 + impl Default for VersionEtcCopyrightWrapper {
655 +     fn default() -> Self {
656 +         Self::new()
657 +     }
658 + }
    |

warning: this method could have a `#[must_use]` attribute
   --> src/main.rs:655:5
    |
655 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this method could have a `#[must_use]` attribute
   --> src/main.rs:660:5
    |
660 |     pub fn get(&self) -> String {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get(&self) -> String`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: docs for function which may panic missing `# Panics` section
   --> src/main.rs:690:1
    |
690 | / pub fn version_etc_arn_rust<W: Write>(
691 | |     mut stream: W,
692 | |     command_name: Option<&str>,
693 | |     package: &str,
...   |
696 | |     copyright_wrapper: &VersionEtcCopyrightWrapper,
697 | | ) -> io::Result<()> {
    | |___________________^
    |
note: first possible panic found here
   --> src/main.rs:715:19
    |
715 |           let msg = CString::new(
    |  ___________________^
716 | |             "License GPLv3+: GNU GPL version 3 or later <%s>.\n\
717 | |                                This is free software: you are free to change and redistribute it.\n\
718 | |                                There is NO WARRANTY, to the extent permitted by law.",
719 | |         )
720 | |         .unwrap();
    | |_________________^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: docs for function returning `Result` missing `# Errors` section
   --> src/main.rs:690:1
    |
690 | / pub fn version_etc_arn_rust<W: Write>(
691 | |     mut stream: W,
692 | |     command_name: Option<&str>,
693 | |     package: &str,
...   |
696 | |     copyright_wrapper: &VersionEtcCopyrightWrapper,
697 | | ) -> io::Result<()> {
    | |___________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc
    = note: `-W clippy::missing-errors-doc` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::missing_errors_doc)]`

warning: the function has a cognitive complexity of (27/25)
   --> src/main.rs:690:8
    |
690 | pub fn version_etc_arn_rust<W: Write>(
    |        ^^^^^^^^^^^^^^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: to override `-W clippy::nursery` add `#[allow(clippy::cognitive_complexity)]`

warning: this function has too many lines (208/100)
   --> src/main.rs:690:1
    |
690 | / pub fn version_etc_arn_rust<W: Write>(
691 | |     mut stream: W,
692 | |     command_name: Option<&str>,
693 | |     package: &str,
...   |
937 | |     Ok(())
938 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::too_many_lines)]`

warning: variables can be used directly in the `format!` string
   --> src/main.rs:700:9
    |
700 |         writeln!(stream, "{} ({}) {}", cmd_name, package, version)?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
    = note: `-W clippy::uninlined-format-args` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::uninlined_format_args)]`
help: change this to
    |
700 -         writeln!(stream, "{} ({}) {}", cmd_name, package, version)?;
700 +         writeln!(stream, "{cmd_name} ({package}) {version}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:702:9
    |
702 |         writeln!(stream, "{} {}", package, version)?;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
702 -         writeln!(stream, "{} {}", package, version)?;
702 +         writeln!(stream, "{package} {version}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:760:25
    |
760 |                         write!(stream, "{}", part3)?;
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
760 -                         write!(stream, "{}", part3)?;
760 +                         write!(stream, "{part3}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:780:29
    |
780 | ...                   write!(stream, "{}", part4)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
780 -                             write!(stream, "{}", part4)?;
780 +                             write!(stream, "{part4}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:803:33
    |
803 | ...                   write!(stream, "{}", part5)?;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
803 -                                 write!(stream, "{}", part5)?;
803 +                                 write!(stream, "{part5}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:828:13
    |
828 |             write!(stream, "{}", output)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
828 -             write!(stream, "{}", output)?;
828 +             write!(stream, "{output}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:848:13
    |
848 |             write!(stream, "{}", output)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
848 -             write!(stream, "{}", output)?;
848 +             write!(stream, "{output}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:868:13
    |
868 |             write!(stream, "{}", output)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
868 -             write!(stream, "{}", output)?;
868 +             write!(stream, "{output}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:889:13
    |
889 |             write!(stream, "{}", output)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
889 -             write!(stream, "{}", output)?;
889 +             write!(stream, "{output}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:910:13
    |
910 |             write!(stream, "{}", output)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
910 -             write!(stream, "{}", output)?;
910 +             write!(stream, "{output}")?;
    |

warning: variables can be used directly in the `format!` string
   --> src/main.rs:933:13
    |
933 |             write!(stream, "{}", output)?;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
    |
933 -             write!(stream, "{}", output)?;
933 +             write!(stream, "{output}")?;
    |

warning: unsafe function's docs are missing a `# Safety` section
   --> src/main.rs:940:1
    |
940 | / pub unsafe extern "C" fn version_etc_arn(
941 | |     stream: *mut libc::FILE,
942 | |     command_name: *const c_char,
943 | |     package: *const c_char,
...   |
946 | |     n_authors: libc::size_t,
947 | | ) {
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting to the same type is unnecessary (`usize` -> `usize`)
   --> src/main.rs:963:45
    |
963 |     let mut author_vec = Vec::with_capacity(n_authors as usize);
    |                                             ^^^^^^^^^^^^^^^^^^ help: try: `n_authors`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: redundant closure
   --> src/main.rs:973:56
    |
973 |     let author_refs: Vec<&str> = author_vec.iter().map(|s| s.as_str()).collect();
    |                                                        ^^^^^^^^^^^^^^ help: replace the closure with the method itself: `std::string::String::as_str`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_closure_for_method_calls
    = note: `-W clippy::redundant-closure-for-method-calls` implied by `-W clippy::pedantic`
    = help: to override `-W clippy::pedantic` add `#[allow(clippy::redundant_closure_for_method_calls)]`

warning: `as` casting between raw pointers without changing their constness
   --> src/main.rs:997:35
    |
997 |             unsafe { libc::fwrite(buf.as_ptr() as *const libc::c_void, 1, buf.len(), self.file) };
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.as_ptr().cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: docs for function returning `Result` missing `# Errors` section
    --> src/main.rs:1019:1
     |
1019 | / pub fn version_etc_rust<W: Write>(
1020 | |     mut writer: W,
1021 | |     command_name: Option<&str>,
1022 | |     package: Option<&str>,
1023 | |     version: Option<&str>,
1024 | |     authors: &[&str],
1025 | | ) -> io::Result<()> {
     | |___________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_errors_doc

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1028:9
     |
1028 |         write!(writer, "{} ", cmd)?;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1028 -         write!(writer, "{} ", cmd)?;
1028 +         write!(writer, "{cmd} ")?;
     |

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1032:9
     |
1032 |         write!(writer, "({}) ", pkg)?;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1032 -         write!(writer, "({}) ", pkg)?;
1032 +         write!(writer, "({pkg}) ")?;
     |

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1036:9
     |
1036 |         writeln!(writer, "{}", ver)?;
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1036 -         writeln!(writer, "{}", ver)?;
1036 +         writeln!(writer, "{ver}")?;
     |

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1063:17
     |
1063 |                 write!(writer, ", {}", author)?;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1063 -                 write!(writer, ", {}", author)?;
1063 +                 write!(writer, ", {author}")?;
     |

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1072:1
     |
1072 | / pub unsafe extern "C" fn version_etc(
1073 | |     stream: *mut libc::FILE,
1074 | |     command_name: *const c_char,
1075 | |     package: *const c_char,
1076 | |     version: *const c_char,
1077 | |     author1: *const c_char,
1078 | | ) {
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/main.rs:1123:5
     |
1123 |     struct LibcFileWriter(*mut libc::FILE);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements
     = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::items_after_statements)]`

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/main.rs:1125:5
     |
1125 | /     impl Write for LibcFileWriter {
1126 | |         fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
1127 | |             let written = unsafe { libc::fwrite(buf.as_ptr() as *const _, 1, buf.len(), self.0) };
1128 | |             if written == 0 && !buf.is_empty() {
...    |
1141 | |         }
1142 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unnecessary boolean `not` operation
    --> src/main.rs:1095:20
     |
1095 |       let cmd_name = if !command_name.is_null() {
     |  ____________________^
1096 | |         CStr::from_ptr(command_name).to_str().ok()
1097 | |     } else {
1098 | |         None
1099 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary boolean `not` operation
    --> src/main.rs:1101:15
     |
1101 |       let pkg = if !package.is_null() {
     |  _______________^
1102 | |         CStr::from_ptr(package).to_str().ok()
1103 | |     } else {
1104 | |         None
1105 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary boolean `not` operation
    --> src/main.rs:1107:15
     |
1107 |       let ver = if !version.is_null() {
     |  _______________^
1108 | |         CStr::from_ptr(version).to_str().ok()
1109 | |     } else {
1110 | |         None
1111 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1127:49
     |
1127 |             let written = unsafe { libc::fwrite(buf.as_ptr() as *const _, 1, buf.len(), self.0) };
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.as_ptr().cast()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: item in documentation is missing backticks
    --> src/main.rs:1154:55
     |
1154 |     /// Additional flags. Bitwise combination of enum quoting_flags.
     |                                                       ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
     |
1154 |     /// Additional flags. Bitwise combination of enum `quoting_flags`.
     |                                                       ~~~~~~~~~~~~~~~

warning: item in documentation is missing backticks
    --> src/main.rs:1161:28
     |
1161 |     /// The left quote for custom_quoting_style.
     |                            ^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
     |
1161 |     /// The left quote for `custom_quoting_style`.
     |                            ~~~~~~~~~~~~~~~~~~~~~~

warning: item in documentation is missing backticks
    --> src/main.rs:1164:29
     |
1164 |     /// The right quote for custom_quoting_style.
     |                             ^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
     |
1164 |     /// The right quote for `custom_quoting_style`.
     |                             ~~~~~~~~~~~~~~~~~~~~~~

warning: this could be a `const fn`
    --> src/main.rs:1190:1
     |
1190 | / fn quoting_options_from_style_rust(s: u32) -> crate::quoting_options_rust {
1191 | |     crate::quoting_options_rust {
1192 | |         style: s,
1193 | |         flags: 0,
...    |
1197 | |     }
1198 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
     |
1190 | const fn quoting_options_from_style_rust(s: u32) -> crate::quoting_options_rust {
     | +++++

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1214:5
     |
1214 |     format!("'{}'", arg)
     |     ^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1214 -     format!("'{}'", arg)
1214 +     format!("'{arg}'")
     |

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
    --> src/main.rs:1218:1
     |
1218 | fn quotearg_style_rust(s: u32, arg: &str) -> String {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
help: set an ABI
     |
1218 | extern "C" fn quotearg_style_rust(s: u32, arg: &str) -> String {
     | ++++++++++
help: or explicitly set the default
     |
1218 | extern "Rust" fn quotearg_style_rust(s: u32, arg: &str) -> String {
     | +++++++++++++

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1222:1
     |
1222 | / pub unsafe extern "C" fn quotearg_style(
1223 | |     s: libc::c_int,
1224 | |     arg: *const libc::c_char,
1225 | | ) -> *mut libc::c_char {
     | |______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/main.rs:1232:38
     |
1232 |     let result = quotearg_style_rust(s as u32, arg_str);
     |                                      ^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: item in documentation is missing backticks
    --> src/main.rs:1240:23
     |
1240 | /// Determines if the st_size field of a file's metadata is usable.
     |                       ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#doc_markdown
help: try
     |
1240 | /// Determines if the `st_size` field of a file's metadata is usable.
     |                       ~~~~~~~~~

warning: this could be a `const fn`
    --> src/main.rs:1243:1
     |
1243 | / fn usable_st_size_rust(mode: u32) -> bool {
1244 | |     // Constants for file type masks
1245 | |     const S_IFMT: u32 = 0o170000; // File type mask
1246 | |     const S_IFREG: u32 = 0o100000; // Regular file
...    |
1250 | |     (mode & S_IFMT) == S_IFREG || (mode & S_IFMT) == S_IFLNK
1251 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
     |
1243 | const fn usable_st_size_rust(mode: u32) -> bool {
     | +++++

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1253:1
     |
1253 | pub unsafe extern "C" fn usable_st_size(sb: *const libc::stat) -> bool {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting to the same type is unnecessary (`u32` -> `u32`)
    --> src/main.rs:1259:16
     |
1259 |     let mode = (*sb).st_mode as u32;
     |                ^^^^^^^^^^^^^^^^^^^^ help: try: `(*sb).st_mode`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1284:13
     |
1284 |             format!("{}: cannot seek to offset {}", filename, offset)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1284 -             format!("{}: cannot seek to offset {}", filename, offset)
1284 +             format!("{filename}: cannot seek to offset {offset}")
     |

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1286:13
     |
1286 |             format!("{}: cannot seek to relative offset {}", filename, offset)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1286 -             format!("{}: cannot seek to relative offset {}", filename, offset)
1286 +             format!("{filename}: cannot seek to relative offset {offset}")
     |

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1293:9
     |
1293 |         eprintln!("Error: {} (errno: {})", error_msg, errno);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1293 -         eprintln!("Error: {} (errno: {})", error_msg, errno);
1293 +         eprintln!("Error: {error_msg} (errno: {errno})");
     |

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1299:1
     |
1299 | / pub unsafe extern "C" fn elseek(
1300 | |     fd: libc::c_int,
1301 | |     offset: libc::off_t,
1302 | |     whence: libc::c_int,
1303 | |     filename: *const libc::c_char,
1304 | | ) -> libc::off_t {
     | |________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
    --> src/main.rs:1306:24
     |
1306 |       let filename_str = if !filename.is_null() {
     |  ________________________^
1307 | |         CStr::from_ptr(filename).to_string_lossy().to_string()
1308 | |     } else {
1309 | |         String::from("<unknown>")
1310 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting to the same type is unnecessary (`i32` -> `i32`)
    --> src/main.rs:1333:54
     |
1333 |                 } else if err.raw_os_error() == Some(EINVAL as i32)
     |                                                      ^^^^^^^^^^^^^ help: try: `EINVAL`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
    --> src/main.rs:1356:1
     |
1356 | fn fpurge_rust() -> io::Result<()> {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
help: set an ABI
     |
1356 | extern "C" fn fpurge_rust() -> io::Result<()> {
     | ++++++++++
help: or explicitly set the default
     |
1356 | extern "Rust" fn fpurge_rust() -> io::Result<()> {
     | +++++++++++++

warning: this could be a `const fn`
    --> src/main.rs:1356:1
     |
1356 | / fn fpurge_rust() -> io::Result<()> {
1357 | |     // In Rust's standard library, there's no direct equivalent to __fpurge
1358 | |     // Since we can't access the original __fpurge function, we'll implement
1359 | |     // a simple version that just returns success
1360 | |     Ok(())
1361 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
     |
1356 | const fn fpurge_rust() -> io::Result<()> {
     | +++++

warning: this function's return value is unnecessary
    --> src/main.rs:1356:1
     |
1356 | / fn fpurge_rust() -> io::Result<()> {
1357 | |     // In Rust's standard library, there's no direct equivalent to __fpurge
1358 | |     // Since we can't access the original __fpurge function, we'll implement
1359 | |     // a simple version that just returns success
1360 | |     Ok(())
1361 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_wraps
     = note: `-W clippy::unnecessary-wraps` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::unnecessary_wraps)]`
help: remove the return type...
     |
1356 | fn fpurge_rust() -> () {
     |                     ~~
help: ...and then remove returned values
     |
1360 -     Ok(())
     |

warning: `#[no_mangle]` set on a function with the default (`Rust`) ABI
    --> src/main.rs:1367:1
     |
1367 | fn xwrite_stdout_rust(buffer: &[u8]) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_mangle_with_rust_abi
help: set an ABI
     |
1367 | extern "C" fn xwrite_stdout_rust(buffer: &[u8]) {
     | ++++++++++
help: or explicitly set the default
     |
1367 | extern "Rust" fn xwrite_stdout_rust(buffer: &[u8]) {
     | +++++++++++++

warning: redundant pattern matching, consider using `is_err()`
    --> src/main.rs:1373:12
     |
1373 |     if let Err(_) = io::stdout().write_all(buffer) {
     |     -------^^^^^^--------------------------------- help: try: `if io::stdout().write_all(buffer).is_err()`
     |
     = note: this will change drop order of the result, as well as all temporaries
     = note: add `#[allow(clippy::redundant_pattern_matching)]` if this is important
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_pattern_matching
     = note: `-W clippy::redundant-pattern-matching` implied by `-W clippy::all`
     = help: to override `-W clippy::all` add `#[allow(clippy::redundant_pattern_matching)]`

warning: this could be a `const fn`
    --> src/main.rs:1390:1
     |
1390 | / fn shell_escape_always_quoting_style() -> u32 {
1391 | |     // This would be defined elsewhere in the codebase
1392 | |     // For now, we'll use a placeholder value
1393 | |     2 // Assuming this is the correct value
1394 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
     |
1390 | const fn shell_escape_always_quoting_style() -> u32 {
     | +++++

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1396:1
     |
1396 | pub unsafe extern "C" fn xwrite_stdout(buffer: *const c_char, n_bytes: size_t) {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:1402:50
     |
1402 |     let rust_buffer = std::slice::from_raw_parts(buffer as *const u8, n_bytes);
     |                                                  ^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: you should consider adding a `Default` implementation for `LineEndWrapper`
    --> src/main.rs:1413:5
     |
1413 | /     pub fn new() -> Self {
1414 | |         // Read the current value of the global variable
1415 | |         let c = unsafe { line_end };
...    |
1425 | |         Self { val }
1426 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
     |
1412 + impl Default for LineEndWrapper {
1413 +     fn default() -> Self {
1414 +         Self::new()
1415 +     }
1416 + }
     |

warning: this method could have a `#[must_use]` attribute
    --> src/main.rs:1413:5
     |
1413 |     pub fn new() -> Self {
     |     ^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn new() -> Self`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casting `i8` to `u8` may lose the sign of the value
    --> src/main.rs:1422:24
     |
1422 |             char::from(c as u8)
     |                        ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this method could have a `#[must_use]` attribute
    --> src/main.rs:1428:5
     |
1428 |     pub fn get(&self) -> char {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get(&self) -> char`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: casting `i8` to `u8` may lose the sign of the value
    --> src/main.rs:1437:24
     |
1437 |             char::from(c as u8)
     |                        ^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this function has too many lines (135/100)
    --> src/main.rs:1450:1
     |
1450 | / fn elide_tail_lines_pipe_rust(
1451 | |     filename: &str,
1452 | |     fd: i32,
1453 | |     n_elide: usize,
...    |
1634 | |     ok
1635 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/main.rs:1463:5
     |
1463 | /     struct BufferList {
1464 | |         buffers: Vec<linebuffer_rust>,
1465 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/main.rs:1467:5
     |
1467 | /     impl BufferList {
1468 | |         fn new() -> Self {
1469 | |             BufferList {
1470 | |                 buffers: vec![linebuffer_rust {
...    |
1501 | |         }
1502 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: unnecessary structure name repetition
    --> src/main.rs:1469:13
     |
1469 |             BufferList {
     |             ^^^^^^^^^^ help: use the applicable keyword: `Self`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:1525:28
     |
1525 |             desired_pos += n_read as i64;
     |                            ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:1571:36
     |
1571 |                     desired_pos += first_buffer.nbytes as i64;
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1583:9
     |
1583 |         eprintln!("error reading {}: {}", filename, err);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1583 -         eprintln!("error reading {}: {}", filename, err);
1583 +         eprintln!("error reading {filename}: {err}");
     |

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:1601:28
     |
1601 |             desired_pos += buffer.nbytes as i64;
     |                            ^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:1625:24
     |
1625 |         desired_pos += pos as i64;
     |                        ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1669:1
     |
1669 | pub unsafe extern "C" fn copy_fd(src_fd: libc::c_int, n_bytes: libc::uintmax_t) -> libc::c_int {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/main.rs:1676:32
     |
1676 |     match copy_fd_rust(src_fd, n_bytes as usize) {
     |                                ^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1676 |     match copy_fd_rust(src_fd, usize::try_from(n_bytes)) {
     |                                ~~~~~~~~~~~~~~~~~~~~~~~~

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/main.rs:1711:26
     |
1711 |     let mut bytes_read = ((pos - start_pos) % 8192) as usize;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:1718:12
     |
1718 |     pos -= bytes_read as i64;
     |            ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1728:9
     |
1728 |         eprintln!("error reading {}: {}", pretty_filename, err);
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1728 -         eprintln!("error reading {}: {}", pretty_filename, err);
1728 +         eprintln!("error reading {pretty_filename}: {err}");
     |

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/main.rs:1766:48
     |
1766 |                     let err = copy_fd_rust(fd, (pos - start_pos) as usize);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1766 |                     let err = copy_fd_rust(fd, usize::try_from(pos - start_pos));
     |                                                ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/main.rs:1766:48
     |
1766 |                     let err = copy_fd_rust(fd, (pos - start_pos) as usize);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/main.rs:1767:21
     |
1767 | /                     match err {
1768 | |                         CopyFdStatus::Ok => {}
1769 | |                         _ => {
1770 | |                             // Since diagnose_copy_fd_failure is not accessible,
...    |
1774 | |                         }
1775 | |                     }
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
     |
1767 ~                     if err == CopyFdStatus::Ok {} else {
1768 +                         // Since diagnose_copy_fd_failure is not accessible,
1769 +                         // we'll print a generic error message
1770 +                         eprintln!("error copying file {}", pretty_filename);
1771 +                         return false;
1772 +                     }
     |

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1772:29
     |
1772 | ...                   eprintln!("error copying file {}", pretty_filename);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1772 -                             eprintln!("error copying file {}", pretty_filename);
1772 +                             eprintln!("error copying file {pretty_filename}");
     |

warning: an inclusive range would be more readable
    --> src/main.rs:1780:44
     |
1780 |                 xwrite_stdout_rust(&buffer[..n + 1]);
     |                                            ^^^^^^^ help: use: `..=n`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#range_plus_one
     = note: `-W clippy::range-plus-one` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::range_plus_one)]`

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:1783:46
     |
1783 |                 return elseek_rust(fd, pos + (n as i64) + 1, 0, pretty_filename) >= 0;
     |                                              ^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: variables can be used directly in the `format!` string
    --> src/main.rs:1804:13
     |
1804 |             eprintln!("error reading {}: {}", pretty_filename, err);
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
1804 -             eprintln!("error reading {}: {}", pretty_filename, err);
1804 +             eprintln!("error reading {pretty_filename}: {err}");
     |

warning: you should consider adding a `Default` implementation for `PresumeInputPipeWrapper`
    --> src/main.rs:1821:5
     |
1821 | /     pub fn new() -> Self {
1822 | |         // Initialize the global variable if needed
1823 | |         static INIT: Once = Once::new();
1824 | |         static mut GLOBAL: AtomicBool = AtomicBool::new(false);
...    |
1836 | |         Self { val: current_value }
1837 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#new_without_default
help: try adding this
     |
1820 + impl Default for PresumeInputPipeWrapper {
1821 +     fn default() -> Self {
1822 +         Self::new()
1823 +     }
1824 + }
     |

warning: this method could have a `#[must_use]` attribute
    --> src/main.rs:1839:5
     |
1839 |     pub fn get(&self) -> bool {
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: add the attribute: `#[must_use] pub fn get(&self) -> bool`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#must_use_candidate

warning: this function has too many arguments (8/7)
    --> src/main.rs:1845:1
     |
1845 | / fn elide_tail_lines_file_rust(
1846 | |     filename: &str,
1847 | |     fd: i32,
1848 | |     n_elide: u64,
...    |
1853 | |     line_end_wrapper: &LineEndWrapper,
1854 | | ) -> bool {
     | |_________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_arguments
     = note: `-W clippy::too-many-arguments` implied by `-W clippy::all`
     = help: to override `-W clippy::all` add `#[allow(clippy::too_many_arguments)]`

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/main.rs:1870:13
     |
1870 |             n_elide as usize,
     |             ^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
1870 |             usize::try_from(n_elide),
     |             ~~~~~~~~~~~~~~~~~~~~~~~~

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:1892:1
     |
1892 | / pub unsafe extern "C" fn elide_tail_lines_file(
1893 | |     filename: *const libc::c_char,
1894 | |     fd: libc::c_int,
1895 | |     n_elide: libc::uintmax_t,
1896 | |     st: *const libc::stat,
1897 | |     current_pos: libc::off_t,
1898 | | ) -> libc::c_int {
     | |________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
    --> src/main.rs:1903:24
     |
1903 |       let filename_str = if !filename.is_null() {
     |  ________________________^
1904 | |         CStr::from_ptr(filename).to_string_lossy().to_string()
1905 | |     } else {
1906 | |         String::new()
1907 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary boolean `not` operation
    --> src/main.rs:1910:33
     |
1910 |       let (st_size, st_blksize) = if !st.is_null() {
     |  _________________________________^
1911 | |         let st_ref = &*st;
1912 | |         (st_ref.st_size, st_ref.st_blksize as i64)
1913 | |     } else {
1914 | |         // Default values if stat is null
1915 | |         (0, 512)
1916 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting to the same type is unnecessary (`i64` -> `i64`)
    --> src/main.rs:1912:26
     |
1912 |         (st_ref.st_size, st_ref.st_blksize as i64)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `st_ref.st_blksize`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: this could be rewritten as `let...else`
    --> src/main.rs:1947:5
     |
1947 | /     let total_size = match nmemb.checked_mul(size) {
1948 | |         Some(s) => s,
1949 | |         None => {
1950 | |             // Multiplication would overflow, terminate
...    |
1953 | |         }
1954 | |     };
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_let_else
help: consider writing
     |
1947 ~     let Some(total_size) = nmemb.checked_mul(size) else {
1948 +             // Multiplication would overflow, terminate
1949 +             unsafe { crate::xalloc_die() };
1950 +             unreachable!();
1951 +         };
     |

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
    --> src/main.rs:1947:22
     |
1947 |       let total_size = match nmemb.checked_mul(size) {
     |  ______________________^
1948 | |         Some(s) => s,
1949 | |         None => {
1950 | |             // Multiplication would overflow, terminate
...    |
1953 | |         }
1954 | |     };
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
     |
1947 ~     let total_size = if let Some(s) = nmemb.checked_mul(size) { s } else {
1948 +         // Multiplication would overflow, terminate
1949 +         unsafe { crate::xalloc_die() };
1950 +         unreachable!();
1951 ~     };
     |

warning: use Option::map_or_else instead of an if let/else
    --> src/main.rs:1947:22
     |
1947 |       let total_size = match nmemb.checked_mul(size) {
     |  ______________________^
1948 | |         Some(s) => s,
1949 | |         None => {
1950 | |             // Multiplication would overflow, terminate
...    |
1953 | |         }
1954 | |     };
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
     |
1947 ~     let total_size = nmemb.checked_mul(size).map_or_else(|| {
1948 +             // Multiplication would overflow, terminate
1949 +             unsafe { crate::xalloc_die() };
1950 +             unreachable!();
1951 ~         }, |s| s);
     |

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
    --> src/main.rs:1984:17
     |
1984 | /                 match NonNull::new(new_ptr) {
1985 | |                     Some(ptr) => ptr,
1986 | |                     None => {
1987 | |                         // This should never happen since we checked for null above
...    |
1990 | |                     }
1991 | |                 }
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
     |
1984 ~                 if let Some(ptr) = NonNull::new(new_ptr) { ptr } else {
1985 +                     // This should never happen since we checked for null above
1986 +                     crate::xalloc_die();
1987 +                     unreachable!();
1988 +                 }
     |

warning: use Option::map_or_else instead of an if let/else
    --> src/main.rs:1984:17
     |
1984 | /                 match NonNull::new(new_ptr) {
1985 | |                     Some(ptr) => ptr,
1986 | |                     None => {
1987 | |                         // This should never happen since we checked for null above
...    |
1990 | |                     }
1991 | |                 }
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
     |
1984 ~                 NonNull::new(new_ptr).map_or_else(|| {
1985 +                         // This should never happen since we checked for null above
1986 +                         crate::xalloc_die();
1987 +                         unreachable!();
1988 +                     }, |ptr| ptr)
     |

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
    --> src/main.rs:2006:17
     |
2006 | /                 match NonNull::new(ptr) {
2007 | |                     Some(ptr) => ptr,
2008 | |                     None => {
2009 | |                         // This should never happen since we checked for null above
...    |
2012 | |                     }
2013 | |                 }
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
     |
2006 ~                 if let Some(ptr) = NonNull::new(ptr) { ptr } else {
2007 +                     // This should never happen since we checked for null above
2008 +                     crate::xalloc_die();
2009 +                     unreachable!();
2010 +                 }
     |

warning: use Option::map_or_else instead of an if let/else
    --> src/main.rs:2006:17
     |
2006 | /                 match NonNull::new(ptr) {
2007 | |                     Some(ptr) => ptr,
2008 | |                     None => {
2009 | |                         // This should never happen since we checked for null above
...    |
2012 | |                     }
2013 | |                 }
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
     |
2006 ~                 NonNull::new(ptr).map_or_else(|| {
2007 +                         // This should never happen since we checked for null above
2008 +                         crate::xalloc_die();
2009 +                         unreachable!();
2010 +                     }, |ptr| ptr)
     |

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:2019:1
     |
2019 | / pub unsafe extern "C" fn xreallocarray(
2020 | |     p: *mut ::std::os::raw::c_void,
2021 | |     n: size_t,
2022 | |     s: size_t,
2023 | | ) -> *mut ::std::os::raw::c_void {
     | |________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:2041:1
     |
2041 | pub unsafe extern "C" fn xnmalloc(n: size_t, s: size_t) -> *mut libc::c_void {
     | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:2043:5
     |
2043 |     xnmalloc_rust(n, s).as_ptr() as *mut libc::c_void
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `xnmalloc_rust(n, s).as_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:2075:1
     |
2075 | / pub unsafe extern "C" fn full_read(
2076 | |     fd: libc::c_int,
2077 | |     buf: *mut libc::c_void,
2078 | |     count: libc::size_t,
2079 | | ) -> libc::size_t {
     | |_________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing their constness
    --> src/main.rs:2084:52
     |
2084 |     let buf_slice = std::slice::from_raw_parts_mut(buf as *mut u8, count);
     |                                                    ^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<u8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: variables can be used directly in the `format!` string
    --> src/main.rs:2123:17
     |
2123 |                 eprintln!("error reading {}: {}", filename, err);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#uninlined_format_args
help: change this to
     |
2123 -                 eprintln!("error reading {}: {}", filename, err);
2123 +                 eprintln!("error reading {filename}: {err}");
     |

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:2137:44
     |
2137 |                     let n_bytes_past_eol = bytes_read as i64 - bytes_to_write as i64;
     |                                            ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `usize` to `i64` may wrap around the value on targets with 64-bit wide pointers
    --> src/main.rs:2137:64
     |
2137 |                     let n_bytes_past_eol = bytes_read as i64 - bytes_to_write as i64;
     |                                                                ^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:2178:1
     |
2178 | / pub unsafe extern "C" fn head_lines(
2179 | |     filename: *const c_char,
2180 | |     fd: c_int,
2181 | |     lines_to_write: libc::uintmax_t,
2182 | | ) -> libc::c_int {
     | |________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
    --> src/main.rs:2185:24
     |
2185 |       let filename_str = if !filename.is_null() {
     |  ________________________^
2186 | |         CStr::from_ptr(filename).to_string_lossy().into_owned()
2187 | |     } else {
2188 | |         String::from("<unknown>")
2189 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting to the same type is unnecessary (`u64` -> `u64`)
    --> src/main.rs:2191:53
     |
2191 |     let result = head_lines_rust(&filename_str, fd, lines_to_write as u64, &line_end_wrapper);
     |                                                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `lines_to_write`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_cast

warning: boolean to int conversion using if
    --> src/main.rs:2193:5
     |
2193 | /     if result {
2194 | |         1
2195 | |     } else {
2196 | |         0
2197 | |     }
     | |_____^ help: replace with from: `i32::from(result)`
     |
     = note: `result as i32` or `result.into()` can also be valid options
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if
     = note: `-W clippy::bool-to-int-with-if` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::bool_to_int_with_if)]`

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/main.rs:2206:57
     |
2206 |         let bytes_to_read = std::cmp::min(buffer.len(), bytes_to_write as usize);
     |                                                         ^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: if this is intentional allow the lint with `#[allow(clippy::cast_possible_truncation)]` ...
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation
help: ... or use `try_from` and handle the error accordingly
     |
2206 |         let bytes_to_read = std::cmp::min(buffer.len(), usize::try_from(bytes_to_write));
     |                                                         ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

warning: unsafe function's docs are missing a `# Safety` section
    --> src/main.rs:2238:1
     |
2238 | / pub unsafe extern "C" fn head_bytes(
2239 | |     filename: *const c_char,
2240 | |     fd: c_int,
2241 | |     bytes_to_write: libc::uintmax_t,
2242 | | ) -> libc::c_int {
     | |________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: docs for function which may panic missing `# Panics` section
    --> src/main.rs:2238:1
     |
2238 | / pub unsafe extern "C" fn head_bytes(
2239 | |     filename: *const c_char,
2240 | |     fd: c_int,
2241 | |     bytes_to_write: libc::uintmax_t,
2242 | | ) -> libc::c_int {
     | |________________^
     |
note: first possible panic found here
    --> src/main.rs:2247:9
     |
2247 |         CStr::from_bytes_with_nul(b"(unknown)\0").unwrap()
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_panics_doc

warning: unnecessary boolean `not` operation
    --> src/main.rs:2244:25
     |
2244 |       let filename_cstr = if !filename.is_null() {
     |  _________________________^
2245 | |         CStr::from_ptr(filename)
2246 | |     } else {
2247 | |         CStr::from_bytes_with_nul(b"(unknown)\0").unwrap()
2248 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: calling `CStr::new` with a byte string literal
    --> src/main.rs:2247:9
     |
2247 |         CStr::from_bytes_with_nul(b"(unknown)\0").unwrap()
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: use a `c""` literal: `c"(unknown)"`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_c_str_literals
     = note: `-W clippy::manual-c-str-literals` implied by `-W clippy::pedantic`
     = help: to override `-W clippy::pedantic` add `#[allow(clippy::manual_c_str_literals)]`

warning: you seem to be trying to use `match` for destructuring a single pattern. Consider using `if let`
    --> src/main.rs:2251:24
     |
2251 |       let filename_str = match filename_cstr.to_str() {
     |  ________________________^
2252 | |         Ok(s) => s.to_string(),
2253 | |         Err(_) => {
2254 | |             // Fall back to a lossy conversion using OsStr
...    |
2257 | |         }
2258 | |     };
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try
     |
2251 ~     let filename_str = if let Ok(s) = filename_cstr.to_str() { s.to_string() } else {
2252 +         // Fall back to a lossy conversion using OsStr
2253 +         let os_str = OsStr::from_bytes(filename_cstr.to_bytes());
2254 +         os_str.to_string_lossy().to_string()
2255 ~     };
     |

warning: use Option::map_or_else instead of an if let/else
    --> src/main.rs:2251:24
     |
2251 |       let filename_str = match filename_cstr.to_str() {
     |  ________________________^
2252 | |         Ok(s) => s.to_string(),
2253 | |         Err(_) => {
2254 | |             // Fall back to a lossy conversion using OsStr
...    |
2257 | |         }
2258 | |     };
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#option_if_let_else
help: try
     |
2251 ~     let filename_str = filename_cstr.to_str().map_or_else(|_| {
2252 +             // Fall back to a lossy conversion using OsStr
2253 +             let os_str = OsStr::from_bytes(filename_cstr.to_bytes());
2254 +             os_str.to_string_lossy().to_string()
2255 ~         }, |s| s.to_string());
     |

warning: boolean to int conversion using if
    --> src/main.rs:2261:5
     |
2261 | /     if head_bytes_rust(&filename_str, fd, bytes_to_write) {
2262 | |         1
2263 | |     } else {
2264 | |         0
2265 | |     }
     | |_____^ help: replace with from: `i32::from(head_bytes_rust(&filename_str, fd, bytes_to_write))`
     |
     = note: `head_bytes_rust(&filename_str, fd, bytes_to_write) as i32` or `head_bytes_rust(&filename_str, fd, bytes_to_write).into()` can also be valid options
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#bool_to_int_with_if

warning: you are deriving `PartialEq` and can implement `Eq`
    --> src/main.rs:2304:24
     |
2304 | #[derive(Debug, Clone, PartialEq)]
     |                        ^^^^^^^^^ help: consider deriving `Eq` as well: `PartialEq, Eq`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#derive_partial_eq_without_eq
     = note: `-W clippy::derive-partial-eq-without-eq` implied by `-W clippy::nursery`
     = help: to override `-W clippy::nursery` add `#[allow(clippy::derive_partial_eq_without_eq)]`

warning: this could be a `const fn`
    --> src/main.rs:2317:5
     |
2317 | /     fn get_global() -> Vec<CommandOption> {
2318 | |         unsafe {
2319 | |             // Since the global is declared as a zero-sized array [option; 0usize],
2320 | |             // there's nothing to read from it. In a real implementation, we would
...    |
2325 | |         }
2326 | |     }
     | |_____^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn
help: make the function `const`
     |
2317 |     const fn get_global() -> Vec<CommandOption> {
     |     +++++

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5395:10
     |
5395 |     ) -> u128;
     |          ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI
     = note: `#[warn(improper_ctypes)]` on by default

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5416:10
     |
5416 |     ) -> _Float128;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5430:10
     |
5430 |     ) -> _Float64x;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5504:14
     |
5504 |         __f: u128,
     |              ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5531:14
     |
5531 |         __f: _Float128,
     |              ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5549:14
     |
5549 |         __f: _Float64x,
     |              ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5610:10
     |
5610 |     ) -> u128;
     |          ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5634:10
     |
5634 |     ) -> _Float128;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:5650:10
     |
5650 |     ) -> _Float64x;
     |          ^^^^^^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6150:18
     |
6150 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6159:18
     |
6159 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6168:18
     |
6168 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6198:18
     |
6198 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: `extern` block uses type `u128`, which is not FFI-safe
    --> /app/output/head_I0I39KQwWC/target/debug/build/foo-231262516476aec2/out/bindings.rs:6209:18
     |
6209 |         __value: u128,
     |                  ^^^^ not FFI-safe
     |
     = note: 128-bit integers don't currently have a known stable ABI

warning: comparison is useless due to type limits
   --> src/main.rs:241:21
    |
241 |             *x = if *x_val < 0 {
    |                     ^^^^^^^^^^
    |
    = note: `#[warn(unused_comparisons)]` on by default

warning: `extern` fn uses type `StrtolError`, which is not FFI-safe
   --> src/main.rs:283:6
    |
283 | ) -> StrtolError {
    |      ^^^^^^^^^^^ not FFI-safe
    |
    = help: consider adding a `#[repr(C)]`, `#[repr(transparent)]`, or integer `#[repr(...)]` attribute to this enum
    = note: enum has no representation hint
note: the type is defined here
   --> src/main.rs:162:1
    |
162 | pub enum StrtolError {
    | ^^^^^^^^^^^^^^^^^^^^
    = note: `#[warn(improper_ctypes_definitions)]` on by default

warning: comparison is useless due to type limits
   --> src/main.rs:391:8
    |
391 |     if (127 * 2 + 1) <= 2147483647 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: returned pointer of `as_ptr` call is never null, so checking it for null will always return false
   --> src/main.rs:669:16
    |
669 |             if version_etc_copyright.as_ptr().is_null() {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `#[warn(useless_ptr_null_checks)]` on by default

warning: unused return value of `std::io::Error::from_raw_os_error` that must be used
    --> src/main.rs:2062:17
     |
2062 |                 Error::from_raw_os_error(0);
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
     |
2062 |                 let _ = Error::from_raw_os_error(0);
     |                 +++++++

warning: `foo` (bin "head") generated 411 warnings (6 duplicates) (run `cargo clippy --fix --bin "head"` to apply 118 suggestions)
    Finished `dev` profile [unoptimized + debuginfo] target(s) in 3.02s
