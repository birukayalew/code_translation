   Compiling rust v0.0.0 (/mnt/c/Users/sebir/Documents/summer/Research/c2saferrust/coreutils/src/cat/rust)
warning: redundant else block
  --> src/c_strcasecmp.rs:42:12
   |
42 |       } else {
   |  ____________^
43 | |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 | |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
45 | |     };
   | |_____^
   |
   = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/c_strcasecmp.rs:39:12
   |
39 |         <= 2147483647 as libc::c_int
   |            ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/closeout.rs:122:16
    |
122 |           } else {
    |  ________________^
123 | |             if 0 != 0 {
124 | |                 error(
125 | |                     0 as libc::c_int,
...   |
160 | |             };
161 | |         }
    | |_________^
    |
    = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
122 ~         } else if 0 != 0 {
123 +             error(
124 +                 0 as libc::c_int,
125 +                 *__errno_location(),
126 +                 b"%s\0" as *const u8 as *const libc::c_char,
127 +                 write_error,
128 +             );
129 +             if 0 as libc::c_int != 0 as libc::c_int {
130 +                 unreachable!();
131 +             } else {};
132 +         } else {
133 +             ({
134 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
135 +                 error(
136 +                     __errstatus,
137 +                     *__errno_location(),
138 +                     b"%s\0" as *const u8 as *const libc::c_char,
139 +                     write_error,
140 +                 );
141 +                 if __errstatus != 0 as libc::c_int {
142 +                     unreachable!();
143 +                 } else {};
144 +                 
145 +             });
146 +             ({
147 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
148 +                 error(
149 +                     __errstatus,
150 +                     *__errno_location(),
151 +                     b"%s\0" as *const u8 as *const libc::c_char,
152 +                     write_error,
153 +                 );
154 +                 if __errstatus != 0 as libc::c_int {
155 +                     unreachable!();
156 +                 } else {};
157 +                 
158 +             });
159 +         }
    |

warning: long literal lacking separators
  --> src/fcntl.rs:40:39
   |
40 |                     current_block_7 = 4046302689674688614;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `4_046_302_689_674_688_614`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:43:39
   |
43 |                     current_block_7 = 4046302689674688614;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `4_046_302_689_674_688_614`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:46:39
   |
46 |                     current_block_7 = 6453289516101043606;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_453_289_516_101_043_606`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:49:39
   |
49 |                     current_block_7 = 13722137258147953758;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_722_137_258_147_953_758`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:52:39
   |
52 |                     current_block_7 = 12766345184754617216;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_766_345_184_754_617_216`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:55:39
   |
55 |                     current_block_7 = 6940526744265269810;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_940_526_744_265_269_810`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:58:39
   |
58 |                     current_block_7 = 7022052692272556539;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_022_052_692_272_556_539`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:61:39
   |
61 |                     current_block_7 = 8871774344836507656;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `8_871_774_344_836_507_656`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:64:39
   |
64 |                     current_block_7 = 8871774344836507656;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `8_871_774_344_836_507_656`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:67:39
   |
67 |                     current_block_7 = 5351856672558463576;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `5_351_856_672_558_463_576`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:70:39
   |
70 |                     current_block_7 = 9332010126091029806;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_332_010_126_091_029_806`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:73:39
   |
73 |                     current_block_7 = 17966572639739034653;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_966_572_639_739_034_653`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:76:39
   |
76 |                     current_block_7 = 15280576717888187136;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_280_576_717_888_187_136`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:79:39
   |
79 |                     current_block_7 = 12013198723313890981;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_013_198_723_313_890_981`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:82:39
   |
82 |                     current_block_7 = 12013198723313890981;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_013_198_723_313_890_981`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:85:39
   |
85 |                     current_block_7 = 14034191772621753005;
   |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:90:39
   |
90 |                     current_block_7 = 7175849428784450219;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_175_849_428_784_450_219`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:94:17
   |
94 |                 4046302689674688614 => {
   |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_046_302_689_674_688_614`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:95:39
   |
95 |                     current_block_7 = 6453289516101043606;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_453_289_516_101_043_606`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:97:17
   |
97 |                 8871774344836507656 => {
   |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `8_871_774_344_836_507_656`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/fcntl.rs:98:39
   |
98 |                     current_block_7 = 5351856672558463576;
   |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `5_351_856_672_558_463_576`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:100:17
    |
100 |                 12013198723313890981 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_013_198_723_313_890_981`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:101:39
    |
101 |                     current_block_7 = 14034191772621753005;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:106:17
    |
106 |                 6453289516101043606 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_453_289_516_101_043_606`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:107:39
    |
107 |                     current_block_7 = 13722137258147953758;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_722_137_258_147_953_758`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:109:17
    |
109 |                 5351856672558463576 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `5_351_856_672_558_463_576`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:110:39
    |
110 |                     current_block_7 = 9332010126091029806;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_332_010_126_091_029_806`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:115:17
    |
115 |                 13722137258147953758 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_722_137_258_147_953_758`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:116:39
    |
116 |                     current_block_7 = 12766345184754617216;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_766_345_184_754_617_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:118:17
    |
118 |                 9332010126091029806 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_332_010_126_091_029_806`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:119:39
    |
119 |                     current_block_7 = 17966572639739034653;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_966_572_639_739_034_653`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:124:17
    |
124 |                 12766345184754617216 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `12_766_345_184_754_617_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:125:39
    |
125 |                     current_block_7 = 6940526744265269810;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `6_940_526_744_265_269_810`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:127:17
    |
127 |                 17966572639739034653 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_966_572_639_739_034_653`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:128:39
    |
128 |                     current_block_7 = 15280576717888187136;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_280_576_717_888_187_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:133:17
    |
133 |                 6940526744265269810 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_940_526_744_265_269_810`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:134:39
    |
134 |                     current_block_7 = 7022052692272556539;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_022_052_692_272_556_539`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:136:17
    |
136 |                 15280576717888187136 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_280_576_717_888_187_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:137:39
    |
137 |                     current_block_7 = 14034191772621753005;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:142:17
    |
142 |                 7022052692272556539 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_022_052_692_272_556_539`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/fcntl.rs:145:17
    |
145 |                 14034191772621753005 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_034_191_772_621_753_005`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/full_write.rs:23:16
   |
23 |           } else {
   |  ________________^
24 | |             total = (total as libc::c_ulong).wrapping_add(n_rw) as size_t as size_t;
25 | |             ptr = ptr.offset(n_rw as isize);
26 | |             count = (count as libc::c_ulong).wrapping_sub(n_rw) as size_t as size_t;
27 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/ialloc.rs:36:12
   |
36 |       } else {
   |  ____________^
37 | |         return _gl_alloc_nomem()
38 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/ialloc.rs:24:30
   |
24 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:25:34
   |
25 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:44:9
   |
44 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:50:9
   |
50 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/ialloc.rs:68:12
   |
68 |       } else {
   |  ____________^
69 | |         return _gl_alloc_nomem()
70 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/ialloc.rs:65:30
   |
65 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:76:37
   |
76 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:8:36
  |
8 | pub const _NL_NUM: C2RustUnnamed = 786449;
  |                                    ^^^^^^ help: consider: `786_449`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:9:54
  |
9 | pub const _NL_NUM_LC_IDENTIFICATION: C2RustUnnamed = 786448;
  |                                                      ^^^^^^ help: consider: `786_448`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:10:55
   |
10 | pub const _NL_IDENTIFICATION_CODESET: C2RustUnnamed = 786447;
   |                                                       ^^^^^^ help: consider: `786_447`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:11:56
   |
11 | pub const _NL_IDENTIFICATION_CATEGORY: C2RustUnnamed = 786446;
   |                                                        ^^^^^^ help: consider: `786_446`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:12:52
   |
12 | pub const _NL_IDENTIFICATION_DATE: C2RustUnnamed = 786445;
   |                                                    ^^^^^^ help: consider: `786_445`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:13:56
   |
13 | pub const _NL_IDENTIFICATION_REVISION: C2RustUnnamed = 786444;
   |                                                        ^^^^^^ help: consider: `786_444`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:14:60
   |
14 | pub const _NL_IDENTIFICATION_ABBREVIATION: C2RustUnnamed = 786443;
   |                                                            ^^^^^^ help: consider: `786_443`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:15:59
   |
15 | pub const _NL_IDENTIFICATION_APPLICATION: C2RustUnnamed = 786442;
   |                                                           ^^^^^^ help: consider: `786_442`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:16:56
   |
16 | pub const _NL_IDENTIFICATION_AUDIENCE: C2RustUnnamed = 786441;
   |                                                        ^^^^^^ help: consider: `786_441`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:17:57
   |
17 | pub const _NL_IDENTIFICATION_TERRITORY: C2RustUnnamed = 786440;
   |                                                         ^^^^^^ help: consider: `786_440`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:18:56
   |
18 | pub const _NL_IDENTIFICATION_LANGUAGE: C2RustUnnamed = 786439;
   |                                                        ^^^^^^ help: consider: `786_439`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:19:51
   |
19 | pub const _NL_IDENTIFICATION_FAX: C2RustUnnamed = 786438;
   |                                                   ^^^^^^ help: consider: `786_438`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:20:51
   |
20 | pub const _NL_IDENTIFICATION_TEL: C2RustUnnamed = 786437;
   |                                                   ^^^^^^ help: consider: `786_437`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:21:53
   |
21 | pub const _NL_IDENTIFICATION_EMAIL: C2RustUnnamed = 786436;
   |                                                     ^^^^^^ help: consider: `786_436`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:22:55
   |
22 | pub const _NL_IDENTIFICATION_CONTACT: C2RustUnnamed = 786435;
   |                                                       ^^^^^^ help: consider: `786_435`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:23:55
   |
23 | pub const _NL_IDENTIFICATION_ADDRESS: C2RustUnnamed = 786434;
   |                                                       ^^^^^^ help: consider: `786_434`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:24:54
   |
24 | pub const _NL_IDENTIFICATION_SOURCE: C2RustUnnamed = 786433;
   |                                                      ^^^^^^ help: consider: `786_433`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:25:53
   |
25 | pub const _NL_IDENTIFICATION_TITLE: C2RustUnnamed = 786432;
   |                                                     ^^^^^^ help: consider: `786_432`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:26:51
   |
26 | pub const _NL_NUM_LC_MEASUREMENT: C2RustUnnamed = 720898;
   |                                                   ^^^^^^ help: consider: `720_898`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:27:52
   |
27 | pub const _NL_MEASUREMENT_CODESET: C2RustUnnamed = 720897;
   |                                                    ^^^^^^ help: consider: `720_897`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:28:56
   |
28 | pub const _NL_MEASUREMENT_MEASUREMENT: C2RustUnnamed = 720896;
   |                                                        ^^^^^^ help: consider: `720_896`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:29:49
   |
29 | pub const _NL_NUM_LC_TELEPHONE: C2RustUnnamed = 655365;
   |                                                 ^^^^^^ help: consider: `655_365`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:30:50
   |
30 | pub const _NL_TELEPHONE_CODESET: C2RustUnnamed = 655364;
   |                                                  ^^^^^^ help: consider: `655_364`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:31:53
   |
31 | pub const _NL_TELEPHONE_INT_PREFIX: C2RustUnnamed = 655363;
   |                                                     ^^^^^^ help: consider: `655_363`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:32:53
   |
32 | pub const _NL_TELEPHONE_INT_SELECT: C2RustUnnamed = 655362;
   |                                                     ^^^^^^ help: consider: `655_362`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:33:54
   |
33 | pub const _NL_TELEPHONE_TEL_DOM_FMT: C2RustUnnamed = 655361;
   |                                                      ^^^^^^ help: consider: `655_361`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:34:54
   |
34 | pub const _NL_TELEPHONE_TEL_INT_FMT: C2RustUnnamed = 655360;
   |                                                      ^^^^^^ help: consider: `655_360`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:35:47
   |
35 | pub const _NL_NUM_LC_ADDRESS: C2RustUnnamed = 589837;
   |                                               ^^^^^^ help: consider: `589_837`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:36:48
   |
36 | pub const _NL_ADDRESS_CODESET: C2RustUnnamed = 589836;
   |                                                ^^^^^^ help: consider: `589_836`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:37:49
   |
37 | pub const _NL_ADDRESS_LANG_LIB: C2RustUnnamed = 589835;
   |                                                 ^^^^^^ help: consider: `589_835`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:38:50
   |
38 | pub const _NL_ADDRESS_LANG_TERM: C2RustUnnamed = 589834;
   |                                                  ^^^^^^ help: consider: `589_834`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:39:48
   |
39 | pub const _NL_ADDRESS_LANG_AB: C2RustUnnamed = 589833;
   |                                                ^^^^^^ help: consider: `589_833`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:40:50
   |
40 | pub const _NL_ADDRESS_LANG_NAME: C2RustUnnamed = 589832;
   |                                                  ^^^^^^ help: consider: `589_832`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:41:53
   |
41 | pub const _NL_ADDRESS_COUNTRY_ISBN: C2RustUnnamed = 589831;
   |                                                     ^^^^^^ help: consider: `589_831`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:42:52
   |
42 | pub const _NL_ADDRESS_COUNTRY_NUM: C2RustUnnamed = 589830;
   |                                                    ^^^^^^ help: consider: `589_830`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:43:52
   |
43 | pub const _NL_ADDRESS_COUNTRY_CAR: C2RustUnnamed = 589829;
   |                                                    ^^^^^^ help: consider: `589_829`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:44:52
   |
44 | pub const _NL_ADDRESS_COUNTRY_AB3: C2RustUnnamed = 589828;
   |                                                    ^^^^^^ help: consider: `589_828`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:45:52
   |
45 | pub const _NL_ADDRESS_COUNTRY_AB2: C2RustUnnamed = 589827;
   |                                                    ^^^^^^ help: consider: `589_827`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:46:53
   |
46 | pub const _NL_ADDRESS_COUNTRY_POST: C2RustUnnamed = 589826;
   |                                                     ^^^^^^ help: consider: `589_826`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:47:53
   |
47 | pub const _NL_ADDRESS_COUNTRY_NAME: C2RustUnnamed = 589825;
   |                                                     ^^^^^^ help: consider: `589_825`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:48:51
   |
48 | pub const _NL_ADDRESS_POSTAL_FMT: C2RustUnnamed = 589824;
   |                                                   ^^^^^^ help: consider: `589_824`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:49:44
   |
49 | pub const _NL_NUM_LC_NAME: C2RustUnnamed = 524295;
   |                                            ^^^^^^ help: consider: `524_295`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:50:45
   |
50 | pub const _NL_NAME_CODESET: C2RustUnnamed = 524294;
   |                                             ^^^^^^ help: consider: `524_294`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:51:45
   |
51 | pub const _NL_NAME_NAME_MS: C2RustUnnamed = 524293;
   |                                             ^^^^^^ help: consider: `524_293`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:52:47
   |
52 | pub const _NL_NAME_NAME_MISS: C2RustUnnamed = 524292;
   |                                               ^^^^^^ help: consider: `524_292`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:53:46
   |
53 | pub const _NL_NAME_NAME_MRS: C2RustUnnamed = 524291;
   |                                              ^^^^^^ help: consider: `524_291`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:54:45
   |
54 | pub const _NL_NAME_NAME_MR: C2RustUnnamed = 524290;
   |                                             ^^^^^^ help: consider: `524_290`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:55:46
   |
55 | pub const _NL_NAME_NAME_GEN: C2RustUnnamed = 524289;
   |                                              ^^^^^^ help: consider: `524_289`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:56:46
   |
56 | pub const _NL_NAME_NAME_FMT: C2RustUnnamed = 524288;
   |                                              ^^^^^^ help: consider: `524_288`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:57:45
   |
57 | pub const _NL_NUM_LC_PAPER: C2RustUnnamed = 458755;
   |                                             ^^^^^^ help: consider: `458_755`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:58:46
   |
58 | pub const _NL_PAPER_CODESET: C2RustUnnamed = 458754;
   |                                              ^^^^^^ help: consider: `458_754`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:59:44
   |
59 | pub const _NL_PAPER_WIDTH: C2RustUnnamed = 458753;
   |                                            ^^^^^^ help: consider: `458_753`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:60:45
   |
60 | pub const _NL_PAPER_HEIGHT: C2RustUnnamed = 458752;
   |                                             ^^^^^^ help: consider: `458_752`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:61:48
   |
61 | pub const _NL_NUM_LC_MESSAGES: C2RustUnnamed = 327685;
   |                                                ^^^^^^ help: consider: `327_685`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:62:49
   |
62 | pub const _NL_MESSAGES_CODESET: C2RustUnnamed = 327684;
   |                                                 ^^^^^^ help: consider: `327_684`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:63:36
   |
63 | pub const __NOSTR: C2RustUnnamed = 327683;
   |                                    ^^^^^^ help: consider: `327_683`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:64:37
   |
64 | pub const __YESSTR: C2RustUnnamed = 327682;
   |                                     ^^^^^^ help: consider: `327_682`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:65:37
   |
65 | pub const __NOEXPR: C2RustUnnamed = 327681;
   |                                     ^^^^^^ help: consider: `327_681`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:66:38
   |
66 | pub const __YESEXPR: C2RustUnnamed = 327680;
   |                                      ^^^^^^ help: consider: `327_680`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:76:48
   |
76 | pub const _NL_NUM_LC_MONETARY: C2RustUnnamed = 262190;
   |                                                ^^^^^^ help: consider: `262_190`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:77:49
   |
77 | pub const _NL_MONETARY_CODESET: C2RustUnnamed = 262189;
   |                                                 ^^^^^^ help: consider: `262_189`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:78:58
   |
78 | pub const _NL_MONETARY_THOUSANDS_SEP_WC: C2RustUnnamed = 262188;
   |                                                          ^^^^^^ help: consider: `262_188`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:79:58
   |
79 | pub const _NL_MONETARY_DECIMAL_POINT_WC: C2RustUnnamed = 262187;
   |                                                          ^^^^^^ help: consider: `262_187`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:80:57
   |
80 | pub const _NL_MONETARY_CONVERSION_RATE: C2RustUnnamed = 262186;
   |                                                         ^^^^^^ help: consider: `262_186`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:81:54
   |
81 | pub const _NL_MONETARY_DUO_VALID_TO: C2RustUnnamed = 262185;
   |                                                      ^^^^^^ help: consider: `262_185`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:82:56
   |
82 | pub const _NL_MONETARY_DUO_VALID_FROM: C2RustUnnamed = 262184;
   |                                                        ^^^^^^ help: consider: `262_184`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:83:54
   |
83 | pub const _NL_MONETARY_UNO_VALID_TO: C2RustUnnamed = 262183;
   |                                                      ^^^^^^ help: consider: `262_183`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:84:56
   |
84 | pub const _NL_MONETARY_UNO_VALID_FROM: C2RustUnnamed = 262182;
   |                                                        ^^^^^^ help: consider: `262_182`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:85:61
   |
85 | pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: C2RustUnnamed = 262181;
   |                                                             ^^^^^^ help: consider: `262_181`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:86:61
   |
86 | pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: C2RustUnnamed = 262180;
   |                                                             ^^^^^^ help: consider: `262_180`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:87:57
   |
87 | pub const _NL_MONETARY_DUO_N_SIGN_POSN: C2RustUnnamed = 262179;
   |                                                         ^^^^^^ help: consider: `262_179`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:88:57
   |
88 | pub const _NL_MONETARY_DUO_P_SIGN_POSN: C2RustUnnamed = 262178;
   |                                                         ^^^^^^ help: consider: `262_178`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:89:64
   |
89 | pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: C2RustUnnamed = 262177;
   |                                                                ^^^^^^ help: consider: `262_177`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:90:63
   |
90 | pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: C2RustUnnamed = 262176;
   |                                                               ^^^^^^ help: consider: `262_176`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:91:64
   |
91 | pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: C2RustUnnamed = 262175;
   |                                                                ^^^^^^ help: consider: `262_175`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:92:63
   |
92 | pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: C2RustUnnamed = 262174;
   |                                                               ^^^^^^ help: consider: `262_174`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:93:60
   |
93 | pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: C2RustUnnamed = 262173;
   |                                                            ^^^^^^ help: consider: `262_173`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:94:59
   |
94 | pub const _NL_MONETARY_DUO_N_CS_PRECEDES: C2RustUnnamed = 262172;
   |                                                           ^^^^^^ help: consider: `262_172`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:95:60
   |
95 | pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: C2RustUnnamed = 262171;
   |                                                            ^^^^^^ help: consider: `262_171`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:96:59
   |
96 | pub const _NL_MONETARY_DUO_P_CS_PRECEDES: C2RustUnnamed = 262170;
   |                                                           ^^^^^^ help: consider: `262_170`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:97:57
   |
97 | pub const _NL_MONETARY_DUO_FRAC_DIGITS: C2RustUnnamed = 262169;
   |                                                         ^^^^^^ help: consider: `262_169`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:98:61
   |
98 | pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: C2RustUnnamed = 262168;
   |                                                             ^^^^^^ help: consider: `262_168`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:99:61
   |
99 | pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: C2RustUnnamed = 262167;
   |                                                             ^^^^^^ help: consider: `262_167`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:100:61
    |
100 | pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: C2RustUnnamed = 262166;
    |                                                             ^^^^^^ help: consider: `262_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:101:46
    |
101 | pub const __INT_N_SIGN_POSN: C2RustUnnamed = 262165;
    |                                              ^^^^^^ help: consider: `262_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:102:46
    |
102 | pub const __INT_P_SIGN_POSN: C2RustUnnamed = 262164;
    |                                              ^^^^^^ help: consider: `262_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:103:49
    |
103 | pub const __INT_N_SEP_BY_SPACE: C2RustUnnamed = 262163;
    |                                                 ^^^^^^ help: consider: `262_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:104:48
    |
104 | pub const __INT_N_CS_PRECEDES: C2RustUnnamed = 262162;
    |                                                ^^^^^^ help: consider: `262_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:105:49
    |
105 | pub const __INT_P_SEP_BY_SPACE: C2RustUnnamed = 262161;
    |                                                 ^^^^^^ help: consider: `262_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:106:48
    |
106 | pub const __INT_P_CS_PRECEDES: C2RustUnnamed = 262160;
    |                                                ^^^^^^ help: consider: `262_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:107:50
    |
107 | pub const _NL_MONETARY_CRNCYSTR: C2RustUnnamed = 262159;
    |                                                  ^^^^^^ help: consider: `262_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:108:42
    |
108 | pub const __N_SIGN_POSN: C2RustUnnamed = 262158;
    |                                          ^^^^^^ help: consider: `262_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:109:42
    |
109 | pub const __P_SIGN_POSN: C2RustUnnamed = 262157;
    |                                          ^^^^^^ help: consider: `262_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:110:45
    |
110 | pub const __N_SEP_BY_SPACE: C2RustUnnamed = 262156;
    |                                             ^^^^^^ help: consider: `262_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:111:44
    |
111 | pub const __N_CS_PRECEDES: C2RustUnnamed = 262155;
    |                                            ^^^^^^ help: consider: `262_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:112:45
    |
112 | pub const __P_SEP_BY_SPACE: C2RustUnnamed = 262154;
    |                                             ^^^^^^ help: consider: `262_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:113:44
    |
113 | pub const __P_CS_PRECEDES: C2RustUnnamed = 262153;
    |                                            ^^^^^^ help: consider: `262_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:114:42
    |
114 | pub const __FRAC_DIGITS: C2RustUnnamed = 262152;
    |                                          ^^^^^^ help: consider: `262_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:115:46
    |
115 | pub const __INT_FRAC_DIGITS: C2RustUnnamed = 262151;
    |                                              ^^^^^^ help: consider: `262_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:116:44
    |
116 | pub const __NEGATIVE_SIGN: C2RustUnnamed = 262150;
    |                                            ^^^^^^ help: consider: `262_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:117:44
    |
117 | pub const __POSITIVE_SIGN: C2RustUnnamed = 262149;
    |                                            ^^^^^^ help: consider: `262_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:118:43
    |
118 | pub const __MON_GROUPING: C2RustUnnamed = 262148;
    |                                           ^^^^^^ help: consider: `262_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:119:48
    |
119 | pub const __MON_THOUSANDS_SEP: C2RustUnnamed = 262147;
    |                                                ^^^^^^ help: consider: `262_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:120:48
    |
120 | pub const __MON_DECIMAL_POINT: C2RustUnnamed = 262146;
    |                                                ^^^^^^ help: consider: `262_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:121:46
    |
121 | pub const __CURRENCY_SYMBOL: C2RustUnnamed = 262145;
    |                                              ^^^^^^ help: consider: `262_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:122:46
    |
122 | pub const __INT_CURR_SYMBOL: C2RustUnnamed = 262144;
    |                                              ^^^^^^ help: consider: `262_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:210:47
    |
210 | pub const _NL_NUM_LC_COLLATE: C2RustUnnamed = 196627;
    |                                               ^^^^^^ help: consider: `196_627`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:211:48
    |
211 | pub const _NL_COLLATE_CODESET: C2RustUnnamed = 196626;
    |                                                ^^^^^^ help: consider: `196_626`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:212:50
    |
212 | pub const _NL_COLLATE_COLLSEQWC: C2RustUnnamed = 196625;
    |                                                  ^^^^^^ help: consider: `196_625`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:213:50
    |
213 | pub const _NL_COLLATE_COLLSEQMB: C2RustUnnamed = 196624;
    |                                                  ^^^^^^ help: consider: `196_624`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:214:53
    |
214 | pub const _NL_COLLATE_SYMB_EXTRAMB: C2RustUnnamed = 196623;
    |                                                     ^^^^^^ help: consider: `196_623`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:215:53
    |
215 | pub const _NL_COLLATE_SYMB_TABLEMB: C2RustUnnamed = 196622;
    |                                                     ^^^^^^ help: consider: `196_622`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:216:57
    |
216 | pub const _NL_COLLATE_SYMB_HASH_SIZEMB: C2RustUnnamed = 196621;
    |                                                         ^^^^^^ help: consider: `196_621`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:217:51
    |
217 | pub const _NL_COLLATE_INDIRECTWC: C2RustUnnamed = 196620;
    |                                                   ^^^^^^ help: consider: `196_620`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:218:48
    |
218 | pub const _NL_COLLATE_EXTRAWC: C2RustUnnamed = 196619;
    |                                                ^^^^^^ help: consider: `196_619`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:219:49
    |
219 | pub const _NL_COLLATE_WEIGHTWC: C2RustUnnamed = 196618;
    |                                                 ^^^^^^ help: consider: `196_618`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:220:48
    |
220 | pub const _NL_COLLATE_TABLEWC: C2RustUnnamed = 196617;
    |                                                ^^^^^^ help: consider: `196_617`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:221:45
    |
221 | pub const _NL_COLLATE_GAP3: C2RustUnnamed = 196616;
    |                                             ^^^^^^ help: consider: `196_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:222:45
    |
222 | pub const _NL_COLLATE_GAP2: C2RustUnnamed = 196615;
    |                                             ^^^^^^ help: consider: `196_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:223:45
    |
223 | pub const _NL_COLLATE_GAP1: C2RustUnnamed = 196614;
    |                                             ^^^^^^ help: consider: `196_614`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:224:51
    |
224 | pub const _NL_COLLATE_INDIRECTMB: C2RustUnnamed = 196613;
    |                                                   ^^^^^^ help: consider: `196_613`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:225:48
    |
225 | pub const _NL_COLLATE_EXTRAMB: C2RustUnnamed = 196612;
    |                                                ^^^^^^ help: consider: `196_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:226:49
    |
226 | pub const _NL_COLLATE_WEIGHTMB: C2RustUnnamed = 196611;
    |                                                 ^^^^^^ help: consider: `196_611`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:227:48
    |
227 | pub const _NL_COLLATE_TABLEMB: C2RustUnnamed = 196610;
    |                                                ^^^^^^ help: consider: `196_610`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:228:49
    |
228 | pub const _NL_COLLATE_RULESETS: C2RustUnnamed = 196609;
    |                                                 ^^^^^^ help: consider: `196_609`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:229:47
    |
229 | pub const _NL_COLLATE_NRULES: C2RustUnnamed = 196608;
    |                                               ^^^^^^ help: consider: `196_608`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:230:44
    |
230 | pub const _NL_NUM_LC_TIME: C2RustUnnamed = 131231;
    |                                            ^^^^^^ help: consider: `131_231`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:231:45
    |
231 | pub const _NL_WABALTMON_12: C2RustUnnamed = 131230;
    |                                             ^^^^^^ help: consider: `131_230`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:232:45
    |
232 | pub const _NL_WABALTMON_11: C2RustUnnamed = 131229;
    |                                             ^^^^^^ help: consider: `131_229`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:233:45
    |
233 | pub const _NL_WABALTMON_10: C2RustUnnamed = 131228;
    |                                             ^^^^^^ help: consider: `131_228`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:234:44
    |
234 | pub const _NL_WABALTMON_9: C2RustUnnamed = 131227;
    |                                            ^^^^^^ help: consider: `131_227`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:235:44
    |
235 | pub const _NL_WABALTMON_8: C2RustUnnamed = 131226;
    |                                            ^^^^^^ help: consider: `131_226`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:236:44
    |
236 | pub const _NL_WABALTMON_7: C2RustUnnamed = 131225;
    |                                            ^^^^^^ help: consider: `131_225`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:237:44
    |
237 | pub const _NL_WABALTMON_6: C2RustUnnamed = 131224;
    |                                            ^^^^^^ help: consider: `131_224`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:238:44
    |
238 | pub const _NL_WABALTMON_5: C2RustUnnamed = 131223;
    |                                            ^^^^^^ help: consider: `131_223`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:239:44
    |
239 | pub const _NL_WABALTMON_4: C2RustUnnamed = 131222;
    |                                            ^^^^^^ help: consider: `131_222`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:240:44
    |
240 | pub const _NL_WABALTMON_3: C2RustUnnamed = 131221;
    |                                            ^^^^^^ help: consider: `131_221`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:241:44
    |
241 | pub const _NL_WABALTMON_2: C2RustUnnamed = 131220;
    |                                            ^^^^^^ help: consider: `131_220`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:242:44
    |
242 | pub const _NL_WABALTMON_1: C2RustUnnamed = 131219;
    |                                            ^^^^^^ help: consider: `131_219`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:243:44
    |
243 | pub const _NL_ABALTMON_12: C2RustUnnamed = 131218;
    |                                            ^^^^^^ help: consider: `131_218`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:244:44
    |
244 | pub const _NL_ABALTMON_11: C2RustUnnamed = 131217;
    |                                            ^^^^^^ help: consider: `131_217`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:245:44
    |
245 | pub const _NL_ABALTMON_10: C2RustUnnamed = 131216;
    |                                            ^^^^^^ help: consider: `131_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:246:43
    |
246 | pub const _NL_ABALTMON_9: C2RustUnnamed = 131215;
    |                                           ^^^^^^ help: consider: `131_215`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:247:43
    |
247 | pub const _NL_ABALTMON_8: C2RustUnnamed = 131214;
    |                                           ^^^^^^ help: consider: `131_214`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:248:43
    |
248 | pub const _NL_ABALTMON_7: C2RustUnnamed = 131213;
    |                                           ^^^^^^ help: consider: `131_213`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:249:43
    |
249 | pub const _NL_ABALTMON_6: C2RustUnnamed = 131212;
    |                                           ^^^^^^ help: consider: `131_212`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:250:43
    |
250 | pub const _NL_ABALTMON_5: C2RustUnnamed = 131211;
    |                                           ^^^^^^ help: consider: `131_211`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:251:43
    |
251 | pub const _NL_ABALTMON_4: C2RustUnnamed = 131210;
    |                                           ^^^^^^ help: consider: `131_210`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:252:43
    |
252 | pub const _NL_ABALTMON_3: C2RustUnnamed = 131209;
    |                                           ^^^^^^ help: consider: `131_209`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:253:43
    |
253 | pub const _NL_ABALTMON_2: C2RustUnnamed = 131208;
    |                                           ^^^^^^ help: consider: `131_208`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:254:43
    |
254 | pub const _NL_ABALTMON_1: C2RustUnnamed = 131207;
    |                                           ^^^^^^ help: consider: `131_207`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:255:43
    |
255 | pub const _NL_WALTMON_12: C2RustUnnamed = 131206;
    |                                           ^^^^^^ help: consider: `131_206`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:256:43
    |
256 | pub const _NL_WALTMON_11: C2RustUnnamed = 131205;
    |                                           ^^^^^^ help: consider: `131_205`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:257:43
    |
257 | pub const _NL_WALTMON_10: C2RustUnnamed = 131204;
    |                                           ^^^^^^ help: consider: `131_204`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:258:42
    |
258 | pub const _NL_WALTMON_9: C2RustUnnamed = 131203;
    |                                          ^^^^^^ help: consider: `131_203`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:259:42
    |
259 | pub const _NL_WALTMON_8: C2RustUnnamed = 131202;
    |                                          ^^^^^^ help: consider: `131_202`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:260:42
    |
260 | pub const _NL_WALTMON_7: C2RustUnnamed = 131201;
    |                                          ^^^^^^ help: consider: `131_201`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:261:42
    |
261 | pub const _NL_WALTMON_6: C2RustUnnamed = 131200;
    |                                          ^^^^^^ help: consider: `131_200`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:262:42
    |
262 | pub const _NL_WALTMON_5: C2RustUnnamed = 131199;
    |                                          ^^^^^^ help: consider: `131_199`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:263:42
    |
263 | pub const _NL_WALTMON_4: C2RustUnnamed = 131198;
    |                                          ^^^^^^ help: consider: `131_198`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:264:42
    |
264 | pub const _NL_WALTMON_3: C2RustUnnamed = 131197;
    |                                          ^^^^^^ help: consider: `131_197`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:265:42
    |
265 | pub const _NL_WALTMON_2: C2RustUnnamed = 131196;
    |                                          ^^^^^^ help: consider: `131_196`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:266:42
    |
266 | pub const _NL_WALTMON_1: C2RustUnnamed = 131195;
    |                                          ^^^^^^ help: consider: `131_195`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:267:40
    |
267 | pub const __ALTMON_12: C2RustUnnamed = 131194;
    |                                        ^^^^^^ help: consider: `131_194`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:268:40
    |
268 | pub const __ALTMON_11: C2RustUnnamed = 131193;
    |                                        ^^^^^^ help: consider: `131_193`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:269:40
    |
269 | pub const __ALTMON_10: C2RustUnnamed = 131192;
    |                                        ^^^^^^ help: consider: `131_192`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:270:39
    |
270 | pub const __ALTMON_9: C2RustUnnamed = 131191;
    |                                       ^^^^^^ help: consider: `131_191`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:271:39
    |
271 | pub const __ALTMON_8: C2RustUnnamed = 131190;
    |                                       ^^^^^^ help: consider: `131_190`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:272:39
    |
272 | pub const __ALTMON_7: C2RustUnnamed = 131189;
    |                                       ^^^^^^ help: consider: `131_189`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:273:39
    |
273 | pub const __ALTMON_6: C2RustUnnamed = 131188;
    |                                       ^^^^^^ help: consider: `131_188`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:274:39
    |
274 | pub const __ALTMON_5: C2RustUnnamed = 131187;
    |                                       ^^^^^^ help: consider: `131_187`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:275:39
    |
275 | pub const __ALTMON_4: C2RustUnnamed = 131186;
    |                                       ^^^^^^ help: consider: `131_186`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:276:39
    |
276 | pub const __ALTMON_3: C2RustUnnamed = 131185;
    |                                       ^^^^^^ help: consider: `131_185`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:277:39
    |
277 | pub const __ALTMON_2: C2RustUnnamed = 131184;
    |                                       ^^^^^^ help: consider: `131_184`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:278:39
    |
278 | pub const __ALTMON_1: C2RustUnnamed = 131183;
    |                                       ^^^^^^ help: consider: `131_183`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:279:45
    |
279 | pub const _NL_TIME_CODESET: C2RustUnnamed = 131182;
    |                                             ^^^^^^ help: consider: `131_182`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:280:43
    |
280 | pub const _NL_W_DATE_FMT: C2RustUnnamed = 131181;
    |                                           ^^^^^^ help: consider: `131_181`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:281:38
    |
281 | pub const _DATE_FMT: C2RustUnnamed = 131180;
    |                                      ^^^^^^ help: consider: `131_180`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:282:46
    |
282 | pub const _NL_TIME_TIMEZONE: C2RustUnnamed = 131179;
    |                                              ^^^^^^ help: consider: `131_179`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:283:51
    |
283 | pub const _NL_TIME_CAL_DIRECTION: C2RustUnnamed = 131178;
    |                                                   ^^^^^^ help: consider: `131_178`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:284:51
    |
284 | pub const _NL_TIME_FIRST_WORKDAY: C2RustUnnamed = 131177;
    |                                                   ^^^^^^ help: consider: `131_177`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:285:51
    |
285 | pub const _NL_TIME_FIRST_WEEKDAY: C2RustUnnamed = 131176;
    |                                                   ^^^^^^ help: consider: `131_176`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:286:50
    |
286 | pub const _NL_TIME_WEEK_1STWEEK: C2RustUnnamed = 131175;
    |                                                  ^^^^^^ help: consider: `131_175`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:287:49
    |
287 | pub const _NL_TIME_WEEK_1STDAY: C2RustUnnamed = 131174;
    |                                                 ^^^^^^ help: consider: `131_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:288:48
    |
288 | pub const _NL_TIME_WEEK_NDAYS: C2RustUnnamed = 131173;
    |                                                ^^^^^^ help: consider: `131_173`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:289:43
    |
289 | pub const _NL_WERA_T_FMT: C2RustUnnamed = 131172;
    |                                           ^^^^^^ help: consider: `131_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:290:45
    |
290 | pub const _NL_WERA_D_T_FMT: C2RustUnnamed = 131171;
    |                                             ^^^^^^ help: consider: `131_171`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:291:44
    |
291 | pub const _NL_WALT_DIGITS: C2RustUnnamed = 131170;
    |                                            ^^^^^^ help: consider: `131_170`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:292:43
    |
292 | pub const _NL_WERA_D_FMT: C2RustUnnamed = 131169;
    |                                           ^^^^^^ help: consider: `131_169`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:293:42
    |
293 | pub const _NL_WERA_YEAR: C2RustUnnamed = 131168;
    |                                          ^^^^^^ help: consider: `131_168`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:294:44
    |
294 | pub const _NL_WT_FMT_AMPM: C2RustUnnamed = 131167;
    |                                            ^^^^^^ help: consider: `131_167`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:295:39
    |
295 | pub const _NL_WT_FMT: C2RustUnnamed = 131166;
    |                                       ^^^^^^ help: consider: `131_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:296:39
    |
296 | pub const _NL_WD_FMT: C2RustUnnamed = 131165;
    |                                       ^^^^^^ help: consider: `131_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:297:41
    |
297 | pub const _NL_WD_T_FMT: C2RustUnnamed = 131164;
    |                                         ^^^^^^ help: consider: `131_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:298:40
    |
298 | pub const _NL_WPM_STR: C2RustUnnamed = 131163;
    |                                        ^^^^^^ help: consider: `131_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:299:40
    |
299 | pub const _NL_WAM_STR: C2RustUnnamed = 131162;
    |                                        ^^^^^^ help: consider: `131_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:300:40
    |
300 | pub const _NL_WMON_12: C2RustUnnamed = 131161;
    |                                        ^^^^^^ help: consider: `131_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:301:40
    |
301 | pub const _NL_WMON_11: C2RustUnnamed = 131160;
    |                                        ^^^^^^ help: consider: `131_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:302:40
    |
302 | pub const _NL_WMON_10: C2RustUnnamed = 131159;
    |                                        ^^^^^^ help: consider: `131_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:303:39
    |
303 | pub const _NL_WMON_9: C2RustUnnamed = 131158;
    |                                       ^^^^^^ help: consider: `131_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:304:39
    |
304 | pub const _NL_WMON_8: C2RustUnnamed = 131157;
    |                                       ^^^^^^ help: consider: `131_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:305:39
    |
305 | pub const _NL_WMON_7: C2RustUnnamed = 131156;
    |                                       ^^^^^^ help: consider: `131_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:306:39
    |
306 | pub const _NL_WMON_6: C2RustUnnamed = 131155;
    |                                       ^^^^^^ help: consider: `131_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:307:39
    |
307 | pub const _NL_WMON_5: C2RustUnnamed = 131154;
    |                                       ^^^^^^ help: consider: `131_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:308:39
    |
308 | pub const _NL_WMON_4: C2RustUnnamed = 131153;
    |                                       ^^^^^^ help: consider: `131_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:309:39
    |
309 | pub const _NL_WMON_3: C2RustUnnamed = 131152;
    |                                       ^^^^^^ help: consider: `131_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:310:39
    |
310 | pub const _NL_WMON_2: C2RustUnnamed = 131151;
    |                                       ^^^^^^ help: consider: `131_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:311:39
    |
311 | pub const _NL_WMON_1: C2RustUnnamed = 131150;
    |                                       ^^^^^^ help: consider: `131_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:312:42
    |
312 | pub const _NL_WABMON_12: C2RustUnnamed = 131149;
    |                                          ^^^^^^ help: consider: `131_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:313:42
    |
313 | pub const _NL_WABMON_11: C2RustUnnamed = 131148;
    |                                          ^^^^^^ help: consider: `131_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:314:42
    |
314 | pub const _NL_WABMON_10: C2RustUnnamed = 131147;
    |                                          ^^^^^^ help: consider: `131_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:315:41
    |
315 | pub const _NL_WABMON_9: C2RustUnnamed = 131146;
    |                                         ^^^^^^ help: consider: `131_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:316:41
    |
316 | pub const _NL_WABMON_8: C2RustUnnamed = 131145;
    |                                         ^^^^^^ help: consider: `131_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:317:41
    |
317 | pub const _NL_WABMON_7: C2RustUnnamed = 131144;
    |                                         ^^^^^^ help: consider: `131_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:318:41
    |
318 | pub const _NL_WABMON_6: C2RustUnnamed = 131143;
    |                                         ^^^^^^ help: consider: `131_143`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:319:41
    |
319 | pub const _NL_WABMON_5: C2RustUnnamed = 131142;
    |                                         ^^^^^^ help: consider: `131_142`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:320:41
    |
320 | pub const _NL_WABMON_4: C2RustUnnamed = 131141;
    |                                         ^^^^^^ help: consider: `131_141`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:321:41
    |
321 | pub const _NL_WABMON_3: C2RustUnnamed = 131140;
    |                                         ^^^^^^ help: consider: `131_140`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:322:41
    |
322 | pub const _NL_WABMON_2: C2RustUnnamed = 131139;
    |                                         ^^^^^^ help: consider: `131_139`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:323:41
    |
323 | pub const _NL_WABMON_1: C2RustUnnamed = 131138;
    |                                         ^^^^^^ help: consider: `131_138`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:324:39
    |
324 | pub const _NL_WDAY_7: C2RustUnnamed = 131137;
    |                                       ^^^^^^ help: consider: `131_137`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:325:39
    |
325 | pub const _NL_WDAY_6: C2RustUnnamed = 131136;
    |                                       ^^^^^^ help: consider: `131_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:326:39
    |
326 | pub const _NL_WDAY_5: C2RustUnnamed = 131135;
    |                                       ^^^^^^ help: consider: `131_135`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:327:39
    |
327 | pub const _NL_WDAY_4: C2RustUnnamed = 131134;
    |                                       ^^^^^^ help: consider: `131_134`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:328:39
    |
328 | pub const _NL_WDAY_3: C2RustUnnamed = 131133;
    |                                       ^^^^^^ help: consider: `131_133`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:329:39
    |
329 | pub const _NL_WDAY_2: C2RustUnnamed = 131132;
    |                                       ^^^^^^ help: consider: `131_132`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:330:39
    |
330 | pub const _NL_WDAY_1: C2RustUnnamed = 131131;
    |                                       ^^^^^^ help: consider: `131_131`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:331:41
    |
331 | pub const _NL_WABDAY_7: C2RustUnnamed = 131130;
    |                                         ^^^^^^ help: consider: `131_130`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:332:41
    |
332 | pub const _NL_WABDAY_6: C2RustUnnamed = 131129;
    |                                         ^^^^^^ help: consider: `131_129`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:333:41
    |
333 | pub const _NL_WABDAY_5: C2RustUnnamed = 131128;
    |                                         ^^^^^^ help: consider: `131_128`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:334:41
    |
334 | pub const _NL_WABDAY_4: C2RustUnnamed = 131127;
    |                                         ^^^^^^ help: consider: `131_127`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:335:41
    |
335 | pub const _NL_WABDAY_3: C2RustUnnamed = 131126;
    |                                         ^^^^^^ help: consider: `131_126`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:336:41
    |
336 | pub const _NL_WABDAY_2: C2RustUnnamed = 131125;
    |                                         ^^^^^^ help: consider: `131_125`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:337:41
    |
337 | pub const _NL_WABDAY_1: C2RustUnnamed = 131124;
    |                                         ^^^^^^ help: consider: `131_124`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:338:49
    |
338 | pub const _NL_TIME_ERA_ENTRIES: C2RustUnnamed = 131123;
    |                                                 ^^^^^^ help: consider: `131_123`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:339:53
    |
339 | pub const _NL_TIME_ERA_NUM_ENTRIES: C2RustUnnamed = 131122;
    |                                                     ^^^^^^ help: consider: `131_122`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:340:38
    |
340 | pub const ERA_T_FMT: C2RustUnnamed = 131121;
    |                                      ^^^^^^ help: consider: `131_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:341:40
    |
341 | pub const ERA_D_T_FMT: C2RustUnnamed = 131120;
    |                                        ^^^^^^ help: consider: `131_120`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:342:39
    |
342 | pub const ALT_DIGITS: C2RustUnnamed = 131119;
    |                                       ^^^^^^ help: consider: `131_119`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:343:38
    |
343 | pub const ERA_D_FMT: C2RustUnnamed = 131118;
    |                                      ^^^^^^ help: consider: `131_118`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:344:39
    |
344 | pub const __ERA_YEAR: C2RustUnnamed = 131117;
    |                                       ^^^^^^ help: consider: `131_117`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:345:32
    |
345 | pub const ERA: C2RustUnnamed = 131116;
    |                                ^^^^^^ help: consider: `131_116`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:346:39
    |
346 | pub const T_FMT_AMPM: C2RustUnnamed = 131115;
    |                                       ^^^^^^ help: consider: `131_115`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:347:34
    |
347 | pub const T_FMT: C2RustUnnamed = 131114;
    |                                  ^^^^^^ help: consider: `131_114`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:348:34
    |
348 | pub const D_FMT: C2RustUnnamed = 131113;
    |                                  ^^^^^^ help: consider: `131_113`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:349:36
    |
349 | pub const D_T_FMT: C2RustUnnamed = 131112;
    |                                    ^^^^^^ help: consider: `131_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:350:35
    |
350 | pub const PM_STR: C2RustUnnamed = 131111;
    |                                   ^^^^^^ help: consider: `131_111`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:351:35
    |
351 | pub const AM_STR: C2RustUnnamed = 131110;
    |                                   ^^^^^^ help: consider: `131_110`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:352:35
    |
352 | pub const MON_12: C2RustUnnamed = 131109;
    |                                   ^^^^^^ help: consider: `131_109`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:353:35
    |
353 | pub const MON_11: C2RustUnnamed = 131108;
    |                                   ^^^^^^ help: consider: `131_108`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:354:35
    |
354 | pub const MON_10: C2RustUnnamed = 131107;
    |                                   ^^^^^^ help: consider: `131_107`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:355:34
    |
355 | pub const MON_9: C2RustUnnamed = 131106;
    |                                  ^^^^^^ help: consider: `131_106`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:356:34
    |
356 | pub const MON_8: C2RustUnnamed = 131105;
    |                                  ^^^^^^ help: consider: `131_105`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:357:34
    |
357 | pub const MON_7: C2RustUnnamed = 131104;
    |                                  ^^^^^^ help: consider: `131_104`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:358:34
    |
358 | pub const MON_6: C2RustUnnamed = 131103;
    |                                  ^^^^^^ help: consider: `131_103`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:359:34
    |
359 | pub const MON_5: C2RustUnnamed = 131102;
    |                                  ^^^^^^ help: consider: `131_102`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:360:34
    |
360 | pub const MON_4: C2RustUnnamed = 131101;
    |                                  ^^^^^^ help: consider: `131_101`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:361:34
    |
361 | pub const MON_3: C2RustUnnamed = 131100;
    |                                  ^^^^^^ help: consider: `131_100`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:362:34
    |
362 | pub const MON_2: C2RustUnnamed = 131099;
    |                                  ^^^^^^ help: consider: `131_099`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:363:34
    |
363 | pub const MON_1: C2RustUnnamed = 131098;
    |                                  ^^^^^^ help: consider: `131_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:364:37
    |
364 | pub const ABMON_12: C2RustUnnamed = 131097;
    |                                     ^^^^^^ help: consider: `131_097`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:365:37
    |
365 | pub const ABMON_11: C2RustUnnamed = 131096;
    |                                     ^^^^^^ help: consider: `131_096`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:366:37
    |
366 | pub const ABMON_10: C2RustUnnamed = 131095;
    |                                     ^^^^^^ help: consider: `131_095`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:367:36
    |
367 | pub const ABMON_9: C2RustUnnamed = 131094;
    |                                    ^^^^^^ help: consider: `131_094`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:368:36
    |
368 | pub const ABMON_8: C2RustUnnamed = 131093;
    |                                    ^^^^^^ help: consider: `131_093`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:369:36
    |
369 | pub const ABMON_7: C2RustUnnamed = 131092;
    |                                    ^^^^^^ help: consider: `131_092`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:370:36
    |
370 | pub const ABMON_6: C2RustUnnamed = 131091;
    |                                    ^^^^^^ help: consider: `131_091`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:371:36
    |
371 | pub const ABMON_5: C2RustUnnamed = 131090;
    |                                    ^^^^^^ help: consider: `131_090`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:372:36
    |
372 | pub const ABMON_4: C2RustUnnamed = 131089;
    |                                    ^^^^^^ help: consider: `131_089`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:373:36
    |
373 | pub const ABMON_3: C2RustUnnamed = 131088;
    |                                    ^^^^^^ help: consider: `131_088`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:374:36
    |
374 | pub const ABMON_2: C2RustUnnamed = 131087;
    |                                    ^^^^^^ help: consider: `131_087`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:375:36
    |
375 | pub const ABMON_1: C2RustUnnamed = 131086;
    |                                    ^^^^^^ help: consider: `131_086`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:376:34
    |
376 | pub const DAY_7: C2RustUnnamed = 131085;
    |                                  ^^^^^^ help: consider: `131_085`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:377:34
    |
377 | pub const DAY_6: C2RustUnnamed = 131084;
    |                                  ^^^^^^ help: consider: `131_084`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:378:34
    |
378 | pub const DAY_5: C2RustUnnamed = 131083;
    |                                  ^^^^^^ help: consider: `131_083`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:379:34
    |
379 | pub const DAY_4: C2RustUnnamed = 131082;
    |                                  ^^^^^^ help: consider: `131_082`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:380:34
    |
380 | pub const DAY_3: C2RustUnnamed = 131081;
    |                                  ^^^^^^ help: consider: `131_081`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:381:34
    |
381 | pub const DAY_2: C2RustUnnamed = 131080;
    |                                  ^^^^^^ help: consider: `131_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:382:34
    |
382 | pub const DAY_1: C2RustUnnamed = 131079;
    |                                  ^^^^^^ help: consider: `131_079`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:383:36
    |
383 | pub const ABDAY_7: C2RustUnnamed = 131078;
    |                                    ^^^^^^ help: consider: `131_078`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:384:36
    |
384 | pub const ABDAY_6: C2RustUnnamed = 131077;
    |                                    ^^^^^^ help: consider: `131_077`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:385:36
    |
385 | pub const ABDAY_5: C2RustUnnamed = 131076;
    |                                    ^^^^^^ help: consider: `131_076`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:386:36
    |
386 | pub const ABDAY_4: C2RustUnnamed = 131075;
    |                                    ^^^^^^ help: consider: `131_075`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:387:36
    |
387 | pub const ABDAY_3: C2RustUnnamed = 131074;
    |                                    ^^^^^^ help: consider: `131_074`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:388:36
    |
388 | pub const ABDAY_2: C2RustUnnamed = 131073;
    |                                    ^^^^^^ help: consider: `131_073`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:389:36
    |
389 | pub const ABDAY_1: C2RustUnnamed = 131072;
    |                                    ^^^^^^ help: consider: `131_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:185:9
    |
185 |     mut o: *mut quoting_options,
    |         ^
186 |     mut c: libc::c_char,
    |         ^
187 |     mut i: libc::c_int,
    |         ^
...
190 |     let mut p: *mut libc::c_uint = ((*(if !o.is_null() {
    |             ^
...
209 |     let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |             ^
    |
    = note: `-W clippy::many-single-char-names` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:309:13
    |
309 |     let mut i: size_t = 0;
    |             ^
...
440 |             let mut c: libc::c_uchar = 0;
    |                     ^
...
794 |                     let mut m: size_t = 0;
    |                             ^
...
813 |                         let mut w: char32_t = 0;
    |                                 ^
...
838 |                                     let mut j: size_t = 0;
    |                                             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: long literal lacking separators
   --> src/quotearg.rs:328:36
    |
328 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:331:36
    |
331 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:336:36
    |
336 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:366:36
    |
366 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:370:36
    |
370 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:373:36
    |
373 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:376:36
    |
376 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:379:36
    |
379 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:383:36
    |
383 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:390:13
    |
390 |             1283995450065962895 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:401:36
    |
401 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:403:13
    |
403 |             2694013637280298776 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:405:36
    |
405 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:410:13
    |
410 |             2266290538919981374 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:414:36
    |
414 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:419:13
    |
419 |             14141891332124833771 => {
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:434:29
    |
434 |         while if argsize == 18446744073709551615 as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:450:39
    |
450 |                     <= (if argsize == 18446744073709551615 as libc::c_ulong
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:465:37
    |
465 |                     current_block = 7928555609993211441;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:475:45
    |
475 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:531:41
    |
531 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:533:41
    |
533 |                         current_block = 13619784596304402172;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_619_784_596_304_402_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:535:41
    |
535 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:541:45
    |
541 | ...                   current_block = 17954593875197965021;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:543:33
    |
543 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:545:57
    |
545 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:565:69
    |
565 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:601:45
    |
601 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:604:45
    |
604 | ...                   current_block = 14514781131754033399;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_514_781_131_754_033_399`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:606:33
    |
606 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:608:57
    |
608 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:628:69
    |
628 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:664:45
    |
664 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:667:45
    |
667 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:673:37
    |
673 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:677:37
    |
677 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:681:37
    |
681 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:685:37
    |
685 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:689:37
    |
689 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:693:37
    |
693 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:697:37
    |
697 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:705:45
    |
705 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:708:41
    |
708 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:713:41
    |
713 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:715:41
    |
715 |                         current_block = 9215498979640025612;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:719:38
    |
719 |                     if if argsize == 18446744073709551615 as libc::c_ulong {
    |                                      ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:726:41
    |
726 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:728:41
    |
728 |                         current_block = 16442922512115311366;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:732:37
    |
732 |                     current_block = 16442922512115311366;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:735:37
    |
735 |                     current_block = 4634307283396172174;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:738:37
    |
738 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:741:37
    |
741 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:744:37
    |
744 |                     current_block = 16620298045565028098;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:747:37
    |
747 |                     current_block = 15155215915847730705;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:756:45
    |
756 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:779:41
    |
779 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:781:41
    |
781 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:791:37
    |
791 |                     current_block = 253337042034819032;
    |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:810:39
    |
810 |                         if argsize == 18446744073709551615 as libc::c_ulong {
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:846:65
    |
846 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:871:53
    |
871 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:956:41
    |
956 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:958:41
    |
958 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:963:17
    |
963 |                 16442922512115311366 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:965:41
    |
965 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:967:41
    |
967 |                         current_block = 4634307283396172174;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:970:17
    |
970 |                 9215498979640025612 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:975:41
    |
975 |                         current_block = 7928555609993211441;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:978:37
    |
978 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:983:17
    |
983 |                 1190876092451756080 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:986:41
    |
986 |                         current_block = 3173013908131212616;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:988:41
    |
988 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:991:17
    |
991 |                 4634307283396172174 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:993:37
    |
993 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:998:17
    |
998 |                 7549413860336125482 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:999:37
    |
999 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1004:17
     |
1004 |                 13059411171234995867 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1005:37
     |
1005 |                     current_block = 16620298045565028098;
     |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1010:17
     |
1010 |                 16620298045565028098 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1011:37
     |
1011 |                     current_block = 15155215915847730705;
     |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1016:17
     |
1016 |                 15155215915847730705 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1021:41
     |
1021 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1024:37
     |
1024 |                     current_block = 253337042034819032;
     |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1029:17
     |
1029 |                 253337042034819032 => {
     |                 ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1050:41
     |
1050 |                         current_block = 4476262310586904498;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1052:41
     |
1052 |                         current_block = 3173013908131212616;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1058:17
     |
1058 |                 3173013908131212616 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1060:41
     |
1060 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1090:37
     |
1090 |                     current_block = 4476262310586904498;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1095:17
     |
1095 |                 4476262310586904498 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1128:29
     |
1128 |             current_block = 7928555609993211441;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1135:29
     |
1135 |             current_block = 6412618891452676311;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/quotearg.rs:1150:16
     |
1150 |           } else {
     |  ________________^
1151 | |             if !(buffersize == 0 && orig_buffersize != 0) {
1152 | |                 current_block = 6412618891452676311;
1153 | |                 break;
...    |
1156 | |             len = 0 as libc::c_int as size_t;
1157 | |         }
     | |_________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/quotearg.rs:1152:33
     |
1152 |                 current_block = 6412618891452676311;
     |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1160:9
     |
1160 |         7928555609993211441 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/quotearg.rs:1362:13
     |
1362 |     let mut qsize: size_t = quotearg_buffer_restyled(
     |             ^^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/quotearg.rs:1359:13
     |
1359 |     let mut size: size_t = (*sv.offset(n as isize)).size;
     |             ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/quotearg.rs:1326:44
     |
1326 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                            ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1327:11
     |
1327 |         < 9223372036854775807 as libc::c_long
     |           ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1329:9
     |
1329 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1331:9
     |
1331 |         9223372036854775807 as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1405:9
     |
1405 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1435:39
     |
1435 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1484:35
     |
1484 |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
     |                                   ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1517:9
     |
1517 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1533:9
     |
1533 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1602:32
     |
1602 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |                                ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/safe_read.rs:9:44
  |
9 | pub const SYS_BUFSIZE_MAX: C2RustUnnamed = 2146435072;
  |                                            ^^^^^^^^^^ help: consider: `2_146_435_072`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/safe_read.rs:21:16
   |
21 |           } else {
   |  ________________^
22 | |             if *__errno_location() == 4 as libc::c_int {
23 | |                 continue;
24 | |             }
...  |
31 | |             }
32 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
 --> src/safe_write.rs:9:44
  |
9 | pub const SYS_BUFSIZE_MAX: C2RustUnnamed = 2146435072;
  |                                            ^^^^^^^^^^ help: consider: `2_146_435_072`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/safe_write.rs:21:16
   |
21 |           } else {
   |  ________________^
22 | |             if *__errno_location() == 4 as libc::c_int {
23 | |                 continue;
24 | |             }
...  |
31 | |             }
32 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:34:12
   |
34 |       } else {
   |  ____________^
35 | |         let mut length: size_t = strlen(result);
36 | |         if length < bufsize {
37 | |             memcpy(
...  |
56 | |         }
57 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:43:16
   |
43 |           } else {
   |  ________________^
44 | |             if bufsize > 0 as libc::c_int as libc::c_ulong {
45 | |                 memcpy(
46 | |                     buf as *mut libc::c_void,
...  |
55 | |             return 34 as libc::c_int;
56 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/xmalloc.rs:35:12
   |
35 |       } else {
   |  ____________^
36 | |         return _gl_alloc_nomem()
37 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:32:30
   |
32 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:41:9
   |
41 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:47:9
   |
47 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/xmalloc.rs:73:12
   |
73 |       } else {
   |  ____________^
74 | |         return _gl_alloc_nomem()
75 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:61:30
   |
61 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:62:34
   |
62 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:85:37
   |
85 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:560:18
    |
560 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                  ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:206:10
    |
206 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |          ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:560:27
    |
560 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                           ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:206:18
    |
206 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |                  ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
   --> src/xmalloc.rs:209:13
    |
209 |         n = 9223372036854775807 as libc::c_long;
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:411:16
    |
411 |           } else {
    |  ________________^
412 | |             if s == 0 as libc::c_int as libc::c_long {
413 | |                 0 as libc::c_int
414 | |             } else {
...   |
525 | |             }
526 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
411 ~         } else if s == 0 as libc::c_int as libc::c_long {
412 +             0 as libc::c_int
413 +         } else {
414 +             if n < 0 as libc::c_int as libc::c_long {
415 +                 if (if (if ((if 1 as libc::c_int != 0 {
416 +                     0 as libc::c_int as libc::c_long
417 +                 } else {
418 +                     (if 1 as libc::c_int != 0 {
419 +                         0 as libc::c_int as libc::c_long
420 +                     } else {
421 +                         n
422 +                     }) + 0 as libc::c_int as idx_t
423 +                 }) - 1 as libc::c_int as libc::c_long)
424 +                     < 0 as libc::c_int as libc::c_long
425 +                 {
426 +                     !(((((if 1 as libc::c_int != 0 {
427 +                         0 as libc::c_int as libc::c_long
428 +                     } else {
429 +                         (if 1 as libc::c_int != 0 {
430 +                             0 as libc::c_int as libc::c_long
431 +                         } else {
432 +                             n
433 +                         }) + 0 as libc::c_int as idx_t
434 +                     }) + 1 as libc::c_int as libc::c_long)
435 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
436 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
437 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
438 +                         - 1 as libc::c_int as libc::c_long)
439 +                         * 2 as libc::c_int as libc::c_long
440 +                         + 1 as libc::c_int as libc::c_long)
441 +                 } else {
442 +                     (if 1 as libc::c_int != 0 {
443 +                         0 as libc::c_int as libc::c_long
444 +                     } else {
445 +                         (if 1 as libc::c_int != 0 {
446 +                             0 as libc::c_int as libc::c_long
447 +                         } else {
448 +                             n
449 +                         }) + 0 as libc::c_int as idx_t
450 +                     }) + 0 as libc::c_int as libc::c_long
451 +                 }) < 0 as libc::c_int as libc::c_long
452 +                 {
453 +                     (((if 1 as libc::c_int != 0 {
454 +                         0 as libc::c_int as libc::c_long
455 +                     } else {
456 +                         n
457 +                     }) + 0 as libc::c_int as idx_t)
458 +                         < -(if ((if 1 as libc::c_int != 0 {
459 +                             0 as libc::c_int as libc::c_long
460 +                         } else {
461 +                             (if 1 as libc::c_int != 0 {
462 +                                 0 as libc::c_int as libc::c_long
463 +                             } else {
464 +                                 n
465 +                             }) + 0 as libc::c_int as idx_t
466 +                         }) - 1 as libc::c_int as libc::c_long)
467 +                             < 0 as libc::c_int as libc::c_long
468 +                         {
469 +                             ((((if 1 as libc::c_int != 0 {
470 +                                 0 as libc::c_int as libc::c_long
471 +                             } else {
472 +                                 (if 1 as libc::c_int != 0 {
473 +                                     0 as libc::c_int as libc::c_long
474 +                                 } else {
475 +                                     n
476 +                                 }) + 0 as libc::c_int as idx_t
477 +                             }) + 1 as libc::c_int as libc::c_long)
478 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
479 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
480 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
481 +                                 - 1 as libc::c_int as libc::c_long)
482 +                                 * 2 as libc::c_int as libc::c_long
483 +                                 + 1 as libc::c_int as libc::c_long
484 +                         } else {
485 +                             (if 1 as libc::c_int != 0 {
486 +                                 0 as libc::c_int as libc::c_long
487 +                             } else {
488 +                                 (if 1 as libc::c_int != 0 {
489 +                                     0 as libc::c_int as libc::c_long
490 +                                 } else {
491 +                                     n
492 +                                 }) + 0 as libc::c_int as idx_t
493 +                             }) - 1 as libc::c_int as libc::c_long
494 +                         })) as libc::c_int
495 +                 } else {
496 +                     ((0 as libc::c_int as libc::c_long)
497 +                         < (if 1 as libc::c_int != 0 {
498 +                             0 as libc::c_int as libc::c_long
499 +                         } else {
500 +                             n
501 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
502 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
503 +                 {
504 +                     if ((if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         s
508 +                     }) - 1 as libc::c_int as libc::c_long)
509 +                         < 0 as libc::c_int as libc::c_long
510 +                     {
511 +                         ((0 as libc::c_int as libc::c_long)
512 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
513 +                     } else {
514 +                         ((-(1 as libc::c_int) as libc::c_long
515 +                             - 0 as libc::c_int as idx_t)
516 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
517 +                     }
518 +                 } else {
519 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
520 +                 }
521 +             } else {
522 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
523 +             }
524 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:303:20
    |
303 |               } else {
    |  ____________________^
304 | |                 if (if (if ((if 1 as libc::c_int != 0 {
305 | |                     0 as libc::c_int as libc::c_long
306 | |                 } else {
...   |
409 | |                 }
410 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
303 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
304 +                 0 as libc::c_int as libc::c_long
305 +             } else {
306 +                 (if 1 as libc::c_int != 0 {
307 +                     0 as libc::c_int as libc::c_long
308 +                 } else {
309 +                     s
310 +                 }) + 0 as libc::c_int as idx_t
311 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
312 +             {
313 +                 !(((((if 1 as libc::c_int != 0 {
314 +                     0 as libc::c_int as libc::c_long
315 +                 } else {
316 +                     (if 1 as libc::c_int != 0 {
317 +                         0 as libc::c_int as libc::c_long
318 +                     } else {
319 +                         s
320 +                     }) + 0 as libc::c_int as idx_t
321 +                 }) + 1 as libc::c_int as libc::c_long)
322 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
323 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
324 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
325 +                     - 1 as libc::c_int as libc::c_long)
326 +                     * 2 as libc::c_int as libc::c_long
327 +                     + 1 as libc::c_int as libc::c_long)
328 +             } else {
329 +                 (if 1 as libc::c_int != 0 {
330 +                     0 as libc::c_int as libc::c_long
331 +                 } else {
332 +                     (if 1 as libc::c_int != 0 {
333 +                         0 as libc::c_int as libc::c_long
334 +                     } else {
335 +                         s
336 +                     }) + 0 as libc::c_int as idx_t
337 +                 }) + 0 as libc::c_int as libc::c_long
338 +             }) < 0 as libc::c_int as libc::c_long
339 +             {
340 +                 (((if 1 as libc::c_int != 0 {
341 +                     0 as libc::c_int as libc::c_long
342 +                 } else {
343 +                     s
344 +                 }) + 0 as libc::c_int as idx_t)
345 +                     < -(if ((if 1 as libc::c_int != 0 {
346 +                         0 as libc::c_int as libc::c_long
347 +                     } else {
348 +                         (if 1 as libc::c_int != 0 {
349 +                             0 as libc::c_int as libc::c_long
350 +                         } else {
351 +                             s
352 +                         }) + 0 as libc::c_int as idx_t
353 +                     }) - 1 as libc::c_int as libc::c_long)
354 +                         < 0 as libc::c_int as libc::c_long
355 +                     {
356 +                         ((((if 1 as libc::c_int != 0 {
357 +                             0 as libc::c_int as libc::c_long
358 +                         } else {
359 +                             (if 1 as libc::c_int != 0 {
360 +                                 0 as libc::c_int as libc::c_long
361 +                             } else {
362 +                                 s
363 +                             }) + 0 as libc::c_int as idx_t
364 +                         }) + 1 as libc::c_int as libc::c_long)
365 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
366 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
367 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
368 +                             - 1 as libc::c_int as libc::c_long)
369 +                             * 2 as libc::c_int as libc::c_long
370 +                             + 1 as libc::c_int as libc::c_long
371 +                     } else {
372 +                         (if 1 as libc::c_int != 0 {
373 +                             0 as libc::c_int as libc::c_long
374 +                         } else {
375 +                             (if 1 as libc::c_int != 0 {
376 +                                 0 as libc::c_int as libc::c_long
377 +                             } else {
378 +                                 s
379 +                             }) + 0 as libc::c_int as idx_t
380 +                         }) - 1 as libc::c_int as libc::c_long
381 +                     })) as libc::c_int
382 +             } else {
383 +                 ((0 as libc::c_int as libc::c_long)
384 +                     < (if 1 as libc::c_int != 0 {
385 +                         0 as libc::c_int as libc::c_long
386 +                     } else {
387 +                         s
388 +                     }) + 0 as libc::c_int as idx_t) as libc::c_int
389 +             }) != 0 && s == -(1 as libc::c_int) as libc::c_long
390 +             {
391 +                 if ((if 1 as libc::c_int != 0 {
392 +                     0 as libc::c_int as libc::c_long
393 +                 } else {
394 +                     n
395 +                 }) - 1 as libc::c_int as libc::c_long)
396 +                     < 0 as libc::c_int as libc::c_long
397 +                 {
398 +                     ((0 as libc::c_int as libc::c_long)
399 +                         < n + 0 as libc::c_int as idx_t) as libc::c_int
400 +                 } else {
401 +                     ((0 as libc::c_int as libc::c_long) < n
402 +                         && (-(1 as libc::c_int) as libc::c_long
403 +                             - 0 as libc::c_int as idx_t)
404 +                             < n - 1 as libc::c_int as libc::c_long) as libc::c_int
405 +                 }
406 +             } else {
407 +                 (0 as libc::c_int as idx_t / s < n) as libc::c_int
408 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:291:25
    |
291 | /                         (if 1 as libc::c_int != 0 {
292 | |                             0 as libc::c_int as libc::c_long
293 | |                         } else {
294 | |                             s
...   |
297 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
298 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
291 ~                         ((if 1 as libc::c_int != 0 {
292 +                             0 as libc::c_int as libc::c_long
293 +                         } else {
294 +                             s
295 +                         }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
296 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
297 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:414:20
    |
414 |               } else {
    |  ____________________^
415 | |                 if n < 0 as libc::c_int as libc::c_long {
416 | |                     if (if (if ((if 1 as libc::c_int != 0 {
417 | |                         0 as libc::c_int as libc::c_long
...   |
524 | |                 }
525 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
414 ~             } else if n < 0 as libc::c_int as libc::c_long {
415 +                 if (if (if ((if 1 as libc::c_int != 0 {
416 +                     0 as libc::c_int as libc::c_long
417 +                 } else {
418 +                     (if 1 as libc::c_int != 0 {
419 +                         0 as libc::c_int as libc::c_long
420 +                     } else {
421 +                         n
422 +                     }) + 0 as libc::c_int as idx_t
423 +                 }) - 1 as libc::c_int as libc::c_long)
424 +                     < 0 as libc::c_int as libc::c_long
425 +                 {
426 +                     !(((((if 1 as libc::c_int != 0 {
427 +                         0 as libc::c_int as libc::c_long
428 +                     } else {
429 +                         (if 1 as libc::c_int != 0 {
430 +                             0 as libc::c_int as libc::c_long
431 +                         } else {
432 +                             n
433 +                         }) + 0 as libc::c_int as idx_t
434 +                     }) + 1 as libc::c_int as libc::c_long)
435 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
436 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
437 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
438 +                         - 1 as libc::c_int as libc::c_long)
439 +                         * 2 as libc::c_int as libc::c_long
440 +                         + 1 as libc::c_int as libc::c_long)
441 +                 } else {
442 +                     (if 1 as libc::c_int != 0 {
443 +                         0 as libc::c_int as libc::c_long
444 +                     } else {
445 +                         (if 1 as libc::c_int != 0 {
446 +                             0 as libc::c_int as libc::c_long
447 +                         } else {
448 +                             n
449 +                         }) + 0 as libc::c_int as idx_t
450 +                     }) + 0 as libc::c_int as libc::c_long
451 +                 }) < 0 as libc::c_int as libc::c_long
452 +                 {
453 +                     (((if 1 as libc::c_int != 0 {
454 +                         0 as libc::c_int as libc::c_long
455 +                     } else {
456 +                         n
457 +                     }) + 0 as libc::c_int as idx_t)
458 +                         < -(if ((if 1 as libc::c_int != 0 {
459 +                             0 as libc::c_int as libc::c_long
460 +                         } else {
461 +                             (if 1 as libc::c_int != 0 {
462 +                                 0 as libc::c_int as libc::c_long
463 +                             } else {
464 +                                 n
465 +                             }) + 0 as libc::c_int as idx_t
466 +                         }) - 1 as libc::c_int as libc::c_long)
467 +                             < 0 as libc::c_int as libc::c_long
468 +                         {
469 +                             ((((if 1 as libc::c_int != 0 {
470 +                                 0 as libc::c_int as libc::c_long
471 +                             } else {
472 +                                 (if 1 as libc::c_int != 0 {
473 +                                     0 as libc::c_int as libc::c_long
474 +                                 } else {
475 +                                     n
476 +                                 }) + 0 as libc::c_int as idx_t
477 +                             }) + 1 as libc::c_int as libc::c_long)
478 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
479 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
480 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
481 +                                 - 1 as libc::c_int as libc::c_long)
482 +                                 * 2 as libc::c_int as libc::c_long
483 +                                 + 1 as libc::c_int as libc::c_long
484 +                         } else {
485 +                             (if 1 as libc::c_int != 0 {
486 +                                 0 as libc::c_int as libc::c_long
487 +                             } else {
488 +                                 (if 1 as libc::c_int != 0 {
489 +                                     0 as libc::c_int as libc::c_long
490 +                                 } else {
491 +                                     n
492 +                                 }) + 0 as libc::c_int as idx_t
493 +                             }) - 1 as libc::c_int as libc::c_long
494 +                         })) as libc::c_int
495 +                 } else {
496 +                     ((0 as libc::c_int as libc::c_long)
497 +                         < (if 1 as libc::c_int != 0 {
498 +                             0 as libc::c_int as libc::c_long
499 +                         } else {
500 +                             n
501 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
502 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
503 +                 {
504 +                     if ((if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         s
508 +                     }) - 1 as libc::c_int as libc::c_long)
509 +                         < 0 as libc::c_int as libc::c_long
510 +                     {
511 +                         ((0 as libc::c_int as libc::c_long)
512 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
513 +                     } else {
514 +                         ((-(1 as libc::c_int) as libc::c_long
515 +                             - 0 as libc::c_int as idx_t)
516 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
517 +                     }
518 +                 } else {
519 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
520 +                 }
521 +             } else {
522 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
523 +             }
    |

warning: long literal lacking separators
   --> src/xmalloc.rs:537:13
    |
537 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:538:15
    |
538 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:540:13
    |
540 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:542:13
    |
542 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:770:28
    |
770 |                       } else {
    |  ____________________________^
771 | |                         if s == 0 as libc::c_int as libc::c_long {
772 | |                             0 as libc::c_int
773 | |                         } else {
...   |
884 | |                         }
885 | |                     }) != 0
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
770 ~                     } else if s == 0 as libc::c_int as libc::c_long {
771 +                         0 as libc::c_int
772 +                     } else {
773 +                         if n < 0 as libc::c_int as libc::c_long {
774 +                             if (if (if ((if 1 as libc::c_int != 0 {
775 +                                 0 as libc::c_int as libc::c_long
776 +                             } else {
777 +                                 (if 1 as libc::c_int != 0 {
778 +                                     0 as libc::c_int as libc::c_long
779 +                                 } else {
780 +                                     n
781 +                                 }) + 0 as libc::c_int as idx_t
782 +                             }) - 1 as libc::c_int as libc::c_long)
783 +                                 < 0 as libc::c_int as libc::c_long
784 +                             {
785 +                                 !(((((if 1 as libc::c_int != 0 {
786 +                                     0 as libc::c_int as libc::c_long
787 +                                 } else {
788 +                                     (if 1 as libc::c_int != 0 {
789 +                                         0 as libc::c_int as libc::c_long
790 +                                     } else {
791 +                                         n
792 +                                     }) + 0 as libc::c_int as idx_t
793 +                                 }) + 1 as libc::c_int as libc::c_long)
794 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
795 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
796 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
797 +                                     - 1 as libc::c_int as libc::c_long)
798 +                                     * 2 as libc::c_int as libc::c_long
799 +                                     + 1 as libc::c_int as libc::c_long)
800 +                             } else {
801 +                                 (if 1 as libc::c_int != 0 {
802 +                                     0 as libc::c_int as libc::c_long
803 +                                 } else {
804 +                                     (if 1 as libc::c_int != 0 {
805 +                                         0 as libc::c_int as libc::c_long
806 +                                     } else {
807 +                                         n
808 +                                     }) + 0 as libc::c_int as idx_t
809 +                                 }) + 0 as libc::c_int as libc::c_long
810 +                             }) < 0 as libc::c_int as libc::c_long
811 +                             {
812 +                                 (((if 1 as libc::c_int != 0 {
813 +                                     0 as libc::c_int as libc::c_long
814 +                                 } else {
815 +                                     n
816 +                                 }) + 0 as libc::c_int as idx_t)
817 +                                     < -(if ((if 1 as libc::c_int != 0 {
818 +                                         0 as libc::c_int as libc::c_long
819 +                                     } else {
820 +                                         (if 1 as libc::c_int != 0 {
821 +                                             0 as libc::c_int as libc::c_long
822 +                                         } else {
823 +                                             n
824 +                                         }) + 0 as libc::c_int as idx_t
825 +                                     }) - 1 as libc::c_int as libc::c_long)
826 +                                         < 0 as libc::c_int as libc::c_long
827 +                                     {
828 +                                         ((((if 1 as libc::c_int != 0 {
829 +                                             0 as libc::c_int as libc::c_long
830 +                                         } else {
831 +                                             (if 1 as libc::c_int != 0 {
832 +                                                 0 as libc::c_int as libc::c_long
833 +                                             } else {
834 +                                                 n
835 +                                             }) + 0 as libc::c_int as idx_t
836 +                                         }) + 1 as libc::c_int as libc::c_long)
837 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
838 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
839 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
840 +                                             - 1 as libc::c_int as libc::c_long)
841 +                                             * 2 as libc::c_int as libc::c_long
842 +                                             + 1 as libc::c_int as libc::c_long
843 +                                     } else {
844 +                                         (if 1 as libc::c_int != 0 {
845 +                                             0 as libc::c_int as libc::c_long
846 +                                         } else {
847 +                                             (if 1 as libc::c_int != 0 {
848 +                                                 0 as libc::c_int as libc::c_long
849 +                                             } else {
850 +                                                 n
851 +                                             }) + 0 as libc::c_int as idx_t
852 +                                         }) - 1 as libc::c_int as libc::c_long
853 +                                     })) as libc::c_int
854 +                             } else {
855 +                                 ((0 as libc::c_int as libc::c_long)
856 +                                     < (if 1 as libc::c_int != 0 {
857 +                                         0 as libc::c_int as libc::c_long
858 +                                     } else {
859 +                                         n
860 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
861 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
862 +                             {
863 +                                 if ((if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     s
867 +                                 }) - 1 as libc::c_int as libc::c_long)
868 +                                     < 0 as libc::c_int as libc::c_long
869 +                                 {
870 +                                     ((0 as libc::c_int as libc::c_long)
871 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
872 +                                 } else {
873 +                                     ((-(1 as libc::c_int) as libc::c_long
874 +                                         - 0 as libc::c_int as idx_t)
875 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
876 +                                 }
877 +                             } else {
878 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
879 +                             }
880 +                         } else {
881 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
882 +                         }
883 ~                     }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:661:32
    |
661 |                           } else {
    |  ________________________________^
662 | |                             if (if (if ((if 1 as libc::c_int != 0 {
663 | |                                 0 as libc::c_int as libc::c_long
664 | |                             } else {
...   |
768 | |                             }
769 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
661 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
662 +                             0 as libc::c_int as libc::c_long
663 +                         } else {
664 +                             (if 1 as libc::c_int != 0 {
665 +                                 0 as libc::c_int as libc::c_long
666 +                             } else {
667 +                                 s
668 +                             }) + 0 as libc::c_int as idx_t
669 +                         }) - 1 as libc::c_int as libc::c_long)
670 +                             < 0 as libc::c_int as libc::c_long
671 +                         {
672 +                             !(((((if 1 as libc::c_int != 0 {
673 +                                 0 as libc::c_int as libc::c_long
674 +                             } else {
675 +                                 (if 1 as libc::c_int != 0 {
676 +                                     0 as libc::c_int as libc::c_long
677 +                                 } else {
678 +                                     s
679 +                                 }) + 0 as libc::c_int as idx_t
680 +                             }) + 1 as libc::c_int as libc::c_long)
681 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
682 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
683 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
684 +                                 - 1 as libc::c_int as libc::c_long)
685 +                                 * 2 as libc::c_int as libc::c_long
686 +                                 + 1 as libc::c_int as libc::c_long)
687 +                         } else {
688 +                             (if 1 as libc::c_int != 0 {
689 +                                 0 as libc::c_int as libc::c_long
690 +                             } else {
691 +                                 (if 1 as libc::c_int != 0 {
692 +                                     0 as libc::c_int as libc::c_long
693 +                                 } else {
694 +                                     s
695 +                                 }) + 0 as libc::c_int as idx_t
696 +                             }) + 0 as libc::c_int as libc::c_long
697 +                         }) < 0 as libc::c_int as libc::c_long
698 +                         {
699 +                             (((if 1 as libc::c_int != 0 {
700 +                                 0 as libc::c_int as libc::c_long
701 +                             } else {
702 +                                 s
703 +                             }) + 0 as libc::c_int as idx_t)
704 +                                 < -(if ((if 1 as libc::c_int != 0 {
705 +                                     0 as libc::c_int as libc::c_long
706 +                                 } else {
707 +                                     (if 1 as libc::c_int != 0 {
708 +                                         0 as libc::c_int as libc::c_long
709 +                                     } else {
710 +                                         s
711 +                                     }) + 0 as libc::c_int as idx_t
712 +                                 }) - 1 as libc::c_int as libc::c_long)
713 +                                     < 0 as libc::c_int as libc::c_long
714 +                                 {
715 +                                     ((((if 1 as libc::c_int != 0 {
716 +                                         0 as libc::c_int as libc::c_long
717 +                                     } else {
718 +                                         (if 1 as libc::c_int != 0 {
719 +                                             0 as libc::c_int as libc::c_long
720 +                                         } else {
721 +                                             s
722 +                                         }) + 0 as libc::c_int as idx_t
723 +                                     }) + 1 as libc::c_int as libc::c_long)
724 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
725 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
726 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
727 +                                         - 1 as libc::c_int as libc::c_long)
728 +                                         * 2 as libc::c_int as libc::c_long
729 +                                         + 1 as libc::c_int as libc::c_long
730 +                                 } else {
731 +                                     (if 1 as libc::c_int != 0 {
732 +                                         0 as libc::c_int as libc::c_long
733 +                                     } else {
734 +                                         (if 1 as libc::c_int != 0 {
735 +                                             0 as libc::c_int as libc::c_long
736 +                                         } else {
737 +                                             s
738 +                                         }) + 0 as libc::c_int as idx_t
739 +                                     }) - 1 as libc::c_int as libc::c_long
740 +                                 })) as libc::c_int
741 +                         } else {
742 +                             ((0 as libc::c_int as libc::c_long)
743 +                                 < (if 1 as libc::c_int != 0 {
744 +                                     0 as libc::c_int as libc::c_long
745 +                                 } else {
746 +                                     s
747 +                                 }) + 0 as libc::c_int as idx_t) as libc::c_int
748 +                         }) != 0 && s == -(1 as libc::c_int) as libc::c_long
749 +                         {
750 +                             if ((if 1 as libc::c_int != 0 {
751 +                                 0 as libc::c_int as libc::c_long
752 +                             } else {
753 +                                 n
754 +                             }) - 1 as libc::c_int as libc::c_long)
755 +                                 < 0 as libc::c_int as libc::c_long
756 +                             {
757 +                                 ((0 as libc::c_int as libc::c_long)
758 +                                     < n + 0 as libc::c_int as idx_t) as libc::c_int
759 +                             } else {
760 +                                 ((0 as libc::c_int as libc::c_long) < n
761 +                                     && (-(1 as libc::c_int) as libc::c_long
762 +                                         - 0 as libc::c_int as idx_t)
763 +                                         < n - 1 as libc::c_int as libc::c_long) as libc::c_int
764 +                             }
765 +                         } else {
766 +                             (0 as libc::c_int as idx_t / s < n) as libc::c_int
767 +                         }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:648:37
    |
648 | / ...                   (if 1 as libc::c_int != 0 {
649 | | ...                       0 as libc::c_int as libc::c_long
650 | | ...                   } else {
651 | | ...                       s
...   |
654 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
655 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
648 ~                                     ((if 1 as libc::c_int != 0 {
649 +                                         0 as libc::c_int as libc::c_long
650 +                                     } else {
651 +                                         s
652 +                                     }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
653 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
654 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:773:32
    |
773 |                           } else {
    |  ________________________________^
774 | |                             if n < 0 as libc::c_int as libc::c_long {
775 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
776 | |                                     0 as libc::c_int as libc::c_long
...   |
883 | |                             }
884 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
773 ~                         } else if n < 0 as libc::c_int as libc::c_long {
774 +                             if (if (if ((if 1 as libc::c_int != 0 {
775 +                                 0 as libc::c_int as libc::c_long
776 +                             } else {
777 +                                 (if 1 as libc::c_int != 0 {
778 +                                     0 as libc::c_int as libc::c_long
779 +                                 } else {
780 +                                     n
781 +                                 }) + 0 as libc::c_int as idx_t
782 +                             }) - 1 as libc::c_int as libc::c_long)
783 +                                 < 0 as libc::c_int as libc::c_long
784 +                             {
785 +                                 !(((((if 1 as libc::c_int != 0 {
786 +                                     0 as libc::c_int as libc::c_long
787 +                                 } else {
788 +                                     (if 1 as libc::c_int != 0 {
789 +                                         0 as libc::c_int as libc::c_long
790 +                                     } else {
791 +                                         n
792 +                                     }) + 0 as libc::c_int as idx_t
793 +                                 }) + 1 as libc::c_int as libc::c_long)
794 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
795 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
796 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
797 +                                     - 1 as libc::c_int as libc::c_long)
798 +                                     * 2 as libc::c_int as libc::c_long
799 +                                     + 1 as libc::c_int as libc::c_long)
800 +                             } else {
801 +                                 (if 1 as libc::c_int != 0 {
802 +                                     0 as libc::c_int as libc::c_long
803 +                                 } else {
804 +                                     (if 1 as libc::c_int != 0 {
805 +                                         0 as libc::c_int as libc::c_long
806 +                                     } else {
807 +                                         n
808 +                                     }) + 0 as libc::c_int as idx_t
809 +                                 }) + 0 as libc::c_int as libc::c_long
810 +                             }) < 0 as libc::c_int as libc::c_long
811 +                             {
812 +                                 (((if 1 as libc::c_int != 0 {
813 +                                     0 as libc::c_int as libc::c_long
814 +                                 } else {
815 +                                     n
816 +                                 }) + 0 as libc::c_int as idx_t)
817 +                                     < -(if ((if 1 as libc::c_int != 0 {
818 +                                         0 as libc::c_int as libc::c_long
819 +                                     } else {
820 +                                         (if 1 as libc::c_int != 0 {
821 +                                             0 as libc::c_int as libc::c_long
822 +                                         } else {
823 +                                             n
824 +                                         }) + 0 as libc::c_int as idx_t
825 +                                     }) - 1 as libc::c_int as libc::c_long)
826 +                                         < 0 as libc::c_int as libc::c_long
827 +                                     {
828 +                                         ((((if 1 as libc::c_int != 0 {
829 +                                             0 as libc::c_int as libc::c_long
830 +                                         } else {
831 +                                             (if 1 as libc::c_int != 0 {
832 +                                                 0 as libc::c_int as libc::c_long
833 +                                             } else {
834 +                                                 n
835 +                                             }) + 0 as libc::c_int as idx_t
836 +                                         }) + 1 as libc::c_int as libc::c_long)
837 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
838 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
839 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
840 +                                             - 1 as libc::c_int as libc::c_long)
841 +                                             * 2 as libc::c_int as libc::c_long
842 +                                             + 1 as libc::c_int as libc::c_long
843 +                                     } else {
844 +                                         (if 1 as libc::c_int != 0 {
845 +                                             0 as libc::c_int as libc::c_long
846 +                                         } else {
847 +                                             (if 1 as libc::c_int != 0 {
848 +                                                 0 as libc::c_int as libc::c_long
849 +                                             } else {
850 +                                                 n
851 +                                             }) + 0 as libc::c_int as idx_t
852 +                                         }) - 1 as libc::c_int as libc::c_long
853 +                                     })) as libc::c_int
854 +                             } else {
855 +                                 ((0 as libc::c_int as libc::c_long)
856 +                                     < (if 1 as libc::c_int != 0 {
857 +                                         0 as libc::c_int as libc::c_long
858 +                                     } else {
859 +                                         n
860 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
861 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
862 +                             {
863 +                                 if ((if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     s
867 +                                 }) - 1 as libc::c_int as libc::c_long)
868 +                                     < 0 as libc::c_int as libc::c_long
869 +                                 {
870 +                                     ((0 as libc::c_int as libc::c_long)
871 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
872 +                                 } else {
873 +                                     ((-(1 as libc::c_int) as libc::c_long
874 +                                         - 0 as libc::c_int as idx_t)
875 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
876 +                                 }
877 +                             } else {
878 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
879 +                             }
880 +                         } else {
881 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
882 +                         }
    |

warning: unsafe function's docs miss `# Safety` section
  --> src/alignalloc.rs:12:1
   |
12 | / pub unsafe extern "C" fn alignalloc(
13 | |     mut alignment: idx_t,
14 | |     mut size: idx_t,
15 | | ) -> *mut libc::c_void {
...  |
22 | |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
23 | | }
   | |_^
   |
   = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/alignalloc.rs:22:5
   |
22 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong)`
   |
   = note: `-W clippy::needless-return` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:16:8
   |
16 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:16:42
   |
16 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/alignalloc.rs:17:21
   |
17 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:17:21
   |
17 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:19:8
   |
19 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:19:42
   |
19 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/alignalloc.rs:20:16
   |
20 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:20:16
   |
20 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:22:26
   |
22 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/alignalloc.rs:22:54
   |
22 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                                                      ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/alignalloc.rs:27:1
   |
27 | / pub unsafe extern "C" fn alignfree(mut ptr: *mut libc::c_void) {
28 | |     free(ptr);
29 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/binary_io.rs:5:1
   |
5  | / pub unsafe extern "C" fn set_binary_mode(
6  | |     mut fd: libc::c_int,
7  | |     mut mode: libc::c_int,
8  | | ) -> libc::c_int {
9  | |     return __gl_setmode(fd, mode);
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
 --> src/binary_io.rs:9:5
  |
9 |     return __gl_setmode(fd, mode);
  |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_setmode(fd, mode)`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/binary_io.rs:14:1
   |
14 | / pub unsafe extern "C" fn __gl_setmode(
15 | |     mut _fd: libc::c_int,
16 | |     mut _mode: libc::c_int,
17 | | ) -> libc::c_int {
18 | |     return 0 as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/binary_io.rs:14:1
   |
14 | / pub unsafe extern "C" fn __gl_setmode(
15 | |     mut _fd: libc::c_int,
16 | |     mut _mode: libc::c_int,
17 | | ) -> libc::c_int {
18 | |     return 0 as libc::c_int;
19 | | }
   | |_^
   |
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/binary_io.rs:18:5
   |
18 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:5:1
   |
5  | / pub unsafe extern "C" fn c_isalnum(mut c: libc::c_int) -> bool {
6  | |     match c {
7  | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
8  | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
13 | |     };
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:5:1
   |
5  | / pub unsafe extern "C" fn c_isalnum(mut c: libc::c_int) -> bool {
6  | |     match c {
7  | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
8  | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
13 | |     };
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:11:22
   |
11 |         | 89 | 90 => return 1 as libc::c_int != 0,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:12:14
   |
12 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:18:1
   |
18 | / pub unsafe extern "C" fn c_isalpha(mut c: libc::c_int) -> bool {
19 | |     match c {
20 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
21 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 65 | 66
...  |
25 | |     };
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:18:1
   |
18 | / pub unsafe extern "C" fn c_isalpha(mut c: libc::c_int) -> bool {
19 | |     match c {
20 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
21 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 65 | 66
...  |
25 | |     };
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:23:52
   |
23 |         | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:24:14
   |
24 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:30:1
   |
30 | / pub unsafe extern "C" fn c_isascii(mut c: libc::c_int) -> bool {
31 | |     match c {
32 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
33 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
...  |
42 | |     };
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:30:1
   |
30 | / pub unsafe extern "C" fn c_isascii(mut c: libc::c_int) -> bool {
31 | |     match c {
32 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
33 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
...  |
42 | |     };
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:40:37
   |
40 |         | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:41:14
   |
41 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:47:1
   |
47 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
48 | |     return c == ' ' as i32 || c == '\t' as i32;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:47:1
   |
47 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
48 | |     return c == ' ' as i32 || c == '\t' as i32;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:48:5
   |
48 |     return c == ' ' as i32 || c == '\t' as i32;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c == ' ' as i32 || c == '\t' as i32`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:53:1
   |
53 | / pub unsafe extern "C" fn c_iscntrl(mut c: libc::c_int) -> bool {
54 | |     match c {
55 | |         7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16 | 17
56 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => {
...  |
60 | |     };
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:53:1
   |
53 | / pub unsafe extern "C" fn c_iscntrl(mut c: libc::c_int) -> bool {
54 | |     match c {
55 | |         7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16 | 17
56 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => {
...  |
60 | |     };
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:57:13
   |
57 |             return 1 as libc::c_int != 0;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:59:14
   |
59 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:65:1
   |
65 | / pub unsafe extern "C" fn c_isdigit(mut c: libc::c_int) -> bool {
66 | |     match c {
67 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
68 | |         _ => return 0 as libc::c_int != 0,
69 | |     };
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:65:1
   |
65 | / pub unsafe extern "C" fn c_isdigit(mut c: libc::c_int) -> bool {
66 | |     match c {
67 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
68 | |         _ => return 0 as libc::c_int != 0,
69 | |     };
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:67:60
   |
67 |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:68:14
   |
68 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:74:1
   |
74 | / pub unsafe extern "C" fn c_isgraph(mut c: libc::c_int) -> bool {
75 | |     match c {
76 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
77 | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
84 | |     };
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:74:1
   |
74 | / pub unsafe extern "C" fn c_isgraph(mut c: libc::c_int) -> bool {
75 | |     match c {
76 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
77 | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
84 | |     };
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:82:27
   |
82 |         | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:83:14
   |
83 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:89:1
   |
89 | / pub unsafe extern "C" fn c_islower(mut c: libc::c_int) -> bool {
90 | |     match c {
91 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
92 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...  |
96 | |     };
97 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:89:1
   |
89 | / pub unsafe extern "C" fn c_islower(mut c: libc::c_int) -> bool {
90 | |     match c {
91 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
92 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...  |
96 | |     };
97 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:93:13
   |
93 |             return 1 as libc::c_int != 0;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:95:14
   |
95 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:101:1
    |
101 | / pub unsafe extern "C" fn c_isprint(mut c: libc::c_int) -> bool {
102 | |     match c {
103 | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
104 | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
...   |
111 | |     };
112 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:101:1
    |
101 | / pub unsafe extern "C" fn c_isprint(mut c: libc::c_int) -> bool {
102 | |     match c {
103 | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
104 | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
...   |
111 | |     };
112 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:109:37
    |
109 |         | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:110:14
    |
110 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:116:1
    |
116 | / pub unsafe extern "C" fn c_ispunct(mut c: libc::c_int) -> bool {
117 | |     match c {
118 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
119 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
122 | |     };
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:116:1
    |
116 | / pub unsafe extern "C" fn c_ispunct(mut c: libc::c_int) -> bool {
117 | |     match c {
118 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
119 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
122 | |     };
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:120:18
    |
120 |         | 126 => return 1 as libc::c_int != 0,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:121:14
    |
121 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:127:1
    |
127 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
128 | |     match c {
129 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
130 | |         _ => return 0 as libc::c_int != 0,
131 | |     };
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:127:1
    |
127 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
128 | |     match c {
129 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
130 | |         _ => return 0 as libc::c_int != 0,
131 | |     };
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:129:39
    |
129 |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:130:14
    |
130 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:136:1
    |
136 | / pub unsafe extern "C" fn c_isupper(mut c: libc::c_int) -> bool {
137 | |     match c {
138 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
139 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
140 | |         _ => return 0 as libc::c_int != 0,
141 | |     };
142 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:136:1
    |
136 | / pub unsafe extern "C" fn c_isupper(mut c: libc::c_int) -> bool {
137 | |     match c {
138 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
139 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
140 | |         _ => return 0 as libc::c_int != 0,
141 | |     };
142 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:139:62
    |
139 |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:140:14
    |
140 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:146:1
    |
146 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
147 | |     match c {
148 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
149 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
150 | |         _ => return 0 as libc::c_int != 0,
151 | |     };
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:146:1
    |
146 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
147 | |     match c {
148 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
149 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
150 | |         _ => return 0 as libc::c_int != 0,
151 | |     };
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:149:42
    |
149 |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:150:14
    |
150 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:156:1
    |
156 | / pub unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
157 | |     match c {
158 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
159 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...   |
163 | |     };
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:156:1
    |
156 | / pub unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
157 | |     match c {
158 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
159 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...   |
163 | |     };
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:160:13
    |
160 |             return c - 'A' as i32 + 'a' as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'A' as i32 + 'a' as i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:162:14
    |
162 |         _ => return c,
    |              ^^^^^^^^ help: remove `return`: `c`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:168:1
    |
168 | / pub unsafe extern "C" fn c_toupper(mut c: libc::c_int) -> libc::c_int {
169 | |     match c {
170 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
171 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:168:1
    |
168 | / pub unsafe extern "C" fn c_toupper(mut c: libc::c_int) -> libc::c_int {
169 | |     match c {
170 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
171 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:172:13
    |
172 |             return c - 'a' as i32 + 'A' as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'a' as i32 + 'A' as i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:174:14
    |
174 |         _ => return c,
    |              ^^^^^^^^ help: remove `return`: `c`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/c_strcasecmp.rs:3:1
   |
3  | / unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
4  | |     match c {
5  | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
6  | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...  |
10 | |     };
11 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
 --> src/c_strcasecmp.rs:7:13
  |
7 |             return c - 'A' as i32 + 'a' as i32;
  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'A' as i32 + 'a' as i32`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
 --> src/c_strcasecmp.rs:9:14
  |
9 |         _ => return c,
  |              ^^^^^^^^ help: remove `return`: `c`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_strcasecmp.rs:13:1
   |
13 | / pub unsafe extern "C" fn c_strcasecmp(
14 | |     mut s1: *const libc::c_char,
15 | |     mut s2: *const libc::c_char,
16 | | ) -> libc::c_int {
...  |
45 | |     };
46 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/c_strcasecmp.rs:34:12
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `c1 as libc::c_int != c2 as libc::c_int`
   |
   = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/c_strcasecmp.rs:41:9
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c1 as libc::c_int - c2 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_strcasecmp.rs:43:9
   |
43 | /         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 | |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   | |______________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
43 ~         (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 +             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/c_strcasecmp.rs:17:40
   |
17 |     let mut p1: *const libc::c_uchar = s1 as *const libc::c_uchar;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `s1.cast::<u8>()`
   |
   = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/c_strcasecmp.rs:18:40
   |
18 |     let mut p2: *const libc::c_uchar = s2 as *const libc::c_uchar;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `s2.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u8` may truncate the value
  --> src/c_strcasecmp.rs:25:14
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
  --> src/c_strcasecmp.rs:25:14
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:25:24
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |                        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p1)`
   |
   = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u8` may truncate the value
  --> src/c_strcasecmp.rs:26:14
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
  --> src/c_strcasecmp.rs:26:14
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:26:24
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |                        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:27:12
   |
27 |         if c1 as libc::c_int == '\0' as i32 {
   |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/c_strcasecmp.rs:31:9
   |
31 |         p1;
   |         ^^^
   |
   = note: `-W clippy::no-effect` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/c_strcasecmp.rs:33:9
   |
33 |         p2;
   |         ^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:34:14
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |              ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:34:35
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |                                   ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:41:16
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |                ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:41:36
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |                                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/c_strcasecmp.rs:43:16
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1 as libc::c_int > c2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:43:17
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                 ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:43:37
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                                     ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/c_strcasecmp.rs:44:15
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((c1 as libc::c_int) < c2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:44:16
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |                ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:44:38
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |                                      ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/close_stream.rs:30:22
   |
30 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/close_stream.rs:41:29
   |
41 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/close_stream.rs:50:1
   |
50 | / pub unsafe extern "C" fn close_stream(mut stream: *mut FILE) -> libc::c_int {
51 | |     let some_pending: bool = __fpending(stream) != 0 as libc::c_int as libc::c_ulong;
52 | |     let prev_fail: bool = ferror_unlocked(stream) != 0 as libc::c_int;
53 | |     let fclose_fail: bool = rpl_fclose(stream) != 0 as libc::c_int;
...  |
64 | |     return 0 as libc::c_int;
65 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/close_stream.rs:64:5
   |
64 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/close_stream.rs:51:52
   |
51 |     let some_pending: bool = __fpending(stream) != 0 as libc::c_int as libc::c_ulong;
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:54:8
   |
54 |     if prev_fail as libc::c_int != 0
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(prev_fail)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:55:12
   |
55 |         || fclose_fail as libc::c_int != 0
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fclose_fail)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:56:17
   |
56 |             && (some_pending as libc::c_int != 0
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(some_pending)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/closeout.rs:38:22
   |
38 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/closeout.rs:49:29
   |
49 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:63:1
   |
63 | / pub unsafe extern "C" fn close_stdout_set_file_name(mut file: *const libc::c_char) {
64 | |     file_name = file;
65 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:68:1
   |
68 | / pub unsafe extern "C" fn close_stdout_set_ignore_EPIPE(mut ignore: bool) {
69 | |     ignore_EPIPE = ignore;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/closeout.rs:72:1
    |
72  | / pub unsafe extern "C" fn close_stdout() {
73  | |     if close_stream(stdout) != 0 as libc::c_int
74  | |         && !(ignore_EPIPE as libc::c_int != 0
75  | |             && *__errno_location() == 32 as libc::c_int)
...   |
166 | |     }
167 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/closeout.rs:74:14
   |
74 |         && !(ignore_EPIPE as libc::c_int != 0
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ignore_EPIPE)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:78:13
   |
78 |             b"write error\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
   --> src/closeout.rs:80:9
    |
80  | /         if !file_name.is_null() {
81  | |             if 0 != 0 {
82  | |                 error(
83  | |                     0 as libc::c_int,
...   |
160 | |             };
161 | |         }
    | |_________^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:81:13
    |
81  | /             if 0 != 0 {
82  | |                 error(
83  | |                     0 as libc::c_int,
84  | |                     *__errno_location(),
...   |
120 | |                 });
121 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:81:16
   |
81 |             if 0 != 0 {
   |                ^^^^^^
   |
   = note: `-W clippy::eq-op` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:85:21
   |
85 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/closeout.rs:89:17
   |
89 | /                 if 0 as libc::c_int != 0 as libc::c_int {
90 | |                     unreachable!();
91 | |                 } else {};
   | |_________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:89:20
   |
89 |                 if 0 as libc::c_int != 0 as libc::c_int {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
  --> src/closeout.rs:94:21
   |
94 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:98:25
   |
98 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:102:21
    |
102 | /                     if __errstatus != 0 as libc::c_int {
103 | |                         unreachable!();
104 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:108:21
    |
108 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:112:25
    |
112 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:116:21
    |
116 | /                     if __errstatus != 0 as libc::c_int {
117 | |                         unreachable!();
118 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:123:13
    |
123 | /             if 0 != 0 {
124 | |                 error(
125 | |                     0 as libc::c_int,
126 | |                     *__errno_location(),
...   |
159 | |                 });
160 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:123:16
    |
123 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:127:21
    |
127 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:130:17
    |
130 | /                 if 0 as libc::c_int != 0 as libc::c_int {
131 | |                     unreachable!();
132 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:130:20
    |
130 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:135:21
    |
135 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:139:25
    |
139 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:142:21
    |
142 | /                     if __errstatus != 0 as libc::c_int {
143 | |                         unreachable!();
144 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:148:21
    |
148 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:152:25
    |
152 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:155:21
    |
155 | /                     if __errstatus != 0 as libc::c_int {
156 | |                         unreachable!();
157 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
   --> src/closeout.rs:164:8
    |
164 |     if SANITIZE_ADDRESS as libc::c_int == 0 && close_stream(stderr) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
  --> src/copy_file_range.rs:31:1
   |
31 | / pub unsafe extern "C" fn rpl_copy_file_range(
32 | |     mut infd: libc::c_int,
33 | |     mut pinoff: *mut off_t,
34 | |     mut outfd: libc::c_int,
...  |
67 | |     return -(1 as libc::c_int) as ssize_t;
68 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/copy_file_range.rs:31:1
   |
31 | / pub unsafe extern "C" fn rpl_copy_file_range(
32 | |     mut infd: libc::c_int,
33 | |     mut pinoff: *mut off_t,
34 | |     mut outfd: libc::c_int,
...  |
67 | |     return -(1 as libc::c_int) as ssize_t;
68 | | }
   | |_^
   |
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/copy_file_range.rs:67:5
   |
67 |     return -(1 as libc::c_int) as ssize_t;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `-(1 as libc::c_int) as ssize_t`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
  --> src/copy_file_range.rs:51:14
   |
51 |           ok = (if *p.offset(1 as libc::c_int as isize) as libc::c_int != '.' as i32
   |  ______________^
52 | |             || ('5' as i32) < *p.offset(0 as libc::c_int as isize) as libc::c_int
53 | |             || *p.offset(0 as libc::c_int as isize) as libc::c_int == '5' as i32
54 | |                 && (*p.offset(3 as libc::c_int as isize) as libc::c_int != '.' as i32
...  |
60 | |             -(1 as libc::c_int)
61 | |         }) as libc::c_schar;
   | |___________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/copy_file_range.rs:51:18
   |
51 |         ok = (if *p.offset(1 as libc::c_int as isize) as libc::c_int != '.' as i32
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p.offset(1 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/copy_file_range.rs:52:31
   |
52 |             || ('5' as i32) < *p.offset(0 as libc::c_int as isize) as libc::c_int
   |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p.offset(0 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/copy_file_range.rs:53:16
   |
53 |             || *p.offset(0 as libc::c_int as isize) as libc::c_int == '5' as i32
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p.offset(0 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/copy_file_range.rs:54:21
   |
54 |                 && (*p.offset(3 as libc::c_int as isize) as libc::c_int != '.' as i32
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p.offset(3 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/copy_file_range.rs:56:27
   |
56 |                         < *p.offset(2 as libc::c_int as isize) as libc::c_int)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p.offset(2 as libc::c_int as isize))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/copy_file_range.rs:63:29
   |
63 |     if (0 as libc::c_int) < ok as libc::c_int {
   |                             ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/copy_file_range.rs:67:12
   |
67 |     return -(1 as libc::c_int) as ssize_t;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/fadvise.rs:33:22
   |
33 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fadvise.rs:44:29
   |
44 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:61:1
   |
61 | / pub unsafe extern "C" fn fdadvise(
62 | |     mut fd: libc::c_int,
63 | |     mut offset: off_t,
64 | |     mut len: off_t,
...  |
67 | |     posix_fadvise(fd, offset, len, advice as libc::c_int);
68 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `u32` to `i32` may wrap around the value
  --> src/fadvise.rs:67:36
   |
67 |     posix_fadvise(fd, offset, len, advice as libc::c_int);
   |                                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:70:1
   |
70 | / pub unsafe extern "C" fn fadvise(mut fp: *mut FILE, mut advice: fadvice_t) {
71 | |     if !fp.is_null() {
72 | |         fdadvise(
73 | |             fileno(fp),
...  |
78 | |     }
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:74:13
   |
74 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:75:13
   |
75 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/fclose.rs:32:22
   |
32 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fclose.rs:43:29
   |
43 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fclose.rs:52:1
   |
52 | / pub unsafe extern "C" fn rpl_fclose(mut fp: *mut FILE) -> libc::c_int {
53 | |     let mut saved_errno: libc::c_int = 0 as libc::c_int;
54 | |     let mut fd: libc::c_int = 0;
55 | |     let mut result: libc::c_int = 0 as libc::c_int;
...  |
71 | |     return result;
72 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fclose.rs:52:1
   |
52 | / pub unsafe extern "C" fn rpl_fclose(mut fp: *mut FILE) -> libc::c_int {
53 | |     let mut saved_errno: libc::c_int = 0 as libc::c_int;
54 | |     let mut fd: libc::c_int = 0;
55 | |     let mut result: libc::c_int = 0 as libc::c_int;
...  |
71 | |     return result;
72 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this boolean expression can be simplified
  --> src/fclose.rs:60:9
   |
60 |     if (!(__freading(fp) != 0 as libc::c_int)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `__freading(fp) == 0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/fclose.rs:71:5
   |
71 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fclose.rs:61:30
   |
61 |         || lseek(fileno(fp), 0 as libc::c_int as __off_t, 1 as libc::c_int)
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fclose.rs:62:16
   |
62 |             != -(1 as libc::c_int) as libc::c_long) && rpl_fflush(fp) != 0
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/fcntl.rs:19:1
    |
19  | / pub unsafe extern "C" fn rpl_fcntl(
20  | |     mut fd: libc::c_int,
21  | |     mut action: libc::c_int,
22  | |     mut args: ...
...   |
153 | |     return result;
154 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
   --> src/fcntl.rs:19:1
    |
19  | / pub unsafe extern "C" fn rpl_fcntl(
20  | |     mut fd: libc::c_int,
21  | |     mut action: libc::c_int,
22  | |     mut args: ...
...   |
153 | |     return result;
154 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (130/100)
   --> src/fcntl.rs:19:1
    |
19  | / pub unsafe extern "C" fn rpl_fcntl(
20  | |     mut fd: libc::c_int,
21  | |     mut action: libc::c_int,
22  | |     mut args: ...
...   |
153 | |     return result;
154 | | }
    | |_^
    |
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/fcntl.rs:153:5
    |
153 |     return result;
    |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:42:17
   |
42 |                   3 => {
   |                   ^ help: try merging the arm patterns: `3 | 1`
   |  _________________|
   | |
43 | |                     current_block_7 = 4046302689674688614;
44 | |                 }
   | |_________________^
   |
   = note: `-W clippy::match-same-arms` implied by `-W clippy::pedantic`
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:39:17
   |
39 | /                 1 => {
40 | |                     current_block_7 = 4046302689674688614;
41 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:60:17
   |
60 |                   1033 => {
   |                   ^---
   |                   |
   |  _________________help: try merging the arm patterns: `1033 | 0`
   | |
61 | |                     current_block_7 = 8871774344836507656;
62 | |                 }
   | |_________________^
   |
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:63:17
   |
63 | /                 0 => {
64 | |                     current_block_7 = 8871774344836507656;
65 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: this match arm has an identical body to another arm
  --> src/fcntl.rs:78:17
   |
78 |                   8 => {
   |                   ^ help: try merging the arm patterns: `8 | 1031`
   |  _________________|
   | |
79 | |                     current_block_7 = 12013198723313890981;
80 | |                 }
   | |_________________^
   |
   = help: or try changing either arm body
note: other arm here
  --> src/fcntl.rs:81:17
   |
81 | /                 1031 => {
82 | |                     current_block_7 = 12013198723313890981;
83 | |                 }
   | |_________________^
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#match_same_arms

warning: unneeded `return` statement
   --> src/fcntl.rs:161:5
    |
161 |     return result;
    |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/fcntl.rs:194:5
    |
194 |     return result;
    |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary `!=` operation
   --> src/fcntl.rs:197:26
    |
197 |       have_dupfd_cloexec = if 0 as libc::c_int != 0 {
    |  __________________________^
198 | |         -(1 as libc::c_int)
199 | |     } else {
200 | |         0 as libc::c_int
201 | |     };
    | |_____^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary structure name repetition
  --> src/fflush.rs:29:22
   |
29 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fflush.rs:40:29
   |
40 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fflush.rs:50:8
   |
50 |     if (*fp)._flags & 0x100 as libc::c_int != 0 {
   |        ^^^^^^^^^^^^
   |
   = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fflush.rs:51:24
   |
51 |         rpl_fseeko(fp, 0 as libc::c_int as off_t, 1 as libc::c_int);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
  --> src/fflush.rs:55:1
   |
55 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
56 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
57 | |         return fflush(stream);
58 | |     }
59 | |     clear_ungetc_buffer_preserving_position(stream);
60 | |     return fflush(stream);
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fflush.rs:55:1
   |
55 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
56 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
57 | |         return fflush(stream);
58 | |     }
59 | |     clear_ungetc_buffer_preserving_position(stream);
60 | |     return fflush(stream);
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this boolean expression can be simplified
  --> src/fflush.rs:56:28
   |
56 |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `__freading(stream) == 0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/fflush.rs:60:5
   |
60 |     return fflush(stream);
   |     ^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fflush(stream)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/fpurge.rs:27:22
   |
27 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fpurge.rs:38:29
   |
38 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fpurge.rs:47:1
   |
47 | / pub unsafe extern "C" fn fpurge(mut fp: *mut FILE) -> libc::c_int {
48 | |     __fpurge(fp);
49 | |     return 0 as libc::c_int;
50 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fpurge.rs:49:5
   |
49 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/fseeko.rs:29:22
   |
29 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fseeko.rs:40:29
   |
40 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/fseeko.rs:66:5
   |
66 |     return fseeko(fp, offset, whence);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fseeko(fp, offset, whence)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: used binding `_IO_read_end` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:8
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_read_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:30
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |                              ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:12
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |            ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:35
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                   ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_save_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:59
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                                           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fseeko.rs:59:19
   |
59 |         if pos == -(1 as libc::c_int) as libc::c_long {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:62:9
   |
62 |         (*fp)._flags &= !(0x10 as libc::c_int);
   |         ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_offset` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:63:9
   |
63 |         (*fp)._offset = pos;
   |         ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unsafe function's docs miss `# Safety` section
  --> src/full_write.rs:8:1
   |
8  | / pub unsafe extern "C" fn full_write(
9  | |     mut fd: libc::c_int,
10 | |     mut buf: *const libc::c_void,
11 | |     mut count: size_t,
...  |
29 | |     return total;
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/full_write.rs:29:5
   |
29 |     return total;
   |     ^^^^^^^^^^^^^ help: remove `return`: `total`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:13:29
   |
13 |     let mut total: size_t = 0 as libc::c_int as size_t;
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/full_write.rs:14:40
   |
14 |     let mut ptr: *const libc::c_char = buf as *const libc::c_char;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:15:19
   |
15 |     while count > 0 as libc::c_int as libc::c_ulong {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/full_write.rs:16:47
   |
16 |         let mut n_rw: size_t = safe_write(fd, ptr as *const libc::c_void, count);
   |                                               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ptr.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:17:20
   |
17 |         if n_rw == -(1 as libc::c_int) as size_t {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/full_write.rs:20:20
   |
20 |         if n_rw == 0 as libc::c_int as libc::c_ulong {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/full_write.rs:25:30
   |
25 |             ptr = ptr.offset(n_rw as isize);
   |                              ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/full_write.rs:25:30
   |
25 |             ptr = ptr.offset(n_rw as isize);
   |                              ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
  --> src/hard_locale.rs:12:1
   |
12 | / pub unsafe extern "C" fn hard_locale(mut category: libc::c_int) -> bool {
13 | |     let mut locale: [libc::c_char; 257] = [0; 257];
14 | |     if setlocale_null_r(
15 | |         category,
...  |
29 | |     return 0 as libc::c_int != 0;
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/hard_locale.rs:29:5
   |
29 |     return 0 as libc::c_int != 0;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/hard_locale.rs:22:38
   |
22 |     if !(strcmp(locale.as_mut_ptr(), b"C\0" as *const u8 as *const libc::c_char)
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"C\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/hard_locale.rs:24:40
   |
24 |         || strcmp(locale.as_mut_ptr(), b"POSIX\0" as *const u8 as *const libc::c_char)
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"POSIX\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:19:1
   |
19 | / pub unsafe extern "C" fn ireallocarray(
20 | |     mut p: *mut libc::c_void,
21 | |     mut n: idx_t,
22 | |     mut s: idx_t,
...  |
38 | |     };
39 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:35:9
   |
35 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:37:9
   |
37 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:24:8
   |
24 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:25:12
   |
25 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |            ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:27:30
   |
27 |         let mut nx: size_t = n as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:28:30
   |
28 |         let mut sx: size_t = s as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:29:17
   |
29 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:29:58
   |
29 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/ialloc.rs:31:18
   |
31 |             sx = 1 as libc::c_int as size_t;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:43:1
   |
43 | / pub unsafe extern "C" fn icalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
44 | |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
45 | |         if s != 0 as libc::c_int as libc::c_long {
46 | |             return _gl_alloc_nomem();
...  |
56 | |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
57 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:56:5
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `calloc(n as libc::c_ulong, s as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:44:50
   |
44 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:45:17
   |
45 |         if s != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:48:13
   |
48 |         n = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:50:50
   |
50 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:51:17
   |
51 |         if n != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:54:13
   |
54 |         s = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:56:19
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                   ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:56:39
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                                       ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:61:1
   |
61 | / pub unsafe extern "C" fn irealloc(
62 | |     mut p: *mut libc::c_void,
63 | |     mut s: idx_t,
64 | | ) -> *mut libc::c_void {
...  |
70 | |     };
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:67:9
   |
67 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:69:9
   |
69 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:65:8
   |
65 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:66:24
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:66:29
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((s == 0) as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/ialloc.rs:66:29
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(s == 0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:75:1
   |
75 | / pub unsafe extern "C" fn imalloc(mut s: idx_t) -> *mut libc::c_void {
76 | |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 | |         malloc(s as libc::c_ulong)
78 | |     } else {
79 | |         _gl_alloc_nomem()
80 | |     };
81 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:76:5
   |
76 | /     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 | |         malloc(s as libc::c_ulong)
78 | |     } else {
79 | |         _gl_alloc_nomem()
80 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
76 ~     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 +         malloc(s as libc::c_ulong)
78 +     } else {
79 +         _gl_alloc_nomem()
80 +     }
   |

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:76:15
   |
76 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:77:16
   |
77 |         malloc(s as libc::c_ulong)
   |                ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:86:1
   |
86 | / pub unsafe extern "C" fn _gl_alloc_nomem() -> *mut libc::c_void {
87 | |     *__errno_location() = 12 as libc::c_int;
88 | |     return 0 as *mut libc::c_void;
89 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:88:5
   |
88 |     return 0 as *mut libc::c_void;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/ialloc.rs:88:12
   |
88 |     return 0 as *mut libc::c_void;
   |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
   |
   = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/localcharset.rs:391:1
    |
391 | / pub unsafe extern "C" fn locale_charset() -> *const libc::c_char {
392 | |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
393 | |     codeset = nl_langinfo(CODESET as libc::c_int);
394 | |     if codeset.is_null() {
...   |
400 | |     return codeset;
401 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/localcharset.rs:400:5
    |
400 |     return codeset;
    |     ^^^^^^^^^^^^^^^ help: remove `return`: `codeset`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/localcharset.rs:392:44
    |
392 |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/localcharset.rs:393:27
    |
393 |     codeset = nl_langinfo(CODESET as libc::c_int);
    |                           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:395:19
    |
395 |         codeset = b"\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/localcharset.rs:397:8
    |
397 |     if *codeset.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*codeset.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:398:19
    |
398 |         codeset = b"ASCII\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ASCII\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:38:9
   |
38 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mbrtoc32.rs:77:5
   |
77 |     return ret;
   |     ^^^^^^^^^^^ help: remove `return`: `ret`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/mbrtoc32.rs:55:15
   |
55 |         pwc = 0 as *mut char32_t;
   |               ^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<char32_t>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:56:13
   |
56 |         s = b"\0" as *const u8 as *const libc::c_char;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:57:13
   |
57 |         n = 1 as libc::c_int as size_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:63:14
   |
63 |     if ret < -(3 as libc::c_int) as size_t && mbsinit(ps) == 0 {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:66:15
   |
66 |     if ret == -(3 as libc::c_int) as size_t {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:8
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:53
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::from(*s as libc::c_uchar)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:75:16
   |
75 |         return 1 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/mbszero.rs:25:1
   |
25 | / pub unsafe extern "C" fn mbszero(mut ps: *mut mbstate_t) {
26 | |     memset(
27 | |         ps as *mut libc::c_void,
28 | |         0 as libc::c_int,
29 | |         ::core::mem::size_of::<mbstate_t>() as libc::c_ulong,
30 | |     );
31 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbszero.rs:27:9
   |
27 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary structure name repetition
  --> src/progname.rs:35:22
   |
35 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/progname.rs:46:29
   |
46 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/progname.rs:59:1
   |
59 | / pub unsafe extern "C" fn set_program_name(mut argv0: *const libc::c_char) {
60 | |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
61 | |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
62 | |     if argv0.is_null() {
...  |
95 | |     program_invocation_name = argv0 as *mut libc::c_char;
96 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `0 as *const _` detected
  --> src/progname.rs:60:42
   |
60 |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
  --> src/progname.rs:61:41
   |
61 |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:64:13
   |
64 | /             b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8
65 | |                 as *const libc::c_char,
   | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
  --> src/progname.rs:71:12
   |
71 |       base = if !slash.is_null() {
   |  ____________^
72 | |         slash.offset(1 as libc::c_int as isize)
73 | |     } else {
74 | |         argv0
75 | |     };
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/progname.rs:76:51
   |
76 |     if base.offset_from(argv0) as libc::c_long >= 7 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(7 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:79:13
   |
79 |             b"/.libs/\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/.libs/\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:80:13
   |
80 |             7 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:86:13
   |
86 |             b"lt-\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lt-\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:87:13
   |
87 |             3 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/propername_lite.rs:8:1
   |
8  | / pub unsafe extern "C" fn proper_name_lite(
9  | |     mut name_ascii: *const libc::c_char,
10 | |     mut name_utf8: *const libc::c_char,
11 | | ) -> *const libc::c_char {
...  |
23 | |     };
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/propername_lite.rs:13:5
   |
13 | /     return if translation != name_ascii {
14 | |         translation
15 | |     } else if c_strcasecmp(
16 | |         locale_charset(),
...  |
22 | |         name_ascii
23 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     if translation != name_ascii {
14 +         translation
15 +     } else if c_strcasecmp(
16 +         locale_charset(),
17 +         b"UTF-8\0" as *const u8 as *const libc::c_char,
18 +     ) == 0 as libc::c_int
19 +     {
20 +         name_utf8
21 +     } else {
22 +         name_ascii
23 +     }
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/propername_lite.rs:17:9
   |
17 |         b"UTF-8\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
   --> src/quotearg.rs:105:5
    |
105 |     return iswprint(wc);
    |     ^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `iswprint(wc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:110:9
    |
110 |         ps as *mut libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:117:5
    |
117 |     b"literal\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"literal\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:118:5
    |
118 |     b"shell\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:119:5
    |
119 |     b"shell-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:120:5
    |
120 |     b"shell-escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:121:5
    |
121 |     b"shell-escape-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:122:5
    |
122 |     b"c\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:123:5
    |
123 |     b"c-maybe\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c-maybe\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:124:5
    |
124 |     b"escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:125:5
    |
125 |     b"locale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"locale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:126:5
    |
126 |     b"clocale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"clocale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:150:1
    |
150 | / pub unsafe extern "C" fn clone_quoting_options(
151 | |     mut o: *mut quoting_options,
152 | | ) -> *mut quoting_options {
153 | |     let mut e: libc::c_int = *__errno_location();
...   |
163 | |     return p;
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:163:5
    |
163 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:154:39
    |
154 |       let mut p: *mut quoting_options = xmemdup(
    |  _______________________________________^
155 | |         (if !o.is_null() {
156 | |             o
157 | |         } else {
...   |
160 | |         ::core::mem::size_of::<quoting_options>() as libc::c_ulong,
161 | |     ) as *mut quoting_options;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
154 ~     let mut p: *mut quoting_options = xmemdup(
155 +         (if !o.is_null() {
156 +             o
157 +         } else {
158 +             &mut default_quoting_options as *mut quoting_options
159 +         }) as *const libc::c_void,
160 +         ::core::mem::size_of::<quoting_options>() as libc::c_ulong,
161 ~     ).cast::<src::quotearg::quoting_options>();
    |

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:155:9
    |
155 | /         (if !o.is_null() {
156 | |             o
157 | |         } else {
158 | |             &mut default_quoting_options as *mut quoting_options
159 | |         }) as *const libc::c_void,
    | |__________^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:158:13
    |
158 |             &mut default_quoting_options as *mut quoting_options
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:166:1
    |
166 | / pub unsafe extern "C" fn get_quoting_style(
167 | |     mut o: *const quoting_options,
168 | | ) -> quoting_style {
169 | |     return (*if !o.is_null() {
...   |
174 | |         .style;
175 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:169:5
    |
169 | /     return (*if !o.is_null() {
170 | |         o
171 | |     } else {
172 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 | |     })
174 | |         .style;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
169 ~     (*if !o.is_null() {
170 +         o
171 +     } else {
172 +         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 +     })
174 +         .style
    |

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:169:14
    |
169 |       return (*if !o.is_null() {
    |  ______________^
170 | |         o
171 | |     } else {
172 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 | |     })
    | |_____^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:172:9
    |
172 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:177:1
    |
177 | / pub unsafe extern "C" fn set_quoting_style(
178 | |     mut o: *mut quoting_options,
179 | |     mut s: quoting_style,
180 | | ) {
181 | |     (*if !o.is_null() { o } else { &mut default_quoting_options }).style = s;
182 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:181:7
    |
181 |     (*if !o.is_null() { o } else { &mut default_quoting_options }).style = s;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:184:1
    |
184 | / pub unsafe extern "C" fn set_char_quoting(
185 | |     mut o: *mut quoting_options,
186 | |     mut c: libc::c_char,
187 | |     mut i: libc::c_int,
...   |
212 | |     return r;
213 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:212:5
    |
212 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:189:33
    |
189 |     let mut uc: libc::c_uchar = c as libc::c_uchar;
    |                                 ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:190:39
    |
190 |       let mut p: *mut libc::c_uint = ((*(if !o.is_null() {
    |  _______________________________________^
191 | |         o
192 | |     } else {
193 | |         &mut default_quoting_options as *mut quoting_options
194 | |     }))
    | |______^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:193:9
    |
193 |         &mut default_quoting_options as *mut quoting_options
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:198:13
    |
198 | /             (uc as libc::c_ulong)
199 | |                 .wrapping_div(
200 | |                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
201 | |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
202 | |                 ) as isize,
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:198:13
    |
198 | /             (uc as libc::c_ulong)
199 | |                 .wrapping_div(
200 | |                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
201 | |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
202 | |                 ) as isize,
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
   --> src/quotearg.rs:198:13
    |
198 |             (uc as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(uc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:201:39
    |
201 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i32` may truncate the value
   --> src/quotearg.rs:204:34
    |
204 |       let mut shift: libc::c_int = (uc as libc::c_ulong)
    |  __________________________________^
205 | |         .wrapping_rem(
206 | |             (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
207 | |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong),
208 | |         ) as libc::c_int;
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `u64` may become silently lossy if you later change the type
   --> src/quotearg.rs:204:34
    |
204 |     let mut shift: libc::c_int = (uc as libc::c_ulong)
    |                                  ^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(uc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:207:31
    |
207 |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:209:30
    |
209 |       let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |  ______________________________^
210 | |         as libc::c_int;
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:209:45
    |
209 |     let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:211:11
    |
211 |     *p ^= ((i & 1 as libc::c_int ^ r) << shift) as libc::c_uint;
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:215:1
    |
215 | / pub unsafe extern "C" fn set_quoting_flags(
216 | |     mut o: *mut quoting_options,
217 | |     mut i: libc::c_int,
218 | | ) -> libc::c_int {
...   |
225 | |     return r;
226 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:225:5
    |
225 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:228:1
    |
228 | / pub unsafe extern "C" fn set_custom_quoting(
229 | |     mut o: *mut quoting_options,
230 | |     mut left_quote: *const libc::c_char,
231 | |     mut right_quote: *const libc::c_char,
...   |
241 | |     (*o).right_quote = right_quote;
242 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:260:5
    |
260 |     return o;
    |     ^^^^^^^^^ help: remove `return`: `o`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
   --> src/quotearg.rs:254:9
    |
247 | /         let mut init = quoting_options {
248 | |             style: literal_quoting_style,
249 | |             flags: 0 as libc::c_int,
250 | |             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
251 | |             left_quote: 0 as *const libc::c_char,
252 | |             right_quote: 0 as *const libc::c_char,
253 | |         };
    | |__________- unnecessary `let` binding
254 |           init
    |           ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
247 ~         
248 ~         quoting_options {
249 +             style: literal_quoting_style,
250 +             flags: 0 as libc::c_int,
251 +             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
252 +             left_quote: 0 as *const libc::c_char,
253 +             right_quote: 0 as *const libc::c_char,
254 +         }
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:250:31
    |
250 |             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:251:25
    |
251 |             left_quote: 0 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/quotearg.rs:252:26
    |
252 |             right_quote: 0 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:256:33
    |
256 |     if style as libc::c_uint == custom_quoting_style as libc::c_int as libc::c_uint {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:256:33
    |
256 |     if style as libc::c_uint == custom_quoting_style as libc::c_int as libc::c_uint {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/quotearg.rs:290:5
    |
290 | /     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
291 | |         b"\"\0" as *const u8 as *const libc::c_char
292 | |     } else {
293 | |         b"'\0" as *const u8 as *const libc::c_char
294 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
290 ~     if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
291 +         b"\"\0" as *const u8 as *const libc::c_char
292 +     } else {
293 +         b"'\0" as *const u8 as *const libc::c_char
294 +     }
    |

warning: `0 as *const _` detected
   --> src/quotearg.rs:267:48
    |
267 |     let mut locale_code: *const libc::c_char = 0 as *const libc::c_char;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:272:34
    |
272 |     if c_strcasecmp(locale_code, b"UTF-8\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:275:19
    |
275 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:276:13
    |
276 |             b"\xE2\x80\x98\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x98\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:278:13
    |
278 |             b"\xE2\x80\x99\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x99\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:281:34
    |
281 |     if c_strcasecmp(locale_code, b"GB18030\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GB18030\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:284:19
    |
284 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:285:13
    |
285 |             b"\xA1\x07e\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\x07e\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:287:13
    |
287 |             b"\xA1\xAF\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\xAF\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:290:36
    |
290 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:290:36
    |
290 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:291:9
    |
291 |         b"\"\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:293:9
    |
293 |         b"'\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/quotearg.rs:820:28
    |
820 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `bytes != 0 as libc::c_int as libc::c_ulong`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (122/25)
   --> src/quotearg.rs:296:22
    |
296 | unsafe extern "C" fn quotearg_buffer_restyled(
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (890/100)
    --> src/quotearg.rs:296:1
     |
296  | / unsafe extern "C" fn quotearg_buffer_restyled(
297  | |     mut buffer: *mut libc::c_char,
298  | |     mut buffersize: size_t,
299  | |     mut arg: *const libc::c_char,
...    |
1196 | |     };
1197 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/quotearg.rs:1167:13
     |
1167 | /             return quotearg_buffer_restyled(
1168 | |                 buffer,
1169 | |                 buffersize,
1170 | |                 arg,
...    |
1176 | |                 right_quote,
1177 | |             );
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1167 ~             quotearg_buffer_restyled(
1168 +                 buffer,
1169 +                 buffersize,
1170 +                 arg,
1171 +                 argsize,
1172 +                 quoting_style,
1173 +                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1174 +                 0 as *const libc::c_uint,
1175 +                 left_quote,
1176 +                 right_quote,
1177 +             )
     |

warning: unneeded `return` statement
    --> src/quotearg.rs:1194:13
     |
1194 |             return len;
     |             ^^^^^^^^^^^ help: remove `return`: `len`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:310:27
    |
310 |     let mut len: size_t = 0 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:311:39
    |
311 |     let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:312:49
    |
312 |     let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:313:40
    |
313 |     let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:316:12
    |
316 |         == 1 as libc::c_int as libc::c_ulong;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:317:48
    |
317 |     let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:340:24
    |
340 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:340:24
    |
340 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:343:25
    |
343 |                         b"`\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"`\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:347:25
    |
347 |                         b"'\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:355:44
    |
355 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:355:44
    |
355 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:358:25
    |
358 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/quotearg.rs:360:25
    |
360 |                         quote_string;
    |                         ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:393:56
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:393:40
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:393:40
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:396:21
    |
396 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:399:32
    |
399 |                 quote_string = b"\"\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:400:36
    |
400 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:409:9
    |
409 | /         match current_block_48 {
410 | |             2266290538919981374 => {
411 | |                 if !elide_outer_quotes {
412 | |                     backslash_escapes = 1 as libc::c_int != 0;
...   |
416 | |             _ => {}
417 | |         }
    | |_________^
    |
    = note: `-W clippy::single-match` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
409 ~         if current_block_48 == 2266290538919981374 {
410 +             if !elide_outer_quotes {
411 +                 backslash_escapes = 1 as libc::c_int != 0;
412 +             }
413 +             current_block_48 = 14141891332124833771;
414 +         }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:418:9
    |
418 | /         match current_block_48 {
419 | |             14141891332124833771 => {
420 | |                 quoting_style = shell_always_quoting_style;
421 | |                 if !elide_outer_quotes {
...   |
431 | |             _ => {}
432 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
418 ~         if current_block_48 == 14141891332124833771 {
419 +             quoting_style = shell_always_quoting_style;
420 +             if !elide_outer_quotes {
421 +                 if len < buffersize {
422 +                     *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
423 +                 }
424 +                 len = len.wrapping_add(1);
425 +                 len;
426 +             }
427 +             quote_string = b"'\0" as *const u8 as *const libc::c_char;
428 +             quote_string_len = 1 as libc::c_int as size_t;
429 +         }
    |

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:423:56
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:423:40
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:423:40
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:426:21
    |
426 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:428:32
    |
428 |                 quote_string = b"'\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:429:36
    |
429 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:433:13
    |
433 |         i = 0 as libc::c_int as size_t;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:435:13
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize) as libc::c_int == '\0' as i32)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:435:14
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:435:26
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:435:26
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:437:13
    |
437 |             (i == argsize) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(i == argsize)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:445:16
    |
445 |             if backslash_escapes as libc::c_int != 0
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:447:24
    |
447 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:447:24
    |
447 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:456:21
    |
456 | /                         argsize
457 | |                     })
    | |_____________________^
    |
    = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
    = note: the end suggestion probably needs some adjustments to use the expression result correctly
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
456 ~                     }
457 ~                     argsize)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:451:28
    |
451 |                         && (1 as libc::c_int as libc::c_ulong) < quote_string_len
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:459:21
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.offset(i as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:459:32
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:459:32
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:460:21
    |
460 |                     quote_string as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `quote_string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:470:17
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:470:29
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:470:29
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:471:19
    |
471 |             match c as libc::c_int {
    |                   ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:480:32
    |
480 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:480:32
    |
480 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:484:64
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:484:48
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:484:48
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:487:29
    |
487 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:489:64
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:489:48
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:489:48
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:492:29
    |
492 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:494:64
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:494:48
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:494:48
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:497:29
    |
497 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:501:60
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:501:44
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:501:44
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:504:25
    |
504 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:506:32
    |
506 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:506:32
    |
506 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:507:47
    |
507 | ...                   && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:510:36
    |
510 |   ...                   <= *arg
    |  __________________________^
511 | | ...                       .offset(
512 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
513 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
510 ~                                 <= i32::from(*arg
511 +                                     .offset(
512 +                                         i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
513 +                                     ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:512:41
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:512:41
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:512:56
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:514:32
    |
514 |   ...                   && *arg
    |  __________________________^
515 | | ...                       .offset(
516 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
517 | | ...                       ) as libc::c_int <= '9' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
514 ~                             && i32::from(*arg
515 +                                 .offset(
516 +                                     i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
517 ~                                 )) <= '9' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:516:37
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:516:37
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:516:52
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:520:64
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:520:48
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:520:48
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:523:29
    |
523 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:525:64
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:525:48
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:525:48
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:528:29
    |
528 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:530:29
    |
530 |                         c = '0' as i32 as libc::c_uchar;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:530:29
    |
530 |                         c = '0' as i32 as libc::c_uchar;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:532:39
    |
532 |                     } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:550:48
    |
550 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:551:59
    |
551 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:553:44
    |
553 |   ...                   && *arg
    |  __________________________^
554 | | ...                       .offset(
555 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
556 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
553 ~                                         && i32::from(*arg
554 +                                             .offset(
555 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
556 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:555:49
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:555:49
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:555:64
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:558:47
    |
558 |   ...                   match *arg
    |  _____________________________^
559 | | ...                       .offset(
560 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
561 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
558 ~                                         match i32::from(*arg
559 +                                             .offset(
560 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
561 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:560:49
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:560:49
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:560:64
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:568:53
    |
568 |   ...                   c = *arg
    |  ___________________________^
569 | | ...                       .offset(
570 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
571 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:570:57
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:570:57
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:570:72
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:573:67
    |
573 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:576:84
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:576:68
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:576:68
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:579:49
    |
579 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:581:84
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:581:68
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:581:68
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:584:49
    |
584 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:586:84
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:591:84
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:613:48
    |
613 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:614:59
    |
614 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:616:44
    |
616 |   ...                   && *arg
    |  __________________________^
617 | | ...                       .offset(
618 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
619 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
616 ~                                         && i32::from(*arg
617 +                                             .offset(
618 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
619 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:618:49
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:618:49
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:618:64
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:621:47
    |
621 |   ...                   match *arg
    |  _____________________________^
622 | | ...                       .offset(
623 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
624 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
621 ~                                         match i32::from(*arg
622 +                                             .offset(
623 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
624 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:623:49
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:623:49
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:623:64
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:631:53
    |
631 |   ...                   c = *arg
    |  ___________________________^
632 | | ...                       .offset(
633 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
634 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:633:57
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:633:57
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:633:72
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:636:67
    |
636 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:639:84
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:639:68
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:639:68
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:642:49
    |
642 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:644:84
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:644:68
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:644:68
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:647:49
    |
647 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:649:84
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:654:84
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:672:27
    |
672 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:672:27
    |
672 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:676:27
    |
676 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:676:27
    |
676 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:680:27
    |
680 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:680:27
    |
680 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:684:27
    |
684 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:684:27
    |
684 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:688:27
    |
688 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:688:27
    |
688 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:692:27
    |
692 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:692:27
    |
692 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:696:27
    |
696 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:696:27
    |
696 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:702:28
    |
702 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:702:28
    |
702 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:709:31
    |
709 |                     } else if backslash_escapes as libc::c_int != 0
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:710:28
    |
710 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:720:25
    |
720 | /                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
721 | |                             == '\0' as i32) as libc::c_int
    | |__________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
720 ~                         i32::from(*arg.offset(1 as libc::c_int as isize) as libc::c_int
721 +                             == '\0' as i32)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:720:26
    |
720 |                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(1 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:723:25
    |
723 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(argsize == 1 as libc::c_int as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:723:37
    |
723 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:781:21
    |
781 | /                         current_block = 253337042034819032;
782 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
781 ~                     }
782 +                     current_block = 253337042034819032;
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:753:28
    |
753 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:753:28
    |
753 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:761:42
    |
761 | ...                   buffersize = 0 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:764:60
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:764:44
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:764:44
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:767:25
    |
767 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:769:60
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:769:44
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:769:44
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:772:25
    |
772 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:774:60
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:774:44
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:774:44
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:777:25
    |
777 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `if _ { .. } else { .. }` is an expression
   --> src/quotearg.rs:795:21
    |
795 | /                     let mut printable: bool = false;
796 | |                     if unibyte_locale {
797 | |                         m = 1 as libc::c_int as size_t;
798 | |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
...   |
861 | |                         }
862 | |                     }
    | |_____________________^
    |
    = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
    |
795 ~                     let <mut> printable = if unibyte_locale { ..; *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
796 +                             as libc::c_int
797 +                             & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
798 +                             != 0 as libc::c_int } else { ..; false };
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:797:29
    |
797 |                         m = 1 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:798:37
    |
798 |                           printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |  _____________________________________^
799 | |                             as libc::c_int
    | |__________________________________________^ help: try: `i32::from(*(*__ctype_b_loc()).offset(c as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:798:64
    |
798 |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |                                                                ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISprint as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:808:29
    |
808 |                         m = 0 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:816:42
    |
816 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:816:42
    |
816 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:820:39
    |
820 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:821:41
    |
821 | ...                   if bytes == -(1 as libc::c_int) as size_t {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:823:48
    |
823 | ...                   } else if bytes == -(2 as libc::c_int) as size_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:826:40
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i.wrapping_add(m) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:826:52
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:826:52
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:830:37
    |
830 | ...                   m;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:834:40
    |
834 | ...                   && elide_outer_quotes as libc::c_int != 0
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:836:44
    |
836 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:836:44
    |
836 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:839:41
    |
839 | ...                   j = 1 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:841:47
    |
841 |   ...                   match *arg
    |  _____________________________^
842 | | ...                       .offset(i.wrapping_add(m).wrapping_add(j) as isize)
843 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
841 ~                                         match i32::from(*arg
842 +                                             .offset(i.wrapping_add(m).wrapping_add(j) as isize))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:842:53
    |
842 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:842:53
    |
842 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:852:41
    |
852 | ...                   j;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:864:24
    |
864 |                     if (1 as libc::c_int as libc::c_ulong) < m
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:865:28
    |
865 |                         || backslash_escapes as libc::c_int != 0 && !printable
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:869:32
    |
869 | ...                   if backslash_escapes as libc::c_int != 0 && !printable {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:876:40
    |
876 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:876:40
    |
876 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:880:72
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:880:56
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:880:56
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:883:37
    |
883 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:885:72
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:885:56
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:885:56
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:888:37
    |
888 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:890:72
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:890:56
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:890:56
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:893:37
    |
893 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:897:68
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:897:52
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:897:52
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:900:33
    |
900 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:905:45
    |
905 |   ...                   ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
    |  ___________________________^
906 | | ...                   as libc::c_char;
    | |_____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:905:60
    |
905 | ...                   ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
    |                                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:904:45
    |
904 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:904:45
    |
904 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:909:33
    |
909 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:914:45
    |
914 |   ...                   ) = ('0' as i32
    |  ___________________________^
915 | | ...                   + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
916 | | ...                   as libc::c_char;
    | |_____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:915:44
    |
915 | ...                   + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
    |                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:913:45
    |
913 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:913:45
    |
913 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:919:33
    |
919 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:920:37
    |
920 |   ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |  ___________________________^
921 | | ...                       as libc::c_uchar;
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:920:37
    |
920 |   ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |  ___________________________^
921 | | ...                       as libc::c_uchar;
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:920:52
    |
920 | ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |                                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:924:68
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:924:52
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:924:52
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:927:33
    |
927 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:930:55
    |
930 | ...                   if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:934:32
    |
934 | ...                   if pending_shell_escape_end as libc::c_int != 0 && !escaping
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:937:68
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:937:52
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:937:52
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:940:33
    |
940 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:942:68
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:942:52
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:942:52
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:945:33
    |
945 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:949:64
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:949:48
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:949:48
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:952:29
    |
952 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:954:33
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:954:45
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:954:45
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/quotearg.rs:964:21
    |
964 | /                     if i != 0 as libc::c_int as libc::c_ulong {
965 | |                         current_block = 253337042034819032;
966 | |                     } else {
967 | |                         current_block = 4634307283396172174;
968 | |                     }
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:964:29
    |
964 |                     if i != 0 as libc::c_int as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:972:28
    |
972 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:972:28
    |
972 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:973:28
    |
973 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:997:13
     |
997  | /             match current_block {
998  | |                 7549413860336125482 => {
999  | |                     current_block = 13059411171234995867;
1000 | |                 }
1001 | |                 _ => {}
1002 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
997  ~             if current_block == 7549413860336125482 {
998  +                 current_block = 13059411171234995867;
999  +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1003:13
     |
1003 | /             match current_block {
1004 | |                 13059411171234995867 => {
1005 | |                     current_block = 16620298045565028098;
1006 | |                 }
1007 | |                 _ => {}
1008 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1003 ~             if current_block == 13059411171234995867 {
1004 +                 current_block = 16620298045565028098;
1005 +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1009:13
     |
1009 | /             match current_block {
1010 | |                 16620298045565028098 => {
1011 | |                     current_block = 15155215915847730705;
1012 | |                 }
1013 | |                 _ => {}
1014 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1009 ~             if current_block == 16620298045565028098 {
1010 +                 current_block = 15155215915847730705;
1011 +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1015:13
     |
1015 | /             match current_block {
1016 | |                 15155215915847730705 => {
1017 | |                     if quoting_style as libc::c_uint
1018 | |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1026 | |                 _ => {}
1027 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1015 ~             if current_block == 15155215915847730705 {
1016 +                 if quoting_style as libc::c_uint
1017 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1018 +                     && elide_outer_quotes as libc::c_int != 0
1019 +                 {
1020 +                     current_block = 7928555609993211441;
1021 +                     break 's_25;
1022 +                 }
1023 +                 current_block = 253337042034819032;
1024 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1018:28
     |
1018 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1018:28
     |
1018 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1019:28
     |
1019 |                         && elide_outer_quotes as libc::c_int != 0
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1028:13
     |
1028 | /             match current_block {
1029 | |                 253337042034819032 => {
1030 | |                     if !((backslash_escapes as libc::c_int != 0
1031 | |                         && quoting_style as libc::c_uint
...    |
1055 | |                 _ => {}
1056 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1028 ~             if current_block == 253337042034819032 {
1029 +                 if !((backslash_escapes as libc::c_int != 0
1030 +                     && quoting_style as libc::c_uint
1031 +                         != shell_always_quoting_style as libc::c_int as libc::c_uint
1032 +                     || elide_outer_quotes as libc::c_int != 0)
1033 +                     && !quote_these_too.is_null()
1034 +                     && *quote_these_too
1035 +                         .offset(
1036 +                             (c as libc::c_ulong)
1037 +                                 .wrapping_div(
1038 +                                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1039 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1040 +                                 ) as isize,
1041 +                         )
1042 +                         >> (c as libc::c_ulong)
1043 +                             .wrapping_rem(
1044 +                                 (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1045 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1046 +                             ) & 1 as libc::c_int as libc::c_uint != 0)
1047 +                     && !is_right_quote
1048 +                 {
1049 +                     current_block = 4476262310586904498;
1050 +                 } else {
1051 +                     current_block = 3173013908131212616;
1052 +                 }
1053 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1030:27
     |
1030 |                     if !((backslash_escapes as libc::c_int != 0
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1032:32
     |
1032 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1032:32
     |
1032 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1033:28
     |
1033 |                         || elide_outer_quotes as libc::c_int != 0)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1037:33
     |
1037 | / ...                   (c as libc::c_ulong)
1038 | | ...                       .wrapping_div(
1039 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1040 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1041 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1037:33
     |
1037 | / ...                   (c as libc::c_ulong)
1038 | | ...                       .wrapping_div(
1039 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1040 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1041 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1037:33
     |
1037 | ...                   (c as libc::c_ulong)
     |                       ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1040:59
     |
1040 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1043:32
     |
1043 | ...                   >> (c as libc::c_ulong)
     |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1046:55
     |
1046 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1047:37
     |
1047 | ...                   ) & 1 as libc::c_int as libc::c_uint != 0)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1057:13
     |
1057 | /             match current_block {
1058 | |                 3173013908131212616 => {
1059 | |                     if elide_outer_quotes {
1060 | |                         current_block = 7928555609993211441;
...    |
1092 | |                 _ => {}
1093 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1057 ~             if current_block == 3173013908131212616 {
1058 +                 if elide_outer_quotes {
1059 +                     current_block = 7928555609993211441;
1060 +                     break 's_25;
1061 +                 }
1062 +                 escaping = 1 as libc::c_int != 0;
1063 +                 if quoting_style as libc::c_uint
1064 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1065 +                     && !pending_shell_escape_end
1066 +                 {
1067 +                     if len < buffersize {
1068 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1069 +                     }
1070 +                     len = len.wrapping_add(1);
1071 +                     len;
1072 +                     if len < buffersize {
1073 +                         *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
1074 +                     }
1075 +                     len = len.wrapping_add(1);
1076 +                     len;
1077 +                     if len < buffersize {
1078 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1079 +                     }
1080 +                     len = len.wrapping_add(1);
1081 +                     len;
1082 +                     pending_shell_escape_end = 1 as libc::c_int != 0;
1083 +                 }
1084 +                 if len < buffersize {
1085 +                     *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
1086 +                 }
1087 +                 len = len.wrapping_add(1);
1088 +                 len;
1089 +                 current_block = 4476262310586904498;
1090 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1065:28
     |
1065 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1065:28
     |
1065 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1069:60
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1069:44
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1069:44
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1072:25
     |
1072 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1074:60
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1074:44
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1074:44
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1077:25
     |
1077 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1079:60
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1079:44
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1079:44
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1082:25
     |
1082 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1086:56
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1086:40
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1086:40
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1089:21
     |
1089 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1094:13
     |
1094 | /             match current_block {
1095 | |                 4476262310586904498 => {
1096 | |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1097 | |                         if len < buffersize {
...    |
1118 | |                 _ => {}
1119 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1094 ~             if current_block == 4476262310586904498 {
1095 +                 if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1096 +                     if len < buffersize {
1097 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1098 +                     }
1099 +                     len = len.wrapping_add(1);
1100 +                     len;
1101 +                     if len < buffersize {
1102 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1103 +                     }
1104 +                     len = len.wrapping_add(1);
1105 +                     len;
1106 +                     pending_shell_escape_end = 0 as libc::c_int != 0;
1107 +                 }
1108 +                 if len < buffersize {
1109 +                     *buffer.offset(len as isize) = c as libc::c_char;
1110 +                 }
1111 +                 len = len.wrapping_add(1);
1112 +                 len;
1113 +                 if !c_and_shell_quote_compat {
1114 +                     all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
1115 +                 }
1116 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1096:24
     |
1096 |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1098:60
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1098:44
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1098:44
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1101:25
     |
1101 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1103:60
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1103:44
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1103:44
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1106:25
     |
1106 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
    --> src/quotearg.rs:1110:56
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1110:40
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1110:40
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1113:21
     |
1113 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1121:13
     |
1121 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1123:19
     |
1123 |         if len == 0 as libc::c_int as libc::c_ulong
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1125:20
     |
1125 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1125:20
     |
1125 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1126:16
     |
1126 |             && elide_outer_quotes as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1132:16
     |
1132 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1132:16
     |
1132 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1133:39
     |
1133 |             && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(encountered_single_quote)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1156:19
     |
1156 |             len = 0 as libc::c_int as size_t;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1159:5
     |
1159 | /     match current_block {
1160 | |         7928555609993211441 => {
1161 | |             if quoting_style as libc::c_uint
1162 | |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1195 | |         }
1196 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1159 ~     if current_block == 7928555609993211441 {
1160 +         if quoting_style as libc::c_uint
1161 +             == shell_always_quoting_style as libc::c_int as libc::c_uint
1162 +             && backslash_escapes as libc::c_int != 0
1163 +         {
1164 +             quoting_style = shell_escape_always_quoting_style;
1165 +         }
1166 +         return quotearg_buffer_restyled(
1167 +             buffer,
1168 +             buffersize,
1169 +             arg,
1170 +             argsize,
1171 +             quoting_style,
1172 +             flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1173 +             0 as *const libc::c_uint,
1174 +             left_quote,
1175 +             right_quote,
1176 +         );
1177 +     } else {
1178 +         if !quote_string.is_null() && !elide_outer_quotes {
1179 +             while *quote_string != 0 {
1180 +                 if len < buffersize {
1181 +                     *buffer.offset(len as isize) = *quote_string;
1182 +                 }
1183 +                 len = len.wrapping_add(1);
1184 +                 len;
1185 +                 quote_string = quote_string.offset(1);
1186 +                 quote_string;
1187 +             }
1188 +         }
1189 +         if len < buffersize {
1190 +             *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
1191 +         }
1192 +         return len;
1193 ~     };
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1162:20
     |
1162 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1162:20
     |
1162 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1163:20
     |
1163 |                 && backslash_escapes as libc::c_int != 0
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1173:26
     |
1173 |                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *const _` detected
    --> src/quotearg.rs:1174:17
     |
1174 |                 0 as *const libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_uint>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1183:40
     |
1183 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1183:40
     |
1183 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1186:21
     |
1186 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1188:21
     |
1188 |                     quote_string;
     |                     ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1192:48
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1192:32
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1192:32
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1199:1
     |
1199 | / pub unsafe extern "C" fn quotearg_buffer(
1200 | |     mut buffer: *mut libc::c_char,
1201 | |     mut buffersize: size_t,
1202 | |     mut arg: *const libc::c_char,
...    |
1224 | |     return r;
1225 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1199:1
     |
1199 | / pub unsafe extern "C" fn quotearg_buffer(
1200 | |     mut buffer: *mut libc::c_char,
1201 | |     mut buffersize: size_t,
1202 | |     mut arg: *const libc::c_char,
...    |
1224 | |     return r;
1225 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1224:5
     |
1224 |     return r;
     |     ^^^^^^^^^ help: remove `return`: `r`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1206:41
     |
1206 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1207 | |         o
1208 | |     } else {
1209 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1210 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1209:9
     |
1209 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1227:1
     |
1227 | / pub unsafe extern "C" fn quotearg_alloc(
1228 | |     mut arg: *const libc::c_char,
1229 | |     mut argsize: size_t,
1230 | |     mut o: *const quoting_options,
1231 | | ) -> *mut libc::c_char {
1232 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1233 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1227:1
     |
1227 | / pub unsafe extern "C" fn quotearg_alloc(
1228 | |     mut arg: *const libc::c_char,
1229 | |     mut argsize: size_t,
1230 | |     mut o: *const quoting_options,
1231 | | ) -> *mut libc::c_char {
1232 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1233 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1232:5
     |
1232 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1232:45
     |
1232 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |                                             ^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<size_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1235:1
     |
1235 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1236 | |     mut arg: *const libc::c_char,
1237 | |     mut argsize: size_t,
1238 | |     mut size: *mut size_t,
...    |
1281 | |     return buf;
1282 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1235:1
     |
1235 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1236 | |     mut arg: *const libc::c_char,
1237 | |     mut argsize: size_t,
1238 | |     mut size: *mut size_t,
...    |
1281 | |     return buf;
1282 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1281:5
     |
1281 |     return buf;
     |     ^^^^^^^^^^^ help: remove `return`: `buf`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1241:41
     |
1241 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1242 | |         o
1243 | |     } else {
1244 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1245 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1244:9
     |
1244 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1248:11
     |
1248 |           | (if !size.is_null() {
     |  ___________^
1249 | |             0 as libc::c_int
1250 | |         } else {
1251 | |             QA_ELIDE_NULL_BYTES as libc::c_int
1252 | |         });
     | |__________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1251:13
     |
1251 |             QA_ELIDE_NULL_BYTES as libc::c_int
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1254:9
     |
1254 |         0 as *mut libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1255:9
     |
1255 |         0 as libc::c_int as size_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1264:23
     |
1264 |         .wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1279:38
     |
1279 |         *size = bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1291:9
     |
1287 | /         let mut init = slotvec {
1288 | |             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1289 | |             val: slot0.as_ptr() as *mut _,
1290 | |         };
     | |__________- unnecessary `let` binding
1291 |           init
     |           ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1287 ~         
1288 ~         slotvec {
1289 +             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1290 +             val: slot0.as_ptr() as *mut _,
1291 +         }
     |

warning: borrow as raw pointer
    --> src/quotearg.rs:1295:5
     |
1295 |     &slotvec0 as *const slotvec as *mut slotvec
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1298:1
     |
1298 | / pub unsafe extern "C" fn quotearg_free() {
1299 | |     let mut sv: *mut slotvec = slotvec;
1300 | |     let mut i: libc::c_int = 0;
1301 | |     i = 1 as libc::c_int;
...    |
1316 | |     nslots = 1 as libc::c_int;
1317 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1298:1
     |
1298 | / pub unsafe extern "C" fn quotearg_free() {
1299 | |     let mut sv: *mut slotvec = slotvec;
1300 | |     let mut i: libc::c_int = 0;
1301 | |     i = 1 as libc::c_int;
...    |
1316 | |     nslots = 1 as libc::c_int;
1317 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1303:14
     |
1303 |         free((*sv.offset(i as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(i as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: statement with no effect
    --> src/quotearg.rs:1305:9
     |
1305 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1308:14
     |
1308 |         free((*sv.offset(0 as libc::c_int as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(0 as libc::c_int as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: borrow as raw pointer
    --> src/quotearg.rs:1312:14
     |
1312 |     if sv != &mut slotvec0 as *mut slotvec {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1313:14
     |
1313 |         free(sv as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
    --> src/quotearg.rs:1395:5
     |
1395 |     return val;
     |     ^^^^^^^^^^^ help: remove `return`: `val`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1326:39
     |
1326 |       let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |  _______________________________________^
1327 | |         < 9223372036854775807 as libc::c_long
1328 | |     {
1329 | |         2147483647 as libc::c_int as libc::c_long
1330 | |     } else {
1331 | |         9223372036854775807 as libc::c_long
1332 | |     }) as libc::c_int;
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1326:43
     |
1326 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1329:9
     |
1329 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/quotearg.rs:1337:44
     |
1337 |         let mut preallocated: bool = sv == &mut slotvec0 as *mut slotvec;
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1338:37
     |
1338 |         let mut new_nslots: idx_t = nslots as idx_t;
     |                                     ^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1339:14
     |
1339 |           sv = xpalloc(
     |  ______________^
1340 | |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 | |                 as *mut libc::c_void,
1342 | |             &mut new_nslots,
...    |
1345 | |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1346 | |         ) as *mut slotvec;
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1339 ~         sv = xpalloc(
1340 +             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 +                 as *mut libc::c_void,
1342 +             &mut new_nslots,
1343 +             (n - nslots + 1 as libc::c_int) as idx_t,
1344 +             nslots_max as ptrdiff_t,
1345 +             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1346 ~         ).cast::<src::quotearg::slotvec>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1340:13
     |
1340 | /             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 | |                 as *mut libc::c_void,
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `(if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv }).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/quotearg.rs:1340:13
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1340:17
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(preallocated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1340:52
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                                                    ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<slotvec>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1343:13
     |
1343 |             (n - nslots + 1 as libc::c_int) as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n - nslots + 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1344:13
     |
1344 |             nslots_max as ptrdiff_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots_max)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/quotearg.rs:1345:13
     |
1345 |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1352:13
     |
1352 |             sv.offset(nslots as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.offset(nslots as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1354:13
     |
1354 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1354:28
     |
1354 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1357:18
     |
1357 |         nslots = new_nslots as libc::c_int;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1361:53
     |
1361 |     let mut flags: libc::c_int = (*options).flags | QA_ELIDE_NULL_BYTES as libc::c_int;
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1374:35
     |
1374 |         size = qsize.wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1377:18
     |
1377 |             free(val as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/quotearg.rs:1380:13
     |
1380 |         let ref mut fresh0 = (*sv.offset(n as isize)).val;
     |         ----^^^^^^^^^^^^^^-------------------------------- help: try: `let fresh0 = &mut (*sv.offset(n as isize)).val;`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1398:1
     |
1398 | / pub unsafe extern "C" fn quotearg_n(
1399 | |     mut n: libc::c_int,
1400 | |     mut arg: *const libc::c_char,
1401 | | ) -> *mut libc::c_char {
...    |
1407 | |     );
1408 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1398:1
     |
1398 | / pub unsafe extern "C" fn quotearg_n(
1399 | |     mut n: libc::c_int,
1400 | |     mut arg: *const libc::c_char,
1401 | | ) -> *mut libc::c_char {
...    |
1407 | |     );
1408 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1402:5
     |
1402 | /     return quotearg_n_options(
1403 | |         n,
1404 | |         arg,
1405 | |         18446744073709551615 as libc::c_ulong,
1406 | |         &mut default_quoting_options,
1407 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1402 ~     quotearg_n_options(
1403 +         n,
1404 +         arg,
1405 +         18446744073709551615 as libc::c_ulong,
1406 +         &mut default_quoting_options,
1407 +     )
     |

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1406:9
     |
1406 |         &mut default_quoting_options,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1410:1
     |
1410 | / pub unsafe extern "C" fn quotearg_n_mem(
1411 | |     mut n: libc::c_int,
1412 | |     mut arg: *const libc::c_char,
1413 | |     mut argsize: size_t,
1414 | | ) -> *mut libc::c_char {
1415 | |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
1416 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1410:1
     |
1410 | / pub unsafe extern "C" fn quotearg_n_mem(
1411 | |     mut n: libc::c_int,
1412 | |     mut arg: *const libc::c_char,
1413 | |     mut argsize: size_t,
1414 | | ) -> *mut libc::c_char {
1415 | |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
1416 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1415:5
     |
1415 |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1415:48
     |
1415 |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1418:1
     |
1418 | / pub unsafe extern "C" fn quotearg(mut arg: *const libc::c_char) -> *mut libc::c_char {
1419 | |     return quotearg_n(0 as libc::c_int, arg);
1420 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1419:5
     |
1419 |     return quotearg_n(0 as libc::c_int, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n(0 as libc::c_int, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1422:1
     |
1422 | / pub unsafe extern "C" fn quotearg_mem(
1423 | |     mut arg: *const libc::c_char,
1424 | |     mut argsize: size_t,
1425 | | ) -> *mut libc::c_char {
1426 | |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
1427 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1422:1
     |
1422 | / pub unsafe extern "C" fn quotearg_mem(
1423 | |     mut arg: *const libc::c_char,
1424 | |     mut argsize: size_t,
1425 | | ) -> *mut libc::c_char {
1426 | |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
1427 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1426:5
     |
1426 |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_mem(0 as libc::c_int, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1429:1
     |
1429 | / pub unsafe extern "C" fn quotearg_n_style(
1430 | |     mut n: libc::c_int,
1431 | |     mut s: quoting_style,
1432 | |     mut arg: *const libc::c_char,
...    |
1435 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1436 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1429:1
     |
1429 | / pub unsafe extern "C" fn quotearg_n_style(
1430 | |     mut n: libc::c_int,
1431 | |     mut s: quoting_style,
1432 | |     mut arg: *const libc::c_char,
...    |
1435 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1436 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1435:5
     |
1435 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1438:1
     |
1438 | / pub unsafe extern "C" fn quotearg_n_style_mem(
1439 | |     mut n: libc::c_int,
1440 | |     mut s: quoting_style,
1441 | |     mut arg: *const libc::c_char,
...    |
1445 | |     return quotearg_n_options(n, arg, argsize, &o);
1446 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1438:1
     |
1438 | / pub unsafe extern "C" fn quotearg_n_style_mem(
1439 | |     mut n: libc::c_int,
1440 | |     mut s: quoting_style,
1441 | |     mut arg: *const libc::c_char,
...    |
1445 | |     return quotearg_n_options(n, arg, argsize, &o);
1446 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1445:5
     |
1445 |     return quotearg_n_options(n, arg, argsize, &o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1448:1
     |
1448 | / pub unsafe extern "C" fn quotearg_style(
1449 | |     mut s: quoting_style,
1450 | |     mut arg: *const libc::c_char,
1451 | | ) -> *mut libc::c_char {
1452 | |     return quotearg_n_style(0 as libc::c_int, s, arg);
1453 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1448:1
     |
1448 | / pub unsafe extern "C" fn quotearg_style(
1449 | |     mut s: quoting_style,
1450 | |     mut arg: *const libc::c_char,
1451 | | ) -> *mut libc::c_char {
1452 | |     return quotearg_n_style(0 as libc::c_int, s, arg);
1453 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1452:5
     |
1452 |     return quotearg_n_style(0 as libc::c_int, s, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_style(0 as libc::c_int, s, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1455:1
     |
1455 | / pub unsafe extern "C" fn quotearg_style_mem(
1456 | |     mut s: quoting_style,
1457 | |     mut arg: *const libc::c_char,
1458 | |     mut argsize: size_t,
1459 | | ) -> *mut libc::c_char {
1460 | |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
1461 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1455:1
     |
1455 | / pub unsafe extern "C" fn quotearg_style_mem(
1456 | |     mut s: quoting_style,
1457 | |     mut arg: *const libc::c_char,
1458 | |     mut argsize: size_t,
1459 | | ) -> *mut libc::c_char {
1460 | |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
1461 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1460:5
     |
1460 |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_char_mem(
1464 | |     mut arg: *const libc::c_char,
1465 | |     mut argsize: size_t,
1466 | |     mut ch: libc::c_char,
...    |
1477 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_char_mem(
1464 | |     mut arg: *const libc::c_char,
1465 | |     mut argsize: size_t,
1466 | |     mut ch: libc::c_char,
...    |
1477 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1477:5
     |
1477 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
    --> src/quotearg.rs:1472:21
     |
1472 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1473:22
     |
1473 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1477:63
     |
1477 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |                                                               ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn quotearg_char(
1481 | |     mut arg: *const libc::c_char,
1482 | |     mut ch: libc::c_char,
1483 | | ) -> *mut libc::c_char {
1484 | |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
1485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn quotearg_char(
1481 | |     mut arg: *const libc::c_char,
1482 | |     mut ch: libc::c_char,
1483 | | ) -> *mut libc::c_char {
1484 | |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
1485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1484:5
     |
1484 |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1487:1
     |
1487 | / pub unsafe extern "C" fn quotearg_colon(
1488 | |     mut arg: *const libc::c_char,
1489 | | ) -> *mut libc::c_char {
1490 | |     return quotearg_char(arg, ':' as i32 as libc::c_char);
1491 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1487:1
     |
1487 | / pub unsafe extern "C" fn quotearg_colon(
1488 | |     mut arg: *const libc::c_char,
1489 | | ) -> *mut libc::c_char {
1490 | |     return quotearg_char(arg, ':' as i32 as libc::c_char);
1491 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1490:5
     |
1490 |     return quotearg_char(arg, ':' as i32 as libc::c_char);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char(arg, ':' as i32 as libc::c_char)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1490:31
     |
1490 |     return quotearg_char(arg, ':' as i32 as libc::c_char);
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1493:1
     |
1493 | / pub unsafe extern "C" fn quotearg_colon_mem(
1494 | |     mut arg: *const libc::c_char,
1495 | |     mut argsize: size_t,
1496 | | ) -> *mut libc::c_char {
1497 | |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
1498 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1493:1
     |
1493 | / pub unsafe extern "C" fn quotearg_colon_mem(
1494 | |     mut arg: *const libc::c_char,
1495 | |     mut argsize: size_t,
1496 | | ) -> *mut libc::c_char {
1497 | |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
1498 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1497:5
     |
1497 |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1497:44
     |
1497 |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1500:1
     |
1500 | / pub unsafe extern "C" fn quotearg_n_style_colon(
1501 | |     mut n: libc::c_int,
1502 | |     mut s: quoting_style,
1503 | |     mut arg: *const libc::c_char,
...    |
1519 | |     );
1520 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1500:1
     |
1500 | / pub unsafe extern "C" fn quotearg_n_style_colon(
1501 | |     mut n: libc::c_int,
1502 | |     mut s: quoting_style,
1503 | |     mut arg: *const libc::c_char,
...    |
1519 | |     );
1520 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1514:5
     |
1514 | /     return quotearg_n_options(
1515 | |         n,
1516 | |         arg,
1517 | |         18446744073709551615 as libc::c_ulong,
1518 | |         &mut options,
1519 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1514 ~     quotearg_n_options(
1515 +         n,
1516 +         arg,
1517 +         18446744073709551615 as libc::c_ulong,
1518 +         &mut options,
1519 +     )
     |

warning: `0 as *const _` detected
    --> src/quotearg.rs:1509:21
     |
1509 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1510:22
     |
1510 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1513:36
     |
1513 |     set_char_quoting(&mut options, ':' as i32 as libc::c_char, 1 as libc::c_int);
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1518:9
     |
1518 |         &mut options,
     |         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1522:1
     |
1522 | / pub unsafe extern "C" fn quotearg_n_custom(
1523 | |     mut n: libc::c_int,
1524 | |     mut left_quote: *const libc::c_char,
1525 | |     mut right_quote: *const libc::c_char,
...    |
1534 | |     );
1535 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1522:1
     |
1522 | / pub unsafe extern "C" fn quotearg_n_custom(
1523 | |     mut n: libc::c_int,
1524 | |     mut left_quote: *const libc::c_char,
1525 | |     mut right_quote: *const libc::c_char,
...    |
1534 | |     );
1535 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1528:5
     |
1528 | /     return quotearg_n_custom_mem(
1529 | |         n,
1530 | |         left_quote,
1531 | |         right_quote,
1532 | |         arg,
1533 | |         18446744073709551615 as libc::c_ulong,
1534 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1528 ~     quotearg_n_custom_mem(
1529 +         n,
1530 +         left_quote,
1531 +         right_quote,
1532 +         arg,
1533 +         18446744073709551615 as libc::c_ulong,
1534 +     )
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1537:1
     |
1537 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1538 | |     mut n: libc::c_int,
1539 | |     mut left_quote: *const libc::c_char,
1540 | |     mut right_quote: *const libc::c_char,
...    |
1546 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1547 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1537:1
     |
1537 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1538 | |     mut n: libc::c_int,
1539 | |     mut left_quote: *const libc::c_char,
1540 | |     mut right_quote: *const libc::c_char,
...    |
1546 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1547 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1546:5
     |
1546 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1546:48
     |
1546 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |                                                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1549:1
     |
1549 | / pub unsafe extern "C" fn quotearg_custom(
1550 | |     mut left_quote: *const libc::c_char,
1551 | |     mut right_quote: *const libc::c_char,
1552 | |     mut arg: *const libc::c_char,
1553 | | ) -> *mut libc::c_char {
1554 | |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
1555 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1549:1
     |
1549 | / pub unsafe extern "C" fn quotearg_custom(
1550 | |     mut left_quote: *const libc::c_char,
1551 | |     mut right_quote: *const libc::c_char,
1552 | |     mut arg: *const libc::c_char,
1553 | | ) -> *mut libc::c_char {
1554 | |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
1555 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1554:5
     |
1554 |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1557:1
     |
1557 | / pub unsafe extern "C" fn quotearg_custom_mem(
1558 | |     mut left_quote: *const libc::c_char,
1559 | |     mut right_quote: *const libc::c_char,
1560 | |     mut arg: *const libc::c_char,
...    |
1569 | |     );
1570 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1557:1
     |
1557 | / pub unsafe extern "C" fn quotearg_custom_mem(
1558 | |     mut left_quote: *const libc::c_char,
1559 | |     mut right_quote: *const libc::c_char,
1560 | |     mut arg: *const libc::c_char,
...    |
1569 | |     );
1570 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1563:5
     |
1563 | /     return quotearg_n_custom_mem(
1564 | |         0 as libc::c_int,
1565 | |         left_quote,
1566 | |         right_quote,
1567 | |         arg,
1568 | |         argsize,
1569 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1563 ~     quotearg_n_custom_mem(
1564 +         0 as libc::c_int,
1565 +         left_quote,
1566 +         right_quote,
1567 +         arg,
1568 +         argsize,
1569 +     )
     |

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1580:5
     |
1573 | /     let mut init = quoting_options {
1574 | |         style: locale_quoting_style,
1575 | |         flags: 0 as libc::c_int,
1576 | |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1577 | |         left_quote: 0 as *const libc::c_char,
1578 | |         right_quote: 0 as *const libc::c_char,
1579 | |     };
     | |______- unnecessary `let` binding
1580 |       init
     |       ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1573 ~     
1574 ~     quoting_options {
1575 +         style: locale_quoting_style,
1576 +         flags: 0 as libc::c_int,
1577 +         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1578 +         left_quote: 0 as *const libc::c_char,
1579 +         right_quote: 0 as *const libc::c_char,
1580 +     }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1576:27
     |
1576 |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1583:1
     |
1583 | / pub unsafe extern "C" fn quote_n_mem(
1584 | |     mut n: libc::c_int,
1585 | |     mut arg: *const libc::c_char,
1586 | |     mut argsize: size_t,
1587 | | ) -> *const libc::c_char {
1588 | |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
1589 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1588:5
     |
1588 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut quote_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1588:48
     |
1588 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1591:1
     |
1591 | / pub unsafe extern "C" fn quote_mem(
1592 | |     mut arg: *const libc::c_char,
1593 | |     mut argsize: size_t,
1594 | | ) -> *const libc::c_char {
1595 | |     return quote_n_mem(0 as libc::c_int, arg, argsize);
1596 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1595:5
     |
1595 |     return quote_n_mem(0 as libc::c_int, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(0 as libc::c_int, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1598:1
     |
1598 | / pub unsafe extern "C" fn quote_n(
1599 | |     mut n: libc::c_int,
1600 | |     mut arg: *const libc::c_char,
1601 | | ) -> *const libc::c_char {
1602 | |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
1603 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1602:5
     |
1602 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1605:1
     |
1605 | / pub unsafe extern "C" fn quote(mut arg: *const libc::c_char) -> *const libc::c_char {
1606 | |     return quote_n(0 as libc::c_int, arg);
1607 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1606:5
     |
1606 |     return quote_n(0 as libc::c_int, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n(0 as libc::c_int, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/safe_read.rs:12:1
   |
12 | / pub unsafe extern "C" fn safe_read(
13 | |     mut fd: libc::c_int,
14 | |     mut buf: *mut libc::c_void,
15 | |     mut count: size_t,
...  |
33 | |     };
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/safe_read.rs:19:12
   |
19 |         if 0 as libc::c_int as libc::c_long <= result {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_read.rs:20:20
   |
20 |             return result as size_t
   |                    ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_read.rs:26:20
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_read.rs:26:21
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_read.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_read.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_read.rs:30:24
   |
30 |                 return result as size_t
   |                        ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/safe_write.rs:12:1
   |
12 | / pub unsafe extern "C" fn safe_write(
13 | |     mut fd: libc::c_int,
14 | |     mut buf: *const libc::c_void,
15 | |     mut count: size_t,
...  |
33 | |     };
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/safe_write.rs:19:12
   |
19 |         if 0 as libc::c_int as libc::c_long <= result {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_write.rs:20:20
   |
20 |             return result as size_t
   |                    ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_write.rs:26:20
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_write.rs:26:21
   |
26 |                 && (SYS_BUFSIZE_MAX as libc::c_int as libc::c_ulong) < count
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/safe_write.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/safe_write.rs:28:25
   |
28 |                 count = SYS_BUFSIZE_MAX as libc::c_int as size_t;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/safe_write.rs:30:24
   |
30 |                 return result as size_t
   |                        ^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null.rs:12:1
   |
12 | / pub unsafe extern "C" fn setlocale_null_r(
13 | |     mut category: libc::c_int,
14 | |     mut buf: *mut libc::c_char,
15 | |     mut bufsize: size_t,
16 | | ) -> libc::c_int {
17 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/setlocale_null.rs:12:1
   |
12 | / pub unsafe extern "C" fn setlocale_null_r(
13 | |     mut category: libc::c_int,
14 | |     mut buf: *mut libc::c_char,
15 | |     mut bufsize: size_t,
16 | | ) -> libc::c_int {
17 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/setlocale_null.rs:17:5
   |
17 |     return setlocale_null_r_unlocked(category, buf, bufsize);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_r_unlocked(category, buf, bufsize)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null.rs:20:1
   |
20 | / pub unsafe extern "C" fn setlocale_null(
21 | |     mut category: libc::c_int,
22 | | ) -> *const libc::c_char {
23 | |     return setlocale_null_unlocked(category);
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null.rs:23:5
   |
23 |     return setlocale_null_unlocked(category);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_unlocked(category)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:16:1
   |
16 | / pub unsafe extern "C" fn setlocale_null_unlocked(
17 | |     mut category: libc::c_int,
18 | | ) -> *const libc::c_char {
19 | |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
20 | |     return result;
21 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:20:5
   |
20 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/setlocale_null_unlocked.rs:19:63
   |
19 |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:23:1
   |
23 | / pub unsafe extern "C" fn setlocale_null_r_unlocked(
24 | |     mut category: libc::c_int,
25 | |     mut buf: *mut libc::c_char,
26 | |     mut bufsize: size_t,
...  |
57 | |     };
58 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:33:9
   |
33 |         return 22 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `22 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:42:13
   |
42 |             return 0 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:55:13
   |
55 |             return 34 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `34 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:30:22
   |
30 |         if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:31:54
   |
31 |             *buf.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:38:17
   |
38 |                 buf as *mut libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:39:17
   |
39 |                 result as *const libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:40:37
   |
40 |                 length.wrapping_add(1 as libc::c_int as libc::c_ulong),
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:44:26
   |
44 |             if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:46:21
   |
46 |                     buf as *mut libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:47:21
   |
47 |                     result as *const libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:48:42
   |
48 |                     bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong),
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:53:25
   |
53 |                     ) = '\0' as i32 as libc::c_char;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:52:46
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:5:1
   |
5  | / pub unsafe extern "C" fn __gl_stdbit_clz(mut n: libc::c_uint) -> libc::c_int {
6  | |     return (if n != 0 {
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
...  |
11 | |     }) as libc::c_int;
12 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:5:1
   |
5  | / pub unsafe extern "C" fn __gl_stdbit_clz(mut n: libc::c_uint) -> libc::c_int {
6  | |     return (if n != 0 {
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
...  |
11 | |     }) as libc::c_int;
12 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:6:5
   |
6  | /     return (if n != 0 {
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
9  | |         (8 as libc::c_int as libc::c_ulong)
10 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
6  ~     (if n != 0 {
7  +         n.leading_zeros() as i32 as libc::c_ulong
8  +     } else {
9  +         (8 as libc::c_int as libc::c_ulong)
10 +             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:6:12
   |
6  |       return (if n != 0 {
   |  ____________^
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
9  | |         (8 as libc::c_int as libc::c_ulong)
10 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:6:12
   |
6  |       return (if n != 0 {
   |  ____________^
7  | |         n.leading_zeros() as i32 as libc::c_ulong
8  | |     } else {
9  | |         (8 as libc::c_int as libc::c_ulong)
10 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
11 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdbit.rs:7:9
  |
7 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
 --> src/stdbit.rs:7:9
  |
7 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdbit.rs:9:9
  |
9 |         (8 as libc::c_int as libc::c_ulong)
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:16:1
   |
16 | / pub unsafe extern "C" fn __gl_stdbit_clzl(mut n: libc::c_ulong) -> libc::c_int {
17 | |     return (if n != 0 {
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
...  |
22 | |     }) as libc::c_int;
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:16:1
   |
16 | / pub unsafe extern "C" fn __gl_stdbit_clzl(mut n: libc::c_ulong) -> libc::c_int {
17 | |     return (if n != 0 {
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
...  |
22 | |     }) as libc::c_int;
23 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:17:5
   |
17 | /     return (if n != 0 {
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
20 | |         (8 as libc::c_int as libc::c_ulong)
21 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
17 ~     (if n != 0 {
18 +         n.leading_zeros() as i32 as libc::c_ulong
19 +     } else {
20 +         (8 as libc::c_int as libc::c_ulong)
21 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:17:12
   |
17 |       return (if n != 0 {
   |  ____________^
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
20 | |         (8 as libc::c_int as libc::c_ulong)
21 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:17:12
   |
17 |       return (if n != 0 {
   |  ____________^
18 | |         n.leading_zeros() as i32 as libc::c_ulong
19 | |     } else {
20 | |         (8 as libc::c_int as libc::c_ulong)
21 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
22 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:18:9
   |
18 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:18:9
   |
18 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:20:9
   |
20 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:27:1
   |
27 | / pub unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
28 | |     return (if n != 0 {
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
...  |
33 | |     }) as libc::c_int;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:27:1
   |
27 | / pub unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
28 | |     return (if n != 0 {
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
...  |
33 | |     }) as libc::c_int;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:28:5
   |
28 | /     return (if n != 0 {
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
31 | |         (8 as libc::c_int as libc::c_ulong)
32 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
28 ~     (if n != 0 {
29 +         n.leading_zeros() as i32 as libc::c_ulong
30 +     } else {
31 +         (8 as libc::c_int as libc::c_ulong)
32 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:28:12
   |
28 |       return (if n != 0 {
   |  ____________^
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
31 | |         (8 as libc::c_int as libc::c_ulong)
32 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:28:12
   |
28 |       return (if n != 0 {
   |  ____________^
29 | |         n.leading_zeros() as i32 as libc::c_ulong
30 | |     } else {
31 | |         (8 as libc::c_int as libc::c_ulong)
32 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
33 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:29:9
   |
29 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:29:9
   |
29 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:31:9
   |
31 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:38:1
   |
38 | / pub unsafe extern "C" fn __gl_stdbit_ctz(mut n: libc::c_uint) -> libc::c_int {
39 | |     return (if n != 0 {
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
...  |
44 | |     }) as libc::c_int;
45 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:38:1
   |
38 | / pub unsafe extern "C" fn __gl_stdbit_ctz(mut n: libc::c_uint) -> libc::c_int {
39 | |     return (if n != 0 {
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
...  |
44 | |     }) as libc::c_int;
45 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:39:5
   |
39 | /     return (if n != 0 {
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
42 | |         (8 as libc::c_int as libc::c_ulong)
43 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
39 ~     (if n != 0 {
40 +         n.trailing_zeros() as i32 as libc::c_ulong
41 +     } else {
42 +         (8 as libc::c_int as libc::c_ulong)
43 +             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:39:12
   |
39 |       return (if n != 0 {
   |  ____________^
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
42 | |         (8 as libc::c_int as libc::c_ulong)
43 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:39:12
   |
39 |       return (if n != 0 {
   |  ____________^
40 | |         n.trailing_zeros() as i32 as libc::c_ulong
41 | |     } else {
42 | |         (8 as libc::c_int as libc::c_ulong)
43 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:40:9
   |
40 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:40:9
   |
40 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:42:9
   |
42 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:49:1
   |
49 | / pub unsafe extern "C" fn __gl_stdbit_ctzl(mut n: libc::c_ulong) -> libc::c_int {
50 | |     return (if n != 0 {
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
...  |
55 | |     }) as libc::c_int;
56 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:49:1
   |
49 | / pub unsafe extern "C" fn __gl_stdbit_ctzl(mut n: libc::c_ulong) -> libc::c_int {
50 | |     return (if n != 0 {
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
...  |
55 | |     }) as libc::c_int;
56 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:50:5
   |
50 | /     return (if n != 0 {
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
53 | |         (8 as libc::c_int as libc::c_ulong)
54 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
50 ~     (if n != 0 {
51 +         n.trailing_zeros() as i32 as libc::c_ulong
52 +     } else {
53 +         (8 as libc::c_int as libc::c_ulong)
54 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:50:12
   |
50 |       return (if n != 0 {
   |  ____________^
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
53 | |         (8 as libc::c_int as libc::c_ulong)
54 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:50:12
   |
50 |       return (if n != 0 {
   |  ____________^
51 | |         n.trailing_zeros() as i32 as libc::c_ulong
52 | |     } else {
53 | |         (8 as libc::c_int as libc::c_ulong)
54 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
55 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:51:9
   |
51 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:51:9
   |
51 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:53:9
   |
53 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdbit.rs:60:1
   |
60 | / pub unsafe extern "C" fn __gl_stdbit_ctzll(mut n: libc::c_ulonglong) -> libc::c_int {
61 | |     return (if n != 0 {
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
...  |
66 | |     }) as libc::c_int;
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/stdbit.rs:60:1
   |
60 | / pub unsafe extern "C" fn __gl_stdbit_ctzll(mut n: libc::c_ulonglong) -> libc::c_int {
61 | |     return (if n != 0 {
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
...  |
66 | |     }) as libc::c_int;
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdbit.rs:61:5
   |
61 | /     return (if n != 0 {
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
64 | |         (8 as libc::c_int as libc::c_ulong)
65 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
61 ~     (if n != 0 {
62 +         n.trailing_zeros() as i32 as libc::c_ulong
63 +     } else {
64 +         (8 as libc::c_int as libc::c_ulong)
65 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdbit.rs:61:12
   |
61 |       return (if n != 0 {
   |  ____________^
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
64 | |         (8 as libc::c_int as libc::c_ulong)
65 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdbit.rs:61:12
   |
61 |       return (if n != 0 {
   |  ____________^
62 | |         n.trailing_zeros() as i32 as libc::c_ulong
63 | |     } else {
64 | |         (8 as libc::c_int as libc::c_ulong)
65 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
66 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:62:9
   |
62 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdbit.rs:62:9
   |
62 |         n.trailing_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdbit.rs:64:9
   |
64 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:3:1
   |
3  | / unsafe extern "C" fn __gl_stdbit_clz(mut n: libc::c_uint) -> libc::c_int {
4  | |     return (if n != 0 {
5  | |         n.leading_zeros() as i32 as libc::c_ulong
6  | |     } else {
...  |
9  | |     }) as libc::c_int;
10 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
 --> src/stdc_leading_zeros.rs:4:5
  |
4 | /     return (if n != 0 {
5 | |         n.leading_zeros() as i32 as libc::c_ulong
6 | |     } else {
7 | |         (8 as libc::c_int as libc::c_ulong)
8 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 | |     }) as libc::c_int;
  | |______________________^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
  |
4 ~     (if n != 0 {
5 +         n.leading_zeros() as i32 as libc::c_ulong
6 +     } else {
7 +         (8 as libc::c_int as libc::c_ulong)
8 +             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 +     }) as libc::c_int
  |

warning: casting `u64` to `i32` may truncate the value
 --> src/stdc_leading_zeros.rs:4:12
  |
4 |       return (if n != 0 {
  |  ____________^
5 | |         n.leading_zeros() as i32 as libc::c_ulong
6 | |     } else {
7 | |         (8 as libc::c_int as libc::c_ulong)
8 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 | |     }) as libc::c_int;
  | |_____________________^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
 --> src/stdc_leading_zeros.rs:4:12
  |
4 |       return (if n != 0 {
  |  ____________^
5 | |         n.leading_zeros() as i32 as libc::c_ulong
6 | |     } else {
7 | |         (8 as libc::c_int as libc::c_ulong)
8 | |             .wrapping_mul(::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
9 | |     }) as libc::c_int;
  | |______^
  |
  = help: change to `==` and swap the blocks of the `if`/`else`
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdc_leading_zeros.rs:5:9
  |
5 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
 --> src/stdc_leading_zeros.rs:5:9
  |
5 |         n.leading_zeros() as i32 as libc::c_ulong
  |         ^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
 --> src/stdc_leading_zeros.rs:7:9
  |
7 |         (8 as libc::c_int as libc::c_ulong)
  |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:12:1
   |
12 | / unsafe extern "C" fn __gl_stdbit_clzl(mut n: libc::c_ulong) -> libc::c_int {
13 | |     return (if n != 0 {
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
...  |
18 | |     }) as libc::c_int;
19 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:13:5
   |
13 | /     return (if n != 0 {
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
16 | |         (8 as libc::c_int as libc::c_ulong)
17 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     (if n != 0 {
14 +         n.leading_zeros() as i32 as libc::c_ulong
15 +     } else {
16 +         (8 as libc::c_int as libc::c_ulong)
17 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdc_leading_zeros.rs:13:12
   |
13 |       return (if n != 0 {
   |  ____________^
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
16 | |         (8 as libc::c_int as libc::c_ulong)
17 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdc_leading_zeros.rs:13:12
   |
13 |       return (if n != 0 {
   |  ____________^
14 | |         n.leading_zeros() as i32 as libc::c_ulong
15 | |     } else {
16 | |         (8 as libc::c_int as libc::c_ulong)
17 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulong>() as libc::c_ulong)
18 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:14:9
   |
14 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:14:9
   |
14 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:16:9
   |
16 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
  --> src/stdc_leading_zeros.rs:21:1
   |
21 | / unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
22 | |     return (if n != 0 {
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
...  |
27 | |     }) as libc::c_int;
28 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:22:5
   |
22 | /     return (if n != 0 {
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
25 | |         (8 as libc::c_int as libc::c_ulong)
26 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
22 ~     (if n != 0 {
23 +         n.leading_zeros() as i32 as libc::c_ulong
24 +     } else {
25 +         (8 as libc::c_int as libc::c_ulong)
26 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 +     }) as libc::c_int
   |

warning: casting `u64` to `i32` may truncate the value
  --> src/stdc_leading_zeros.rs:22:12
   |
22 |       return (if n != 0 {
   |  ____________^
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
25 | |         (8 as libc::c_int as libc::c_ulong)
26 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
  --> src/stdc_leading_zeros.rs:22:12
   |
22 |       return (if n != 0 {
   |  ____________^
23 | |         n.leading_zeros() as i32 as libc::c_ulong
24 | |     } else {
25 | |         (8 as libc::c_int as libc::c_ulong)
26 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
27 | |     }) as libc::c_int;
   | |______^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:23:9
   |
23 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/stdc_leading_zeros.rs:23:9
   |
23 |         n.leading_zeros() as i32 as libc::c_ulong
   |         ^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:25:9
   |
25 |         (8 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:32:1
   |
32 | / pub unsafe extern "C" fn stdc_leading_zeros_ui(mut n: libc::c_uint) -> libc::c_uint {
33 | |     return __gl_stdbit_clz(n) as libc::c_uint;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:32:1
   |
32 | / pub unsafe extern "C" fn stdc_leading_zeros_ui(mut n: libc::c_uint) -> libc::c_uint {
33 | |     return __gl_stdbit_clz(n) as libc::c_uint;
34 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:33:5
   |
33 |     return __gl_stdbit_clz(n) as libc::c_uint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clz(n) as libc::c_uint`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:33:12
   |
33 |     return __gl_stdbit_clz(n) as libc::c_uint;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:38:1
   |
38 | / pub unsafe extern "C" fn stdc_leading_zeros_uc(mut n: libc::c_uchar) -> libc::c_uint {
39 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
...  |
48 | |         ) as libc::c_uint;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:38:1
   |
38 | / pub unsafe extern "C" fn stdc_leading_zeros_uc(mut n: libc::c_uchar) -> libc::c_uint {
39 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
...  |
48 | |         ) as libc::c_uint;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:39:5
   |
39 | /     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
42 | |                 .wrapping_mul(
...  |
47 | |                 ),
48 | |         ) as libc::c_uint;
   | |__________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
39 ~     (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
40 +         .wrapping_sub(
41 +             (8 as libc::c_int as libc::c_ulong)
42 +                 .wrapping_mul(
43 +                     (::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
44 +                         .wrapping_sub(
45 +                             ::core::mem::size_of::<libc::c_uchar>() as libc::c_ulong,
46 +                         ),
47 +                 ),
48 +         ) as libc::c_uint
   |

warning: casting `u64` to `u32` may truncate the value
  --> src/stdc_leading_zeros.rs:39:12
   |
39 |       return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |  ____________^
40 | |         .wrapping_sub(
41 | |             (8 as libc::c_int as libc::c_ulong)
42 | |                 .wrapping_mul(
...  |
47 | |                 ),
48 | |         ) as libc::c_uint;
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:39:12
   |
39 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(stdc_leading_zeros_ui(n as libc::c_uint))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:39:35
   |
39 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |                                   ^^^^^^^^^^^^^^^^^ help: try: `u32::from(n)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:41:13
   |
41 |             (8 as libc::c_int as libc::c_ulong)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:53:1
   |
53 | / pub unsafe extern "C" fn stdc_leading_zeros_us(mut n: libc::c_ushort) -> libc::c_uint {
54 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
...  |
63 | |         ) as libc::c_uint;
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:53:1
   |
53 | / pub unsafe extern "C" fn stdc_leading_zeros_us(mut n: libc::c_ushort) -> libc::c_uint {
54 | |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
...  |
63 | |         ) as libc::c_uint;
64 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:54:5
   |
54 | /     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
57 | |                 .wrapping_mul(
...  |
62 | |                 ),
63 | |         ) as libc::c_uint;
   | |__________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
54 ~     (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
55 +         .wrapping_sub(
56 +             (8 as libc::c_int as libc::c_ulong)
57 +                 .wrapping_mul(
58 +                     (::core::mem::size_of::<libc::c_uint>() as libc::c_ulong)
59 +                         .wrapping_sub(
60 +                             ::core::mem::size_of::<libc::c_ushort>() as libc::c_ulong,
61 +                         ),
62 +                 ),
63 +         ) as libc::c_uint
   |

warning: casting `u64` to `u32` may truncate the value
  --> src/stdc_leading_zeros.rs:54:12
   |
54 |       return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |  ____________^
55 | |         .wrapping_sub(
56 | |             (8 as libc::c_int as libc::c_ulong)
57 | |                 .wrapping_mul(
...  |
62 | |                 ),
63 | |         ) as libc::c_uint;
   | |_________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `u64` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:54:12
   |
54 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(stdc_leading_zeros_ui(n as libc::c_uint))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `u32` may become silently lossy if you later change the type
  --> src/stdc_leading_zeros.rs:54:35
   |
54 |     return (stdc_leading_zeros_ui(n as libc::c_uint) as libc::c_ulong)
   |                                   ^^^^^^^^^^^^^^^^^ help: try: `u32::from(n)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:56:13
   |
56 |             (8 as libc::c_int as libc::c_ulong)
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:68:1
   |
68 | / pub unsafe extern "C" fn stdc_leading_zeros_ul(mut n: libc::c_ulong) -> libc::c_uint {
69 | |     return __gl_stdbit_clzl(n) as libc::c_uint;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:68:1
   |
68 | / pub unsafe extern "C" fn stdc_leading_zeros_ul(mut n: libc::c_ulong) -> libc::c_uint {
69 | |     return __gl_stdbit_clzl(n) as libc::c_uint;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:69:5
   |
69 |     return __gl_stdbit_clzl(n) as libc::c_uint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clzl(n) as libc::c_uint`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:69:12
   |
69 |     return __gl_stdbit_clzl(n) as libc::c_uint;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/stdc_leading_zeros.rs:74:1
   |
74 | / pub unsafe extern "C" fn stdc_leading_zeros_ull(
75 | |     mut n: libc::c_ulonglong,
76 | | ) -> libc::c_uint {
77 | |     return __gl_stdbit_clzll(n) as libc::c_uint;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/stdc_leading_zeros.rs:74:1
   |
74 | / pub unsafe extern "C" fn stdc_leading_zeros_ull(
75 | |     mut n: libc::c_ulonglong,
76 | | ) -> libc::c_uint {
77 | |     return __gl_stdbit_clzll(n) as libc::c_uint;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/stdc_leading_zeros.rs:77:5
   |
77 |     return __gl_stdbit_clzll(n) as libc::c_uint;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clzll(n) as libc::c_uint`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
  --> src/stdc_leading_zeros.rs:77:12
   |
77 |     return __gl_stdbit_clzll(n) as libc::c_uint;
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
 --> src/version.rs:3:47
  |
3 |   pub static mut Version: *const libc::c_char = b"9.5.42-bbc97\0" as *const u8
  |  _______________________________________________^
4 | |     as *const libc::c_char;
  | |__________________________^ help: try `pointer::cast`, a safer alternative: `(b"9.5.42-bbc97\0" as *const u8).cast::<i8>()`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary structure name repetition
  --> src/version_etc.rs:43:22
   |
43 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/version_etc.rs:54:29
   |
54 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (174/100)
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary boolean `not` operation
  --> src/version_etc.rs:73:5
   |
73 | /     if !command_name.is_null() {
74 | |         fprintf(
75 | |             stream,
76 | |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
...  |
87 | |         );
88 | |     }
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:76:13
   |
76 |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s (%s) %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:84:13
   |
84 |             b"%s %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:92:17
   |
92 |         gettext(b"(C)\0" as *const u8 as *const libc::c_char),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"(C)\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
  --> src/version_etc.rs:93:9
   |
93 |         COPYRIGHT_YEAR as libc::c_int,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:95:20
   |
95 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:99:13
    |
99  | /             b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere...
100 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:102:9
    |
102 |         b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://gnu.org/licenses/gpl.html\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:104:20
    |
104 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:110:25
    |
110 |                 gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:118:21
    |
118 |                     b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:128:21
    |
128 |                     b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:139:21
    |
139 | /                     b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
140 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:152:21
    |
152 | /                     b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
153 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:166:21
    |
166 | /                     b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
167 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:181:21
    |
181 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
182 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:197:21
    |
197 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
198 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:214:21
    |
214 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
215 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:232:21
    |
232 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
233 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:249:1
    |
249 | / pub unsafe extern "C" fn version_etc_ar(
250 | |     mut stream: *mut FILE,
251 | |     mut command_name: *const libc::c_char,
252 | |     mut package: *const libc::c_char,
...   |
262 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
263 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:249:1
    |
249 | / pub unsafe extern "C" fn version_etc_ar(
250 | |     mut stream: *mut FILE,
251 | |     mut command_name: *const libc::c_char,
252 | |     mut package: *const libc::c_char,
...   |
262 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
263 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:257:17
    |
257 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:258:29
    |
258 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/version_etc.rs:258:29
    |
258 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/version_etc.rs:260:9
    |
260 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:265:1
    |
265 | / pub unsafe extern "C" fn version_etc_va(
266 | |     mut stream: *mut FILE,
267 | |     mut command_name: *const libc::c_char,
268 | |     mut package: *const libc::c_char,
...   |
291 | |     );
292 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:265:1
    |
265 | / pub unsafe extern "C" fn version_etc_va(
266 | |     mut stream: *mut FILE,
267 | |     mut command_name: *const libc::c_char,
268 | |     mut package: *const libc::c_char,
...   |
291 | |     );
292 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/version_etc.rs:273:51
    |
273 |     let mut authtab: [*const libc::c_char; 10] = [0 as *const libc::c_char; 10];
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:274:17
    |
274 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:275:23
    |
275 |     while n_authors < 10 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:277:21
    |
277 |             authtab[n_authors as usize] = authors.arg::<*const libc::c_char>();
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:278:23
    |
278 |             !(authtab[n_authors as usize]).is_null()
    |                       ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
   --> src/version_etc.rs:282:9
    |
282 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:294:1
    |
294 | / pub unsafe extern "C" fn version_etc(
295 | |     mut stream: *mut FILE,
296 | |     mut command_name: *const libc::c_char,
297 | |     mut package: *const libc::c_char,
...   |
303 | |     version_etc_va(stream, command_name, package, version, authors.as_va_list());
304 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:306:1
    |
306 | / pub unsafe extern "C" fn emit_bug_reporting_address() {
307 | |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stdout);
308 | |     printf(
309 | |         gettext(b"Report bugs to: %s\n\0" as *const u8 as *const libc::c_char),
...   |
323 | |     );
324 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:307:20
    |
307 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stdout);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:309:17
    |
309 |         gettext(b"Report bugs to: %s\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Report bugs to: %s\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:310:9
    |
310 |         b"bug-coreutils@gnu.org\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"bug-coreutils@gnu.org\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:313:17
    |
313 |         gettext(b"%s home page: <%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s home page: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:314:9
    |
314 |         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:315:9
    |
315 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:319:13
    |
319 | /             b"General help using GNU software: <%s>\n\0" as *const u8
320 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"General help using GNU software: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:322:9
    |
322 |         b"https://www.gnu.org/gethelp/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/gethelp/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
  --> src/xalignalloc.rs:20:5
   |
20 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:14:8
   |
14 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:14:42
   |
14 |     if (-(1 as libc::c_int) as size_t) < alignment as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/xalignalloc.rs:15:21
   |
15 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:15:21
   |
15 |         alignment = -(1 as libc::c_int) as size_t as idx_t;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:17:8
   |
17 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:17:42
   |
17 |     if (-(1 as libc::c_int) as size_t) < size as libc::c_ulong {
   |                                          ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
  --> src/xalignalloc.rs:18:16
   |
18 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:18:16
   |
18 |         size = -(1 as libc::c_int) as size_t as idx_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:20:26
   |
20 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xalignalloc.rs:20:54
   |
20 |     return aligned_alloc(alignment as libc::c_ulong, size as libc::c_ulong);
   |                                                      ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/xalignalloc.rs:23:1
   |
23 | / pub unsafe extern "C" fn xalignalloc(
24 | |     mut alignment: idx_t,
25 | |     mut size: idx_t,
26 | | ) -> *mut libc::c_void {
...  |
31 | |     return p;
32 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/xalignalloc.rs:31:5
   |
31 |     return p;
   |     ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/xalloc_die.rs:14:1
   |
14 | / pub unsafe extern "C" fn xalloc_die() {
15 | |     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
...  |
53 | |     abort();
54 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:15:5
   |
15 | /     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
18 | |             0 as libc::c_int,
...  |
51 | |         });
52 | |     };
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xalloc_die.rs:15:8
   |
15 |     if 0 != 0 {
   |        ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:19:13
   |
19 |             b"%s\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:20:21
   |
20 |             gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:22:9
   |
22 | /         if exit_failure != 0 as libc::c_int {
23 | |             unreachable!();
24 | |         } else {};
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:27:13
   |
27 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:31:17
   |
31 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:32:25
   |
32 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:34:13
   |
34 | /             if __errstatus != 0 as libc::c_int {
35 | |                 unreachable!();
36 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:40:13
   |
40 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:44:17
   |
44 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:45:25
   |
45 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:47:13
   |
47 | /             if __errstatus != 0 as libc::c_int {
48 | |                 unreachable!();
49 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
 --> src/xbinary_io.rs:5:1
  |
5 | / pub unsafe extern "C" fn xset_binary_mode(mut fd: libc::c_int, mut mode: libc::c_int) {
6 | |     if set_binary_mode(fd, mode) < 0 as libc::c_int {
7 | |         xset_binary_mode_error();
8 | |     }
9 | | }
  | |_^
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/xbinary_io.rs:13:1
   |
13 | pub unsafe extern "C" fn xset_binary_mode_error() {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/xbinary_io.rs:13:1
   |
13 | pub unsafe extern "C" fn xset_binary_mode_error() {}
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/xbinary_io.rs:19:5
   |
19 |     return __gl_setmode(fd, mode);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_setmode(fd, mode)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/xbinary_io.rs:22:1
   |
22 | / unsafe extern "C" fn __gl_setmode(
23 | |     mut _fd: libc::c_int,
24 | |     mut _mode: libc::c_int,
25 | | ) -> libc::c_int {
26 | |     return 0 as libc::c_int;
27 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/xbinary_io.rs:26:5
   |
26 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:34:9
   |
34 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:36:9
   |
36 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:32:8
   |
32 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:33:24
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:33:29
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((s == 0) as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xmalloc.rs:33:29
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(s == 0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unneeded `return` statement
  --> src/xmalloc.rs:53:5
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `calloc(n as libc::c_ulong, s as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:41:50
   |
41 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:42:17
   |
42 |         if s != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:45:13
   |
45 |         n = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:47:50
   |
47 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:48:17
   |
48 |         if n != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:51:13
   |
51 |         s = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:53:19
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                   ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:53:39
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                                       ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:72:9
   |
72 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:74:9
   |
74 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:61:8
   |
61 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:62:12
   |
62 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |            ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:64:30
   |
64 |         let mut nx: size_t = n as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:65:30
   |
65 |         let mut sx: size_t = s as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:66:17
   |
66 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:66:58
   |
66 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:68:18
   |
68 |             sx = 1 as libc::c_int as size_t;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:81:5
   |
81 |     return 0 as *mut libc::c_void;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/xmalloc.rs:81:12
   |
81 |     return 0 as *mut libc::c_void;
   |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
  --> src/xmalloc.rs:85:5
   |
85 | /     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
86 | |         malloc(s as libc::c_ulong)
87 | |     } else {
88 | |         _gl_alloc_nomem()
89 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
85 ~     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
86 +         malloc(s as libc::c_ulong)
87 +     } else {
88 +         _gl_alloc_nomem()
89 +     }
   |

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:85:15
   |
85 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:86:16
   |
86 |         malloc(s as libc::c_ulong)
   |                ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:95:5
   |
95 |     return p;
   |     ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:98:1
    |
98  | / pub unsafe extern "C" fn xmalloc(mut s: size_t) -> *mut libc::c_void {
99  | |     return check_nonnull(malloc(s));
100 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/xmalloc.rs:99:5
   |
99 |     return check_nonnull(malloc(s));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(malloc(s))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:102:1
    |
102 | / pub unsafe extern "C" fn ximalloc(mut s: idx_t) -> *mut libc::c_void {
103 | |     return check_nonnull(imalloc(s));
104 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:103:5
    |
103 |     return check_nonnull(imalloc(s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(imalloc(s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:106:1
    |
106 | / pub unsafe extern "C" fn xcharalloc(mut n: size_t) -> *mut libc::c_char {
107 | |     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
...   |
113 | |     }) as *mut libc::c_char;
114 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:107:5
    |
107 | /     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
110 | |         xmalloc(n)
111 | |     } else {
112 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 | |     }) as *mut libc::c_char;
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
107 ~     (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 +         == 1 as libc::c_int as libc::c_ulong
109 +     {
110 +         xmalloc(n)
111 +     } else {
112 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 +     }) as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:107:12
    |
107 |       return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
    |  ____________^
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
110 | |         xmalloc(n)
111 | |     } else {
112 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 | |     }) as *mut libc::c_char;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
107 ~     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 +         == 1 as libc::c_int as libc::c_ulong
109 +     {
110 +         xmalloc(n)
111 +     } else {
112 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 ~     }).cast::<i8>();
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:108:12
    |
108 |         == 1 as libc::c_int as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:116:1
    |
116 | / pub unsafe extern "C" fn xrealloc(
117 | |     mut p: *mut libc::c_void,
118 | |     mut s: size_t,
119 | | ) -> *mut libc::c_void {
...   |
124 | |     return r;
125 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:124:5
    |
124 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:127:1
    |
127 | / pub unsafe extern "C" fn xirealloc(
128 | |     mut p: *mut libc::c_void,
129 | |     mut s: idx_t,
130 | | ) -> *mut libc::c_void {
131 | |     return check_nonnull(irealloc(p, s));
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:131:5
    |
131 |     return check_nonnull(irealloc(p, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(irealloc(p, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:134:1
    |
134 | / pub unsafe extern "C" fn xreallocarray(
135 | |     mut p: *mut libc::c_void,
136 | |     mut n: size_t,
137 | |     mut s: size_t,
...   |
143 | |     return r;
144 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:143:5
    |
143 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:146:1
    |
146 | / pub unsafe extern "C" fn xireallocarray(
147 | |     mut p: *mut libc::c_void,
148 | |     mut n: idx_t,
149 | |     mut s: idx_t,
150 | | ) -> *mut libc::c_void {
151 | |     return check_nonnull(ireallocarray(p, n, s));
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:151:5
    |
151 |     return check_nonnull(ireallocarray(p, n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ireallocarray(p, n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:154:1
    |
154 | / pub unsafe extern "C" fn xnmalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
155 | |     return xreallocarray(0 as *mut libc::c_void, n, s);
156 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:155:5
    |
155 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xreallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:155:26
    |
155 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:158:1
    |
158 | / pub unsafe extern "C" fn xinmalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
159 | |     return xireallocarray(0 as *mut libc::c_void, n, s);
160 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:159:5
    |
159 |     return xireallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xireallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:159:27
    |
159 |     return xireallocarray(0 as *mut libc::c_void, n, s);
    |                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:162:1
    |
162 | / pub unsafe extern "C" fn x2realloc(
163 | |     mut p: *mut libc::c_void,
164 | |     mut ps: *mut size_t,
165 | | ) -> *mut libc::c_void {
166 | |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
167 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:166:5
    |
166 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `x2nrealloc(p, ps, 1 as libc::c_int as size_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:166:30
    |
166 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:169:1
    |
169 | / pub unsafe extern "C" fn x2nrealloc(
170 | |     mut p: *mut libc::c_void,
171 | |     mut pn: *mut size_t,
172 | |     mut s: size_t,
...   |
194 | |     return p;
195 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:194:5
    |
194 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:177:17
    |
177 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:177:18
    |
177 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:179:31
    |
179 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:179:31
    |
179 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:185:54
    |
185 |                 (n >> 1 as libc::c_int).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xmalloc.rs:187:10
    |
187 |         *(&mut n as *mut size_t) = fresh0;
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xpalloc(
198 | |     mut pa: *mut libc::c_void,
199 | |     mut pn: *mut idx_t,
200 | |     mut n_incr_min: idx_t,
...   |
901 | |     return pa;
902 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function has a cognitive complexity of (131/25)
   --> src/xmalloc.rs:197:26
    |
197 | pub unsafe extern "C" fn xpalloc(
    |                          ^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (698/100)
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xpalloc(
198 | |     mut pa: *mut libc::c_void,
199 | |     mut pn: *mut idx_t,
200 | |     mut n_incr_min: idx_t,
...   |
901 | |     return pa;
902 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xmalloc.rs:901:5
    |
901 |     return pa;
    |     ^^^^^^^^^^ help: remove `return`: `pa`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: borrow as raw pointer
   --> src/xmalloc.rs:207:6
    |
207 |     *(&mut n as *mut idx_t) = fresh2;
    |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:211:8
    |
211 |     if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
   --> src/xmalloc.rs:215:38
    |
215 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
216 | |         < -(1 as libc::c_int) as idx_t
217 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
218 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
549 | |         }) as libc::c_ulong
550 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:215:38
    |
215 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
216 | |         < -(1 as libc::c_int) as idx_t
217 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
218 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
549 | |         }) as libc::c_ulong
550 | |     }) as idx_t;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:215:45
    |
215 |     let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:216:11
    |
216 |         < -(1 as libc::c_int) as idx_t
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:217:13
    |
217 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:217:41
    |
217 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:218:15
    |
218 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:218:51
    |
218 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:219:13
    |
219 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:219:41
    |
219 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:220:15
    |
220 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:220:51
    |
220 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:221:20
    |
221 |         && (if s < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:222:20
    |
222 |             if n < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:223:21
    |
223 |                   if ((if 1 as libc::c_int != 0 {
    |  _____________________^
224 | |                     0 as libc::c_int as libc::c_long
225 | |                 } else {
226 | |                     (if 1 as libc::c_int != 0 {
...   |
230 | |                     }) + s
231 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:224:21
    |
224 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:226:21
    |
226 | /                     (if 1 as libc::c_int != 0 {
227 | |                         0 as libc::c_int as libc::c_long
228 | |                     } else {
229 | |                         -(1 as libc::c_int) as idx_t
230 | |                     }) + s
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:227:25
    |
227 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:229:25
    |
229 |                         -(1 as libc::c_int) as idx_t
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:231:22
    |
231 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:231:58
    |
231 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:233:21
    |
233 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:233:26
    |
233 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:235:21
    |
235 | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
...   |
300 | |                         -(1 as libc::c_int) as idx_t / -s
301 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |_________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
235 ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
236 +                         0 as libc::c_int as libc::c_long
237 +                     } else {
238 +                         s
239 +                     }) - 1 as libc::c_int as libc::c_long)
240 +                         < 0 as libc::c_int as libc::c_long
241 +                     {
242 +                         !(((((if 1 as libc::c_int != 0 {
243 +                             0 as libc::c_int as libc::c_long
244 +                         } else {
245 +                             s
246 +                         }) + 1 as libc::c_int as libc::c_long)
247 +                             << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
248 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
249 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
250 +                             - 1 as libc::c_int as libc::c_long)
251 +                             * 2 as libc::c_int as libc::c_long
252 +                             + 1 as libc::c_int as libc::c_long)
253 +                     } else {
254 +                         (if 1 as libc::c_int != 0 {
255 +                             0 as libc::c_int as libc::c_long
256 +                         } else {
257 +                             s
258 +                         }) + 0 as libc::c_int as libc::c_long
259 +                     }) < 0 as libc::c_int as libc::c_long
260 +                     {
261 +                         (s
262 +                             < -(if ((if 1 as libc::c_int != 0 {
263 +                                 0 as libc::c_int as libc::c_long
264 +                             } else {
265 +                                 s
266 +                             }) - 1 as libc::c_int as libc::c_long)
267 +                                 < 0 as libc::c_int as libc::c_long
268 +                             {
269 +                                 ((((if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_long
271 +                                 } else {
272 +                                     s
273 +                                 }) + 1 as libc::c_int as libc::c_long)
274 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
275 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
276 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
277 +                                     - 1 as libc::c_int as libc::c_long)
278 +                                     * 2 as libc::c_int as libc::c_long
279 +                                     + 1 as libc::c_int as libc::c_long
280 +                             } else {
281 +                                 (if 1 as libc::c_int != 0 {
282 +                                     0 as libc::c_int as libc::c_long
283 +                                 } else {
284 +                                     s
285 +                                 }) - 1 as libc::c_int as libc::c_long
286 +                             })) as libc::c_int
287 +                     } else {
288 +                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
289 +                     }) != 0
290 +                     {
291 +                         (if 1 as libc::c_int != 0 {
292 +                             0 as libc::c_int as libc::c_long
293 +                         } else {
294 +                             s
295 +                         }) + -(1 as libc::c_int) as idx_t
296 +                             >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
297 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
298 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
299 +                     } else {
300 +                         -(1 as libc::c_int) as idx_t / -s
301 +                     }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:235:22
    |
235 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
...   |
300 | |                         -(1 as libc::c_int) as idx_t / -s
301 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:235:35
    |
235 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
239 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:236:25
    |
236 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:239:26
    |
239 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:240:27
    |
240 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:242:30
    |
242 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
243 | |                             0 as libc::c_int as libc::c_long
244 | |                         } else {
245 | |                             s
246 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:243:29
    |
243 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:246:30
    |
246 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:248:47
    |
248 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:249:47
    |
249 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:250:31
    |
250 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:251:31
    |
251 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:252:31
    |
252 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:254:25
    |
254 | /                         (if 1 as libc::c_int != 0 {
255 | |                             0 as libc::c_int as libc::c_long
256 | |                         } else {
257 | |                             s
258 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:255:29
    |
255 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:258:30
    |
258 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:259:26
    |
259 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:261:25
    |
261 | /                         (s
262 | |                             < -(if ((if 1 as libc::c_int != 0 {
263 | |                                 0 as libc::c_int as libc::c_long
264 | |                             } else {
...   |
285 | |                                 }) - 1 as libc::c_int as libc::c_long
286 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
261 ~                         i32::from(s
262 +                             < -(if ((if 1 as libc::c_int != 0 {
263 +                                 0 as libc::c_int as libc::c_long
264 +                             } else {
265 +                                 s
266 +                             }) - 1 as libc::c_int as libc::c_long)
267 +                                 < 0 as libc::c_int as libc::c_long
268 +                             {
269 +                                 ((((if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_long
271 +                                 } else {
272 +                                     s
273 +                                 }) + 1 as libc::c_int as libc::c_long)
274 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
275 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
276 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
277 +                                     - 1 as libc::c_int as libc::c_long)
278 +                                     * 2 as libc::c_int as libc::c_long
279 +                                     + 1 as libc::c_int as libc::c_long
280 +                             } else {
281 +                                 (if 1 as libc::c_int != 0 {
282 +                                     0 as libc::c_int as libc::c_long
283 +                                 } else {
284 +                                     s
285 +                                 }) - 1 as libc::c_int as libc::c_long
286 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:262:37
    |
262 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
263 | | ...                       0 as libc::c_int as libc::c_long
264 | | ...                   } else {
265 | | ...                       s
266 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:263:33
    |
263 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:266:34
    |
266 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:267:35
    |
267 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:269:36
    |
269 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
270 | | ...                       0 as libc::c_int as libc::c_long
271 | | ...                   } else {
272 | | ...                       s
273 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:270:37
    |
270 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:273:38
    |
273 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:275:55
    |
275 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:276:55
    |
276 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:39
    |
277 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:278:39
    |
278 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:279:39
    |
279 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:281:33
    |
281 | / ...                   (if 1 as libc::c_int != 0 {
282 | | ...                       0 as libc::c_int as libc::c_long
283 | | ...                   } else {
284 | | ...                       s
285 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:282:37
    |
282 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:285:38
    |
285 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:288:25
    |
288 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:288:26
    |
288 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:291:25
    |
291 | /                         (if 1 as libc::c_int != 0 {
292 | |                             0 as libc::c_int as libc::c_long
293 | |                         } else {
294 | |                             s
295 | |                         }) + -(1 as libc::c_int) as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:292:29
    |
292 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:295:30
    |
295 |                         }) + -(1 as libc::c_int) as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:297:47
    |
297 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:298:47
    |
298 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:300:25
    |
300 |                         -(1 as libc::c_int) as idx_t / -s
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:301:27
    |
301 |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:304:29
    |
304 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
305 | |                     0 as libc::c_int as libc::c_long
306 | |                 } else {
307 | |                     (if 1 as libc::c_int != 0 {
...   |
311 | |                     }) + 0 as libc::c_int as idx_t
312 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:305:21
    |
305 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:307:21
    |
307 | /                     (if 1 as libc::c_int != 0 {
308 | |                         0 as libc::c_int as libc::c_long
309 | |                     } else {
310 | |                         s
311 | |                     }) + 0 as libc::c_int as idx_t
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:308:25
    |
308 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:311:26
    |
311 |                     }) + 0 as libc::c_int as idx_t
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:22
    |
312 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:58
    |
312 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:314:26
    |
314 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
315 | |                         0 as libc::c_int as libc::c_long
316 | |                     } else {
317 | |                         (if 1 as libc::c_int != 0 {
...   |
321 | |                         }) + 0 as libc::c_int as idx_t
322 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:315:25
    |
315 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:317:25
    |
317 | /                         (if 1 as libc::c_int != 0 {
318 | |                             0 as libc::c_int as libc::c_long
319 | |                         } else {
320 | |                             s
321 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:318:29
    |
318 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:321:30
    |
321 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:322:26
    |
322 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:324:43
    |
324 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:325:43
    |
325 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:326:27
    |
326 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:327:27
    |
327 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:328:27
    |
328 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:330:21
    |
330 | /                     (if 1 as libc::c_int != 0 {
331 | |                         0 as libc::c_int as libc::c_long
332 | |                     } else {
333 | |                         (if 1 as libc::c_int != 0 {
...   |
337 | |                         }) + 0 as libc::c_int as idx_t
338 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:331:25
    |
331 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:333:25
    |
333 | /                         (if 1 as libc::c_int != 0 {
334 | |                             0 as libc::c_int as libc::c_long
335 | |                         } else {
336 | |                             s
337 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:334:29
    |
334 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:337:30
    |
337 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:338:26
    |
338 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:339:22
    |
339 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:341:21
    |
341 | /                     (((if 1 as libc::c_int != 0 {
342 | |                         0 as libc::c_int as libc::c_long
343 | |                     } else {
344 | |                         s
...   |
381 | |                             }) - 1 as libc::c_int as libc::c_long
382 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
341 ~                     i32::from(((if 1 as libc::c_int != 0 {
342 +                         0 as libc::c_int as libc::c_long
343 +                     } else {
344 +                         s
345 +                     }) + 0 as libc::c_int as idx_t)
346 +                         < -(if ((if 1 as libc::c_int != 0 {
347 +                             0 as libc::c_int as libc::c_long
348 +                         } else {
349 +                             (if 1 as libc::c_int != 0 {
350 +                                 0 as libc::c_int as libc::c_long
351 +                             } else {
352 +                                 s
353 +                             }) + 0 as libc::c_int as idx_t
354 +                         }) - 1 as libc::c_int as libc::c_long)
355 +                             < 0 as libc::c_int as libc::c_long
356 +                         {
357 +                             ((((if 1 as libc::c_int != 0 {
358 +                                 0 as libc::c_int as libc::c_long
359 +                             } else {
360 +                                 (if 1 as libc::c_int != 0 {
361 +                                     0 as libc::c_int as libc::c_long
362 +                                 } else {
363 +                                     s
364 +                                 }) + 0 as libc::c_int as idx_t
365 +                             }) + 1 as libc::c_int as libc::c_long)
366 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
367 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
368 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
369 +                                 - 1 as libc::c_int as libc::c_long)
370 +                                 * 2 as libc::c_int as libc::c_long
371 +                                 + 1 as libc::c_int as libc::c_long
372 +                         } else {
373 +                             (if 1 as libc::c_int != 0 {
374 +                                 0 as libc::c_int as libc::c_long
375 +                             } else {
376 +                                 (if 1 as libc::c_int != 0 {
377 +                                     0 as libc::c_int as libc::c_long
378 +                                 } else {
379 +                                     s
380 +                                 }) + 0 as libc::c_int as idx_t
381 +                             }) - 1 as libc::c_int as libc::c_long
382 +                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:341:23
    |
341 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
342 | |                         0 as libc::c_int as libc::c_long
343 | |                     } else {
344 | |                         s
345 | |                     }) + 0 as libc::c_int as idx_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:342:25
    |
342 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:345:26
    |
345 |                     }) + 0 as libc::c_int as idx_t)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:346:33
    |
346 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
347 | |                             0 as libc::c_int as libc::c_long
348 | |                         } else {
349 | |                             (if 1 as libc::c_int != 0 {
...   |
353 | |                             }) + 0 as libc::c_int as idx_t
354 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:347:29
    |
347 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:349:29
    |
349 | / ...                   (if 1 as libc::c_int != 0 {
350 | | ...                       0 as libc::c_int as libc::c_long
351 | | ...                   } else {
352 | | ...                       s
353 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:350:33
    |
350 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:353:34
    |
353 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:354:30
    |
354 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:355:31
    |
355 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:357:32
    |
357 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
358 | | ...                       0 as libc::c_int as libc::c_long
359 | | ...                   } else {
360 | | ...                       (if 1 as libc::c_int != 0 {
...   |
364 | | ...                       }) + 0 as libc::c_int as idx_t
365 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:358:33
    |
358 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:360:33
    |
360 | / ...                   (if 1 as libc::c_int != 0 {
361 | | ...                       0 as libc::c_int as libc::c_long
362 | | ...                   } else {
363 | | ...                       s
364 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:361:37
    |
361 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:364:38
    |
364 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:365:34
    |
365 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:367:51
    |
367 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:368:51
    |
368 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:369:35
    |
369 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:370:35
    |
370 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:371:35
    |
371 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:373:29
    |
373 | / ...                   (if 1 as libc::c_int != 0 {
374 | | ...                       0 as libc::c_int as libc::c_long
375 | | ...                   } else {
376 | | ...                       (if 1 as libc::c_int != 0 {
...   |
380 | | ...                       }) + 0 as libc::c_int as idx_t
381 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:374:33
    |
374 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:376:33
    |
376 | / ...                   (if 1 as libc::c_int != 0 {
377 | | ...                       0 as libc::c_int as libc::c_long
378 | | ...                   } else {
379 | | ...                       s
380 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:377:37
    |
377 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:380:38
    |
380 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:381:34
    |
381 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:384:21
    |
384 | /                     ((0 as libc::c_int as libc::c_long)
385 | |                         < (if 1 as libc::c_int != 0 {
386 | |                             0 as libc::c_int as libc::c_long
387 | |                         } else {
388 | |                             s
389 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |______________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
384 ~                     i32::from((0 as libc::c_int as libc::c_long)
385 +                         < (if 1 as libc::c_int != 0 {
386 +                             0 as libc::c_int as libc::c_long
387 +                         } else {
388 +                             s
389 +                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:384:22
    |
384 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:385:27
    |
385 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
386 | |                             0 as libc::c_int as libc::c_long
387 | |                         } else {
388 | |                             s
389 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:386:29
    |
386 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:389:30
    |
389 |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:390:33
    |
390 |                 }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:392:25
    |
392 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
393 | |                         0 as libc::c_int as libc::c_long
394 | |                     } else {
395 | |                         n
396 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:393:25
    |
393 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:396:26
    |
396 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:397:27
    |
397 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:399:25
    |
399 | /                         ((0 as libc::c_int as libc::c_long)
400 | |                             < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
399 ~                         i32::from((0 as libc::c_int as libc::c_long)
400 +                             < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:399:26
    |
399 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:400:35
    |
400 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:402:25
    |
402 | /                         ((0 as libc::c_int as libc::c_long) < n
403 | |                             && (-(1 as libc::c_int) as libc::c_long
404 | |                                 - 0 as libc::c_int as idx_t)
405 | |                                 < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
402 ~                         i32::from((0 as libc::c_int as libc::c_long) < n
403 +                             && (-(1 as libc::c_int) as libc::c_long
404 +                                 - 0 as libc::c_int as idx_t)
405 +                                 < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:402:26
    |
402 |                         ((0 as libc::c_int as libc::c_long) < n
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:403:33
    |
403 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:404:35
    |
404 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:405:39
    |
405 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:408:21
    |
408 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:408:22
    |
408 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:412:21
    |
412 |             if s == 0 as libc::c_int as libc::c_long {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:415:24
    |
415 |                 if n < 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:416:33
    |
416 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
417 | |                         0 as libc::c_int as libc::c_long
418 | |                     } else {
419 | |                         (if 1 as libc::c_int != 0 {
...   |
423 | |                         }) + 0 as libc::c_int as idx_t
424 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:417:25
    |
417 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:419:25
    |
419 | /                         (if 1 as libc::c_int != 0 {
420 | |                             0 as libc::c_int as libc::c_long
421 | |                         } else {
422 | |                             n
423 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:420:29
    |
420 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:423:30
    |
423 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:424:26
    |
424 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:425:27
    |
425 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:427:30
    |
427 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
428 | |                             0 as libc::c_int as libc::c_long
429 | |                         } else {
430 | |                             (if 1 as libc::c_int != 0 {
...   |
434 | |                             }) + 0 as libc::c_int as idx_t
435 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:428:29
    |
428 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:430:29
    |
430 | / ...                   (if 1 as libc::c_int != 0 {
431 | | ...                       0 as libc::c_int as libc::c_long
432 | | ...                   } else {
433 | | ...                       n
434 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:431:33
    |
431 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:434:34
    |
434 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:435:30
    |
435 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:437:47
    |
437 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:438:47
    |
438 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:439:31
    |
439 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:440:31
    |
440 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:441:31
    |
441 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:443:25
    |
443 | /                         (if 1 as libc::c_int != 0 {
444 | |                             0 as libc::c_int as libc::c_long
445 | |                         } else {
446 | |                             (if 1 as libc::c_int != 0 {
...   |
450 | |                             }) + 0 as libc::c_int as idx_t
451 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:444:29
    |
444 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:446:29
    |
446 | / ...                   (if 1 as libc::c_int != 0 {
447 | | ...                       0 as libc::c_int as libc::c_long
448 | | ...                   } else {
449 | | ...                       n
450 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:447:33
    |
447 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:450:34
    |
450 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:451:30
    |
451 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:452:26
    |
452 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:454:25
    |
454 | /                         (((if 1 as libc::c_int != 0 {
455 | |                             0 as libc::c_int as libc::c_long
456 | |                         } else {
457 | |                             n
...   |
494 | |                                 }) - 1 as libc::c_int as libc::c_long
495 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
454 ~                         i32::from(((if 1 as libc::c_int != 0 {
455 +                             0 as libc::c_int as libc::c_long
456 +                         } else {
457 +                             n
458 +                         }) + 0 as libc::c_int as idx_t)
459 +                             < -(if ((if 1 as libc::c_int != 0 {
460 +                                 0 as libc::c_int as libc::c_long
461 +                             } else {
462 +                                 (if 1 as libc::c_int != 0 {
463 +                                     0 as libc::c_int as libc::c_long
464 +                                 } else {
465 +                                     n
466 +                                 }) + 0 as libc::c_int as idx_t
467 +                             }) - 1 as libc::c_int as libc::c_long)
468 +                                 < 0 as libc::c_int as libc::c_long
469 +                             {
470 +                                 ((((if 1 as libc::c_int != 0 {
471 +                                     0 as libc::c_int as libc::c_long
472 +                                 } else {
473 +                                     (if 1 as libc::c_int != 0 {
474 +                                         0 as libc::c_int as libc::c_long
475 +                                     } else {
476 +                                         n
477 +                                     }) + 0 as libc::c_int as idx_t
478 +                                 }) + 1 as libc::c_int as libc::c_long)
479 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
480 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
481 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
482 +                                     - 1 as libc::c_int as libc::c_long)
483 +                                     * 2 as libc::c_int as libc::c_long
484 +                                     + 1 as libc::c_int as libc::c_long
485 +                             } else {
486 +                                 (if 1 as libc::c_int != 0 {
487 +                                     0 as libc::c_int as libc::c_long
488 +                                 } else {
489 +                                     (if 1 as libc::c_int != 0 {
490 +                                         0 as libc::c_int as libc::c_long
491 +                                     } else {
492 +                                         n
493 +                                     }) + 0 as libc::c_int as idx_t
494 +                                 }) - 1 as libc::c_int as libc::c_long
495 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:454:27
    |
454 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
455 | |                             0 as libc::c_int as libc::c_long
456 | |                         } else {
457 | |                             n
458 | |                         }) + 0 as libc::c_int as idx_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:455:29
    |
455 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:458:30
    |
458 |                         }) + 0 as libc::c_int as idx_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:459:37
    |
459 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
460 | | ...                       0 as libc::c_int as libc::c_long
461 | | ...                   } else {
462 | | ...                       (if 1 as libc::c_int != 0 {
...   |
466 | | ...                       }) + 0 as libc::c_int as idx_t
467 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:460:33
    |
460 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:462:33
    |
462 | / ...                   (if 1 as libc::c_int != 0 {
463 | | ...                       0 as libc::c_int as libc::c_long
464 | | ...                   } else {
465 | | ...                       n
466 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:463:37
    |
463 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:466:38
    |
466 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:467:34
    |
467 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:468:35
    |
468 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:470:36
    |
470 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
471 | | ...                       0 as libc::c_int as libc::c_long
472 | | ...                   } else {
473 | | ...                       (if 1 as libc::c_int != 0 {
...   |
477 | | ...                       }) + 0 as libc::c_int as idx_t
478 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:471:37
    |
471 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:473:37
    |
473 | / ...                   (if 1 as libc::c_int != 0 {
474 | | ...                       0 as libc::c_int as libc::c_long
475 | | ...                   } else {
476 | | ...                       n
477 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:474:41
    |
474 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:477:42
    |
477 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:478:38
    |
478 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:480:55
    |
480 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:481:55
    |
481 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:482:39
    |
482 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:483:39
    |
483 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:484:39
    |
484 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:486:33
    |
486 | / ...                   (if 1 as libc::c_int != 0 {
487 | | ...                       0 as libc::c_int as libc::c_long
488 | | ...                   } else {
489 | | ...                       (if 1 as libc::c_int != 0 {
...   |
493 | | ...                       }) + 0 as libc::c_int as idx_t
494 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:487:37
    |
487 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:489:37
    |
489 | / ...                   (if 1 as libc::c_int != 0 {
490 | | ...                       0 as libc::c_int as libc::c_long
491 | | ...                   } else {
492 | | ...                       n
493 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:490:41
    |
490 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:493:42
    |
493 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:494:38
    |
494 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:497:25
    |
497 | /                         ((0 as libc::c_int as libc::c_long)
498 | |                             < (if 1 as libc::c_int != 0 {
499 | |                                 0 as libc::c_int as libc::c_long
500 | |                             } else {
501 | |                                 n
502 | |                             }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
497 ~                         i32::from((0 as libc::c_int as libc::c_long)
498 +                             < (if 1 as libc::c_int != 0 {
499 +                                 0 as libc::c_int as libc::c_long
500 +                             } else {
501 +                                 n
502 +                             }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:497:26
    |
497 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:498:31
    |
498 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
499 | | ...                       0 as libc::c_int as libc::c_long
500 | | ...                   } else {
501 | | ...                       n
502 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:499:33
    |
499 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:502:34
    |
502 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:503:37
    |
503 |                     }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:505:29
    |
505 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
506 | |                             0 as libc::c_int as libc::c_long
507 | |                         } else {
508 | |                             s
509 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:506:29
    |
506 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:509:30
    |
509 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:510:31
    |
510 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:512:29
    |
512 | / ...                   ((0 as libc::c_int as libc::c_long)
513 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
512 ~                             i32::from((0 as libc::c_int as libc::c_long)
513 +                                 < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:512:30
    |
512 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:513:39
    |
513 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:515:29
    |
515 | / ...                   ((-(1 as libc::c_int) as libc::c_long
516 | | ...                       - 0 as libc::c_int as idx_t)
517 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
515 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
516 +                                 - 0 as libc::c_int as idx_t)
517 +                                 < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:515:31
    |
515 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:516:35
    |
516 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:517:39
    |
517 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:520:25
    |
520 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:520:26
    |
520 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:523:21
    |
523 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:523:22
    |
523 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:529:10
    |
529 |         *(&mut nbytes as *mut idx_t) = fresh8;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:533:10
    |
533 |         *(&mut nbytes as *mut idx_t) = fresh10;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:534:9
    |
534 |         fresh11 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:537:12
    |
537 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:540:13
    |
540 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:545:9
    |
545 | /         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
546 | |             DEFAULT_MXFAST_0 as libc::c_int
547 | |         } else {
548 | |             0 as libc::c_int
549 | |         }) as libc::c_ulong
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:545:22
    |
545 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(DEFAULT_MXFAST_0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:545:22
    |
545 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:546:13
    |
546 |             DEFAULT_MXFAST_0 as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:556:15
    |
556 |         *pn = 0 as libc::c_int as idx_t;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:561:14
    |
561 |             *(&mut n as *mut idx_t) = fresh12;
    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:562:13
    |
562 |             fresh13 as libc::c_int != 0
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:563:20
    |
563 |                 || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:564:24
    |
564 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:564:54
    |
564 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:565:25
    |
565 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
566 | |                         0 as libc::c_int as libc::c_long
567 | |                     } else {
568 | |                         n
569 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:566:25
    |
566 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:569:26
    |
569 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:570:27
    |
570 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:571:25
    |
571 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
572 | |                         0 as libc::c_int as libc::c_long
573 | |                     } else {
574 | |                         s
575 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:572:25
    |
572 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:575:26
    |
575 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:576:27
    |
576 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:577:32
    |
577 |                     && (if s < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:578:32
    |
578 |                         if n < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:579:33
    |
579 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
580 | | ...                       0 as libc::c_int as libc::c_long
581 | | ...                   } else {
582 | | ...                       (if 1 as libc::c_int != 0 {
...   |
586 | | ...                       }) + s
587 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:580:33
    |
580 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:582:33
    |
582 | / ...                   (if 1 as libc::c_int != 0 {
583 | | ...                       0 as libc::c_int as libc::c_long
584 | | ...                   } else {
585 | | ...                       -(1 as libc::c_int) as idx_t
586 | | ...                   }) + s
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:583:37
    |
583 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:585:37
    |
585 | ...                   -(1 as libc::c_int) as idx_t
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:587:34
    |
587 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:588:35
    |
588 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:590:33
    |
590 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:590:38
    |
590 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:592:33
    |
592 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
...   |
658 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
659 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
592 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
593 +                                     0 as libc::c_int as libc::c_long
594 +                                 } else {
595 +                                     s
596 +                                 }) - 1 as libc::c_int as libc::c_long)
597 +                                     < 0 as libc::c_int as libc::c_long
598 +                                 {
599 +                                     !(((((if 1 as libc::c_int != 0 {
600 +                                         0 as libc::c_int as libc::c_long
601 +                                     } else {
602 +                                         s
603 +                                     }) + 1 as libc::c_int as libc::c_long)
604 +                                         << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
605 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
606 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
607 +                                         - 1 as libc::c_int as libc::c_long)
608 +                                         * 2 as libc::c_int as libc::c_long
609 +                                         + 1 as libc::c_int as libc::c_long)
610 +                                 } else {
611 +                                     (if 1 as libc::c_int != 0 {
612 +                                         0 as libc::c_int as libc::c_long
613 +                                     } else {
614 +                                         s
615 +                                     }) + 0 as libc::c_int as libc::c_long
616 +                                 }) < 0 as libc::c_int as libc::c_long
617 +                                 {
618 +                                     (s
619 +                                         < -(if ((if 1 as libc::c_int != 0 {
620 +                                             0 as libc::c_int as libc::c_long
621 +                                         } else {
622 +                                             s
623 +                                         }) - 1 as libc::c_int as libc::c_long)
624 +                                             < 0 as libc::c_int as libc::c_long
625 +                                         {
626 +                                             ((((if 1 as libc::c_int != 0 {
627 +                                                 0 as libc::c_int as libc::c_long
628 +                                             } else {
629 +                                                 s
630 +                                             }) + 1 as libc::c_int as libc::c_long)
631 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
632 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
633 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
634 +                                                 - 1 as libc::c_int as libc::c_long)
635 +                                                 * 2 as libc::c_int as libc::c_long
636 +                                                 + 1 as libc::c_int as libc::c_long
637 +                                         } else {
638 +                                             (if 1 as libc::c_int != 0 {
639 +                                                 0 as libc::c_int as libc::c_long
640 +                                             } else {
641 +                                                 s
642 +                                             }) - 1 as libc::c_int as libc::c_long
643 +                                         })) as libc::c_int
644 +                                 } else {
645 +                                     ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
646 +                                 }) != 0
647 +                                 {
648 +                                     (if 1 as libc::c_int != 0 {
649 +                                         0 as libc::c_int as libc::c_long
650 +                                     } else {
651 +                                         s
652 +                                     }) + -(1 as libc::c_int) as idx_t
653 +                                         >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
654 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
655 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
656 +                                 } else {
657 +                                     -(1 as libc::c_int) as idx_t / -s
658 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:592:34
    |
592 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ________________________^
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
...   |
657 | | ...                       -(1 as libc::c_int) as idx_t / -s
658 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:592:47
    |
592 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________________^
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
596 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:593:37
    |
593 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:596:38
    |
596 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:597:39
    |
597 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:599:42
    |
599 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
600 | | ...                       0 as libc::c_int as libc::c_long
601 | | ...                   } else {
602 | | ...                       s
603 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:600:41
    |
600 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:603:42
    |
603 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:605:59
    |
605 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:606:59
    |
606 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:607:43
    |
607 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:608:43
    |
608 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:609:43
    |
609 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:611:37
    |
611 | / ...                   (if 1 as libc::c_int != 0 {
612 | | ...                       0 as libc::c_int as libc::c_long
613 | | ...                   } else {
614 | | ...                       s
615 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:612:41
    |
612 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:615:42
    |
615 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:616:38
    |
616 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:618:37
    |
618 | / ...                   (s
619 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
620 | | ...                           0 as libc::c_int as libc::c_long
621 | | ...                       } else {
...   |
642 | | ...                           }) - 1 as libc::c_int as libc::c_long
643 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
618 ~                                     i32::from(s
619 +                                         < -(if ((if 1 as libc::c_int != 0 {
620 +                                             0 as libc::c_int as libc::c_long
621 +                                         } else {
622 +                                             s
623 +                                         }) - 1 as libc::c_int as libc::c_long)
624 +                                             < 0 as libc::c_int as libc::c_long
625 +                                         {
626 +                                             ((((if 1 as libc::c_int != 0 {
627 +                                                 0 as libc::c_int as libc::c_long
628 +                                             } else {
629 +                                                 s
630 +                                             }) + 1 as libc::c_int as libc::c_long)
631 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
632 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
633 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
634 +                                                 - 1 as libc::c_int as libc::c_long)
635 +                                                 * 2 as libc::c_int as libc::c_long
636 +                                                 + 1 as libc::c_int as libc::c_long
637 +                                         } else {
638 +                                             (if 1 as libc::c_int != 0 {
639 +                                                 0 as libc::c_int as libc::c_long
640 +                                             } else {
641 +                                                 s
642 +                                             }) - 1 as libc::c_int as libc::c_long
643 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:619:49
    |
619 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
620 | | ...                       0 as libc::c_int as libc::c_long
621 | | ...                   } else {
622 | | ...                       s
623 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:620:45
    |
620 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:623:46
    |
623 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:624:47
    |
624 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:626:48
    |
626 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
627 | | ...                       0 as libc::c_int as libc::c_long
628 | | ...                   } else {
629 | | ...                       s
630 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:627:49
    |
627 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:630:50
    |
630 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:632:67
    |
632 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:633:67
    |
633 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:634:51
    |
634 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:635:51
    |
635 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:636:51
    |
636 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:638:45
    |
638 | / ...                   (if 1 as libc::c_int != 0 {
639 | | ...                       0 as libc::c_int as libc::c_long
640 | | ...                   } else {
641 | | ...                       s
642 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:639:49
    |
639 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:642:50
    |
642 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:645:37
    |
645 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:645:38
    |
645 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:648:37
    |
648 | / ...                   (if 1 as libc::c_int != 0 {
649 | | ...                       0 as libc::c_int as libc::c_long
650 | | ...                   } else {
651 | | ...                       s
652 | | ...                   }) + -(1 as libc::c_int) as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:649:41
    |
649 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:652:42
    |
652 | ...                   }) + -(1 as libc::c_int) as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:654:59
    |
654 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:655:59
    |
655 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:657:37
    |
657 | ...                   -(1 as libc::c_int) as idx_t / -s
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:658:39
    |
658 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:662:41
    |
662 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
663 | | ...                       0 as libc::c_int as libc::c_long
664 | | ...                   } else {
665 | | ...                       (if 1 as libc::c_int != 0 {
...   |
669 | | ...                       }) + 0 as libc::c_int as idx_t
670 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:663:33
    |
663 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:665:33
    |
665 | / ...                   (if 1 as libc::c_int != 0 {
666 | | ...                       0 as libc::c_int as libc::c_long
667 | | ...                   } else {
668 | | ...                       s
669 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:666:37
    |
666 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:669:38
    |
669 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:670:34
    |
670 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:671:35
    |
671 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:673:38
    |
673 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
674 | | ...                       0 as libc::c_int as libc::c_long
675 | | ...                   } else {
676 | | ...                       (if 1 as libc::c_int != 0 {
...   |
680 | | ...                       }) + 0 as libc::c_int as idx_t
681 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:674:37
    |
674 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:676:37
    |
676 | / ...                   (if 1 as libc::c_int != 0 {
677 | | ...                       0 as libc::c_int as libc::c_long
678 | | ...                   } else {
679 | | ...                       s
680 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:677:41
    |
677 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:680:42
    |
680 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:681:38
    |
681 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:683:55
    |
683 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:684:55
    |
684 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:685:39
    |
685 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:686:39
    |
686 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:687:39
    |
687 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:689:33
    |
689 | / ...                   (if 1 as libc::c_int != 0 {
690 | | ...                       0 as libc::c_int as libc::c_long
691 | | ...                   } else {
692 | | ...                       (if 1 as libc::c_int != 0 {
...   |
696 | | ...                       }) + 0 as libc::c_int as idx_t
697 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:690:37
    |
690 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:692:37
    |
692 | / ...                   (if 1 as libc::c_int != 0 {
693 | | ...                       0 as libc::c_int as libc::c_long
694 | | ...                   } else {
695 | | ...                       s
696 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:693:41
    |
693 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:696:42
    |
696 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:697:38
    |
697 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:698:34
    |
698 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:700:33
    |
700 | / ...                   (((if 1 as libc::c_int != 0 {
701 | | ...                       0 as libc::c_int as libc::c_long
702 | | ...                   } else {
703 | | ...                       s
...   |
740 | | ...                           }) - 1 as libc::c_int as libc::c_long
741 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
700 ~                                 i32::from(((if 1 as libc::c_int != 0 {
701 +                                     0 as libc::c_int as libc::c_long
702 +                                 } else {
703 +                                     s
704 +                                 }) + 0 as libc::c_int as idx_t)
705 +                                     < -(if ((if 1 as libc::c_int != 0 {
706 +                                         0 as libc::c_int as libc::c_long
707 +                                     } else {
708 +                                         (if 1 as libc::c_int != 0 {
709 +                                             0 as libc::c_int as libc::c_long
710 +                                         } else {
711 +                                             s
712 +                                         }) + 0 as libc::c_int as idx_t
713 +                                     }) - 1 as libc::c_int as libc::c_long)
714 +                                         < 0 as libc::c_int as libc::c_long
715 +                                     {
716 +                                         ((((if 1 as libc::c_int != 0 {
717 +                                             0 as libc::c_int as libc::c_long
718 +                                         } else {
719 +                                             (if 1 as libc::c_int != 0 {
720 +                                                 0 as libc::c_int as libc::c_long
721 +                                             } else {
722 +                                                 s
723 +                                             }) + 0 as libc::c_int as idx_t
724 +                                         }) + 1 as libc::c_int as libc::c_long)
725 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
726 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
727 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
728 +                                             - 1 as libc::c_int as libc::c_long)
729 +                                             * 2 as libc::c_int as libc::c_long
730 +                                             + 1 as libc::c_int as libc::c_long
731 +                                     } else {
732 +                                         (if 1 as libc::c_int != 0 {
733 +                                             0 as libc::c_int as libc::c_long
734 +                                         } else {
735 +                                             (if 1 as libc::c_int != 0 {
736 +                                                 0 as libc::c_int as libc::c_long
737 +                                             } else {
738 +                                                 s
739 +                                             }) + 0 as libc::c_int as idx_t
740 +                                         }) - 1 as libc::c_int as libc::c_long
741 +                                     }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:700:35
    |
700 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
701 | | ...                       0 as libc::c_int as libc::c_long
702 | | ...                   } else {
703 | | ...                       s
704 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:701:37
    |
701 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:704:38
    |
704 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:705:45
    |
705 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
706 | | ...                       0 as libc::c_int as libc::c_long
707 | | ...                   } else {
708 | | ...                       (if 1 as libc::c_int != 0 {
...   |
712 | | ...                       }) + 0 as libc::c_int as idx_t
713 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:706:41
    |
706 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:708:41
    |
708 | / ...                   (if 1 as libc::c_int != 0 {
709 | | ...                       0 as libc::c_int as libc::c_long
710 | | ...                   } else {
711 | | ...                       s
712 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:709:45
    |
709 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:712:46
    |
712 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:713:42
    |
713 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:714:43
    |
714 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:716:44
    |
716 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
717 | | ...                       0 as libc::c_int as libc::c_long
718 | | ...                   } else {
719 | | ...                       (if 1 as libc::c_int != 0 {
...   |
723 | | ...                       }) + 0 as libc::c_int as idx_t
724 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:717:45
    |
717 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:719:45
    |
719 | / ...                   (if 1 as libc::c_int != 0 {
720 | | ...                       0 as libc::c_int as libc::c_long
721 | | ...                   } else {
722 | | ...                       s
723 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:720:49
    |
720 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:723:50
    |
723 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:724:46
    |
724 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:726:63
    |
726 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:727:63
    |
727 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:728:47
    |
728 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:729:47
    |
729 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:730:47
    |
730 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:732:41
    |
732 | / ...                   (if 1 as libc::c_int != 0 {
733 | | ...                       0 as libc::c_int as libc::c_long
734 | | ...                   } else {
735 | | ...                       (if 1 as libc::c_int != 0 {
...   |
739 | | ...                       }) + 0 as libc::c_int as idx_t
740 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:733:45
    |
733 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:735:45
    |
735 | / ...                   (if 1 as libc::c_int != 0 {
736 | | ...                       0 as libc::c_int as libc::c_long
737 | | ...                   } else {
738 | | ...                       s
739 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:736:49
    |
736 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:739:50
    |
739 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:740:46
    |
740 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:743:33
    |
743 | / ...                   ((0 as libc::c_int as libc::c_long)
744 | | ...                       < (if 1 as libc::c_int != 0 {
745 | | ...                           0 as libc::c_int as libc::c_long
746 | | ...                       } else {
747 | | ...                           s
748 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
743 ~                                 i32::from((0 as libc::c_int as libc::c_long)
744 +                                     < (if 1 as libc::c_int != 0 {
745 +                                         0 as libc::c_int as libc::c_long
746 +                                     } else {
747 +                                         s
748 +                                     }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:743:34
    |
743 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:744:39
    |
744 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
745 | | ...                       0 as libc::c_int as libc::c_long
746 | | ...                   } else {
747 | | ...                       s
748 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:745:41
    |
745 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:748:42
    |
748 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:749:45
    |
749 | ...                   }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:751:37
    |
751 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
752 | | ...                       0 as libc::c_int as libc::c_long
753 | | ...                   } else {
754 | | ...                       n
755 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:752:37
    |
752 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:755:38
    |
755 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:756:39
    |
756 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:758:37
    |
758 | / ...                   ((0 as libc::c_int as libc::c_long)
759 | | ...                       < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
758 ~                                     i32::from((0 as libc::c_int as libc::c_long)
759 +                                         < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:758:38
    |
758 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:759:47
    |
759 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:761:37
    |
761 | / ...                   ((0 as libc::c_int as libc::c_long) < n
762 | | ...                       && (-(1 as libc::c_int) as libc::c_long
763 | | ...                           - 0 as libc::c_int as idx_t)
764 | | ...                           < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |____________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
761 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n
762 +                                         && (-(1 as libc::c_int) as libc::c_long
763 +                                             - 0 as libc::c_int as idx_t)
764 +                                             < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:761:38
    |
761 | ...                   ((0 as libc::c_int as libc::c_long) < n
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:762:45
    |
762 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:763:47
    |
763 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:764:51
    |
764 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:767:33
    |
767 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:767:34
    |
767 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:771:33
    |
771 |                         if s == 0 as libc::c_int as libc::c_long {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:774:36
    |
774 | ...                   if n < 0 as libc::c_int as libc::c_long {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:775:45
    |
775 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
776 | | ...                       0 as libc::c_int as libc::c_long
777 | | ...                   } else {
778 | | ...                       (if 1 as libc::c_int != 0 {
...   |
782 | | ...                       }) + 0 as libc::c_int as idx_t
783 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:776:37
    |
776 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:778:37
    |
778 | / ...                   (if 1 as libc::c_int != 0 {
779 | | ...                       0 as libc::c_int as libc::c_long
780 | | ...                   } else {
781 | | ...                       n
782 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:779:41
    |
779 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:782:42
    |
782 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:783:38
    |
783 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:784:39
    |
784 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:786:42
    |
786 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
787 | | ...                       0 as libc::c_int as libc::c_long
788 | | ...                   } else {
789 | | ...                       (if 1 as libc::c_int != 0 {
...   |
793 | | ...                       }) + 0 as libc::c_int as idx_t
794 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:787:41
    |
787 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:789:41
    |
789 | / ...                   (if 1 as libc::c_int != 0 {
790 | | ...                       0 as libc::c_int as libc::c_long
791 | | ...                   } else {
792 | | ...                       n
793 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:790:45
    |
790 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:793:46
    |
793 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:794:42
    |
794 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:796:59
    |
796 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:797:59
    |
797 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:798:43
    |
798 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:799:43
    |
799 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:800:43
    |
800 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:802:37
    |
802 | / ...                   (if 1 as libc::c_int != 0 {
803 | | ...                       0 as libc::c_int as libc::c_long
804 | | ...                   } else {
805 | | ...                       (if 1 as libc::c_int != 0 {
...   |
809 | | ...                       }) + 0 as libc::c_int as idx_t
810 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:803:41
    |
803 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:805:41
    |
805 | / ...                   (if 1 as libc::c_int != 0 {
806 | | ...                       0 as libc::c_int as libc::c_long
807 | | ...                   } else {
808 | | ...                       n
809 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:806:45
    |
806 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:809:46
    |
809 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:810:42
    |
810 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:811:38
    |
811 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:813:37
    |
813 | / ...                   (((if 1 as libc::c_int != 0 {
814 | | ...                       0 as libc::c_int as libc::c_long
815 | | ...                   } else {
816 | | ...                       n
...   |
853 | | ...                           }) - 1 as libc::c_int as libc::c_long
854 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
813 ~                                     i32::from(((if 1 as libc::c_int != 0 {
814 +                                         0 as libc::c_int as libc::c_long
815 +                                     } else {
816 +                                         n
817 +                                     }) + 0 as libc::c_int as idx_t)
818 +                                         < -(if ((if 1 as libc::c_int != 0 {
819 +                                             0 as libc::c_int as libc::c_long
820 +                                         } else {
821 +                                             (if 1 as libc::c_int != 0 {
822 +                                                 0 as libc::c_int as libc::c_long
823 +                                             } else {
824 +                                                 n
825 +                                             }) + 0 as libc::c_int as idx_t
826 +                                         }) - 1 as libc::c_int as libc::c_long)
827 +                                             < 0 as libc::c_int as libc::c_long
828 +                                         {
829 +                                             ((((if 1 as libc::c_int != 0 {
830 +                                                 0 as libc::c_int as libc::c_long
831 +                                             } else {
832 +                                                 (if 1 as libc::c_int != 0 {
833 +                                                     0 as libc::c_int as libc::c_long
834 +                                                 } else {
835 +                                                     n
836 +                                                 }) + 0 as libc::c_int as idx_t
837 +                                             }) + 1 as libc::c_int as libc::c_long)
838 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
839 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
840 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
841 +                                                 - 1 as libc::c_int as libc::c_long)
842 +                                                 * 2 as libc::c_int as libc::c_long
843 +                                                 + 1 as libc::c_int as libc::c_long
844 +                                         } else {
845 +                                             (if 1 as libc::c_int != 0 {
846 +                                                 0 as libc::c_int as libc::c_long
847 +                                             } else {
848 +                                                 (if 1 as libc::c_int != 0 {
849 +                                                     0 as libc::c_int as libc::c_long
850 +                                                 } else {
851 +                                                     n
852 +                                                 }) + 0 as libc::c_int as idx_t
853 +                                             }) - 1 as libc::c_int as libc::c_long
854 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:813:39
    |
813 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
814 | | ...                       0 as libc::c_int as libc::c_long
815 | | ...                   } else {
816 | | ...                       n
817 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:814:41
    |
814 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:817:42
    |
817 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:818:49
    |
818 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
819 | | ...                       0 as libc::c_int as libc::c_long
820 | | ...                   } else {
821 | | ...                       (if 1 as libc::c_int != 0 {
...   |
825 | | ...                       }) + 0 as libc::c_int as idx_t
826 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:819:45
    |
819 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:821:45
    |
821 | / ...                   (if 1 as libc::c_int != 0 {
822 | | ...                       0 as libc::c_int as libc::c_long
823 | | ...                   } else {
824 | | ...                       n
825 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:822:49
    |
822 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:825:50
    |
825 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:826:46
    |
826 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:827:47
    |
827 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:829:48
    |
829 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
830 | | ...                       0 as libc::c_int as libc::c_long
831 | | ...                   } else {
832 | | ...                       (if 1 as libc::c_int != 0 {
...   |
836 | | ...                       }) + 0 as libc::c_int as idx_t
837 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:830:49
    |
830 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:832:49
    |
832 | / ...                   (if 1 as libc::c_int != 0 {
833 | | ...                       0 as libc::c_int as libc::c_long
834 | | ...                   } else {
835 | | ...                       n
836 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:833:53
    |
833 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:836:54
    |
836 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:837:50
    |
837 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:839:67
    |
839 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:840:67
    |
840 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:841:51
    |
841 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:842:51
    |
842 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:843:51
    |
843 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:845:45
    |
845 | / ...                   (if 1 as libc::c_int != 0 {
846 | | ...                       0 as libc::c_int as libc::c_long
847 | | ...                   } else {
848 | | ...                       (if 1 as libc::c_int != 0 {
...   |
852 | | ...                       }) + 0 as libc::c_int as idx_t
853 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:846:49
    |
846 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:848:49
    |
848 | / ...                   (if 1 as libc::c_int != 0 {
849 | | ...                       0 as libc::c_int as libc::c_long
850 | | ...                   } else {
851 | | ...                       n
852 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:849:53
    |
849 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:852:54
    |
852 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:853:50
    |
853 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:856:37
    |
856 | / ...                   ((0 as libc::c_int as libc::c_long)
857 | | ...                       < (if 1 as libc::c_int != 0 {
858 | | ...                           0 as libc::c_int as libc::c_long
859 | | ...                       } else {
860 | | ...                           n
861 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
856 ~                                     i32::from((0 as libc::c_int as libc::c_long)
857 +                                         < (if 1 as libc::c_int != 0 {
858 +                                             0 as libc::c_int as libc::c_long
859 +                                         } else {
860 +                                             n
861 +                                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:856:38
    |
856 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:857:43
    |
857 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
858 | | ...                       0 as libc::c_int as libc::c_long
859 | | ...                   } else {
860 | | ...                       n
861 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:858:45
    |
858 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:861:46
    |
861 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:862:49
    |
862 | ...                   }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:864:41
    |
864 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
865 | | ...                       0 as libc::c_int as libc::c_long
866 | | ...                   } else {
867 | | ...                       s
868 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:865:41
    |
865 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:868:42
    |
868 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:869:43
    |
869 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:871:41
    |
871 | / ...                   ((0 as libc::c_int as libc::c_long)
872 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
871 ~                                         i32::from((0 as libc::c_int as libc::c_long)
872 +                                             < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:871:42
    |
871 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:872:51
    |
872 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:874:41
    |
874 | / ...                   ((-(1 as libc::c_int) as libc::c_long
875 | | ...                       - 0 as libc::c_int as idx_t)
876 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
874 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
875 +                                             - 0 as libc::c_int as idx_t)
876 +                                             < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:874:43
    |
874 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:875:47
    |
875 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:876:51
    |
876 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:879:37
    |
879 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:879:38
    |
879 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:882:33
    |
882 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:882:34
    |
882 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:888:22
    |
888 |                     *(&mut nbytes as *mut idx_t) = fresh18;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:892:22
    |
892 |                     *(&mut nbytes as *mut idx_t) = fresh20;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:893:21
    |
893 |                     fresh21 as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh21)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:899:23
    |
899 |     pa = xrealloc(pa, nbytes as size_t);
    |                       ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:904:1
    |
904 | / pub unsafe extern "C" fn xzalloc(mut s: size_t) -> *mut libc::c_void {
905 | |     return xcalloc(s, 1 as libc::c_int as size_t);
906 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:905:5
    |
905 |     return xcalloc(s, 1 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xcalloc(s, 1 as libc::c_int as size_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:905:23
    |
905 |     return xcalloc(s, 1 as libc::c_int as size_t);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:908:1
    |
908 | / pub unsafe extern "C" fn xizalloc(mut s: idx_t) -> *mut libc::c_void {
909 | |     return xicalloc(s, 1 as libc::c_int as idx_t);
910 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:909:5
    |
909 |     return xicalloc(s, 1 as libc::c_int as idx_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xicalloc(s, 1 as libc::c_int as idx_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:909:24
    |
909 |     return xicalloc(s, 1 as libc::c_int as idx_t);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:912:1
    |
912 | / pub unsafe extern "C" fn xcalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
913 | |     return check_nonnull(calloc(n, s));
914 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:913:5
    |
913 |     return check_nonnull(calloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(calloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:916:1
    |
916 | / pub unsafe extern "C" fn xicalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
917 | |     return check_nonnull(icalloc(n, s));
918 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:917:5
    |
917 |     return check_nonnull(icalloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(icalloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:920:1
    |
920 | / pub unsafe extern "C" fn xmemdup(
921 | |     mut p: *const libc::c_void,
922 | |     mut s: size_t,
923 | | ) -> *mut libc::c_void {
924 | |     return memcpy(xmalloc(s), p, s);
925 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:924:5
    |
924 |     return memcpy(xmalloc(s), p, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `memcpy(xmalloc(s), p, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:927:1
    |
927 | / pub unsafe extern "C" fn ximemdup(
928 | |     mut p: *const libc::c_void,
929 | |     mut s: idx_t,
930 | | ) -> *mut libc::c_void {
931 | |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
932 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:931:5
    |
931 |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `memcpy(ximalloc(s), p, s as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:931:35
    |
931 |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
    |                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:934:1
    |
934 | / pub unsafe extern "C" fn ximemdup0(
935 | |     mut p: *const libc::c_void,
936 | |     mut s: idx_t,
937 | | ) -> *mut libc::c_char {
...   |
942 | |         as *mut libc::c_char;
943 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:941:5
    |
941 | /     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
942 | |         as *mut libc::c_char;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
941 ~     memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
942 +         as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:938:41
    |
938 |       let mut result: *mut libc::c_char = ximalloc(s + 1 as libc::c_int as libc::c_long)
    |  _________________________________________^
939 | |         as *mut libc::c_char;
    | |____________________________^ help: try `pointer::cast`, a safer alternative: `ximalloc(s + 1 as libc::c_int as libc::c_long).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:938:54
    |
938 |     let mut result: *mut libc::c_char = ximalloc(s + 1 as libc::c_int as libc::c_long)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/xmalloc.rs:940:34
    |
940 |     *result.offset(s as isize) = 0 as libc::c_int as libc::c_char;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:940:20
    |
940 |     *result.offset(s as isize) = 0 as libc::c_int as libc::c_char;
    |                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:941:12
    |
941 |       return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |  ____________^
942 | |         as *mut libc::c_char;
    | |____________________________^ help: try `pointer::cast`, a safer alternative: `memcpy(result as *mut libc::c_void, p, s as libc::c_ulong).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:941:19
    |
941 |     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:941:51
    |
941 |     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |                                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:945:1
    |
945 | / pub unsafe extern "C" fn xstrdup(mut string: *const libc::c_char) -> *mut libc::c_char {
946 | |     return xmemdup(
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
950 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:946:5
    |
946 | /     return xmemdup(
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
946 ~     xmemdup(
947 +         string as *const libc::c_void,
948 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 +     ) as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:946:12
    |
946 |       return xmemdup(
    |  ____________^
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
946 ~     return xmemdup(
947 +         string as *const libc::c_void,
948 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 ~     ).cast::<i8>();
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:947:9
    |
947 |         string as *const libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:948:39
    |
948 |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: path statement with no effect
  --> src/c_strcasecmp.rs:31:9
   |
31 |         p1;
   |         ^^^
   |
   = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
  --> src/c_strcasecmp.rs:33:9
   |
33 |         p2;
   |         ^^^

warning: path statement with no effect
   --> src/quotearg.rs:358:25
    |
358 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:360:25
    |
360 |                         quote_string;
    |                         ^^^^^^^^^^^^^

warning: path statement with no effect
   --> src/quotearg.rs:396:21
    |
396 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:426:21
    |
426 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:487:29
    |
487 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:492:29
    |
492 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:497:29
    |
497 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:504:25
    |
504 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:523:29
    |
523 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:528:29
    |
528 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:579:49
    |
579 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:584:49
    |
584 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:642:49
    |
642 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:647:49
    |
647 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:767:25
    |
767 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:772:25
    |
772 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:777:25
    |
777 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:830:37
    |
830 | ...                   m;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:852:41
    |
852 | ...                   j;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:883:37
    |
883 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:888:37
    |
888 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:893:37
    |
893 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:900:33
    |
900 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:909:33
    |
909 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:919:33
    |
919 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:927:33
    |
927 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:940:33
    |
940 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:945:33
    |
945 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:952:29
    |
952 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1072:25
     |
1072 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1077:25
     |
1077 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1082:25
     |
1082 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1089:21
     |
1089 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1101:25
     |
1101 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1106:25
     |
1106 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1113:21
     |
1113 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1121:13
     |
1121 |             i;
     |             ^^

warning: path statement with no effect
    --> src/quotearg.rs:1186:21
     |
1186 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1188:21
     |
1188 |                     quote_string;
     |                     ^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1305:9
     |
1305 |         i;
     |         ^^

warning: path statement with no effect
   --> src/version_etc.rs:260:9
    |
260 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/version_etc.rs:282:9
    |
282 |         n_authors;
    |         ^^^^^^^^^^

warning: `rust` (lib) generated 2114 warnings
warning: long literal lacking separators
   --> src/cat.rs:209:41
    |
209 | pub const IO_BUFSIZE: C2RustUnnamed_0 = 262144;
    |                                         ^^^^^^ help: consider: `262_144`
    |
    = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:434:24
    |
434 |     if (*st).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                        ^^^^^^^^ help: consider: `0o170_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:435:12
    |
435 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^ help: consider: `0o100_000`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/cat.rs:436:12
    |
436 |         && blocksize & blocksize - 1 as libc::c_int as libc::c_long != 0
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `blocksize & (blocksize - 1 as libc::c_int as libc::c_long)`
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: long literal lacking separators
   --> src/cat.rs:441:13
    |
441 |         if (9223372036854775807 as libc::c_long as libc::c_ulonglong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:442:16
    |
442 |             < (9223372036854775807 as libc::c_longlong as libc::c_ulonglong)
    |                ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/cat.rs:446:48
    |
446 |               let mut power: libc::c_ulonglong = (1 as libc::c_ulonglong)
    |  ________________________________________________^
447 | |                 << 64 as libc::c_int - leading_zeros;
    | |____________________________________________________^ help: consider parenthesizing your expression: `(1 as libc::c_ulonglong) << (64 as libc::c_int - leading_zeros)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: long literal lacking separators
   --> src/cat.rs:448:25
    |
448 |             if power <= 9223372036854775807 as libc::c_long as libc::c_ulonglong {
    |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:453:21
    |
453 |     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:454:11
    |
454 |         < 18446744073709551615 as libc::c_ulong
    |           ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:456:9
    |
456 |         9223372036854775807 as libc::c_long as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:458:9
    |
458 |         18446744073709551615 as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:463:14
    |
463 |         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |              ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:464:15
    |
464 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:466:13
    |
466 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:468:13
    |
468 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:895:36
    |
895 |                 current_block_52 = 6476622998065200121;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `6_476_622_998_065_200_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:905:48
    |
905 | ...                   current_block_52 = 16658872821858055392;
    |                                          ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_658_872_821_858_055_392`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:907:48
    |
907 | ...                   current_block_52 = 15597372965620363352;
    |                                          ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_597_372_965_620_363_352`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:910:44
    |
910 |                         current_block_52 = 15597372965620363352;
    |                                            ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_597_372_965_620_363_352`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:913:25
    |
913 |                         16658872821858055392 => {}
    |                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_658_872_821_858_055_392`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:919:48
    |
919 | ...                   current_block_52 = 17784502470059252271;
    |                                          ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_784_502_470_059_252_271`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:923:40
    |
923 |                     current_block_52 = 17784502470059252271;
    |                                        ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_784_502_470_059_252_271`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:926:21
    |
926 |                     16658872821858055392 => {}
    |                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_658_872_821_858_055_392`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:945:44
    |
945 |                         current_block_52 = 6476622998065200121;
    |                                            ^^^^^^^^^^^^^^^^^^^ help: consider: `6_476_622_998_065_200_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/cat.rs:950:17
    |
950 |                 6476622998065200121 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_476_622_998_065_200_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1078:40
     |
1078 |     let mut copy_max: ssize_t = (((if (9223372036854775807 as libc::c_long
     |                                        ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1079:29
     |
1079 |         as libc::c_ulong) < 18446744073709551615 as libc::c_ulong
     |                             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1081:9
     |
1081 |         9223372036854775807 as libc::c_long as libc::c_ulong
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1083:9
     |
1083 |         18446744073709551615 as libc::c_ulong
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/cat.rs:1166:9
     |
1166 |     mut argv: *mut *mut libc::c_char,
     |         ^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/cat.rs:1165:9
     |
1165 |     mut argc: libc::c_int,
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: adding items after statements is confusing, since items exist from the start of the scope
    --> src/cat.rs:1197:5
     |
1197 | /     static mut long_options: [option; 10] = [
1198 | |         {
1199 | |             let mut init = option {
1200 | |                 name: b"number-nonblank\0" as *const u8 as *const libc::c_char,
...    |
1287 | |         },
1288 | |     ];
     | |______^
     |
     = note: `-W clippy::items-after-statements` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#items_after_statements

warning: long literal lacking separators
    --> src/cat.rs:1410:51
     |
1410 |     let mut out_isreg: bool = (stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                                   ^^^^^^^^ help: consider: `0o170_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1411:12
     |
1411 |         == 0o100000 as libc::c_int as libc::c_uint) as libc::c_int != 0 as libc::c_int;
     |            ^^^^^^^^ help: consider: `0o100_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1436:29
     |
1436 |             current_block = 13321564401369230990;
     |                             ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_321_564_401_369_230_990`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1491:33
     |
1491 |                 current_block = 4567019141635105728;
     |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_567_019_141_635_105_728`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1493:33
     |
1493 |                 current_block = 13321564401369230990;
     |                                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_321_564_401_369_230_990`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1497:13
     |
1497 |             13321564401369230990 => {
     |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_321_564_401_369_230_990`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1640:45
     |
1640 | ...                   current_block = 7239751344758050955;
     |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_239_751_344_758_050_955`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1642:45
     |
1642 | ...                   current_block = 5372832139739605200;
     |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `5_372_832_139_739_605_200`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1645:41
     |
1645 |                         current_block = 5372832139739605200;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `5_372_832_139_739_605_200`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1648:25
     |
1648 |                         7239751344758050955 => {}
     |                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_239_751_344_758_050_955`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1660:43
     |
1660 | ...                   & 0o170000 as libc::c_int as libc::c_uint
     |                         ^^^^^^^^ help: consider: `0o170_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/cat.rs:1661:44
     |
1661 | ...                   == 0o100000 as libc::c_int as libc::c_uint
     |                          ^^^^^^^^ help: consider: `0o100_000`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
    --> src/cat.rs:1888:44
     |
1888 |   ...                   } else {
     |  ______________________________^
1889 | | ...                       if 4 as libc::c_int == 0 as libc::c_int {
1890 | | ...                           0 as libc::c_int
1891 | | ...                       } else {
...    |
2005 | | ...                       }
2006 | | ...                   }) != 0
     | |_______________________^
     |
     = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1888 ~                                     } else if 4 as libc::c_int == 0 as libc::c_int {
1889 +                                         0 as libc::c_int
1890 +                                     } else {
1891 +                                         if insize < 0 as libc::c_int as libc::c_long {
1892 +                                             if (if (if ((if 1 as libc::c_int != 0 {
1893 +                                                 0 as libc::c_int as libc::c_long
1894 +                                             } else {
1895 +                                                 (if 1 as libc::c_int != 0 {
1896 +                                                     0 as libc::c_int as libc::c_long
1897 +                                                 } else {
1898 +                                                     insize
1899 +                                                 }) + 0 as libc::c_int as idx_t
1900 +                                             }) - 1 as libc::c_int as libc::c_long)
1901 +                                                 < 0 as libc::c_int as libc::c_long
1902 +                                             {
1903 +                                                 !(((((if 1 as libc::c_int != 0 {
1904 +                                                     0 as libc::c_int as libc::c_long
1905 +                                                 } else {
1906 +                                                     (if 1 as libc::c_int != 0 {
1907 +                                                         0 as libc::c_int as libc::c_long
1908 +                                                     } else {
1909 +                                                         insize
1910 +                                                     }) + 0 as libc::c_int as idx_t
1911 +                                                 }) + 1 as libc::c_int as libc::c_long)
1912 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1913 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1914 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1915 +                                                     - 1 as libc::c_int as libc::c_long)
1916 +                                                     * 2 as libc::c_int as libc::c_long
1917 +                                                     + 1 as libc::c_int as libc::c_long)
1918 +                                             } else {
1919 +                                                 (if 1 as libc::c_int != 0 {
1920 +                                                     0 as libc::c_int as libc::c_long
1921 +                                                 } else {
1922 +                                                     (if 1 as libc::c_int != 0 {
1923 +                                                         0 as libc::c_int as libc::c_long
1924 +                                                     } else {
1925 +                                                         insize
1926 +                                                     }) + 0 as libc::c_int as idx_t
1927 +                                                 }) + 0 as libc::c_int as libc::c_long
1928 +                                             }) < 0 as libc::c_int as libc::c_long
1929 +                                             {
1930 +                                                 (((if 1 as libc::c_int != 0 {
1931 +                                                     0 as libc::c_int as libc::c_long
1932 +                                                 } else {
1933 +                                                     insize
1934 +                                                 }) + 0 as libc::c_int as idx_t)
1935 +                                                     < -(if ((if 1 as libc::c_int != 0 {
1936 +                                                         0 as libc::c_int as libc::c_long
1937 +                                                     } else {
1938 +                                                         (if 1 as libc::c_int != 0 {
1939 +                                                             0 as libc::c_int as libc::c_long
1940 +                                                         } else {
1941 +                                                             insize
1942 +                                                         }) + 0 as libc::c_int as idx_t
1943 +                                                     }) - 1 as libc::c_int as libc::c_long)
1944 +                                                         < 0 as libc::c_int as libc::c_long
1945 +                                                     {
1946 +                                                         ((((if 1 as libc::c_int != 0 {
1947 +                                                             0 as libc::c_int as libc::c_long
1948 +                                                         } else {
1949 +                                                             (if 1 as libc::c_int != 0 {
1950 +                                                                 0 as libc::c_int as libc::c_long
1951 +                                                             } else {
1952 +                                                                 insize
1953 +                                                             }) + 0 as libc::c_int as idx_t
1954 +                                                         }) + 1 as libc::c_int as libc::c_long)
1955 +                                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1956 +                                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1957 +                                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1958 +                                                             - 1 as libc::c_int as libc::c_long)
1959 +                                                             * 2 as libc::c_int as libc::c_long
1960 +                                                             + 1 as libc::c_int as libc::c_long
1961 +                                                     } else {
1962 +                                                         (if 1 as libc::c_int != 0 {
1963 +                                                             0 as libc::c_int as libc::c_long
1964 +                                                         } else {
1965 +                                                             (if 1 as libc::c_int != 0 {
1966 +                                                                 0 as libc::c_int as libc::c_long
1967 +                                                             } else {
1968 +                                                                 insize
1969 +                                                             }) + 0 as libc::c_int as idx_t
1970 +                                                         }) - 1 as libc::c_int as libc::c_long
1971 +                                                     })) as libc::c_int
1972 +                                             } else {
1973 +                                                 ((0 as libc::c_int as libc::c_long)
1974 +                                                     < (if 1 as libc::c_int != 0 {
1975 +                                                         0 as libc::c_int as libc::c_long
1976 +                                                     } else {
1977 +                                                         insize
1978 +                                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
1979 +                                             }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
1980 +                                             {
1981 +                                                 if ((if 1 as libc::c_int != 0 {
1982 +                                                     0 as libc::c_int
1983 +                                                 } else {
1984 +                                                     4 as libc::c_int
1985 +                                                 }) - 1 as libc::c_int) < 0 as libc::c_int
1986 +                                                 {
1987 +                                                     ((0 as libc::c_int as libc::c_long)
1988 +                                                         < 4 as libc::c_int as libc::c_long
1989 +                                                             + 0 as libc::c_int as idx_t) as libc::c_int
1990 +                                                 } else {
1991 +                                                     ((-(1 as libc::c_int) as libc::c_long
1992 +                                                         - 0 as libc::c_int as idx_t)
1993 +                                                         < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1994 +                                                         as libc::c_int
1995 +                                                 }
1996 +                                             } else {
1997 +                                                 (0 as libc::c_int as idx_t / insize
1998 +                                                     < 4 as libc::c_int as libc::c_long) as libc::c_int
1999 +                                             }
2000 +                                         } else {
2001 +                                             ((-(1 as libc::c_int) as idx_t
2002 +                                                 / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
2003 +                                         }
2004 ~                                     }) != 0
     |

warning: this `else { if .. }` block can be collapsed
    --> src/cat.rs:1777:48
     |
1777 |   ...                   } else {
     |  ______________________________^
1778 | | ...                       if (if (if ((if 1 as libc::c_int != 0 {
1779 | | ...                           0 as libc::c_int as libc::c_long
1780 | | ...                       } else {
...    |
1886 | | ...                       }
1887 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1777 ~                                         } else if (if (if ((if 1 as libc::c_int != 0 {
1778 +                                             0 as libc::c_int as libc::c_long
1779 +                                         } else {
1780 +                                             (if 1 as libc::c_int != 0 {
1781 +                                                 0 as libc::c_int
1782 +                                             } else {
1783 +                                                 4 as libc::c_int
1784 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1785 +                                         }) - 1 as libc::c_int as libc::c_long)
1786 +                                             < 0 as libc::c_int as libc::c_long
1787 +                                         {
1788 +                                             !(((((if 1 as libc::c_int != 0 {
1789 +                                                 0 as libc::c_int as libc::c_long
1790 +                                             } else {
1791 +                                                 (if 1 as libc::c_int != 0 {
1792 +                                                     0 as libc::c_int
1793 +                                                 } else {
1794 +                                                     4 as libc::c_int
1795 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1796 +                                             }) + 1 as libc::c_int as libc::c_long)
1797 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1798 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1799 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1800 +                                                 - 1 as libc::c_int as libc::c_long)
1801 +                                                 * 2 as libc::c_int as libc::c_long
1802 +                                                 + 1 as libc::c_int as libc::c_long)
1803 +                                         } else {
1804 +                                             (if 1 as libc::c_int != 0 {
1805 +                                                 0 as libc::c_int as libc::c_long
1806 +                                             } else {
1807 +                                                 (if 1 as libc::c_int != 0 {
1808 +                                                     0 as libc::c_int
1809 +                                                 } else {
1810 +                                                     4 as libc::c_int
1811 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1812 +                                             }) + 0 as libc::c_int as libc::c_long
1813 +                                         }) < 0 as libc::c_int as libc::c_long
1814 +                                         {
1815 +                                             (((if 1 as libc::c_int != 0 {
1816 +                                                 0 as libc::c_int
1817 +                                             } else {
1818 +                                                 4 as libc::c_int
1819 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t)
1820 +                                                 < -(if ((if 1 as libc::c_int != 0 {
1821 +                                                     0 as libc::c_int as libc::c_long
1822 +                                                 } else {
1823 +                                                     (if 1 as libc::c_int != 0 {
1824 +                                                         0 as libc::c_int
1825 +                                                     } else {
1826 +                                                         4 as libc::c_int
1827 +                                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1828 +                                                 }) - 1 as libc::c_int as libc::c_long)
1829 +                                                     < 0 as libc::c_int as libc::c_long
1830 +                                                 {
1831 +                                                     ((((if 1 as libc::c_int != 0 {
1832 +                                                         0 as libc::c_int as libc::c_long
1833 +                                                     } else {
1834 +                                                         (if 1 as libc::c_int != 0 {
1835 +                                                             0 as libc::c_int
1836 +                                                         } else {
1837 +                                                             4 as libc::c_int
1838 +                                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1839 +                                                     }) + 1 as libc::c_int as libc::c_long)
1840 +                                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1841 +                                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1842 +                                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1843 +                                                         - 1 as libc::c_int as libc::c_long)
1844 +                                                         * 2 as libc::c_int as libc::c_long
1845 +                                                         + 1 as libc::c_int as libc::c_long
1846 +                                                 } else {
1847 +                                                     (if 1 as libc::c_int != 0 {
1848 +                                                         0 as libc::c_int as libc::c_long
1849 +                                                     } else {
1850 +                                                         (if 1 as libc::c_int != 0 {
1851 +                                                             0 as libc::c_int
1852 +                                                         } else {
1853 +                                                             4 as libc::c_int
1854 +                                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1855 +                                                     }) - 1 as libc::c_int as libc::c_long
1856 +                                                 })) as libc::c_int
1857 +                                         } else {
1858 +                                             ((0 as libc::c_int as libc::c_long)
1859 +                                                 < (if 1 as libc::c_int != 0 {
1860 +                                                     0 as libc::c_int
1861 +                                                 } else {
1862 +                                                     4 as libc::c_int
1863 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t)
1864 +                                                 as libc::c_int
1865 +                                         }) != 0 && 4 as libc::c_int == -(1 as libc::c_int)
1866 +                                         {
1867 +                                             if ((if 1 as libc::c_int != 0 {
1868 +                                                 0 as libc::c_int as libc::c_long
1869 +                                             } else {
1870 +                                                 insize
1871 +                                             }) - 1 as libc::c_int as libc::c_long)
1872 +                                                 < 0 as libc::c_int as libc::c_long
1873 +                                             {
1874 +                                                 ((0 as libc::c_int as libc::c_long)
1875 +                                                     < insize + 0 as libc::c_int as idx_t) as libc::c_int
1876 +                                             } else {
1877 +                                                 ((0 as libc::c_int as libc::c_long) < insize
1878 +                                                     && (-(1 as libc::c_int) as libc::c_long
1879 +                                                         - 0 as libc::c_int as idx_t)
1880 +                                                         < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
1881 +                                             }
1882 +                                         } else {
1883 +                                             ((0 as libc::c_int as idx_t
1884 +                                                 / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
1885 +                                         }
     |

warning: operator precedence can trip the unwary
    --> src/cat.rs:1763:53
     |
1763 | / ...                   (if 1 as libc::c_int != 0 {
1764 | | ...                       0 as libc::c_int
1765 | | ...                   } else {
1766 | | ...                       4 as libc::c_int
...    |
1769 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1770 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     | |______________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
     |
1763 ~                                                     ((if 1 as libc::c_int != 0 {
1764 +                                                         0 as libc::c_int
1765 +                                                     } else {
1766 +                                                         4 as libc::c_int
1767 +                                                     }) as libc::c_long + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1768 +                                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1769 +                                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |

warning: this `else { if .. }` block can be collapsed
    --> src/cat.rs:1891:48
     |
1891 |   ...                   } else {
     |  ______________________________^
1892 | | ...                       if insize < 0 as libc::c_int as libc::c_long {
1893 | | ...                           if (if (if ((if 1 as libc::c_int != 0 {
1894 | | ...                               0 as libc::c_int as libc::c_long
...    |
2004 | | ...                       }
2005 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1891 ~                                         } else if insize < 0 as libc::c_int as libc::c_long {
1892 +                                             if (if (if ((if 1 as libc::c_int != 0 {
1893 +                                                 0 as libc::c_int as libc::c_long
1894 +                                             } else {
1895 +                                                 (if 1 as libc::c_int != 0 {
1896 +                                                     0 as libc::c_int as libc::c_long
1897 +                                                 } else {
1898 +                                                     insize
1899 +                                                 }) + 0 as libc::c_int as idx_t
1900 +                                             }) - 1 as libc::c_int as libc::c_long)
1901 +                                                 < 0 as libc::c_int as libc::c_long
1902 +                                             {
1903 +                                                 !(((((if 1 as libc::c_int != 0 {
1904 +                                                     0 as libc::c_int as libc::c_long
1905 +                                                 } else {
1906 +                                                     (if 1 as libc::c_int != 0 {
1907 +                                                         0 as libc::c_int as libc::c_long
1908 +                                                     } else {
1909 +                                                         insize
1910 +                                                     }) + 0 as libc::c_int as idx_t
1911 +                                                 }) + 1 as libc::c_int as libc::c_long)
1912 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1913 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1914 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1915 +                                                     - 1 as libc::c_int as libc::c_long)
1916 +                                                     * 2 as libc::c_int as libc::c_long
1917 +                                                     + 1 as libc::c_int as libc::c_long)
1918 +                                             } else {
1919 +                                                 (if 1 as libc::c_int != 0 {
1920 +                                                     0 as libc::c_int as libc::c_long
1921 +                                                 } else {
1922 +                                                     (if 1 as libc::c_int != 0 {
1923 +                                                         0 as libc::c_int as libc::c_long
1924 +                                                     } else {
1925 +                                                         insize
1926 +                                                     }) + 0 as libc::c_int as idx_t
1927 +                                                 }) + 0 as libc::c_int as libc::c_long
1928 +                                             }) < 0 as libc::c_int as libc::c_long
1929 +                                             {
1930 +                                                 (((if 1 as libc::c_int != 0 {
1931 +                                                     0 as libc::c_int as libc::c_long
1932 +                                                 } else {
1933 +                                                     insize
1934 +                                                 }) + 0 as libc::c_int as idx_t)
1935 +                                                     < -(if ((if 1 as libc::c_int != 0 {
1936 +                                                         0 as libc::c_int as libc::c_long
1937 +                                                     } else {
1938 +                                                         (if 1 as libc::c_int != 0 {
1939 +                                                             0 as libc::c_int as libc::c_long
1940 +                                                         } else {
1941 +                                                             insize
1942 +                                                         }) + 0 as libc::c_int as idx_t
1943 +                                                     }) - 1 as libc::c_int as libc::c_long)
1944 +                                                         < 0 as libc::c_int as libc::c_long
1945 +                                                     {
1946 +                                                         ((((if 1 as libc::c_int != 0 {
1947 +                                                             0 as libc::c_int as libc::c_long
1948 +                                                         } else {
1949 +                                                             (if 1 as libc::c_int != 0 {
1950 +                                                                 0 as libc::c_int as libc::c_long
1951 +                                                             } else {
1952 +                                                                 insize
1953 +                                                             }) + 0 as libc::c_int as idx_t
1954 +                                                         }) + 1 as libc::c_int as libc::c_long)
1955 +                                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1956 +                                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1957 +                                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1958 +                                                             - 1 as libc::c_int as libc::c_long)
1959 +                                                             * 2 as libc::c_int as libc::c_long
1960 +                                                             + 1 as libc::c_int as libc::c_long
1961 +                                                     } else {
1962 +                                                         (if 1 as libc::c_int != 0 {
1963 +                                                             0 as libc::c_int as libc::c_long
1964 +                                                         } else {
1965 +                                                             (if 1 as libc::c_int != 0 {
1966 +                                                                 0 as libc::c_int as libc::c_long
1967 +                                                             } else {
1968 +                                                                 insize
1969 +                                                             }) + 0 as libc::c_int as idx_t
1970 +                                                         }) - 1 as libc::c_int as libc::c_long
1971 +                                                     })) as libc::c_int
1972 +                                             } else {
1973 +                                                 ((0 as libc::c_int as libc::c_long)
1974 +                                                     < (if 1 as libc::c_int != 0 {
1975 +                                                         0 as libc::c_int as libc::c_long
1976 +                                                     } else {
1977 +                                                         insize
1978 +                                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
1979 +                                             }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
1980 +                                             {
1981 +                                                 if ((if 1 as libc::c_int != 0 {
1982 +                                                     0 as libc::c_int
1983 +                                                 } else {
1984 +                                                     4 as libc::c_int
1985 +                                                 }) - 1 as libc::c_int) < 0 as libc::c_int
1986 +                                                 {
1987 +                                                     ((0 as libc::c_int as libc::c_long)
1988 +                                                         < 4 as libc::c_int as libc::c_long
1989 +                                                             + 0 as libc::c_int as idx_t) as libc::c_int
1990 +                                                 } else {
1991 +                                                     ((-(1 as libc::c_int) as libc::c_long
1992 +                                                         - 0 as libc::c_int as idx_t)
1993 +                                                         < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1994 +                                                         as libc::c_int
1995 +                                                 }
1996 +                                             } else {
1997 +                                                 (0 as libc::c_int as idx_t / insize
1998 +                                                     < 4 as libc::c_int as libc::c_long) as libc::c_int
1999 +                                             }
2000 +                                         } else {
2001 +                                             ((-(1 as libc::c_int) as idx_t
2002 +                                                 / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
2003 +                                         }
     |

warning: this `if` statement can be collapsed
    --> src/cat.rs:2116:5
     |
2116 | /     if pending_cr {
2117 | |         if full_write(
2118 | |             1 as libc::c_int,
2119 | |             b"\r\0" as *const u8 as *const libc::c_char as *const libc::c_void,
...    |
2124 | |         }
2125 | |     }
     | |_____^
     |
     = note: `-W clippy::collapsible-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
2116 ~     if pending_cr && full_write(
2117 +             1 as libc::c_int,
2118 +             b"\r\0" as *const u8 as *const libc::c_char as *const libc::c_void,
2119 +             1 as libc::c_int as size_t,
2120 +         ) != 1 as libc::c_int as libc::c_ulong {
2121 +         write_error();
2122 +     }
     |

warning: unnecessary structure name repetition
   --> src/cat.rs:128:22
    |
128 |     pub _chain: *mut _IO_FILE,
    |                      ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src/cat.rs:139:29
    |
139 |     pub _freeres_list: *mut _IO_FILE,
    |                             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: this boolean expression contains a logic bug
   --> src/cat.rs:219:12
    |
219 |       return err == 95 as libc::c_int
    |  ____________^
220 | |         || 95 as libc::c_int != 95 as libc::c_int && err == 95 as libc::c_int;
    | |_____________________________________________________________________________^ help: it would look like the following: `err == 95 as libc::c_int`
    |
    = note: `-W clippy::logic-bug` implied by `-W clippy::all`
help: this expression can be optimized out by applying boolean operations to the outer expression
   --> src/cat.rs:220:12
    |
220 |         || 95 as libc::c_int != 95 as libc::c_int && err == 95 as libc::c_int;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#logic_bug

warning: this could be a `const fn`
   --> src/cat.rs:218:1
    |
218 | / unsafe extern "C" fn is_ENOTSUP(mut err: libc::c_int) -> bool {
219 | |     return err == 95 as libc::c_int
220 | |         || 95 as libc::c_int != 95 as libc::c_int && err == 95 as libc::c_int;
221 | | }
    | |_^
    |
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/cat.rs:219:5
    |
219 | /     return err == 95 as libc::c_int
220 | |         || 95 as libc::c_int != 95 as libc::c_int && err == 95 as libc::c_int;
    | |______________________________________________________________________________^
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
219 ~     err == 95 as libc::c_int
220 +         || 95 as libc::c_int != 95 as libc::c_int && err == 95 as libc::c_int
    |

warning: equal expressions as operands to `!=`
   --> src/cat.rs:220:12
    |
220 |         || 95 as libc::c_int != 95 as libc::c_int && err == 95 as libc::c_int;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:226:13
    |
226 | /             b"\nWith no FILE, or when FILE is -, read standard input.\n\0" as *const u8
227 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nWith no FILE, or when FILE is -, read standard input.\n\0" as *const u8).cast::<i8>()`
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/cat.rs:288:12
    |
288 |         && !(strcmp(program, (*map_prog).program) == 0 as libc::c_int)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `strcmp(program, (*map_prog).program) != 0 as libc::c_int`
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (113/100)
   --> src/cat.rs:233:1
    |
233 | / unsafe extern "C" fn emit_ancillary_info(mut program: *const libc::c_char) {
234 | |     let infomap_0: [infomap; 7] = [
235 | |         {
236 | |             let mut init = infomap {
...   |
346 | |     );
347 | | }
    | |_^
    |
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: returning the result of a `let` binding from a block
   --> src/cat.rs:240:13
    |
236 | /             let mut init = infomap {
237 | |                 program: b"[\0" as *const u8 as *const libc::c_char,
238 | |                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
239 | |             };
    | |______________- unnecessary `let` binding
240 |               init
    |               ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
236 ~             
237 ~             infomap {
238 +                 program: b"[\0" as *const u8 as *const libc::c_char,
239 +                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
240 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:237:26
    |
237 |                 program: b"[\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"[\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:238:23
    |
238 |                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"test invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/cat.rs:247:13
    |
243 | /             let mut init = infomap {
244 | |                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
245 | |                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
246 | |             };
    | |______________- unnecessary `let` binding
247 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
243 ~             
244 ~             infomap {
245 +                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
246 +                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
247 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:244:26
    |
244 |                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:245:23
    |
245 |                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Multi-call invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/cat.rs:254:13
    |
250 | /             let mut init = infomap {
251 | |                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
252 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
253 | |             };
    | |______________- unnecessary `let` binding
254 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
250 ~             
251 ~             infomap {
252 +                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
253 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
254 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:251:26
    |
251 |                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha224sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:252:23
    |
252 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/cat.rs:261:13
    |
257 | /             let mut init = infomap {
258 | |                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
259 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
260 | |             };
    | |______________- unnecessary `let` binding
261 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
257 ~             
258 ~             infomap {
259 +                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
260 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
261 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:258:26
    |
258 |                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha256sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:259:23
    |
259 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/cat.rs:268:13
    |
264 | /             let mut init = infomap {
265 | |                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
266 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
267 | |             };
    | |______________- unnecessary `let` binding
268 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
264 ~             
265 ~             infomap {
266 +                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
267 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
268 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:265:26
    |
265 |                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha384sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:266:23
    |
266 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/cat.rs:275:13
    |
271 | /             let mut init = infomap {
272 | |                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
273 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
274 | |             };
    | |______________- unnecessary `let` binding
275 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
271 ~             
272 ~             infomap {
273 +                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
274 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
275 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:272:26
    |
272 |                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha512sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:273:23
    |
273 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/cat.rs:282:13
    |
278 | /             let mut init = infomap {
279 | |                 program: 0 as *const libc::c_char,
280 | |                 node: 0 as *const libc::c_char,
281 | |             };
    | |______________- unnecessary `let` binding
282 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
278 ~             
279 ~             infomap {
280 +                 program: 0 as *const libc::c_char,
281 +                 node: 0 as *const libc::c_char,
282 +             }
    |

warning: `0 as *const _` detected
   --> src/cat.rs:279:26
    |
279 |                 program: 0 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/cat.rs:280:23
    |
280 |                 node: 0 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/cat.rs:291:9
    |
291 |         map_prog;
    |         ^^^^^^^^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:297:17
    |
297 |         gettext(b"\n%s online help: <%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n%s online help: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:298:9
    |
298 |         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:299:9
    |
299 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *const _` detected
   --> src/cat.rs:303:9
    |
303 |         0 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:308:13
    |
308 |             b"en_\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"en_\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:310:31
    |
310 |                 .wrapping_sub(1 as libc::c_int as libc::c_ulong),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:315:17
    |
315 | /                 b"Report any translation bugs to <https://translationproject.org/team/>\n\0"
316 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Report any translation bugs to <https://translationproject.org/team/>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:323:9
    |
323 |         b"[\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"[\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:326:9
    |
326 |         b"test\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"test\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:331:17
    |
331 |         gettext(b"Full documentation <%s%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Full documentation <%s%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:332:9
    |
332 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:337:13
    |
337 | /             b"or available locally via: info '(coreutils) %s%s'\n\0" as *const u8
338 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"or available locally via: info '(coreutils) %s%s'\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:342:13
    |
342 |             b" invocation\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b" invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:344:13
    |
344 |             b"\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:354:5
    |
354 | /     if 0 != 0 {
355 | |         error(
356 | |             1 as libc::c_int,
357 | |             saved_errno,
...   |
387 | |         });
388 | |     };
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/cat.rs:354:8
    |
354 |     if 0 != 0 {
    |        ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:358:21
    |
358 |             gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:360:9
    |
360 | /         if 1 as libc::c_int != 0 as libc::c_int {
361 | |             unreachable!();
362 | |         } else {};
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:365:13
    |
365 |             let __errstatus: libc::c_int = 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:369:25
    |
369 |                 gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:371:13
    |
371 | /             if __errstatus != 0 as libc::c_int {
372 | |                 unreachable!();
373 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:377:13
    |
377 |             let __errstatus: libc::c_int = 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:381:25
    |
381 |                 gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:383:13
    |
383 | /             if __errstatus != 0 as libc::c_int {
384 | |                 unreachable!();
385 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this could be a `const fn`
   --> src/cat.rs:395:1
    |
395 | / unsafe extern "C" fn __gl_stdbit_clzll(mut n: libc::c_ulonglong) -> libc::c_int {
396 | |     return (if n != 0 {
397 | |         n.leading_zeros() as i32 as libc::c_ulong
398 | |     } else {
...   |
401 | |     }) as libc::c_int;
402 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/cat.rs:396:5
    |
396 | /     return (if n != 0 {
397 | |         n.leading_zeros() as i32 as libc::c_ulong
398 | |     } else {
399 | |         (8 as libc::c_int as libc::c_ulong)
400 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
401 | |     }) as libc::c_int;
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
396 ~     (if n != 0 {
397 +         n.leading_zeros() as i32 as libc::c_ulong
398 +     } else {
399 +         (8 as libc::c_int as libc::c_ulong)
400 +             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
401 +     }) as libc::c_int
    |

warning: casting `u64` to `i32` may truncate the value
   --> src/cat.rs:396:12
    |
396 |       return (if n != 0 {
    |  ____________^
397 | |         n.leading_zeros() as i32 as libc::c_ulong
398 | |     } else {
399 | |         (8 as libc::c_int as libc::c_ulong)
400 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
401 | |     }) as libc::c_int;
    | |_____________________^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unnecessary `!=` operation
   --> src/cat.rs:396:12
    |
396 |       return (if n != 0 {
    |  ____________^
397 | |         n.leading_zeros() as i32 as libc::c_ulong
398 | |     } else {
399 | |         (8 as libc::c_int as libc::c_ulong)
400 | |             .wrapping_mul(::core::mem::size_of::<libc::c_ulonglong>() as libc::c_ulong)
401 | |     }) as libc::c_int;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:397:9
    |
397 |         n.leading_zeros() as i32 as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/cat.rs:397:9
    |
397 |         n.leading_zeros() as i32 as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:399:9
    |
399 |         (8 as libc::c_int as libc::c_ulong)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/cat.rs:405:5
    |
405 |     return __gl_stdbit_clzll(n) as libc::c_uint;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_stdbit_clzll(n) as libc::c_uint`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/cat.rs:405:12
    |
405 |     return __gl_stdbit_clzll(n) as libc::c_uint;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/cat.rs:453:5
    |
453 | /     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
454 | |         < 18446744073709551615 as libc::c_ulong
455 | |     {
456 | |         9223372036854775807 as libc::c_long as libc::c_ulong
...   |
473 | |         blocksize as libc::c_ulong
474 | |     }) as idx_t;
    | |________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
453 ~     (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
454 +         < 18446744073709551615 as libc::c_ulong
455 +     {
456 +         9223372036854775807 as libc::c_long as libc::c_ulong
457 +     } else {
458 +         18446744073709551615 as libc::c_ulong
459 +     })
460 +         .wrapping_div(2 as libc::c_int as libc::c_ulong)
461 +         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
462 +     {
463 +         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
464 +             < 18446744073709551615 as libc::c_ulong
465 +         {
466 +             9223372036854775807 as libc::c_long as libc::c_ulong
467 +         } else {
468 +             18446744073709551615 as libc::c_ulong
469 +         })
470 +             .wrapping_div(2 as libc::c_int as libc::c_ulong)
471 +             .wrapping_add(1 as libc::c_int as libc::c_ulong)
472 +     } else {
473 +         blocksize as libc::c_ulong
474 +     }) as idx_t
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/cat.rs:409:32
    |
409 |       let mut blocksize: idx_t = (if (if (0 as libc::c_int) < (*st).st_blksize
    |  ________________________________^
410 | |         && (*st).st_blksize as libc::c_ulong
411 | |             <= (-(1 as libc::c_int) as size_t)
412 | |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
...   |
429 | |         512 as libc::c_int
430 | |     }) as idx_t;
    | |_______________^
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
409 ~     let mut blocksize: idx_t = i64::from((if (if (0 as libc::c_int) < (*st).st_blksize
410 +         && (*st).st_blksize as libc::c_ulong
411 +             <= (-(1 as libc::c_int) as size_t)
412 +                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
413 +                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
414 +     {
415 +         (*st).st_blksize
416 +     } else {
417 +         512 as libc::c_int
418 +     }) <= 0 as libc::c_int
419 +     {
420 +         IO_BUFSIZE as libc::c_int
421 +     } else if (0 as libc::c_int) < (*st).st_blksize
422 +         && (*st).st_blksize as libc::c_ulong
423 +             <= (-(1 as libc::c_int) as size_t)
424 +                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
425 +                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
426 +     {
427 +         (*st).st_blksize
428 +     } else {
429 +         512 as libc::c_int
430 ~     }));
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:410:12
    |
410 |         && (*st).st_blksize as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:411:16
    |
411 |             <= (-(1 as libc::c_int) as size_t)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:412:31
    |
412 |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:413:31
    |
413 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/cat.rs:420:9
    |
420 |         IO_BUFSIZE as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:422:12
    |
422 |         && (*st).st_blksize as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:423:16
    |
423 |             <= (-(1 as libc::c_int) as size_t)
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:424:31
    |
424 |                 .wrapping_div(8 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:425:31
    |
425 |                 .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/cat.rs:432:12
    |
432 |         += (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(IO_BUFSIZE as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/cat.rs:432:13
    |
432 |         += (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/cat.rs:433:15
    |
433 |             - (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long % blocksize;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(IO_BUFSIZE as libc::c_int - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/cat.rs:433:16
    |
433 |             - (IO_BUFSIZE as libc::c_int - 1 as libc::c_int) as libc::c_long % blocksize;
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/cat.rs:434:24
    |
434 |     if (*st).st_mode & 0o170000 as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/cat.rs:435:12
    |
435 |         == 0o100000 as libc::c_int as libc::c_uint
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/cat.rs:436:36
    |
436 |         && blocksize & blocksize - 1 as libc::c_int as libc::c_long != 0
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/cat.rs:438:46
    |
438 |           let mut leading_zeros: libc::c_int = stdc_leading_zeros_ull(
    |  ______________________________________________^
439 | |             blocksize as libc::c_ulonglong,
440 | |         ) as libc::c_int;
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:439:13
    |
439 |             blocksize as libc::c_ulonglong,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:441:12
    |
441 |         if (9223372036854775807 as libc::c_long as libc::c_ulonglong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:442:15
    |
442 |             < (9223372036854775807 as libc::c_longlong as libc::c_ulonglong)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:448:25
    |
448 |             if power <= 9223372036854775807 as libc::c_long as libc::c_ulonglong {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
   --> src/cat.rs:449:29
    |
449 |                 blocksize = power as idx_t;
    |                             ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
   --> src/cat.rs:453:12
    |
453 |       return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |  ____________^
454 | |         < 18446744073709551615 as libc::c_ulong
455 | |     {
456 | |         9223372036854775807 as libc::c_long as libc::c_ulong
...   |
473 | |         blocksize as libc::c_ulong
474 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:453:20
    |
453 |     return (if (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:456:9
    |
456 |         9223372036854775807 as libc::c_long as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:460:23
    |
460 |         .wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:461:23
    |
461 |         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:461:60
    |
461 |         .wrapping_add(1 as libc::c_int as libc::c_ulong) < blocksize as libc::c_ulong
    |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:463:13
    |
463 |         (if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:466:13
    |
466 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:470:27
    |
470 |             .wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:471:27
    |
471 |             .wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:473:9
    |
473 |         blocksize as libc::c_ulong
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/cat.rs:477:1
    |
477 | / unsafe extern "C" fn __gl_setmode(
478 | |     mut _fd: libc::c_int,
479 | |     mut _mode: libc::c_int,
480 | | ) -> libc::c_int {
481 | |     return 0 as libc::c_int;
482 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/cat.rs:481:5
    |
481 |     return 0 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/cat.rs:488:5
    |
488 |     return __gl_setmode(fd, mode);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `__gl_setmode(fd, mode)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
   --> src/cat.rs:491:1
    |
491 | unsafe extern "C" fn xset_binary_mode_error() {}
    | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:501:5
    |
501 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:502:5
    |
502 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:503:5
    |
503 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:504:5
    |
504 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:505:5
    |
505 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:506:5
    |
506 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:507:5
    |
507 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:508:5
    |
508 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:509:5
    |
509 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:510:5
    |
510 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:511:5
    |
511 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:512:5
    |
512 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:513:5
    |
513 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:514:5
    |
514 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:515:5
    |
515 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:516:5
    |
516 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:517:5
    |
517 |     ' ' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:518:5
    |
518 |     '0' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:519:5
    |
519 |     '\t' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:520:5
    |
520 |     '\0' as i32 as libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
   --> src/cat.rs:531:1
    |
531 | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
532 | |     if status != 0 as libc::c_int {
533 | |         fprintf(
534 | |             stderr,
...   |
595 | |     exit(status);
596 | | }
    | |_^
    |
    = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary `!=` operation
   --> src/cat.rs:532:5
    |
532 | /     if status != 0 as libc::c_int {
533 | |         fprintf(
534 | |             stderr,
535 | |             gettext(
...   |
593 | |         emit_ancillary_info(b"cat\0" as *const u8 as *const libc::c_char);
594 | |     }
    | |_____^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:536:17
    |
536 | /                 b"Try '%s --help' for more information.\n\0" as *const u8
537 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Try '%s --help' for more information.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:544:17
    |
544 | /                 b"Usage: %s [OPTION]... [FILE]...\n\0" as *const u8
545 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Usage: %s [OPTION]... [FILE]...\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:551:17
    |
551 | /                 b"Concatenate FILE(s) to standard output.\n\0" as *const u8
552 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Concatenate FILE(s) to standard output.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:559:17
    |
559 | /                 b"\n  -A, --show-all           equivalent to -vET\n  -b, --number-nonblank    number nonempty output lines, overrides -n\...
560 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\n  -A, --show-all           equivalent to -vET\n  -b, --number-nonblank    number nonempty output lines, overrides -n\n  -e                       equivalent to -vE\n  -E, --show-ends          display $ at end of each line\n  -n, --number             number all output lines\n  -s, --squeeze-blank      suppress repeated empty output lines\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:566:17
    |
566 | /                 b"  -t                       equivalent to -vT\n  -T, --show-tabs          display TAB characters as ^I\n  -u            ...
567 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -t                       equivalent to -vT\n  -T, --show-tabs          display TAB characters as ^I\n  -u                       (ignored)\n  -v, --show-nonprinting   use ^ and M- notation, except for LFD and TAB\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:573:17
    |
573 | /                 b"      --help        display this help and exit\n\0" as *const u8
574 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --help        display this help and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:580:17
    |
580 | /                 b"      --version     output version information and exit\n\0"
581 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --version     output version information and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:587:17
    |
587 | /                 b"\nExamples:\n  %s f - g  Output f's contents, then standard input, then g's contents.\n  %s        Copy standard input ...
588 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nExamples:\n  %s f - g  Output f's contents, then standard input, then g's contents.\n  %s        Copy standard input to standard output.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:593:29
    |
593 |         emit_ancillary_info(b"cat\0" as *const u8 as *const libc::c_char);
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cat\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/cat.rs:608:12
    |
608 |         if !(endp >= line_num_start) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `endp < line_num_start`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: manual implementation of an assign operation
   --> src/cat.rs:601:9
    |
601 |         *endp = *endp + 1;
    |         ^^^^^^^^^^^^^^^^^ help: replace it with: `*endp += 1`
    |
    = note: `-W clippy::assign-op-pattern` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:602:12
    |
602 |         if (fresh0 as libc::c_int) < '9' as i32 {
    |            ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:607:19
    |
607 |         *fresh1 = '0' as i32 as libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:614:27
    |
614 |         *line_num_start = '1' as i32 as libc::c_char;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:616:34
    |
616 |         *line_buf.as_mut_ptr() = '>' as i32 as libc::c_char;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
   --> src/cat.rs:620:9
    |
620 |         line_num_print;
    |         ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:627:13
    |
627 |             buf as *mut libc::c_void,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:628:13
    |
628 |             bufsize as size_t,
    |             ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:630:22
    |
630 |         if n_read == -(1 as libc::c_int) as size_t {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/cat.rs:631:13
    |
631 | /             if 0 != 0 {
632 | |                 error(
633 | |                     0 as libc::c_int,
634 | |                     *__errno_location(),
...   |
679 | |                 });
680 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/cat.rs:631:16
    |
631 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:635:21
    |
635 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:642:17
    |
642 | /                 if 0 as libc::c_int != 0 as libc::c_int {
643 | |                     unreachable!();
644 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/cat.rs:642:20
    |
642 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:647:21
    |
647 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:651:25
    |
651 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:658:21
    |
658 | /                     if __errstatus != 0 as libc::c_int {
659 | |                         unreachable!();
660 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:664:21
    |
664 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:668:25
    |
668 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:675:21
    |
675 | /                     if __errstatus != 0 as libc::c_int {
676 | |                         unreachable!();
677 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:683:22
    |
683 |         if n_read == 0 as libc::c_int as libc::c_ulong {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/cat.rs:697:8
    |
697 |     if (0 as libc::c_int as libc::c_long) < n_write {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:698:72
    |
698 |         if full_write(1 as libc::c_int, outbuf as *const libc::c_void, n_write as size_t)
    |                                                                        ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:699:16
    |
699 |             != n_write as libc::c_ulong
    |                ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this boolean expression can be simplified
   --> src/cat.rs:741:24
    |
741 |                     if !(outsize <= remaining_bytes) {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `outsize > remaining_bytes`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
   --> src/cat.rs:957:16
    |
957 |             if !(ch as libc::c_int == '\n' as i32) {
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `ch as libc::c_int != '\n' as i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (42/25)
   --> src/cat.rs:706:22
    |
706 | unsafe extern "C" fn cat(
    |                      ^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (354/100)
    --> src/cat.rs:706:1
     |
706  | / unsafe extern "C" fn cat(
707  | |     mut inbuf: *mut libc::c_char,
708  | |     mut insize: idx_t,
709  | |     mut outbuf: *mut libc::c_char,
...    |
1075 | |     };
1076 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/cat.rs:727:30
    |
727 |             if outbuf.offset(outsize as isize) <= bpout {
    |                              ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:734:25
    |
734 |                         outsize as size_t,
    |                         ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:735:26
    |
735 |                     ) != outsize as libc::c_ulong
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/cat.rs:739:36
    |
739 |                     wp = wp.offset(outsize as isize);
    |                                    ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:746:21
    |
746 |                     outbuf as *mut libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outbuf.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:748:21
    |
748 |                     remaining_bytes as libc::c_ulong,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/cat.rs:750:39
    |
750 |                 bpout = outbuf.offset(remaining_bytes as isize);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/cat.rs:755:20
    |
755 |                 if use_fionread as libc::c_int != 0
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(use_fionread)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:758:25
    |
758 |                         0x541b as libc::c_int as libc::c_ulong,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/cat.rs:759:25
    |
759 |                         &mut n_to_read as *mut libc::c_int,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n_to_read)`
    |
    = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:770:25
    |
770 | /                         if 0 != 0 {
771 | |                             error(
772 | |                                 0 as libc::c_int,
773 | |                                 *__errno_location(),
...   |
815 | |                             });
816 | |                         };
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/cat.rs:770:28
    |
770 |                         if 0 != 0 {
    |                            ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:775:37
    |
775 | / ...                   b"cannot do ioctl on %s\0" as *const u8
776 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot do ioctl on %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:780:29
    |
780 | / ...                   if 0 as libc::c_int != 0 as libc::c_int {
781 | | ...                       unreachable!();
782 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/cat.rs:780:32
    |
780 | ...                   if 0 as libc::c_int != 0 as libc::c_int {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:785:33
    |
785 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:790:41
    |
790 | / ...                   b"cannot do ioctl on %s\0" as *const u8
791 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot do ioctl on %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:795:33
    |
795 | / ...                   if __errstatus != 0 as libc::c_int {
796 | | ...                       unreachable!();
797 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:801:33
    |
801 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:806:41
    |
806 | / ...                   b"cannot do ioctl on %s\0" as *const u8
807 | | ...                       as *const libc::c_char,
    | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"cannot do ioctl on %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:811:33
    |
811 | / ...                   if __errstatus != 0 as libc::c_int {
812 | | ...                       unreachable!();
813 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:829:21
    |
829 |                     inbuf as *mut libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `inbuf.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/cat.rs:830:21
    |
830 |                     insize as size_t,
    |                     ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:832:30
    |
832 |                 if n_read == -(1 as libc::c_int) as size_t {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/cat.rs:833:21
    |
833 | /                     if 0 != 0 {
834 | |                         error(
835 | |                             0 as libc::c_int,
836 | |                             *__errno_location(),
...   |
881 | |                         });
882 | |                     };
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/cat.rs:833:24
    |
833 |                     if 0 != 0 {
    |                        ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:837:29
    |
837 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:844:25
    |
844 | /                         if 0 as libc::c_int != 0 as libc::c_int {
845 | |                             unreachable!();
846 | |                         } else {};
    | |_________________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/cat.rs:844:28
    |
844 |                         if 0 as libc::c_int != 0 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:849:29
    |
849 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:853:33
    |
853 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:860:29
    |
860 | / ...                   if __errstatus != 0 as libc::c_int {
861 | | ...                       unreachable!();
862 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/cat.rs:866:29
    |
866 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/cat.rs:870:33
    |
870 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/cat.rs:877:29
    |
877 | / ...                   if __errstatus != 0 as libc::c_int {
878 | | ...                       unreachable!();
879 | | ...                   } else {};
    | |_______________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/cat.rs:887:30
    |
887 |                 if n_read == 0 as libc::c_int as libc::c_ulong {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/cat.rs:893:35
    |
893 |                 eob = bpin.offset(n_read as isize);
    |                                   ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/cat.rs:893:35
    |
893 |                 eob = bpin.offset(n_read as isize);
    |                                   ^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:894:24
    |
894 |                 *eob = '\n' as i32 as libc::c_char;
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/cat.rs:904:34
    |
904 | ...                   ch = *fresh2 as libc::c_uchar;
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/cat.rs:912:21
    |
912 | /                     match current_block_52 {
913 | |                         16658872821858055392 => {}
914 | |                         _ => {
915 | |                             if number as libc::c_int != 0 && !number_nonblank {
...   |
920 | |                         }
921 | |                     }
    | |_____________________^
    |
    = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
    |
912 ~                     if current_block_52 == 16658872821858055392 {} else {
913 +                         if number as libc::c_int != 0 && !number_nonblank {
914 +                             next_line_num();
915 +                             bpout = stpcpy(bpout, line_num_print);
916 +                         }
917 +                         current_block_52 = 17784502470059252271;
918 +                     }
    |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/cat.rs:915:32
    |
915 | ...                   if number as libc::c_int != 0 && !number_nonblank {
    |                          ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(number)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/cat.rs:925:17
    |
925 | /                 match current_block_52 {
926 | |                     16658872821858055392 => {}
927 | |                     _ => {
928 | |                         if show_ends {
...   |
946 | |                     }
947 | |                 }
    | |_________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
    |
925 ~                 if current_block_52 == 16658872821858055392 {} else {
926 +                     if show_ends {
927 +                         if pending_cr {
928 +                             let fresh3 = bpout;
929 +                             bpout = bpout.offset(1);
930 +                             *fresh3 = '^' as i32 as libc::c_char;
931 +                             let fresh4 = bpout;
932 +                             bpout = bpout.offset(1);
933 +                             *fresh4 = 'M' as i32 as libc::c_char;
934 +                             pending_cr = 0 as libc::c_int != 0;
935 +                         }
936 +                         let fresh5 = bpout;
937 +                         bpout = bpout.offset(1);
938 +                         *fresh5 = '$' as i32 as libc::c_char;
939 +                     }
940 +                     let fresh6 = bpout;
941 +                     bpout = bpout.offset(1);
942 +                     *fresh6 = '\n' as i32 as libc::c_char;
943 +                     current_block_52 = 6476622998065200121;
944 +                 }
    |

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:932:43
    |
932 | ...                   *fresh3 = '^' as i32 as libc::c_char;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:935:43
    |
935 | ...                   *fresh4 = 'M' as i32 as libc::c_char;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:940:39
    |
940 | ...                   *fresh5 = '$' as i32 as libc::c_char;
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:944:35
    |
944 |                         *fresh6 = '\n' as i32 as libc::c_char;
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/cat.rs:949:13
    |
949 | /             match current_block_52 {
950 | |                 6476622998065200121 => {
951 | |                     let fresh7 = bpin;
952 | |                     bpin = bpin.offset(1);
...   |
955 | |                 _ => {}
956 | |             }
    | |_____________^
    |
    = note: `-W clippy::single-match` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
949 ~             if current_block_52 == 6476622998065200121 {
950 +                 let fresh7 = bpin;
951 +                 bpin = bpin.offset(1);
952 +                 ch = *fresh7 as libc::c_uchar;
953 +             }
    |

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/cat.rs:953:26
    |
953 |                     ch = *fresh7 as libc::c_uchar;
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:957:18
    |
957 |             if !(ch as libc::c_int == '\n' as i32) {
    |                  ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:964:23
    |
964 |             *fresh8 = '\r' as i32 as libc::c_char;
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/cat.rs:967:44
    |
967 |         if newlines >= 0 as libc::c_int && number as libc::c_int != 0 {
    |                                            ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(number)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:973:20
    |
973 |                 if ch as libc::c_int >= 32 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `if` chain can be rewritten with `match`
    --> src/cat.rs:974:21
     |
974  | /                     if (ch as libc::c_int) < 127 as libc::c_int {
975  | |                         let fresh9 = bpout;
976  | |                         bpout = bpout.offset(1);
977  | |                         *fresh9 = ch as libc::c_char;
...    |
1016 | |                         }
1017 | |                     }
     | |_____________________^
     |
     = note: `-W clippy::comparison-chain` implied by `-W clippy::all`
     = help: consider rewriting the `if` chain to use `cmp` and `match`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#comparison_chain

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:974:24
    |
974 |                     if (ch as libc::c_int) < 127 as libc::c_int {
    |                        ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i8` may wrap around the value
   --> src/cat.rs:977:35
    |
977 |                         *fresh9 = ch as libc::c_char;
    |                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:978:31
    |
978 |                     } else if ch as libc::c_int == 127 as libc::c_int {
    |                               ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:981:36
    |
981 |                         *fresh10 = '^' as i32 as libc::c_char;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:984:36
    |
984 |                         *fresh11 = '?' as i32 as libc::c_char;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:988:36
    |
988 |                         *fresh12 = 'M' as i32 as libc::c_char;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:991:36
    |
991 |                         *fresh13 = '-' as i32 as libc::c_char;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:992:28
    |
992 |                         if ch as libc::c_int >= 128 as libc::c_int + 32 as libc::c_int {
    |                            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:993:32
    |
993 | ...                   if (ch as libc::c_int)
    |                          ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/cat.rs:998:44
    |
998 |   ...                   *fresh14 = (ch as libc::c_int - 128 as libc::c_int)
    |  __________________________________^
999 | | ...                       as libc::c_char;
    | |_________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/cat.rs:998:45
    |
998 | ...                   *fresh14 = (ch as libc::c_int - 128 as libc::c_int)
    |                                   ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1003:44
     |
1003 | ...                   *fresh15 = '^' as i32 as libc::c_char;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1006:44
     |
1006 | ...                   *fresh16 = '?' as i32 as libc::c_char;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1011:40
     |
1011 | ...                   *fresh17 = '^' as i32 as libc::c_char;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1014:40
     |
1014 |   ...                   *fresh18 = (ch as libc::c_int - 128 as libc::c_int
     |  __________________________________^
1015 | | ...                       + 64 as libc::c_int) as libc::c_char;
     | |______________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1014:41
     |
1014 | ...                   *fresh18 = (ch as libc::c_int - 128 as libc::c_int
     |                                   ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1018:27
     |
1018 |                 } else if ch as libc::c_int == '\t' as i32 && !show_tabs {
     |                           ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1021:32
     |
1021 |                     *fresh19 = '\t' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1022:27
     |
1022 |                 } else if ch as libc::c_int == '\n' as i32 {
     |                           ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1028:32
     |
1028 |                     *fresh20 = '^' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1031:32
     |
1031 |                     *fresh21 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1031:33
     |
1031 |                     *fresh21 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
     |                                 ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
    --> src/cat.rs:1035:22
     |
1035 |                 ch = *fresh22 as libc::c_uchar;
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1039:20
     |
1039 |                 if ch as libc::c_int == '\t' as i32 && show_tabs as libc::c_int != 0 {
     |                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1039:56
     |
1039 |                 if ch as libc::c_int == '\t' as i32 && show_tabs as libc::c_int != 0 {
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(show_tabs)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1042:32
     |
1042 |                     *fresh23 = '^' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1045:32
     |
1045 |                     *fresh24 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1045:33
     |
1045 |                     *fresh24 = (ch as libc::c_int + 64 as libc::c_int) as libc::c_char;
     |                                 ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1046:27
     |
1046 |                 } else if ch as libc::c_int != '\n' as i32 {
     |                           ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1047:24
     |
1047 |                     if ch as libc::c_int == '\r' as i32
     |                        ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/cat.rs:1048:28
     |
1048 |                         && *bpin as libc::c_int == '\n' as i32
     |                            ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*bpin)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1049:28
     |
1049 |                         && show_ends as libc::c_int != 0
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(show_ends)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1056:40
     |
1056 | ...                   *fresh25 = '^' as i32 as libc::c_char;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
    --> src/cat.rs:1059:40
     |
1059 | ...                   *fresh26 = 'M' as i32 as libc::c_char;
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i8` may wrap around the value
    --> src/cat.rs:1064:36
     |
1064 |                         *fresh27 = ch as libc::c_char;
     |                                    ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
    --> src/cat.rs:1072:22
     |
1072 |                 ch = *fresh28 as libc::c_uchar;
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i64` may wrap around the value
    --> src/cat.rs:1078:33
     |
1078 |       let mut copy_max: ssize_t = (((if (9223372036854775807 as libc::c_long
     |  _________________________________^
1079 | |         as libc::c_ulong) < 18446744073709551615 as libc::c_ulong
1080 | |     {
1081 | |         9223372036854775807 as libc::c_long as libc::c_ulong
1082 | |     } else {
1083 | |         18446744073709551615 as libc::c_ulong
1084 | |     }) >> 30 as libc::c_int) << 30 as libc::c_int) as ssize_t;
     | |_____________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/cat.rs:1078:39
     |
1078 |       let mut copy_max: ssize_t = (((if (9223372036854775807 as libc::c_long
     |  _______________________________________^
1079 | |         as libc::c_ulong) < 18446744073709551615 as libc::c_ulong
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/cat.rs:1081:9
     |
1081 |         9223372036854775807 as libc::c_long as libc::c_ulong
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *mut _` detected
    --> src/cat.rs:1089:13
     |
1089 |             0 as *mut off_t,
     |             ^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<off_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
    --> src/cat.rs:1091:13
     |
1091 |             0 as *mut off_t,
     |             ^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<off_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/cat.rs:1092:13
     |
1092 |             copy_max as size_t,
     |             ^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/cat.rs:1093:13
     |
1093 |             0 as libc::c_int as libc::c_uint,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1095:25
     |
1095 |             0 => return some_copied as libc::c_int,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(some_copied)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1098:24
     |
1098 |                     || is_ENOTSUP(*__errno_location()) as libc::c_int != 0
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(is_ENOTSUP(*__errno_location()))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1107:17
     |
1107 | /                 if 0 != 0 {
1108 | |                     error(
1109 | |                         0 as libc::c_int,
1110 | |                         *__errno_location(),
...    |
1155 | |                     });
1156 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1107:20
     |
1107 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1111:25
     |
1111 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1118:21
     |
1118 | /                     if 0 as libc::c_int != 0 as libc::c_int {
1119 | |                         unreachable!();
1120 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1118:24
     |
1118 |                     if 0 as libc::c_int != 0 as libc::c_int {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1123:25
     |
1123 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1127:29
     |
1127 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1134:25
     |
1134 | /                         if __errstatus != 0 as libc::c_int {
1135 | |                             unreachable!();
1136 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1140:25
     |
1140 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1144:29
     |
1144 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1151:25
     |
1151 | /                         if __errstatus != 0 as libc::c_int {
1152 | |                             unreachable!();
1153 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: this boolean expression can be simplified
    --> src/cat.rs:1306:12
     |
1306 |         if !(c != -(1 as libc::c_int)) {
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `c == -(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this boolean expression can be simplified
    --> src/cat.rs:2112:12
     |
2112 |         if !(argind < argc) {
     |            ^^^^^^^^^^^^^^^^ help: try: `argind >= argc`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (113/25)
    --> src/cat.rs:1164:11
     |
1164 | unsafe fn main_0(
     |           ^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (989/100)
    --> src/cat.rs:1164:1
     |
1164 | / unsafe fn main_0(
1165 | |     mut argc: libc::c_int,
1166 | |     mut argv: *mut *mut libc::c_char,
1167 | | ) -> libc::c_int {
...    |
2168 | |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
2169 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/cat.rs:2168:5
     |
2168 |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int }`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/cat.rs:1169:40
     |
1169 |     let mut inbuf: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1205:13
     |
1199 | /             let mut init = option {
1200 | |                 name: b"number-nonblank\0" as *const u8 as *const libc::c_char,
1201 | |                 has_arg: 0 as libc::c_int,
1202 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1203 | |                 val: 'b' as i32,
1204 | |             };
     | |______________- unnecessary `let` binding
1205 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1199 ~             
1200 ~             option {
1201 +                 name: b"number-nonblank\0" as *const u8 as *const libc::c_char,
1202 +                 has_arg: 0 as libc::c_int,
1203 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1204 +                 val: 'b' as i32,
1205 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1200:23
     |
1200 |                 name: b"number-nonblank\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"number-nonblank\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1214:13
     |
1208 | /             let mut init = option {
1209 | |                 name: b"number\0" as *const u8 as *const libc::c_char,
1210 | |                 has_arg: 0 as libc::c_int,
1211 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1212 | |                 val: 'n' as i32,
1213 | |             };
     | |______________- unnecessary `let` binding
1214 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1208 ~             
1209 ~             option {
1210 +                 name: b"number\0" as *const u8 as *const libc::c_char,
1211 +                 has_arg: 0 as libc::c_int,
1212 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1213 +                 val: 'n' as i32,
1214 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1209:23
     |
1209 |                 name: b"number\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"number\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1223:13
     |
1217 | /             let mut init = option {
1218 | |                 name: b"squeeze-blank\0" as *const u8 as *const libc::c_char,
1219 | |                 has_arg: 0 as libc::c_int,
1220 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1221 | |                 val: 's' as i32,
1222 | |             };
     | |______________- unnecessary `let` binding
1223 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1217 ~             
1218 ~             option {
1219 +                 name: b"squeeze-blank\0" as *const u8 as *const libc::c_char,
1220 +                 has_arg: 0 as libc::c_int,
1221 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1222 +                 val: 's' as i32,
1223 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1218:23
     |
1218 |                 name: b"squeeze-blank\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"squeeze-blank\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1232:13
     |
1226 | /             let mut init = option {
1227 | |                 name: b"show-nonprinting\0" as *const u8 as *const libc::c_char,
1228 | |                 has_arg: 0 as libc::c_int,
1229 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1230 | |                 val: 'v' as i32,
1231 | |             };
     | |______________- unnecessary `let` binding
1232 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1226 ~             
1227 ~             option {
1228 +                 name: b"show-nonprinting\0" as *const u8 as *const libc::c_char,
1229 +                 has_arg: 0 as libc::c_int,
1230 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1231 +                 val: 'v' as i32,
1232 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1227:23
     |
1227 |                 name: b"show-nonprinting\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"show-nonprinting\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1241:13
     |
1235 | /             let mut init = option {
1236 | |                 name: b"show-ends\0" as *const u8 as *const libc::c_char,
1237 | |                 has_arg: 0 as libc::c_int,
1238 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1239 | |                 val: 'E' as i32,
1240 | |             };
     | |______________- unnecessary `let` binding
1241 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1235 ~             
1236 ~             option {
1237 +                 name: b"show-ends\0" as *const u8 as *const libc::c_char,
1238 +                 has_arg: 0 as libc::c_int,
1239 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1240 +                 val: 'E' as i32,
1241 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1236:23
     |
1236 |                 name: b"show-ends\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"show-ends\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1250:13
     |
1244 | /             let mut init = option {
1245 | |                 name: b"show-tabs\0" as *const u8 as *const libc::c_char,
1246 | |                 has_arg: 0 as libc::c_int,
1247 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1248 | |                 val: 'T' as i32,
1249 | |             };
     | |______________- unnecessary `let` binding
1250 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1244 ~             
1245 ~             option {
1246 +                 name: b"show-tabs\0" as *const u8 as *const libc::c_char,
1247 +                 has_arg: 0 as libc::c_int,
1248 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1249 +                 val: 'T' as i32,
1250 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1245:23
     |
1245 |                 name: b"show-tabs\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"show-tabs\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1259:13
     |
1253 | /             let mut init = option {
1254 | |                 name: b"show-all\0" as *const u8 as *const libc::c_char,
1255 | |                 has_arg: 0 as libc::c_int,
1256 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1257 | |                 val: 'A' as i32,
1258 | |             };
     | |______________- unnecessary `let` binding
1259 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1253 ~             
1254 ~             option {
1255 +                 name: b"show-all\0" as *const u8 as *const libc::c_char,
1256 +                 has_arg: 0 as libc::c_int,
1257 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1258 +                 val: 'A' as i32,
1259 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1254:23
     |
1254 |                 name: b"show-all\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"show-all\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1268:13
     |
1262 | /             let mut init = option {
1263 | |                 name: b"help\0" as *const u8 as *const libc::c_char,
1264 | |                 has_arg: 0 as libc::c_int,
1265 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1266 | |                 val: GETOPT_HELP_CHAR as libc::c_int,
1267 | |             };
     | |______________- unnecessary `let` binding
1268 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1262 ~             
1263 ~             option {
1264 +                 name: b"help\0" as *const u8 as *const libc::c_char,
1265 +                 has_arg: 0 as libc::c_int,
1266 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1267 +                 val: GETOPT_HELP_CHAR as libc::c_int,
1268 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1263:23
     |
1263 |                 name: b"help\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"help\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1277:13
     |
1271 | /             let mut init = option {
1272 | |                 name: b"version\0" as *const u8 as *const libc::c_char,
1273 | |                 has_arg: 0 as libc::c_int,
1274 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1275 | |                 val: GETOPT_VERSION_CHAR as libc::c_int,
1276 | |             };
     | |______________- unnecessary `let` binding
1277 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1271 ~             
1272 ~             option {
1273 +                 name: b"version\0" as *const u8 as *const libc::c_char,
1274 +                 has_arg: 0 as libc::c_int,
1275 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1276 +                 val: GETOPT_VERSION_CHAR as libc::c_int,
1277 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1272:23
     |
1272 |                 name: b"version\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"version\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
    --> src/cat.rs:1286:13
     |
1280 | /             let mut init = option {
1281 | |                 name: 0 as *const libc::c_char,
1282 | |                 has_arg: 0 as libc::c_int,
1283 | |                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1284 | |                 val: 0 as libc::c_int,
1285 | |             };
     | |______________- unnecessary `let` binding
1286 |               init
     |               ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1280 ~             
1281 ~             option {
1282 +                 name: 0 as *const libc::c_char,
1283 +                 has_arg: 0 as libc::c_int,
1284 +                 flag: 0 as *const libc::c_int as *mut libc::c_int,
1285 +                 val: 0 as libc::c_int,
1286 +             }
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1290:33
     |
1290 |     setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1292:9
     |
1292 |         b"coreutils\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1293:9
     |
1293 |         b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/usr/local/share/locale\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1295:16
     |
1295 |     textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1302:13
     |
1302 |             b"benstuvAET\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"benstuvAET\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/cat.rs:1304:13
     |
1304 |             0 as *mut libc::c_int,
     |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_int>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1349:21
     |
1349 |                     b"cat\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"cat\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1350:21
     |
1350 |                     b"GNU coreutils\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1353:25
     |
1353 |                         b"Torbjorn Granlund\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Torbjorn Granlund\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1354:25
     |
1354 |                         b"Torbj\xC3\xB6rn Granlund\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Torbj\xC3\xB6rn Granlund\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1357:25
     |
1357 |                         b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1358:25
     |
1358 |                         b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1360:21
     |
1360 |                     0 as *mut libc::c_void as *mut libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(0 as *mut libc::c_void).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/cat.rs:1360:21
     |
1360 |                     0 as *mut libc::c_void as *mut libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1370:9
     |
1370 | /         if 0 != 0 {
1371 | |             error(
1372 | |                 1 as libc::c_int,
1373 | |                 *__errno_location(),
...    |
1403 | |             });
1404 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1370:12
     |
1370 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1374:25
     |
1374 |                 gettext(b"standard output\0" as *const u8 as *const libc::c_char),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"standard output\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1376:13
     |
1376 | /             if 1 as libc::c_int != 0 as libc::c_int {
1377 | |                 unreachable!();
1378 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1381:17
     |
1381 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1385:29
     |
1385 |                     gettext(b"standard output\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"standard output\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1387:17
     |
1387 | /                 if __errstatus != 0 as libc::c_int {
1388 | |                     unreachable!();
1389 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1393:17
     |
1393 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1397:29
     |
1397 |                     gettext(b"standard output\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"standard output\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1399:17
     |
1399 | /                 if __errstatus != 0 as libc::c_int {
1400 | |                     unreachable!();
1401 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: the function `io_blksize` doesn't need a mutable reference
    --> src/cat.rs:1406:41
     |
1406 |     let mut outsize: idx_t = io_blksize(&mut stat_buf);
     |                                         ^^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1410:31
     |
1410 |       let mut out_isreg: bool = (stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |  _______________________________^
1411 | |         == 0o100000 as libc::c_int as libc::c_uint) as libc::c_int != 0 as libc::c_int;
     | |__________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1410 ~     let mut out_isreg: bool = i32::from(stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
1411 ~         == 0o100000 as libc::c_int as libc::c_uint) != 0 as libc::c_int;
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/cat.rs:1410:51
     |
1410 |     let mut out_isreg: bool = (stat_buf.st_mode & 0o170000 as libc::c_int as libc::c_uint
     |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/cat.rs:1411:12
     |
1411 |         == 0o100000 as libc::c_int as libc::c_uint) as libc::c_int != 0 as libc::c_int;
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1412:10
     |
1412 |     if !(number as libc::c_int != 0 || show_ends as libc::c_int != 0
     |          ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(number)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1412:40
     |
1412 |     if !(number as libc::c_int != 0 || show_ends as libc::c_int != 0
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(show_ends)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1413:12
     |
1413 |         || squeeze_blank as libc::c_int != 0)
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(squeeze_blank)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1418:14
     |
1418 |     infile = b"-\0" as *const u8 as *const libc::c_char;
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1421:32
     |
1421 |     let mut page_size: idx_t = getpagesize() as idx_t;
     |                                ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(getpagesize())`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1428:13
     |
1428 |             b"-\0" as *const u8 as *const libc::c_char,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1440:17
     |
1440 | /                 if 0 != 0 {
1441 | |                     error(
1442 | |                         0 as libc::c_int,
1443 | |                         *__errno_location(),
...    |
1488 | |                     });
1489 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1440:20
     |
1440 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1444:25
     |
1444 |                         b"%s\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1451:21
     |
1451 | /                     if 0 as libc::c_int != 0 as libc::c_int {
1452 | |                         unreachable!();
1453 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1451:24
     |
1451 |                     if 0 as libc::c_int != 0 as libc::c_int {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1456:25
     |
1456 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1460:29
     |
1460 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1467:25
     |
1467 | /                         if __errstatus != 0 as libc::c_int {
1468 | |                             unreachable!();
1469 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1473:25
     |
1473 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1477:29
     |
1477 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1484:25
     |
1484 | /                         if __errstatus != 0 as libc::c_int {
1485 | |                             unreachable!();
1486 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/cat.rs:1496:9
     |
1496 | /         match current_block {
1497 | |             13321564401369230990 => {
1498 | |                 if fstat(input_desc, &mut stat_buf) < 0 as libc::c_int {
1499 | |                     if 0 != 0 {
...    |
2109 | |             _ => {}
2110 | |         }
     | |_________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1496 ~         if current_block == 13321564401369230990 {
1497 +             if fstat(input_desc, &mut stat_buf) < 0 as libc::c_int {
1498 +                 if 0 != 0 {
1499 +                     error(
1500 +                         0 as libc::c_int,
1501 +                         *__errno_location(),
1502 +                         b"%s\0" as *const u8 as *const libc::c_char,
1503 +                         quotearg_n_style_colon(
1504 +                             0 as libc::c_int,
1505 +                             shell_escape_quoting_style,
1506 +                             infile,
1507 +                         ),
1508 +                     );
1509 +                     if 0 as libc::c_int != 0 as libc::c_int {
1510 +                         unreachable!();
1511 +                     } else {};
1512 +                 } else {
1513 +                     ({
1514 +                         let __errstatus: libc::c_int = 0 as libc::c_int;
1515 +                         error(
1516 +                             __errstatus,
1517 +                             *__errno_location(),
1518 +                             b"%s\0" as *const u8 as *const libc::c_char,
1519 +                             quotearg_n_style_colon(
1520 +                                 0 as libc::c_int,
1521 +                                 shell_escape_quoting_style,
1522 +                                 infile,
1523 +                             ),
1524 +                         );
1525 +                         if __errstatus != 0 as libc::c_int {
1526 +                             unreachable!();
1527 +                         } else {};
1528 +                         
1529 +                     });
1530 +                     ({
1531 +                         let __errstatus: libc::c_int = 0 as libc::c_int;
1532 +                         error(
1533 +                             __errstatus,
1534 +                             *__errno_location(),
1535 +                             b"%s\0" as *const u8 as *const libc::c_char,
1536 +                             quotearg_n_style_colon(
1537 +                                 0 as libc::c_int,
1538 +                                 shell_escape_quoting_style,
1539 +                                 infile,
1540 +                             ),
1541 +                         );
1542 +                         if __errstatus != 0 as libc::c_int {
1543 +                             unreachable!();
1544 +                         } else {};
1545 +                         
1546 +                     });
1547 +                 };
1548 +                 ok = 0 as libc::c_int != 0;
1549 +             } else {
1550 +                 insize = io_blksize(&mut stat_buf);
1551 +                 fdadvise(
1552 +                     input_desc,
1553 +                     0 as libc::c_int as off_t,
1554 +                     0 as libc::c_int as off_t,
1555 +                     FADVISE_SEQUENTIAL,
1556 +                 );
1557 +                 if stat_buf.st_dev == out_dev && stat_buf.st_ino == out_ino {
1558 +                     if out_flags < -(1 as libc::c_int) {
1559 +                         out_flags = rpl_fcntl(1 as libc::c_int, 3 as libc::c_int);
1560 +                     }
1561 +                     let mut exhausting: bool = 0 as libc::c_int <= out_flags
1562 +                         && out_flags & 0o2000 as libc::c_int != 0;
1563 +                     if !exhausting {
1564 +                         let mut in_pos: off_t = lseek(
1565 +                             input_desc,
1566 +                             0 as libc::c_int as __off_t,
1567 +                             1 as libc::c_int,
1568 +                         );
1569 +                         if 0 as libc::c_int as libc::c_long <= in_pos {
1570 +                             exhausting = in_pos
1571 +                                 < lseek(
1572 +                                     1 as libc::c_int,
1573 +                                     0 as libc::c_int as __off_t,
1574 +                                     1 as libc::c_int,
1575 +                                 );
1576 +                         }
1577 +                     }
1578 +                     if exhausting {
1579 +                         if 0 != 0 {
1580 +                             error(
1581 +                                 0 as libc::c_int,
1582 +                                 0 as libc::c_int,
1583 +                                 gettext(
1584 +                                     b"%s: input file is output file\0" as *const u8
1585 +                                         as *const libc::c_char,
1586 +                                 ),
1587 +                                 quotearg_n_style_colon(
1588 +                                     0 as libc::c_int,
1589 +                                     shell_escape_quoting_style,
1590 +                                     infile,
1591 +                                 ),
1592 +                             );
1593 +                             if 0 as libc::c_int != 0 as libc::c_int {
1594 +                                 unreachable!();
1595 +                             } else {};
1596 +                         } else {
1597 +                             ({
1598 +                                 let __errstatus: libc::c_int = 0 as libc::c_int;
1599 +                                 error(
1600 +                                     __errstatus,
1601 +                                     0 as libc::c_int,
1602 +                                     gettext(
1603 +                                         b"%s: input file is output file\0" as *const u8
1604 +                                             as *const libc::c_char,
1605 +                                     ),
1606 +                                     quotearg_n_style_colon(
1607 +                                         0 as libc::c_int,
1608 +                                         shell_escape_quoting_style,
1609 +                                         infile,
1610 +                                     ),
1611 +                                 );
1612 +                                 if __errstatus != 0 as libc::c_int {
1613 +                                     unreachable!();
1614 +                                 } else {};
1615 +                                 
1616 +                             });
1617 +                             ({
1618 +                                 let __errstatus: libc::c_int = 0 as libc::c_int;
1619 +                                 error(
1620 +                                     __errstatus,
1621 +                                     0 as libc::c_int,
1622 +                                     gettext(
1623 +                                         b"%s: input file is output file\0" as *const u8
1624 +                                             as *const libc::c_char,
1625 +                                     ),
1626 +                                     quotearg_n_style_colon(
1627 +                                         0 as libc::c_int,
1628 +                                         shell_escape_quoting_style,
1629 +                                         infile,
1630 +                                     ),
1631 +                                 );
1632 +                                 if __errstatus != 0 as libc::c_int {
1633 +                                     unreachable!();
1634 +                                 } else {};
1635 +                                 
1636 +                             });
1637 +                         };
1638 +                         ok = 0 as libc::c_int != 0;
1639 +                         current_block = 7239751344758050955;
1640 +                     } else {
1641 +                         current_block = 5372832139739605200;
1642 +                     }
1643 +                 } else {
1644 +                     current_block = 5372832139739605200;
1645 +                 }
1646 +                 match current_block {
1647 +                     7239751344758050955 => {}
1648 +                     _ => {
1649 +                         inbuf = 0 as *mut libc::c_char;
1650 +                         if !(number as libc::c_int != 0
1651 +                             || show_ends as libc::c_int != 0
1652 +                             || show_nonprinting as libc::c_int != 0
1653 +                             || show_tabs as libc::c_int != 0
1654 +                             || squeeze_blank as libc::c_int != 0)
1655 +                         {
1656 +                             let mut copy_cat_status: libc::c_int = if out_isreg
1657 +                                 as libc::c_int != 0
1658 +                                 && stat_buf.st_mode
1659 +                                     & 0o170000 as libc::c_int as libc::c_uint
1660 +                                     == 0o100000 as libc::c_int as libc::c_uint
1661 +                             {
1662 +                                 copy_cat()
1663 +                             } else {
1664 +                                 0 as libc::c_int
1665 +                             };
1666 +                             if copy_cat_status != 0 as libc::c_int {
1667 +                                 inbuf = 0 as *mut libc::c_char;
1668 +                                 ok = (ok as libc::c_int
1669 +                                     & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
1670 +                             } else {
1671 +                                 insize = if insize > outsize { insize } else { outsize };
1672 +                                 inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
1673 +                                 ok = (ok as libc::c_int
1674 +                                     & simple_cat(inbuf, insize) as libc::c_int) != 0;
1675 +                             }
1676 +                         } else {
1677 +                             inbuf = xalignalloc(
1678 +                                 page_size,
1679 +                                 insize + 1 as libc::c_int as libc::c_long,
1680 +                             ) as *mut libc::c_char;
1681 +                             let mut bufsize: idx_t = 0;
1682 +                             if (if (0 as libc::c_int as idx_t)
1683 +                                 < -(1 as libc::c_int) as idx_t
1684 +                                 && ((if 1 as libc::c_int != 0 {
1685 +                                     0 as libc::c_int as libc::c_long
1686 +                                 } else {
1687 +                                     insize
1688 +                                 }) - 1 as libc::c_int as libc::c_long)
1689 +                                     < 0 as libc::c_int as libc::c_long
1690 +                                 && ((if 1 as libc::c_int != 0 {
1691 +                                     0 as libc::c_int
1692 +                                 } else {
1693 +                                     4 as libc::c_int
1694 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
1695 +                                 && (if (4 as libc::c_int) < 0 as libc::c_int {
1696 +                                     if insize < 0 as libc::c_int as libc::c_long {
1697 +                                         if ((if 1 as libc::c_int != 0 {
1698 +                                             0 as libc::c_int as libc::c_long
1699 +                                         } else {
1700 +                                             (if 1 as libc::c_int != 0 {
1701 +                                                 0 as libc::c_int as libc::c_long
1702 +                                             } else {
1703 +                                                 -(1 as libc::c_int) as idx_t
1704 +                                             }) + 4 as libc::c_int as libc::c_long
1705 +                                         }) - 1 as libc::c_int as libc::c_long)
1706 +                                             < 0 as libc::c_int as libc::c_long
1707 +                                         {
1708 +                                             (insize
1709 +                                                 < -(1 as libc::c_int) as idx_t
1710 +                                                     / 4 as libc::c_int as libc::c_long) as libc::c_int
1711 +                                         } else {
1712 +                                             ((if (if (if ((if 1 as libc::c_int != 0 {
1713 +                                                 0 as libc::c_int
1714 +                                             } else {
1715 +                                                 4 as libc::c_int
1716 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1717 +                                             {
1718 +                                                 !(((((if 1 as libc::c_int != 0 {
1719 +                                                     0 as libc::c_int
1720 +                                                 } else {
1721 +                                                     4 as libc::c_int
1722 +                                                 }) + 1 as libc::c_int)
1723 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1724 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1725 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1726 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1727 +                                             } else {
1728 +                                                 (if 1 as libc::c_int != 0 {
1729 +                                                     0 as libc::c_int
1730 +                                                 } else {
1731 +                                                     4 as libc::c_int
1732 +                                                 }) + 0 as libc::c_int
1733 +                                             }) < 0 as libc::c_int
1734 +                                             {
1735 +                                                 ((4 as libc::c_int)
1736 +                                                     < -(if ((if 1 as libc::c_int != 0 {
1737 +                                                         0 as libc::c_int
1738 +                                                     } else {
1739 +                                                         4 as libc::c_int
1740 +                                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1741 +                                                     {
1742 +                                                         ((((if 1 as libc::c_int != 0 {
1743 +                                                             0 as libc::c_int
1744 +                                                         } else {
1745 +                                                             4 as libc::c_int
1746 +                                                         }) + 1 as libc::c_int)
1747 +                                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1748 +                                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1749 +                                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1750 +                                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1751 +                                                     } else {
1752 +                                                         (if 1 as libc::c_int != 0 {
1753 +                                                             0 as libc::c_int
1754 +                                                         } else {
1755 +                                                             4 as libc::c_int
1756 +                                                         }) - 1 as libc::c_int
1757 +                                                     })) as libc::c_int
1758 +                                             } else {
1759 +                                                 ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
1760 +                                             }) != 0
1761 +                                             {
1762 +                                                 (if 1 as libc::c_int != 0 {
1763 +                                                     0 as libc::c_int
1764 +                                                 } else {
1765 +                                                     4 as libc::c_int
1766 +                                                 }) as libc::c_long + -(1 as libc::c_int) as idx_t
1767 +                                                     >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1768 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1769 +                                                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1770 +                                             } else {
1771 +                                                 -(1 as libc::c_int) as idx_t
1772 +                                                     / -(4 as libc::c_int) as libc::c_long
1773 +                                             }) <= -(1 as libc::c_int) as libc::c_long - insize)
1774 +                                                 as libc::c_int
1775 +                                         }
1776 +                                     } else {
1777 +                                         if (if (if ((if 1 as libc::c_int != 0 {
1778 +                                             0 as libc::c_int as libc::c_long
1779 +                                         } else {
1780 +                                             (if 1 as libc::c_int != 0 {
1781 +                                                 0 as libc::c_int
1782 +                                             } else {
1783 +                                                 4 as libc::c_int
1784 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1785 +                                         }) - 1 as libc::c_int as libc::c_long)
1786 +                                             < 0 as libc::c_int as libc::c_long
1787 +                                         {
1788 +                                             !(((((if 1 as libc::c_int != 0 {
1789 +                                                 0 as libc::c_int as libc::c_long
1790 +                                             } else {
1791 +                                                 (if 1 as libc::c_int != 0 {
1792 +                                                     0 as libc::c_int
1793 +                                                 } else {
1794 +                                                     4 as libc::c_int
1795 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1796 +                                             }) + 1 as libc::c_int as libc::c_long)
1797 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1798 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1799 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1800 +                                                 - 1 as libc::c_int as libc::c_long)
1801 +                                                 * 2 as libc::c_int as libc::c_long
1802 +                                                 + 1 as libc::c_int as libc::c_long)
1803 +                                         } else {
1804 +                                             (if 1 as libc::c_int != 0 {
1805 +                                                 0 as libc::c_int as libc::c_long
1806 +                                             } else {
1807 +                                                 (if 1 as libc::c_int != 0 {
1808 +                                                     0 as libc::c_int
1809 +                                                 } else {
1810 +                                                     4 as libc::c_int
1811 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1812 +                                             }) + 0 as libc::c_int as libc::c_long
1813 +                                         }) < 0 as libc::c_int as libc::c_long
1814 +                                         {
1815 +                                             (((if 1 as libc::c_int != 0 {
1816 +                                                 0 as libc::c_int
1817 +                                             } else {
1818 +                                                 4 as libc::c_int
1819 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t)
1820 +                                                 < -(if ((if 1 as libc::c_int != 0 {
1821 +                                                     0 as libc::c_int as libc::c_long
1822 +                                                 } else {
1823 +                                                     (if 1 as libc::c_int != 0 {
1824 +                                                         0 as libc::c_int
1825 +                                                     } else {
1826 +                                                         4 as libc::c_int
1827 +                                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1828 +                                                 }) - 1 as libc::c_int as libc::c_long)
1829 +                                                     < 0 as libc::c_int as libc::c_long
1830 +                                                 {
1831 +                                                     ((((if 1 as libc::c_int != 0 {
1832 +                                                         0 as libc::c_int as libc::c_long
1833 +                                                     } else {
1834 +                                                         (if 1 as libc::c_int != 0 {
1835 +                                                             0 as libc::c_int
1836 +                                                         } else {
1837 +                                                             4 as libc::c_int
1838 +                                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1839 +                                                     }) + 1 as libc::c_int as libc::c_long)
1840 +                                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1841 +                                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1842 +                                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1843 +                                                         - 1 as libc::c_int as libc::c_long)
1844 +                                                         * 2 as libc::c_int as libc::c_long
1845 +                                                         + 1 as libc::c_int as libc::c_long
1846 +                                                 } else {
1847 +                                                     (if 1 as libc::c_int != 0 {
1848 +                                                         0 as libc::c_int as libc::c_long
1849 +                                                     } else {
1850 +                                                         (if 1 as libc::c_int != 0 {
1851 +                                                             0 as libc::c_int
1852 +                                                         } else {
1853 +                                                             4 as libc::c_int
1854 +                                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1855 +                                                     }) - 1 as libc::c_int as libc::c_long
1856 +                                                 })) as libc::c_int
1857 +                                         } else {
1858 +                                             ((0 as libc::c_int as libc::c_long)
1859 +                                                 < (if 1 as libc::c_int != 0 {
1860 +                                                     0 as libc::c_int
1861 +                                                 } else {
1862 +                                                     4 as libc::c_int
1863 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t)
1864 +                                                 as libc::c_int
1865 +                                         }) != 0 && 4 as libc::c_int == -(1 as libc::c_int)
1866 +                                         {
1867 +                                             if ((if 1 as libc::c_int != 0 {
1868 +                                                 0 as libc::c_int as libc::c_long
1869 +                                             } else {
1870 +                                                 insize
1871 +                                             }) - 1 as libc::c_int as libc::c_long)
1872 +                                                 < 0 as libc::c_int as libc::c_long
1873 +                                             {
1874 +                                                 ((0 as libc::c_int as libc::c_long)
1875 +                                                     < insize + 0 as libc::c_int as idx_t) as libc::c_int
1876 +                                             } else {
1877 +                                                 ((0 as libc::c_int as libc::c_long) < insize
1878 +                                                     && (-(1 as libc::c_int) as libc::c_long
1879 +                                                         - 0 as libc::c_int as idx_t)
1880 +                                                         < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
1881 +                                             }
1882 +                                         } else {
1883 +                                             ((0 as libc::c_int as idx_t
1884 +                                                 / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
1885 +                                         }
1886 +                                     }
1887 +                                 } else {
1888 +                                     if 4 as libc::c_int == 0 as libc::c_int {
1889 +                                         0 as libc::c_int
1890 +                                     } else {
1891 +                                         if insize < 0 as libc::c_int as libc::c_long {
1892 +                                             if (if (if ((if 1 as libc::c_int != 0 {
1893 +                                                 0 as libc::c_int as libc::c_long
1894 +                                             } else {
1895 +                                                 (if 1 as libc::c_int != 0 {
1896 +                                                     0 as libc::c_int as libc::c_long
1897 +                                                 } else {
1898 +                                                     insize
1899 +                                                 }) + 0 as libc::c_int as idx_t
1900 +                                             }) - 1 as libc::c_int as libc::c_long)
1901 +                                                 < 0 as libc::c_int as libc::c_long
1902 +                                             {
1903 +                                                 !(((((if 1 as libc::c_int != 0 {
1904 +                                                     0 as libc::c_int as libc::c_long
1905 +                                                 } else {
1906 +                                                     (if 1 as libc::c_int != 0 {
1907 +                                                         0 as libc::c_int as libc::c_long
1908 +                                                     } else {
1909 +                                                         insize
1910 +                                                     }) + 0 as libc::c_int as idx_t
1911 +                                                 }) + 1 as libc::c_int as libc::c_long)
1912 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1913 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1914 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1915 +                                                     - 1 as libc::c_int as libc::c_long)
1916 +                                                     * 2 as libc::c_int as libc::c_long
1917 +                                                     + 1 as libc::c_int as libc::c_long)
1918 +                                             } else {
1919 +                                                 (if 1 as libc::c_int != 0 {
1920 +                                                     0 as libc::c_int as libc::c_long
1921 +                                                 } else {
1922 +                                                     (if 1 as libc::c_int != 0 {
1923 +                                                         0 as libc::c_int as libc::c_long
1924 +                                                     } else {
1925 +                                                         insize
1926 +                                                     }) + 0 as libc::c_int as idx_t
1927 +                                                 }) + 0 as libc::c_int as libc::c_long
1928 +                                             }) < 0 as libc::c_int as libc::c_long
1929 +                                             {
1930 +                                                 (((if 1 as libc::c_int != 0 {
1931 +                                                     0 as libc::c_int as libc::c_long
1932 +                                                 } else {
1933 +                                                     insize
1934 +                                                 }) + 0 as libc::c_int as idx_t)
1935 +                                                     < -(if ((if 1 as libc::c_int != 0 {
1936 +                                                         0 as libc::c_int as libc::c_long
1937 +                                                     } else {
1938 +                                                         (if 1 as libc::c_int != 0 {
1939 +                                                             0 as libc::c_int as libc::c_long
1940 +                                                         } else {
1941 +                                                             insize
1942 +                                                         }) + 0 as libc::c_int as idx_t
1943 +                                                     }) - 1 as libc::c_int as libc::c_long)
1944 +                                                         < 0 as libc::c_int as libc::c_long
1945 +                                                     {
1946 +                                                         ((((if 1 as libc::c_int != 0 {
1947 +                                                             0 as libc::c_int as libc::c_long
1948 +                                                         } else {
1949 +                                                             (if 1 as libc::c_int != 0 {
1950 +                                                                 0 as libc::c_int as libc::c_long
1951 +                                                             } else {
1952 +                                                                 insize
1953 +                                                             }) + 0 as libc::c_int as idx_t
1954 +                                                         }) + 1 as libc::c_int as libc::c_long)
1955 +                                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1956 +                                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1957 +                                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1958 +                                                             - 1 as libc::c_int as libc::c_long)
1959 +                                                             * 2 as libc::c_int as libc::c_long
1960 +                                                             + 1 as libc::c_int as libc::c_long
1961 +                                                     } else {
1962 +                                                         (if 1 as libc::c_int != 0 {
1963 +                                                             0 as libc::c_int as libc::c_long
1964 +                                                         } else {
1965 +                                                             (if 1 as libc::c_int != 0 {
1966 +                                                                 0 as libc::c_int as libc::c_long
1967 +                                                             } else {
1968 +                                                                 insize
1969 +                                                             }) + 0 as libc::c_int as idx_t
1970 +                                                         }) - 1 as libc::c_int as libc::c_long
1971 +                                                     })) as libc::c_int
1972 +                                             } else {
1973 +                                                 ((0 as libc::c_int as libc::c_long)
1974 +                                                     < (if 1 as libc::c_int != 0 {
1975 +                                                         0 as libc::c_int as libc::c_long
1976 +                                                     } else {
1977 +                                                         insize
1978 +                                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
1979 +                                             }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
1980 +                                             {
1981 +                                                 if ((if 1 as libc::c_int != 0 {
1982 +                                                     0 as libc::c_int
1983 +                                                 } else {
1984 +                                                     4 as libc::c_int
1985 +                                                 }) - 1 as libc::c_int) < 0 as libc::c_int
1986 +                                                 {
1987 +                                                     ((0 as libc::c_int as libc::c_long)
1988 +                                                         < 4 as libc::c_int as libc::c_long
1989 +                                                             + 0 as libc::c_int as idx_t) as libc::c_int
1990 +                                                 } else {
1991 +                                                     ((-(1 as libc::c_int) as libc::c_long
1992 +                                                         - 0 as libc::c_int as idx_t)
1993 +                                                         < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1994 +                                                         as libc::c_int
1995 +                                                 }
1996 +                                             } else {
1997 +                                                 (0 as libc::c_int as idx_t / insize
1998 +                                                     < 4 as libc::c_int as libc::c_long) as libc::c_int
1999 +                                             }
2000 +                                         } else {
2001 +                                             ((-(1 as libc::c_int) as idx_t
2002 +                                                 / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
2003 +                                         }
2004 +                                     }
2005 +                                 }) != 0
2006 +                             {
2007 +                                 let (fresh33, _fresh34) = insize
2008 +                                     .overflowing_mul((4 as libc::c_int).into());
2009 +                                 *(&mut bufsize as *mut idx_t) = fresh33;
2010 +                                 1 as libc::c_int
2011 +                             } else {
2012 +                                 let (fresh35, fresh36) = insize
2013 +                                     .overflowing_mul((4 as libc::c_int).into());
2014 +                                 *(&mut bufsize as *mut idx_t) = fresh35;
2015 +                                 fresh36 as libc::c_int
2016 +                             }) != 0
2017 +                                 || {
2018 +                                     let (fresh37, fresh38) = bufsize.overflowing_add(outsize);
2019 +                                     *(&mut bufsize as *mut idx_t) = fresh37;
2020 +                                     fresh38 as libc::c_int != 0
2021 +                                 }
2022 +                                 || {
2023 +                                     let (fresh39, fresh40) = bufsize
2024 +                                         .overflowing_add((20 as libc::c_int - 1 as libc::c_int).into());
2025 +                                     *(&mut bufsize as *mut idx_t) = fresh39;
2026 +                                     fresh40 as libc::c_int != 0
2027 +                                 }
2028 +                             {
2029 +                                 xalloc_die();
2030 +                             }
2031 +                             let mut outbuf: *mut libc::c_char = xalignalloc(
2032 +                                 page_size,
2033 +                                 bufsize,
2034 +                             ) as *mut libc::c_char;
2035 +                             ok = (ok as libc::c_int
2036 +                                 & cat(
2037 +                                     inbuf,
2038 +                                     insize,
2039 +                                     outbuf,
2040 +                                     outsize,
2041 +                                     show_nonprinting,
2042 +                                     show_tabs,
2043 +                                     number,
2044 +                                     number_nonblank,
2045 +                                     show_ends,
2046 +                                     squeeze_blank,
2047 +                                 ) as libc::c_int) != 0;
2048 +                             alignfree(outbuf as *mut libc::c_void);
2049 +                         }
2050 +                         alignfree(inbuf as *mut libc::c_void);
2051 +                     }
2052 +                 }
2053 +             }
2054 +             if !reading_stdin && close(input_desc) < 0 as libc::c_int {
2055 +                 if 0 != 0 {
2056 +                     error(
2057 +                         0 as libc::c_int,
2058 +                         *__errno_location(),
2059 +                         b"%s\0" as *const u8 as *const libc::c_char,
2060 +                         quotearg_n_style_colon(
2061 +                             0 as libc::c_int,
2062 +                             shell_escape_quoting_style,
2063 +                             infile,
2064 +                         ),
2065 +                     );
2066 +                     if 0 as libc::c_int != 0 as libc::c_int {
2067 +                         unreachable!();
2068 +                     } else {};
2069 +                 } else {
2070 +                     ({
2071 +                         let __errstatus: libc::c_int = 0 as libc::c_int;
2072 +                         error(
2073 +                             __errstatus,
2074 +                             *__errno_location(),
2075 +                             b"%s\0" as *const u8 as *const libc::c_char,
2076 +                             quotearg_n_style_colon(
2077 +                                 0 as libc::c_int,
2078 +                                 shell_escape_quoting_style,
2079 +                                 infile,
2080 +                             ),
2081 +                         );
2082 +                         if __errstatus != 0 as libc::c_int {
2083 +                             unreachable!();
2084 +                         } else {};
2085 +                         
2086 +                     });
2087 +                     ({
2088 +                         let __errstatus: libc::c_int = 0 as libc::c_int;
2089 +                         error(
2090 +                             __errstatus,
2091 +                             *__errno_location(),
2092 +                             b"%s\0" as *const u8 as *const libc::c_char,
2093 +                             quotearg_n_style_colon(
2094 +                                 0 as libc::c_int,
2095 +                                 shell_escape_quoting_style,
2096 +                                 infile,
2097 +                             ),
2098 +                         );
2099 +                         if __errstatus != 0 as libc::c_int {
2100 +                             unreachable!();
2101 +                         } else {};
2102 +                         
2103 +                     });
2104 +                 };
2105 +                 ok = 0 as libc::c_int != 0;
2106 +             }
2107 +         }
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1499:21
     |
1499 | /                     if 0 != 0 {
1500 | |                         error(
1501 | |                             0 as libc::c_int,
1502 | |                             *__errno_location(),
...    |
1547 | |                         });
1548 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1499:24
     |
1499 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1503:29
     |
1503 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1510:25
     |
1510 | /                         if 0 as libc::c_int != 0 as libc::c_int {
1511 | |                             unreachable!();
1512 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1510:28
     |
1510 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1515:29
     |
1515 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1519:33
     |
1519 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1526:29
     |
1526 | / ...                   if __errstatus != 0 as libc::c_int {
1527 | | ...                       unreachable!();
1528 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1532:29
     |
1532 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1536:33
     |
1536 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1543:29
     |
1543 | / ...                   if __errstatus != 0 as libc::c_int {
1544 | | ...                       unreachable!();
1545 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: the function `io_blksize` doesn't need a mutable reference
    --> src/cat.rs:1551:41
     |
1551 |                     insize = io_blksize(&mut stat_buf);
     |                                         ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1554:25
     |
1554 |                         0 as libc::c_int as off_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1555:25
     |
1555 |                         0 as libc::c_int as off_t,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1567:33
     |
1567 | ...                   0 as libc::c_int as __off_t,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1570:32
     |
1570 | ...                   if 0 as libc::c_int as libc::c_long <= in_pos {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1574:41
     |
1574 | ...                   0 as libc::c_int as __off_t,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1580:29
     |
1580 | / ...                   if 0 != 0 {
1581 | | ...                       error(
1582 | | ...                           0 as libc::c_int,
1583 | | ...                           0 as libc::c_int,
...    |
1637 | | ...                       });
1638 | | ...                   };
     | |_______________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1580:32
     |
1580 | ...                   if 0 != 0 {
     |                          ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1585:41
     |
1585 | / ...                   b"%s: input file is output file\0" as *const u8
1586 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: input file is output file\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1594:33
     |
1594 | / ...                   if 0 as libc::c_int != 0 as libc::c_int {
1595 | | ...                       unreachable!();
1596 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:1594:36
     |
1594 | ...                   if 0 as libc::c_int != 0 as libc::c_int {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1599:37
     |
1599 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1604:45
     |
1604 | / ...                   b"%s: input file is output file\0" as *const u8
1605 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: input file is output file\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1613:37
     |
1613 | / ...                   if __errstatus != 0 as libc::c_int {
1614 | | ...                       unreachable!();
1615 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:1619:37
     |
1619 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1624:45
     |
1624 | / ...                   b"%s: input file is output file\0" as *const u8
1625 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"%s: input file is output file\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:1633:37
     |
1633 | / ...                   if __errstatus != 0 as libc::c_int {
1634 | | ...                       unreachable!();
1635 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/cat.rs:1647:21
     |
1647 | /                     match current_block {
1648 | |                         7239751344758050955 => {}
1649 | |                         _ => {
1650 | |                             inbuf = 0 as *mut libc::c_char;
...    |
2052 | |                         }
2053 | |                     }
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1647 ~                     if current_block == 7239751344758050955 {} else {
1648 +                         inbuf = 0 as *mut libc::c_char;
1649 +                         if !(number as libc::c_int != 0
1650 +                             || show_ends as libc::c_int != 0
1651 +                             || show_nonprinting as libc::c_int != 0
1652 +                             || show_tabs as libc::c_int != 0
1653 +                             || squeeze_blank as libc::c_int != 0)
1654 +                         {
1655 +                             let mut copy_cat_status: libc::c_int = if out_isreg
1656 +                                 as libc::c_int != 0
1657 +                                 && stat_buf.st_mode
1658 +                                     & 0o170000 as libc::c_int as libc::c_uint
1659 +                                     == 0o100000 as libc::c_int as libc::c_uint
1660 +                             {
1661 +                                 copy_cat()
1662 +                             } else {
1663 +                                 0 as libc::c_int
1664 +                             };
1665 +                             if copy_cat_status != 0 as libc::c_int {
1666 +                                 inbuf = 0 as *mut libc::c_char;
1667 +                                 ok = (ok as libc::c_int
1668 +                                     & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
1669 +                             } else {
1670 +                                 insize = if insize > outsize { insize } else { outsize };
1671 +                                 inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
1672 +                                 ok = (ok as libc::c_int
1673 +                                     & simple_cat(inbuf, insize) as libc::c_int) != 0;
1674 +                             }
1675 +                         } else {
1676 +                             inbuf = xalignalloc(
1677 +                                 page_size,
1678 +                                 insize + 1 as libc::c_int as libc::c_long,
1679 +                             ) as *mut libc::c_char;
1680 +                             let mut bufsize: idx_t = 0;
1681 +                             if (if (0 as libc::c_int as idx_t)
1682 +                                 < -(1 as libc::c_int) as idx_t
1683 +                                 && ((if 1 as libc::c_int != 0 {
1684 +                                     0 as libc::c_int as libc::c_long
1685 +                                 } else {
1686 +                                     insize
1687 +                                 }) - 1 as libc::c_int as libc::c_long)
1688 +                                     < 0 as libc::c_int as libc::c_long
1689 +                                 && ((if 1 as libc::c_int != 0 {
1690 +                                     0 as libc::c_int
1691 +                                 } else {
1692 +                                     4 as libc::c_int
1693 +                                 }) - 1 as libc::c_int) < 0 as libc::c_int
1694 +                                 && (if (4 as libc::c_int) < 0 as libc::c_int {
1695 +                                     if insize < 0 as libc::c_int as libc::c_long {
1696 +                                         if ((if 1 as libc::c_int != 0 {
1697 +                                             0 as libc::c_int as libc::c_long
1698 +                                         } else {
1699 +                                             (if 1 as libc::c_int != 0 {
1700 +                                                 0 as libc::c_int as libc::c_long
1701 +                                             } else {
1702 +                                                 -(1 as libc::c_int) as idx_t
1703 +                                             }) + 4 as libc::c_int as libc::c_long
1704 +                                         }) - 1 as libc::c_int as libc::c_long)
1705 +                                             < 0 as libc::c_int as libc::c_long
1706 +                                         {
1707 +                                             (insize
1708 +                                                 < -(1 as libc::c_int) as idx_t
1709 +                                                     / 4 as libc::c_int as libc::c_long) as libc::c_int
1710 +                                         } else {
1711 +                                             ((if (if (if ((if 1 as libc::c_int != 0 {
1712 +                                                 0 as libc::c_int
1713 +                                             } else {
1714 +                                                 4 as libc::c_int
1715 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1716 +                                             {
1717 +                                                 !(((((if 1 as libc::c_int != 0 {
1718 +                                                     0 as libc::c_int
1719 +                                                 } else {
1720 +                                                     4 as libc::c_int
1721 +                                                 }) + 1 as libc::c_int)
1722 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1723 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1724 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1725 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1726 +                                             } else {
1727 +                                                 (if 1 as libc::c_int != 0 {
1728 +                                                     0 as libc::c_int
1729 +                                                 } else {
1730 +                                                     4 as libc::c_int
1731 +                                                 }) + 0 as libc::c_int
1732 +                                             }) < 0 as libc::c_int
1733 +                                             {
1734 +                                                 ((4 as libc::c_int)
1735 +                                                     < -(if ((if 1 as libc::c_int != 0 {
1736 +                                                         0 as libc::c_int
1737 +                                                     } else {
1738 +                                                         4 as libc::c_int
1739 +                                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1740 +                                                     {
1741 +                                                         ((((if 1 as libc::c_int != 0 {
1742 +                                                             0 as libc::c_int
1743 +                                                         } else {
1744 +                                                             4 as libc::c_int
1745 +                                                         }) + 1 as libc::c_int)
1746 +                                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1747 +                                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1748 +                                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1749 +                                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1750 +                                                     } else {
1751 +                                                         (if 1 as libc::c_int != 0 {
1752 +                                                             0 as libc::c_int
1753 +                                                         } else {
1754 +                                                             4 as libc::c_int
1755 +                                                         }) - 1 as libc::c_int
1756 +                                                     })) as libc::c_int
1757 +                                             } else {
1758 +                                                 ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
1759 +                                             }) != 0
1760 +                                             {
1761 +                                                 (if 1 as libc::c_int != 0 {
1762 +                                                     0 as libc::c_int
1763 +                                                 } else {
1764 +                                                     4 as libc::c_int
1765 +                                                 }) as libc::c_long + -(1 as libc::c_int) as idx_t
1766 +                                                     >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1767 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1768 +                                                         .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1769 +                                             } else {
1770 +                                                 -(1 as libc::c_int) as idx_t
1771 +                                                     / -(4 as libc::c_int) as libc::c_long
1772 +                                             }) <= -(1 as libc::c_int) as libc::c_long - insize)
1773 +                                                 as libc::c_int
1774 +                                         }
1775 +                                     } else {
1776 +                                         if (if (if ((if 1 as libc::c_int != 0 {
1777 +                                             0 as libc::c_int as libc::c_long
1778 +                                         } else {
1779 +                                             (if 1 as libc::c_int != 0 {
1780 +                                                 0 as libc::c_int
1781 +                                             } else {
1782 +                                                 4 as libc::c_int
1783 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1784 +                                         }) - 1 as libc::c_int as libc::c_long)
1785 +                                             < 0 as libc::c_int as libc::c_long
1786 +                                         {
1787 +                                             !(((((if 1 as libc::c_int != 0 {
1788 +                                                 0 as libc::c_int as libc::c_long
1789 +                                             } else {
1790 +                                                 (if 1 as libc::c_int != 0 {
1791 +                                                     0 as libc::c_int
1792 +                                                 } else {
1793 +                                                     4 as libc::c_int
1794 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1795 +                                             }) + 1 as libc::c_int as libc::c_long)
1796 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1797 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1798 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1799 +                                                 - 1 as libc::c_int as libc::c_long)
1800 +                                                 * 2 as libc::c_int as libc::c_long
1801 +                                                 + 1 as libc::c_int as libc::c_long)
1802 +                                         } else {
1803 +                                             (if 1 as libc::c_int != 0 {
1804 +                                                 0 as libc::c_int as libc::c_long
1805 +                                             } else {
1806 +                                                 (if 1 as libc::c_int != 0 {
1807 +                                                     0 as libc::c_int
1808 +                                                 } else {
1809 +                                                     4 as libc::c_int
1810 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1811 +                                             }) + 0 as libc::c_int as libc::c_long
1812 +                                         }) < 0 as libc::c_int as libc::c_long
1813 +                                         {
1814 +                                             (((if 1 as libc::c_int != 0 {
1815 +                                                 0 as libc::c_int
1816 +                                             } else {
1817 +                                                 4 as libc::c_int
1818 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t)
1819 +                                                 < -(if ((if 1 as libc::c_int != 0 {
1820 +                                                     0 as libc::c_int as libc::c_long
1821 +                                                 } else {
1822 +                                                     (if 1 as libc::c_int != 0 {
1823 +                                                         0 as libc::c_int
1824 +                                                     } else {
1825 +                                                         4 as libc::c_int
1826 +                                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1827 +                                                 }) - 1 as libc::c_int as libc::c_long)
1828 +                                                     < 0 as libc::c_int as libc::c_long
1829 +                                                 {
1830 +                                                     ((((if 1 as libc::c_int != 0 {
1831 +                                                         0 as libc::c_int as libc::c_long
1832 +                                                     } else {
1833 +                                                         (if 1 as libc::c_int != 0 {
1834 +                                                             0 as libc::c_int
1835 +                                                         } else {
1836 +                                                             4 as libc::c_int
1837 +                                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1838 +                                                     }) + 1 as libc::c_int as libc::c_long)
1839 +                                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1840 +                                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1841 +                                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1842 +                                                         - 1 as libc::c_int as libc::c_long)
1843 +                                                         * 2 as libc::c_int as libc::c_long
1844 +                                                         + 1 as libc::c_int as libc::c_long
1845 +                                                 } else {
1846 +                                                     (if 1 as libc::c_int != 0 {
1847 +                                                         0 as libc::c_int as libc::c_long
1848 +                                                     } else {
1849 +                                                         (if 1 as libc::c_int != 0 {
1850 +                                                             0 as libc::c_int
1851 +                                                         } else {
1852 +                                                             4 as libc::c_int
1853 +                                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1854 +                                                     }) - 1 as libc::c_int as libc::c_long
1855 +                                                 })) as libc::c_int
1856 +                                         } else {
1857 +                                             ((0 as libc::c_int as libc::c_long)
1858 +                                                 < (if 1 as libc::c_int != 0 {
1859 +                                                     0 as libc::c_int
1860 +                                                 } else {
1861 +                                                     4 as libc::c_int
1862 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t)
1863 +                                                 as libc::c_int
1864 +                                         }) != 0 && 4 as libc::c_int == -(1 as libc::c_int)
1865 +                                         {
1866 +                                             if ((if 1 as libc::c_int != 0 {
1867 +                                                 0 as libc::c_int as libc::c_long
1868 +                                             } else {
1869 +                                                 insize
1870 +                                             }) - 1 as libc::c_int as libc::c_long)
1871 +                                                 < 0 as libc::c_int as libc::c_long
1872 +                                             {
1873 +                                                 ((0 as libc::c_int as libc::c_long)
1874 +                                                     < insize + 0 as libc::c_int as idx_t) as libc::c_int
1875 +                                             } else {
1876 +                                                 ((0 as libc::c_int as libc::c_long) < insize
1877 +                                                     && (-(1 as libc::c_int) as libc::c_long
1878 +                                                         - 0 as libc::c_int as idx_t)
1879 +                                                         < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
1880 +                                             }
1881 +                                         } else {
1882 +                                             ((0 as libc::c_int as idx_t
1883 +                                                 / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
1884 +                                         }
1885 +                                     }
1886 +                                 } else {
1887 +                                     if 4 as libc::c_int == 0 as libc::c_int {
1888 +                                         0 as libc::c_int
1889 +                                     } else {
1890 +                                         if insize < 0 as libc::c_int as libc::c_long {
1891 +                                             if (if (if ((if 1 as libc::c_int != 0 {
1892 +                                                 0 as libc::c_int as libc::c_long
1893 +                                             } else {
1894 +                                                 (if 1 as libc::c_int != 0 {
1895 +                                                     0 as libc::c_int as libc::c_long
1896 +                                                 } else {
1897 +                                                     insize
1898 +                                                 }) + 0 as libc::c_int as idx_t
1899 +                                             }) - 1 as libc::c_int as libc::c_long)
1900 +                                                 < 0 as libc::c_int as libc::c_long
1901 +                                             {
1902 +                                                 !(((((if 1 as libc::c_int != 0 {
1903 +                                                     0 as libc::c_int as libc::c_long
1904 +                                                 } else {
1905 +                                                     (if 1 as libc::c_int != 0 {
1906 +                                                         0 as libc::c_int as libc::c_long
1907 +                                                     } else {
1908 +                                                         insize
1909 +                                                     }) + 0 as libc::c_int as idx_t
1910 +                                                 }) + 1 as libc::c_int as libc::c_long)
1911 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1912 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1913 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1914 +                                                     - 1 as libc::c_int as libc::c_long)
1915 +                                                     * 2 as libc::c_int as libc::c_long
1916 +                                                     + 1 as libc::c_int as libc::c_long)
1917 +                                             } else {
1918 +                                                 (if 1 as libc::c_int != 0 {
1919 +                                                     0 as libc::c_int as libc::c_long
1920 +                                                 } else {
1921 +                                                     (if 1 as libc::c_int != 0 {
1922 +                                                         0 as libc::c_int as libc::c_long
1923 +                                                     } else {
1924 +                                                         insize
1925 +                                                     }) + 0 as libc::c_int as idx_t
1926 +                                                 }) + 0 as libc::c_int as libc::c_long
1927 +                                             }) < 0 as libc::c_int as libc::c_long
1928 +                                             {
1929 +                                                 (((if 1 as libc::c_int != 0 {
1930 +                                                     0 as libc::c_int as libc::c_long
1931 +                                                 } else {
1932 +                                                     insize
1933 +                                                 }) + 0 as libc::c_int as idx_t)
1934 +                                                     < -(if ((if 1 as libc::c_int != 0 {
1935 +                                                         0 as libc::c_int as libc::c_long
1936 +                                                     } else {
1937 +                                                         (if 1 as libc::c_int != 0 {
1938 +                                                             0 as libc::c_int as libc::c_long
1939 +                                                         } else {
1940 +                                                             insize
1941 +                                                         }) + 0 as libc::c_int as idx_t
1942 +                                                     }) - 1 as libc::c_int as libc::c_long)
1943 +                                                         < 0 as libc::c_int as libc::c_long
1944 +                                                     {
1945 +                                                         ((((if 1 as libc::c_int != 0 {
1946 +                                                             0 as libc::c_int as libc::c_long
1947 +                                                         } else {
1948 +                                                             (if 1 as libc::c_int != 0 {
1949 +                                                                 0 as libc::c_int as libc::c_long
1950 +                                                             } else {
1951 +                                                                 insize
1952 +                                                             }) + 0 as libc::c_int as idx_t
1953 +                                                         }) + 1 as libc::c_int as libc::c_long)
1954 +                                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1955 +                                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1956 +                                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1957 +                                                             - 1 as libc::c_int as libc::c_long)
1958 +                                                             * 2 as libc::c_int as libc::c_long
1959 +                                                             + 1 as libc::c_int as libc::c_long
1960 +                                                     } else {
1961 +                                                         (if 1 as libc::c_int != 0 {
1962 +                                                             0 as libc::c_int as libc::c_long
1963 +                                                         } else {
1964 +                                                             (if 1 as libc::c_int != 0 {
1965 +                                                                 0 as libc::c_int as libc::c_long
1966 +                                                             } else {
1967 +                                                                 insize
1968 +                                                             }) + 0 as libc::c_int as idx_t
1969 +                                                         }) - 1 as libc::c_int as libc::c_long
1970 +                                                     })) as libc::c_int
1971 +                                             } else {
1972 +                                                 ((0 as libc::c_int as libc::c_long)
1973 +                                                     < (if 1 as libc::c_int != 0 {
1974 +                                                         0 as libc::c_int as libc::c_long
1975 +                                                     } else {
1976 +                                                         insize
1977 +                                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
1978 +                                             }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
1979 +                                             {
1980 +                                                 if ((if 1 as libc::c_int != 0 {
1981 +                                                     0 as libc::c_int
1982 +                                                 } else {
1983 +                                                     4 as libc::c_int
1984 +                                                 }) - 1 as libc::c_int) < 0 as libc::c_int
1985 +                                                 {
1986 +                                                     ((0 as libc::c_int as libc::c_long)
1987 +                                                         < 4 as libc::c_int as libc::c_long
1988 +                                                             + 0 as libc::c_int as idx_t) as libc::c_int
1989 +                                                 } else {
1990 +                                                     ((-(1 as libc::c_int) as libc::c_long
1991 +                                                         - 0 as libc::c_int as idx_t)
1992 +                                                         < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1993 +                                                         as libc::c_int
1994 +                                                 }
1995 +                                             } else {
1996 +                                                 (0 as libc::c_int as idx_t / insize
1997 +                                                     < 4 as libc::c_int as libc::c_long) as libc::c_int
1998 +                                             }
1999 +                                         } else {
2000 +                                             ((-(1 as libc::c_int) as idx_t
2001 +                                                 / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
2002 +                                         }
2003 +                                     }
2004 +                                 }) != 0
2005 +                             {
2006 +                                 let (fresh33, _fresh34) = insize
2007 +                                     .overflowing_mul((4 as libc::c_int).into());
2008 +                                 *(&mut bufsize as *mut idx_t) = fresh33;
2009 +                                 1 as libc::c_int
2010 +                             } else {
2011 +                                 let (fresh35, fresh36) = insize
2012 +                                     .overflowing_mul((4 as libc::c_int).into());
2013 +                                 *(&mut bufsize as *mut idx_t) = fresh35;
2014 +                                 fresh36 as libc::c_int
2015 +                             }) != 0
2016 +                                 || {
2017 +                                     let (fresh37, fresh38) = bufsize.overflowing_add(outsize);
2018 +                                     *(&mut bufsize as *mut idx_t) = fresh37;
2019 +                                     fresh38 as libc::c_int != 0
2020 +                                 }
2021 +                                 || {
2022 +                                     let (fresh39, fresh40) = bufsize
2023 +                                         .overflowing_add((20 as libc::c_int - 1 as libc::c_int).into());
2024 +                                     *(&mut bufsize as *mut idx_t) = fresh39;
2025 +                                     fresh40 as libc::c_int != 0
2026 +                                 }
2027 +                             {
2028 +                                 xalloc_die();
2029 +                             }
2030 +                             let mut outbuf: *mut libc::c_char = xalignalloc(
2031 +                                 page_size,
2032 +                                 bufsize,
2033 +                             ) as *mut libc::c_char;
2034 +                             ok = (ok as libc::c_int
2035 +                                 & cat(
2036 +                                     inbuf,
2037 +                                     insize,
2038 +                                     outbuf,
2039 +                                     outsize,
2040 +                                     show_nonprinting,
2041 +                                     show_tabs,
2042 +                                     number,
2043 +                                     number_nonblank,
2044 +                                     show_ends,
2045 +                                     squeeze_blank,
2046 +                                 ) as libc::c_int) != 0;
2047 +                             alignfree(outbuf as *mut libc::c_void);
2048 +                         }
2049 +                         alignfree(inbuf as *mut libc::c_void);
2050 +                     }
     |

warning: `0 as *mut _` detected
    --> src/cat.rs:1650:37
     |
1650 | ...                   inbuf = 0 as *mut libc::c_char;
     |                               ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary boolean `not` operation
    --> src/cat.rs:1651:29
     |
1651 | / ...                   if !(number as libc::c_int != 0
1652 | | ...                       || show_ends as libc::c_int != 0
1653 | | ...                       || show_nonprinting as libc::c_int != 0
1654 | | ...                       || show_tabs as libc::c_int != 0
...    |
2049 | | ...                       alignfree(outbuf as *mut libc::c_void);
2050 | | ...                   }
     | |_______________________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1651:34
     |
1651 | ...                   if !(number as libc::c_int != 0
     |                            ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(number)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1652:36
     |
1652 | ...                   || show_ends as libc::c_int != 0
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(show_ends)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1653:36
     |
1653 | ...                   || show_nonprinting as libc::c_int != 0
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(show_nonprinting)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1654:36
     |
1654 | ...                   || show_tabs as libc::c_int != 0
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(show_tabs)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1655:36
     |
1655 | ...                   || squeeze_blank as libc::c_int != 0)
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(squeeze_blank)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1657:75
     |
1657 |   ...                   let mut copy_cat_status: libc::c_int = if out_isreg
     |  _________________________________________________________________^
1658 | | ...                       as libc::c_int != 0
     | |________________________________________^ help: try: `i32::from(out_isreg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/cat.rs:1660:43
     |
1660 | ...                   & 0o170000 as libc::c_int as libc::c_uint
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/cat.rs:1661:44
     |
1661 | ...                   == 0o100000 as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/cat.rs:1667:33
     |
1667 | / ...                   if copy_cat_status != 0 as libc::c_int {
1668 | | ...                       inbuf = 0 as *mut libc::c_char;
1669 | | ...                       ok = (ok as libc::c_int
1670 | | ...                           & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
...    |
1675 | | ...                           & simple_cat(inbuf, insize) as libc::c_int) != 0;
1676 | | ...                   }
     | |_______________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `0 as *mut _` detected
    --> src/cat.rs:1668:45
     |
1668 | ...                   inbuf = 0 as *mut libc::c_char;
     |                               ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1669:43
     |
1669 | ...                   ok = (ok as libc::c_int
     |                             ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1670:43
     |
1670 | ...                   & ((0 as libc::c_int) < copy_cat_status) as libc::c_int) != 0;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < copy_cat_status)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1673:45
     |
1673 | ...                   inbuf = xalignalloc(page_size, insize) as *mut libc::c_char;
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `xalignalloc(page_size, insize).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1674:43
     |
1674 | ...                   ok = (ok as libc::c_int
     |                             ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1675:43
     |
1675 | ...                   & simple_cat(inbuf, insize) as libc::c_int) != 0;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(simple_cat(inbuf, insize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:1678:41
     |
1678 |   ...                   inbuf = xalignalloc(
     |  _______________________________^
1679 | | ...                       page_size,
1680 | | ...                       insize + 1 as libc::c_int as libc::c_long,
1681 | | ...                   ) as *mut libc::c_char;
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1678 ~                                 inbuf = xalignalloc(
1679 +                                     page_size,
1680 +                                     insize + 1 as libc::c_int as libc::c_long,
1681 ~                                 ).cast::<i8>();
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1680:46
     |
1680 | ...                   insize + 1 as libc::c_int as libc::c_long,
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1683:40
     |
1683 | ...                   if (if (0 as libc::c_int as idx_t)
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1684:39
     |
1684 | ...                   < -(1 as libc::c_int) as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1685:41
     |
1685 |   ...                   && ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1686 | | ...                       0 as libc::c_int as libc::c_long
1687 | | ...                   } else {
1688 | | ...                       insize
1689 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1686:41
     |
1686 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1689:42
     |
1689 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1690:43
     |
1690 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1691:41
     |
1691 |   ...                   && ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1692 | | ...                       0 as libc::c_int
1693 | | ...                   } else {
1694 | | ...                       4 as libc::c_int
1695 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1697:53
     |
1697 | ...                   if insize < 0 as libc::c_int as libc::c_long {
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1698:49
     |
1698 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1699 | | ...                       0 as libc::c_int as libc::c_long
1700 | | ...                   } else {
1701 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1705 | | ...                       }) + 4 as libc::c_int as libc::c_long
1706 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1699:49
     |
1699 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1701:49
     |
1701 | / ...                   (if 1 as libc::c_int != 0 {
1702 | | ...                       0 as libc::c_int as libc::c_long
1703 | | ...                   } else {
1704 | | ...                       -(1 as libc::c_int) as idx_t
1705 | | ...                   }) + 4 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1702:53
     |
1702 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1704:53
     |
1704 | ...                   -(1 as libc::c_int) as idx_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1705:54
     |
1705 | ...                   }) + 4 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(4 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1706:50
     |
1706 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1707:51
     |
1707 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1709:49
     |
1709 | / ...                   (insize
1710 | | ...                       < -(1 as libc::c_int) as idx_t
1711 | | ...                           / 4 as libc::c_int as libc::c_long) as libc::c_int
     | |________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1709 ~                                                 i32::from(insize
1710 +                                                     < -(1 as libc::c_int) as idx_t
1711 +                                                         / 4 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1710:55
     |
1710 | ...                   < -(1 as libc::c_int) as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1711:59
     |
1711 | ...                   / 4 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(4 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1713:49
     |
1713 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
1714 | | ...                       0 as libc::c_int
1715 | | ...                   } else {
1716 | | ...                       4 as libc::c_int
...    |
1774 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - insize)
1775 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1713 ~                                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
1714 +                                                     0 as libc::c_int
1715 +                                                 } else {
1716 +                                                     4 as libc::c_int
1717 +                                                 }) - 1 as libc::c_int) < 0 as libc::c_int
1718 +                                                 {
1719 +                                                     !(((((if 1 as libc::c_int != 0 {
1720 +                                                         0 as libc::c_int
1721 +                                                     } else {
1722 +                                                         4 as libc::c_int
1723 +                                                     }) + 1 as libc::c_int)
1724 +                                                         << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1725 +                                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1726 +                                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1727 +                                                         - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1728 +                                                 } else {
1729 +                                                     (if 1 as libc::c_int != 0 {
1730 +                                                         0 as libc::c_int
1731 +                                                     } else {
1732 +                                                         4 as libc::c_int
1733 +                                                     }) + 0 as libc::c_int
1734 +                                                 }) < 0 as libc::c_int
1735 +                                                 {
1736 +                                                     ((4 as libc::c_int)
1737 +                                                         < -(if ((if 1 as libc::c_int != 0 {
1738 +                                                             0 as libc::c_int
1739 +                                                         } else {
1740 +                                                             4 as libc::c_int
1741 +                                                         }) - 1 as libc::c_int) < 0 as libc::c_int
1742 +                                                         {
1743 +                                                             ((((if 1 as libc::c_int != 0 {
1744 +                                                                 0 as libc::c_int
1745 +                                                             } else {
1746 +                                                                 4 as libc::c_int
1747 +                                                             }) + 1 as libc::c_int)
1748 +                                                                 << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1749 +                                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1750 +                                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1751 +                                                                 - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1752 +                                                         } else {
1753 +                                                             (if 1 as libc::c_int != 0 {
1754 +                                                                 0 as libc::c_int
1755 +                                                             } else {
1756 +                                                                 4 as libc::c_int
1757 +                                                             }) - 1 as libc::c_int
1758 +                                                         })) as libc::c_int
1759 +                                                 } else {
1760 +                                                     ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
1761 +                                                 }) != 0
1762 +                                                 {
1763 +                                                     (if 1 as libc::c_int != 0 {
1764 +                                                         0 as libc::c_int
1765 +                                                     } else {
1766 +                                                         4 as libc::c_int
1767 +                                                     }) as libc::c_long + -(1 as libc::c_int) as idx_t
1768 +                                                         >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1769 +                                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1770 +                                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1771 +                                                 } else {
1772 +                                                     -(1 as libc::c_int) as idx_t
1773 +                                                         / -(4 as libc::c_int) as libc::c_long
1774 +                                                 }) <= -(1 as libc::c_int) as libc::c_long - insize)
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1713:50
     |
1713 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  ________________________^
1714 | | ...                       0 as libc::c_int
1715 | | ...                   } else {
1716 | | ...                       4 as libc::c_int
...    |
1773 | | ...                           / -(4 as libc::c_int) as libc::c_long
1774 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - insize)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/cat.rs:1713:63
     |
1713 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  _____________________________________^
1714 | | ...                       0 as libc::c_int
1715 | | ...                   } else {
1716 | | ...                       4 as libc::c_int
1717 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/cat.rs:1719:58
     |
1719 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1720 | | ...                       0 as libc::c_int
1721 | | ...                   } else {
1722 | | ...                       4 as libc::c_int
1723 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1725:75
     |
1725 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1726:75
     |
1726 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/cat.rs:1729:53
     |
1729 | / ...                   (if 1 as libc::c_int != 0 {
1730 | | ...                       0 as libc::c_int
1731 | | ...                   } else {
1732 | | ...                       4 as libc::c_int
1733 | | ...                   }) + 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1736:53
     |
1736 | / ...                   ((4 as libc::c_int)
1737 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
1738 | | ...                           0 as libc::c_int
1739 | | ...                       } else {
...    |
1757 | | ...                           }) - 1 as libc::c_int
1758 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1736 ~                                                     i32::from((4 as libc::c_int)
1737 +                                                         < -(if ((if 1 as libc::c_int != 0 {
1738 +                                                             0 as libc::c_int
1739 +                                                         } else {
1740 +                                                             4 as libc::c_int
1741 +                                                         }) - 1 as libc::c_int) < 0 as libc::c_int
1742 +                                                         {
1743 +                                                             ((((if 1 as libc::c_int != 0 {
1744 +                                                                 0 as libc::c_int
1745 +                                                             } else {
1746 +                                                                 4 as libc::c_int
1747 +                                                             }) + 1 as libc::c_int)
1748 +                                                                 << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1749 +                                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1750 +                                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1751 +                                                                 - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1752 +                                                         } else {
1753 +                                                             (if 1 as libc::c_int != 0 {
1754 +                                                                 0 as libc::c_int
1755 +                                                             } else {
1756 +                                                                 4 as libc::c_int
1757 +                                                             }) - 1 as libc::c_int
1758 +                                                         }))
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1737:65
     |
1737 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1738 | | ...                       0 as libc::c_int
1739 | | ...                   } else {
1740 | | ...                       4 as libc::c_int
1741 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/cat.rs:1743:64
     |
1743 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1744 | | ...                       0 as libc::c_int
1745 | | ...                   } else {
1746 | | ...                       4 as libc::c_int
1747 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1749:83
     |
1749 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1750:83
     |
1750 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/cat.rs:1753:61
     |
1753 | / ...                   (if 1 as libc::c_int != 0 {
1754 | | ...                       0 as libc::c_int
1755 | | ...                   } else {
1756 | | ...                       4 as libc::c_int
1757 | | ...                   }) - 1 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1760:53
     |
1760 | ...                   ((0 as libc::c_int) < 4 as libc::c_int) as libc::c_int
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < 4 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1763:53
     |
1763 | / ...                   (if 1 as libc::c_int != 0 {
1764 | | ...                       0 as libc::c_int
1765 | | ...                   } else {
1766 | | ...                       4 as libc::c_int
1767 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1763 ~                                                     i64::from((if 1 as libc::c_int != 0 {
1764 +                                                         0 as libc::c_int
1765 +                                                     } else {
1766 +                                                         4 as libc::c_int
1767 ~                                                     })) + -(1 as libc::c_int) as idx_t
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1763:53
     |
1763 | / ...                   (if 1 as libc::c_int != 0 {
1764 | | ...                       0 as libc::c_int
1765 | | ...                   } else {
1766 | | ...                       4 as libc::c_int
1767 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1767:74
     |
1767 | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1769:75
     |
1769 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1770:75
     |
1770 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1772:53
     |
1772 | ...                   -(1 as libc::c_int) as idx_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1773:59
     |
1773 | ...                   / -(4 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(4 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1774:55
     |
1774 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - insize)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1778:57
     |
1778 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
1779 | | ...                       0 as libc::c_int as libc::c_long
1780 | | ...                   } else {
1781 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1785 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1786 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1779:49
     |
1779 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1781:49
     |
1781 | / ...                   (if 1 as libc::c_int != 0 {
1782 | | ...                       0 as libc::c_int
1783 | | ...                   } else {
1784 | | ...                       4 as libc::c_int
1785 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1781 ~                                                 i64::from((if 1 as libc::c_int != 0 {
1782 +                                                     0 as libc::c_int
1783 +                                                 } else {
1784 +                                                     4 as libc::c_int
1785 ~                                                 })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1781:49
     |
1781 | / ...                   (if 1 as libc::c_int != 0 {
1782 | | ...                       0 as libc::c_int
1783 | | ...                   } else {
1784 | | ...                       4 as libc::c_int
1785 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1785:70
     |
1785 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1786:50
     |
1786 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1787:51
     |
1787 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1789:54
     |
1789 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1790 | | ...                       0 as libc::c_int as libc::c_long
1791 | | ...                   } else {
1792 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1796 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1797 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1790:53
     |
1790 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1792:53
     |
1792 | / ...                   (if 1 as libc::c_int != 0 {
1793 | | ...                       0 as libc::c_int
1794 | | ...                   } else {
1795 | | ...                       4 as libc::c_int
1796 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1792 ~                                                     i64::from((if 1 as libc::c_int != 0 {
1793 +                                                         0 as libc::c_int
1794 +                                                     } else {
1795 +                                                         4 as libc::c_int
1796 ~                                                     })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1792:53
     |
1792 | / ...                   (if 1 as libc::c_int != 0 {
1793 | | ...                       0 as libc::c_int
1794 | | ...                   } else {
1795 | | ...                       4 as libc::c_int
1796 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1796:74
     |
1796 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1797:54
     |
1797 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1799:71
     |
1799 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1800:71
     |
1800 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1801:55
     |
1801 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1802:55
     |
1802 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1803:55
     |
1803 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1805:49
     |
1805 | / ...                   (if 1 as libc::c_int != 0 {
1806 | | ...                       0 as libc::c_int as libc::c_long
1807 | | ...                   } else {
1808 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1812 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1813 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1806:53
     |
1806 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1808:53
     |
1808 | / ...                   (if 1 as libc::c_int != 0 {
1809 | | ...                       0 as libc::c_int
1810 | | ...                   } else {
1811 | | ...                       4 as libc::c_int
1812 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1808 ~                                                     i64::from((if 1 as libc::c_int != 0 {
1809 +                                                         0 as libc::c_int
1810 +                                                     } else {
1811 +                                                         4 as libc::c_int
1812 ~                                                     })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1808:53
     |
1808 | / ...                   (if 1 as libc::c_int != 0 {
1809 | | ...                       0 as libc::c_int
1810 | | ...                   } else {
1811 | | ...                       4 as libc::c_int
1812 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1812:74
     |
1812 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1813:54
     |
1813 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1814:50
     |
1814 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1816:49
     |
1816 | / ...                   (((if 1 as libc::c_int != 0 {
1817 | | ...                       0 as libc::c_int
1818 | | ...                   } else {
1819 | | ...                       4 as libc::c_int
...    |
1856 | | ...                           }) - 1 as libc::c_int as libc::c_long
1857 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1816 ~                                                 i32::from(((if 1 as libc::c_int != 0 {
1817 +                                                     0 as libc::c_int
1818 +                                                 } else {
1819 +                                                     4 as libc::c_int
1820 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t)
1821 +                                                     < -(if ((if 1 as libc::c_int != 0 {
1822 +                                                         0 as libc::c_int as libc::c_long
1823 +                                                     } else {
1824 +                                                         (if 1 as libc::c_int != 0 {
1825 +                                                             0 as libc::c_int
1826 +                                                         } else {
1827 +                                                             4 as libc::c_int
1828 +                                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1829 +                                                     }) - 1 as libc::c_int as libc::c_long)
1830 +                                                         < 0 as libc::c_int as libc::c_long
1831 +                                                     {
1832 +                                                         ((((if 1 as libc::c_int != 0 {
1833 +                                                             0 as libc::c_int as libc::c_long
1834 +                                                         } else {
1835 +                                                             (if 1 as libc::c_int != 0 {
1836 +                                                                 0 as libc::c_int
1837 +                                                             } else {
1838 +                                                                 4 as libc::c_int
1839 +                                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1840 +                                                         }) + 1 as libc::c_int as libc::c_long)
1841 +                                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1842 +                                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1843 +                                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1844 +                                                             - 1 as libc::c_int as libc::c_long)
1845 +                                                             * 2 as libc::c_int as libc::c_long
1846 +                                                             + 1 as libc::c_int as libc::c_long
1847 +                                                     } else {
1848 +                                                         (if 1 as libc::c_int != 0 {
1849 +                                                             0 as libc::c_int as libc::c_long
1850 +                                                         } else {
1851 +                                                             (if 1 as libc::c_int != 0 {
1852 +                                                                 0 as libc::c_int
1853 +                                                             } else {
1854 +                                                                 4 as libc::c_int
1855 +                                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1856 +                                                         }) - 1 as libc::c_int as libc::c_long
1857 +                                                     }))
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1816:51
     |
1816 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1817 | | ...                       0 as libc::c_int
1818 | | ...                   } else {
1819 | | ...                       4 as libc::c_int
1820 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1816 ~                                                 ((i64::from((if 1 as libc::c_int != 0 {
1817 +                                                     0 as libc::c_int
1818 +                                                 } else {
1819 +                                                     4 as libc::c_int
1820 ~                                                 })) + 0 as libc::c_int as idx_t)
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1816:51
     |
1816 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1817 | | ...                       0 as libc::c_int
1818 | | ...                   } else {
1819 | | ...                       4 as libc::c_int
1820 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1820:70
     |
1820 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1821:61
     |
1821 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1822 | | ...                       0 as libc::c_int as libc::c_long
1823 | | ...                   } else {
1824 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1828 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1829 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1822:57
     |
1822 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1824:57
     |
1824 | / ...                   (if 1 as libc::c_int != 0 {
1825 | | ...                       0 as libc::c_int
1826 | | ...                   } else {
1827 | | ...                       4 as libc::c_int
1828 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1824 ~                                                         i64::from((if 1 as libc::c_int != 0 {
1825 +                                                             0 as libc::c_int
1826 +                                                         } else {
1827 +                                                             4 as libc::c_int
1828 ~                                                         })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1824:57
     |
1824 | / ...                   (if 1 as libc::c_int != 0 {
1825 | | ...                       0 as libc::c_int
1826 | | ...                   } else {
1827 | | ...                       4 as libc::c_int
1828 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1828:78
     |
1828 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1829:58
     |
1829 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1830:59
     |
1830 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1832:60
     |
1832 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1833 | | ...                       0 as libc::c_int as libc::c_long
1834 | | ...                   } else {
1835 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1839 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1840 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1833:61
     |
1833 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1835:61
     |
1835 | / ...                   (if 1 as libc::c_int != 0 {
1836 | | ...                       0 as libc::c_int
1837 | | ...                   } else {
1838 | | ...                       4 as libc::c_int
1839 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1835 ~                                                             i64::from((if 1 as libc::c_int != 0 {
1836 +                                                                 0 as libc::c_int
1837 +                                                             } else {
1838 +                                                                 4 as libc::c_int
1839 ~                                                             })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1835:61
     |
1835 | / ...                   (if 1 as libc::c_int != 0 {
1836 | | ...                       0 as libc::c_int
1837 | | ...                   } else {
1838 | | ...                       4 as libc::c_int
1839 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1839:82
     |
1839 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1840:62
     |
1840 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1842:79
     |
1842 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1843:79
     |
1843 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1844:63
     |
1844 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1845:63
     |
1845 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1846:63
     |
1846 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1848:57
     |
1848 | / ...                   (if 1 as libc::c_int != 0 {
1849 | | ...                       0 as libc::c_int as libc::c_long
1850 | | ...                   } else {
1851 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1855 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1856 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1849:61
     |
1849 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1851:61
     |
1851 | / ...                   (if 1 as libc::c_int != 0 {
1852 | | ...                       0 as libc::c_int
1853 | | ...                   } else {
1854 | | ...                       4 as libc::c_int
1855 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1851 ~                                                             i64::from((if 1 as libc::c_int != 0 {
1852 +                                                                 0 as libc::c_int
1853 +                                                             } else {
1854 +                                                                 4 as libc::c_int
1855 ~                                                             })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1851:61
     |
1851 | / ...                   (if 1 as libc::c_int != 0 {
1852 | | ...                       0 as libc::c_int
1853 | | ...                   } else {
1854 | | ...                       4 as libc::c_int
1855 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1855:82
     |
1855 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1856:62
     |
1856 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1859:49
     |
1859 | / ...                   ((0 as libc::c_int as libc::c_long)
1860 | | ...                       < (if 1 as libc::c_int != 0 {
1861 | | ...                           0 as libc::c_int
1862 | | ...                       } else {
1863 | | ...                           4 as libc::c_int
1864 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t)
1865 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1859 ~                                                 i32::from((0 as libc::c_int as libc::c_long)
1860 +                                                     < (if 1 as libc::c_int != 0 {
1861 +                                                         0 as libc::c_int
1862 +                                                     } else {
1863 +                                                         4 as libc::c_int
1864 +                                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1859:50
     |
1859 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1860:55
     |
1860 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1861 | | ...                       0 as libc::c_int
1862 | | ...                   } else {
1863 | | ...                       4 as libc::c_int
1864 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1860 ~                                                     < i64::from((if 1 as libc::c_int != 0 {
1861 +                                                         0 as libc::c_int
1862 +                                                     } else {
1863 +                                                         4 as libc::c_int
1864 ~                                                     })) + 0 as libc::c_int as idx_t)
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1860:55
     |
1860 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1861 | | ...                       0 as libc::c_int
1862 | | ...                   } else {
1863 | | ...                       4 as libc::c_int
1864 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1864:74
     |
1864 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1868:53
     |
1868 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1869 | | ...                       0 as libc::c_int as libc::c_long
1870 | | ...                   } else {
1871 | | ...                       insize
1872 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1869:53
     |
1869 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1872:54
     |
1872 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1873:55
     |
1873 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1875:53
     |
1875 | / ...                   ((0 as libc::c_int as libc::c_long)
1876 | | ...                       < insize + 0 as libc::c_int as idx_t) as libc::c_int
     | |______________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1875 ~                                                     i32::from((0 as libc::c_int as libc::c_long)
1876 +                                                         < insize + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1875:54
     |
1875 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1876:68
     |
1876 | ...                   < insize + 0 as libc::c_int as idx_t) as libc::c_int
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1878:53
     |
1878 | / ...                   ((0 as libc::c_int as libc::c_long) < insize
1879 | | ...                       && (-(1 as libc::c_int) as libc::c_long
1880 | | ...                           - 0 as libc::c_int as idx_t)
1881 | | ...                           < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
     | |_________________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1878 ~                                                     i32::from((0 as libc::c_int as libc::c_long) < insize
1879 +                                                         && (-(1 as libc::c_int) as libc::c_long
1880 +                                                             - 0 as libc::c_int as idx_t)
1881 +                                                             < insize - 1 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1878:54
     |
1878 | ...                   ((0 as libc::c_int as libc::c_long) < insize
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1879:61
     |
1879 | ...                   && (-(1 as libc::c_int) as libc::c_long
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1880:63
     |
1880 | ...                   - 0 as libc::c_int as idx_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1881:72
     |
1881 | ...                   < insize - 1 as libc::c_int as libc::c_long) as libc::c_int
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1884:49
     |
1884 | / ...                   ((0 as libc::c_int as idx_t
1885 | | ...                       / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
     | |______________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1884 ~                                                 i32::from((0 as libc::c_int as idx_t
1885 +                                                     / 4 as libc::c_int as libc::c_long) < insize)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1884:51
     |
1884 | ...                   ((0 as libc::c_int as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1885:55
     |
1885 | ...                   / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(4 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1892:57
     |
1892 | ...                   if insize < 0 as libc::c_int as libc::c_long {
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1893:61
     |
1893 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
1894 | | ...                       0 as libc::c_int as libc::c_long
1895 | | ...                   } else {
1896 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1900 | | ...                       }) + 0 as libc::c_int as idx_t
1901 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1894:53
     |
1894 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1896:53
     |
1896 | / ...                   (if 1 as libc::c_int != 0 {
1897 | | ...                       0 as libc::c_int as libc::c_long
1898 | | ...                   } else {
1899 | | ...                       insize
1900 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1897:57
     |
1897 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1900:58
     |
1900 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1901:54
     |
1901 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1902:55
     |
1902 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1904:58
     |
1904 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1905 | | ...                       0 as libc::c_int as libc::c_long
1906 | | ...                   } else {
1907 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1911 | | ...                       }) + 0 as libc::c_int as idx_t
1912 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1905:57
     |
1905 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1907:57
     |
1907 | / ...                   (if 1 as libc::c_int != 0 {
1908 | | ...                       0 as libc::c_int as libc::c_long
1909 | | ...                   } else {
1910 | | ...                       insize
1911 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1908:61
     |
1908 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1911:62
     |
1911 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1912:58
     |
1912 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1914:75
     |
1914 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1915:75
     |
1915 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1916:59
     |
1916 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1917:59
     |
1917 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1918:59
     |
1918 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1920:53
     |
1920 | / ...                   (if 1 as libc::c_int != 0 {
1921 | | ...                       0 as libc::c_int as libc::c_long
1922 | | ...                   } else {
1923 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1927 | | ...                       }) + 0 as libc::c_int as idx_t
1928 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1921:57
     |
1921 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1923:57
     |
1923 | / ...                   (if 1 as libc::c_int != 0 {
1924 | | ...                       0 as libc::c_int as libc::c_long
1925 | | ...                   } else {
1926 | | ...                       insize
1927 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1924:61
     |
1924 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1927:62
     |
1927 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1928:58
     |
1928 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1929:54
     |
1929 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1931:53
     |
1931 | / ...                   (((if 1 as libc::c_int != 0 {
1932 | | ...                       0 as libc::c_int as libc::c_long
1933 | | ...                   } else {
1934 | | ...                       insize
...    |
1971 | | ...                           }) - 1 as libc::c_int as libc::c_long
1972 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1931 ~                                                     i32::from(((if 1 as libc::c_int != 0 {
1932 +                                                         0 as libc::c_int as libc::c_long
1933 +                                                     } else {
1934 +                                                         insize
1935 +                                                     }) + 0 as libc::c_int as idx_t)
1936 +                                                         < -(if ((if 1 as libc::c_int != 0 {
1937 +                                                             0 as libc::c_int as libc::c_long
1938 +                                                         } else {
1939 +                                                             (if 1 as libc::c_int != 0 {
1940 +                                                                 0 as libc::c_int as libc::c_long
1941 +                                                             } else {
1942 +                                                                 insize
1943 +                                                             }) + 0 as libc::c_int as idx_t
1944 +                                                         }) - 1 as libc::c_int as libc::c_long)
1945 +                                                             < 0 as libc::c_int as libc::c_long
1946 +                                                         {
1947 +                                                             ((((if 1 as libc::c_int != 0 {
1948 +                                                                 0 as libc::c_int as libc::c_long
1949 +                                                             } else {
1950 +                                                                 (if 1 as libc::c_int != 0 {
1951 +                                                                     0 as libc::c_int as libc::c_long
1952 +                                                                 } else {
1953 +                                                                     insize
1954 +                                                                 }) + 0 as libc::c_int as idx_t
1955 +                                                             }) + 1 as libc::c_int as libc::c_long)
1956 +                                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1957 +                                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1958 +                                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1959 +                                                                 - 1 as libc::c_int as libc::c_long)
1960 +                                                                 * 2 as libc::c_int as libc::c_long
1961 +                                                                 + 1 as libc::c_int as libc::c_long
1962 +                                                         } else {
1963 +                                                             (if 1 as libc::c_int != 0 {
1964 +                                                                 0 as libc::c_int as libc::c_long
1965 +                                                             } else {
1966 +                                                                 (if 1 as libc::c_int != 0 {
1967 +                                                                     0 as libc::c_int as libc::c_long
1968 +                                                                 } else {
1969 +                                                                     insize
1970 +                                                                 }) + 0 as libc::c_int as idx_t
1971 +                                                             }) - 1 as libc::c_int as libc::c_long
1972 +                                                         }))
     |

warning: unnecessary `!=` operation
    --> src/cat.rs:1931:55
     |
1931 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1932 | | ...                       0 as libc::c_int as libc::c_long
1933 | | ...                   } else {
1934 | | ...                       insize
1935 | | ...                   }) + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1932:57
     |
1932 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1935:58
     |
1935 | ...                   }) + 0 as libc::c_int as idx_t)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1936:65
     |
1936 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1937 | | ...                       0 as libc::c_int as libc::c_long
1938 | | ...                   } else {
1939 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1943 | | ...                       }) + 0 as libc::c_int as idx_t
1944 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1937:61
     |
1937 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1939:61
     |
1939 | / ...                   (if 1 as libc::c_int != 0 {
1940 | | ...                       0 as libc::c_int as libc::c_long
1941 | | ...                   } else {
1942 | | ...                       insize
1943 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1940:65
     |
1940 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1943:66
     |
1943 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1944:62
     |
1944 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1945:63
     |
1945 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1947:64
     |
1947 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1948 | | ...                       0 as libc::c_int as libc::c_long
1949 | | ...                   } else {
1950 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1954 | | ...                       }) + 0 as libc::c_int as idx_t
1955 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1948:65
     |
1948 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1950:65
     |
1950 | / ...                   (if 1 as libc::c_int != 0 {
1951 | | ...                       0 as libc::c_int as libc::c_long
1952 | | ...                   } else {
1953 | | ...                       insize
1954 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1951:69
     |
1951 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1954:70
     |
1954 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1955:66
     |
1955 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1957:83
     |
1957 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:1958:83
     |
1958 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1959:67
     |
1959 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1960:67
     |
1960 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1961:67
     |
1961 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1963:61
     |
1963 | / ...                   (if 1 as libc::c_int != 0 {
1964 | | ...                       0 as libc::c_int as libc::c_long
1965 | | ...                   } else {
1966 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1970 | | ...                       }) + 0 as libc::c_int as idx_t
1971 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1964:65
     |
1964 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1966:65
     |
1966 | / ...                   (if 1 as libc::c_int != 0 {
1967 | | ...                       0 as libc::c_int as libc::c_long
1968 | | ...                   } else {
1969 | | ...                       insize
1970 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1967:69
     |
1967 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1970:70
     |
1970 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1971:66
     |
1971 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1974:53
     |
1974 | / ...                   ((0 as libc::c_int as libc::c_long)
1975 | | ...                       < (if 1 as libc::c_int != 0 {
1976 | | ...                           0 as libc::c_int as libc::c_long
1977 | | ...                       } else {
1978 | | ...                           insize
1979 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
     | |________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1974 ~                                                     i32::from((0 as libc::c_int as libc::c_long)
1975 +                                                         < (if 1 as libc::c_int != 0 {
1976 +                                                             0 as libc::c_int as libc::c_long
1977 +                                                         } else {
1978 +                                                             insize
1979 +                                                         }) + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1974:54
     |
1974 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1975:59
     |
1975 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1976 | | ...                       0 as libc::c_int as libc::c_long
1977 | | ...                   } else {
1978 | | ...                       insize
1979 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1976:61
     |
1976 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1979:62
     |
1979 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1980:70
     |
1980 | ...                   }) != 0 && insize == -(1 as libc::c_int) as libc::c_long
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:1982:57
     |
1982 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1983 | | ...                       0 as libc::c_int
1984 | | ...                   } else {
1985 | | ...                       4 as libc::c_int
1986 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1988:57
     |
1988 | / ...                   ((0 as libc::c_int as libc::c_long)
1989 | | ...                       < 4 as libc::c_int as libc::c_long
1990 | | ...                           + 0 as libc::c_int as idx_t) as libc::c_int
     | |_________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1988 ~                                                         i32::from((0 as libc::c_int as libc::c_long)
1989 +                                                             < 4 as libc::c_int as libc::c_long
1990 +                                                                 + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1988:58
     |
1988 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1989:63
     |
1989 | ...                   < 4 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(4 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1990:67
     |
1990 | ...                   + 0 as libc::c_int as idx_t) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1992:57
     |
1992 | / ...                   ((-(1 as libc::c_int) as libc::c_long
1993 | | ...                       - 0 as libc::c_int as idx_t)
1994 | | ...                       < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1995 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1992 ~                                                         i32::from((-(1 as libc::c_int) as libc::c_long
1993 +                                                             - 0 as libc::c_int as idx_t)
1994 +                                                             < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1992:59
     |
1992 | ...                   ((-(1 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1993:63
     |
1993 | ...                   - 0 as libc::c_int as idx_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1994:63
     |
1994 | ...                   < (4 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(4 as libc::c_int - 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:1998:53
     |
1998 | / ...                   (0 as libc::c_int as idx_t / insize
1999 | | ...                       < 4 as libc::c_int as libc::c_long) as libc::c_int
     | |____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1998 ~                                                     i32::from(0 as libc::c_int as idx_t / insize
1999 +                                                         < 4 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1998:54
     |
1998 | ...                   (0 as libc::c_int as idx_t / insize
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:1999:59
     |
1999 | ...                   < 4 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(4 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2002:49
     |
2002 | / ...                   ((-(1 as libc::c_int) as idx_t
2003 | | ...                       / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
     | |______________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
2002 ~                                                 i32::from((-(1 as libc::c_int) as idx_t
2003 +                                                     / 4 as libc::c_int as libc::c_long) < insize)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:2002:51
     |
2002 | ...                   ((-(1 as libc::c_int) as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/cat.rs:2003:55
     |
2003 | ...                   / 4 as libc::c_int as libc::c_long) < insize) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(4 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/cat.rs:2010:38
     |
2010 | ...                   *(&mut bufsize as *mut idx_t) = fresh33;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(bufsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
    --> src/cat.rs:2015:38
     |
2015 | ...                   *(&mut bufsize as *mut idx_t) = fresh35;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(bufsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2016:37
     |
2016 | ...                   fresh36 as libc::c_int
     |                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh36)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/cat.rs:2020:42
     |
2020 | ...                   *(&mut bufsize as *mut idx_t) = fresh37;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(bufsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2021:41
     |
2021 | ...                   fresh38 as libc::c_int != 0
     |                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh38)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/cat.rs:2026:42
     |
2026 | ...                   *(&mut bufsize as *mut idx_t) = fresh39;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(bufsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2027:41
     |
2027 | ...                   fresh40 as libc::c_int != 0
     |                       ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh40)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2032:69
     |
2032 |   ...                   let mut outbuf: *mut libc::c_char = xalignalloc(
     |  ___________________________________________________________^
2033 | | ...                       page_size,
2034 | | ...                       bufsize,
2035 | | ...                   ) as *mut libc::c_char;
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
2032 ~                                 let mut outbuf: *mut libc::c_char = xalignalloc(
2033 +                                     page_size,
2034 +                                     bufsize,
2035 ~                                 ).cast::<i8>();
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2036:39
     |
2036 | ...                   ok = (ok as libc::c_int
     |                             ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2037:39
     |
2037 |   ...                   & cat(
     |  _________________________^
2038 | | ...                       inbuf,
2039 | | ...                       insize,
2040 | | ...                       outbuf,
...    |
2047 | | ...                       squeeze_blank,
2048 | | ...                   ) as libc::c_int) != 0;
     | |______________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
2037 ~                                     & i32::from(cat(
2038 +                                         inbuf,
2039 +                                         insize,
2040 +                                         outbuf,
2041 +                                         outsize,
2042 +                                         show_nonprinting,
2043 +                                         show_tabs,
2044 +                                         number,
2045 +                                         number_nonblank,
2046 +                                         show_ends,
2047 +                                         squeeze_blank,
2048 ~                                     ))) != 0;
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2049:43
     |
2049 | ...                   alignfree(outbuf as *mut libc::c_void);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `outbuf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2051:39
     |
2051 | ...                   alignfree(inbuf as *mut libc::c_void);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `inbuf.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:2056:21
     |
2056 | /                     if 0 != 0 {
2057 | |                         error(
2058 | |                             0 as libc::c_int,
2059 | |                             *__errno_location(),
...    |
2104 | |                         });
2105 | |                     };
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:2056:24
     |
2056 |                     if 0 != 0 {
     |                        ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2060:29
     |
2060 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:2067:25
     |
2067 | /                         if 0 as libc::c_int != 0 as libc::c_int {
2068 | |                             unreachable!();
2069 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:2067:28
     |
2067 |                         if 0 as libc::c_int != 0 as libc::c_int {
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:2072:29
     |
2072 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2076:33
     |
2076 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:2083:29
     |
2083 | / ...                   if __errstatus != 0 as libc::c_int {
2084 | | ...                       unreachable!();
2085 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:2089:29
     |
2089 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2093:33
     |
2093 | ...                   b"%s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:2100:29
     |
2100 | / ...                   if __errstatus != 0 as libc::c_int {
2101 | | ...                       unreachable!();
2102 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2119:13
     |
2119 |             b"\r\0" as *const u8 as *const libc::c_char as *const libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\r\0" as *const u8 as *const libc::c_char).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2119:13
     |
2119 |             b"\r\0" as *const u8 as *const libc::c_char as *const libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\r\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:2120:13
     |
2120 |             1 as libc::c_int as size_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/cat.rs:2121:14
     |
2121 |         ) != 1 as libc::c_int as libc::c_ulong
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2126:8
     |
2126 |     if have_read_stdin as libc::c_int != 0 && close(0 as libc::c_int) < 0 as libc::c_int
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(have_read_stdin)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/cat.rs:2128:9
     |
2128 | /         if 0 != 0 {
2129 | |             error(
2130 | |                 1 as libc::c_int,
2131 | |                 *__errno_location(),
...    |
2165 | |             });
2166 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/cat.rs:2128:12
     |
2128 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2132:25
     |
2132 |                 gettext(b"closing standard input\0" as *const u8 as *const libc::c_char),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing standard input\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:2134:13
     |
2134 | /             if 1 as libc::c_int != 0 as libc::c_int {
2135 | |                 unreachable!();
2136 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:2139:17
     |
2139 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2144:25
     |
2144 |                         b"closing standard input\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing standard input\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:2147:17
     |
2147 | /                 if __errstatus != 0 as libc::c_int {
2148 | |                     unreachable!();
2149 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/cat.rs:2153:17
     |
2153 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2158:25
     |
2158 |                         b"closing standard input\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"closing standard input\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/cat.rs:2161:17
     |
2161 | /                 if __errstatus != 0 as libc::c_int {
2162 | |                     unreachable!();
2163 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/cat.rs:2168:12
     |
2168 |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/cat.rs:2168:15
     |
2168 |     return if ok as libc::c_int != 0 { 0 as libc::c_int } else { 1 as libc::c_int };
     |               ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
    --> src/cat.rs:2183:17
     |
2183 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
    --> src/cat.rs:2183:17
     |
2183 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/cat.rs:2184:17
     |
2184 |                 args.as_mut_ptr() as *mut *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `args.as_mut_ptr().cast::<*mut i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: path statement with no effect
   --> src/cat.rs:291:9
    |
291 |         map_prog;
    |         ^^^^^^^^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/cat.rs:620:9
    |
620 |         line_num_print;
    |         ^^^^^^^^^^^^^^^

warning: `rust` (bin "cat") generated 675 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 27.64s
