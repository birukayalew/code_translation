   Compiling rust v0.0.0 (/mnt/c/Users/sebir/Documents/summer/code_translation/c2saferrust/coreutils/src/uniq/rust)
warning: unused label
   --> src/xstrtoimax.rs:433:5
    |
433 |     'c_2247: {
    |     ^^^^^^^
    |
    = note: `#[warn(unused_labels)]` on by default

warning: redundant else block
   --> src/argmatch.rs:132:67
    |
132 |     if ambiguous { return -(2 as libc::c_int) as ptrdiff_t } else { return matchind };
    |                                                                   ^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/c_strcasecmp.rs:42:12
   |
42 |       } else {
   |  ____________^
43 | |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 | |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
45 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/c_strcasecmp.rs:39:12
   |
39 |         <= 2147483647 as libc::c_int
   |            ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/closeout.rs:122:16
    |
122 |           } else {
    |  ________________^
123 | |             if 0 != 0 {
124 | |                 error(
125 | |                     0 as libc::c_int,
...   |
160 | |             };
161 | |         }
    | |_________^
    |
    = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
122 ~         } else if 0 != 0 {
123 +             error(
124 +                 0 as libc::c_int,
125 +                 *__errno_location(),
126 +                 b"%s\0" as *const u8 as *const libc::c_char,
127 +                 write_error,
128 +             );
129 +             if 0 as libc::c_int != 0 as libc::c_int {
130 +                 unreachable!();
131 +             } else {};
132 +         } else {
133 +             ({
134 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
135 +                 error(
136 +                     __errstatus,
137 +                     *__errno_location(),
138 +                     b"%s\0" as *const u8 as *const libc::c_char,
139 +                     write_error,
140 +                 );
141 +                 if __errstatus != 0 as libc::c_int {
142 +                     unreachable!();
143 +                 } else {};
144 +                 
145 +             });
146 +             ({
147 +                 let __errstatus: libc::c_int = 0 as libc::c_int;
148 +                 error(
149 +                     __errstatus,
150 +                     *__errno_location(),
151 +                     b"%s\0" as *const u8 as *const libc::c_char,
152 +                     write_error,
153 +                 );
154 +                 if __errstatus != 0 as libc::c_int {
155 +                     unreachable!();
156 +                 } else {};
157 +                 
158 +             });
159 +         }
    |

warning: long literal lacking separators
  --> src/freopen_safer.rs:82:31
   |
82 |             current_block_8 = 8409498848974359248;
   |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `8_409_498_848_974_359_248`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/freopen_safer.rs:85:31
   |
85 |             current_block_8 = 878006807312935268;
   |                               ^^^^^^^^^^^^^^^^^^ help: consider: `878_006_807_312_935_268`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/freopen_safer.rs:88:31
   |
88 |             current_block_8 = 2868539653012386629;
   |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `2_868_539_653_012_386_629`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/freopen_safer.rs:94:31
   |
94 |             current_block_8 = 8409498848974359248;
   |                               ^^^^^^^^^^^^^^^^^^^ help: consider: `8_409_498_848_974_359_248`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/freopen_safer.rs:98:9
   |
98 |         8409498848974359248 => {
   |         ^^^^^^^^^^^^^^^^^^^ help: consider: `8_409_498_848_974_359_248`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:102:31
    |
102 |             current_block_8 = 878006807312935268;
    |                               ^^^^^^^^^^^^^^^^^^ help: consider: `878_006_807_312_935_268`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/freopen_safer.rs:107:9
    |
107 |         878006807312935268 => {
    |         ^^^^^^^^^^^^^^^^^^ help: consider: `878_006_807_312_935_268`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/ialloc.rs:36:12
   |
36 |       } else {
   |  ____________^
37 | |         return _gl_alloc_nomem()
38 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/ialloc.rs:24:30
   |
24 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:25:34
   |
25 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:44:9
   |
44 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:50:9
   |
50 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/ialloc.rs:68:12
   |
68 |       } else {
   |  ____________^
69 | |         return _gl_alloc_nomem()
70 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/ialloc.rs:65:30
   |
65 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/ialloc.rs:76:37
   |
76 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:8:36
  |
8 | pub const _NL_NUM: C2RustUnnamed = 786449;
  |                                    ^^^^^^ help: consider: `786_449`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
 --> src/localcharset.rs:9:54
  |
9 | pub const _NL_NUM_LC_IDENTIFICATION: C2RustUnnamed = 786448;
  |                                                      ^^^^^^ help: consider: `786_448`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:10:55
   |
10 | pub const _NL_IDENTIFICATION_CODESET: C2RustUnnamed = 786447;
   |                                                       ^^^^^^ help: consider: `786_447`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:11:56
   |
11 | pub const _NL_IDENTIFICATION_CATEGORY: C2RustUnnamed = 786446;
   |                                                        ^^^^^^ help: consider: `786_446`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:12:52
   |
12 | pub const _NL_IDENTIFICATION_DATE: C2RustUnnamed = 786445;
   |                                                    ^^^^^^ help: consider: `786_445`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:13:56
   |
13 | pub const _NL_IDENTIFICATION_REVISION: C2RustUnnamed = 786444;
   |                                                        ^^^^^^ help: consider: `786_444`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:14:60
   |
14 | pub const _NL_IDENTIFICATION_ABBREVIATION: C2RustUnnamed = 786443;
   |                                                            ^^^^^^ help: consider: `786_443`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:15:59
   |
15 | pub const _NL_IDENTIFICATION_APPLICATION: C2RustUnnamed = 786442;
   |                                                           ^^^^^^ help: consider: `786_442`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:16:56
   |
16 | pub const _NL_IDENTIFICATION_AUDIENCE: C2RustUnnamed = 786441;
   |                                                        ^^^^^^ help: consider: `786_441`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:17:57
   |
17 | pub const _NL_IDENTIFICATION_TERRITORY: C2RustUnnamed = 786440;
   |                                                         ^^^^^^ help: consider: `786_440`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:18:56
   |
18 | pub const _NL_IDENTIFICATION_LANGUAGE: C2RustUnnamed = 786439;
   |                                                        ^^^^^^ help: consider: `786_439`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:19:51
   |
19 | pub const _NL_IDENTIFICATION_FAX: C2RustUnnamed = 786438;
   |                                                   ^^^^^^ help: consider: `786_438`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:20:51
   |
20 | pub const _NL_IDENTIFICATION_TEL: C2RustUnnamed = 786437;
   |                                                   ^^^^^^ help: consider: `786_437`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:21:53
   |
21 | pub const _NL_IDENTIFICATION_EMAIL: C2RustUnnamed = 786436;
   |                                                     ^^^^^^ help: consider: `786_436`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:22:55
   |
22 | pub const _NL_IDENTIFICATION_CONTACT: C2RustUnnamed = 786435;
   |                                                       ^^^^^^ help: consider: `786_435`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:23:55
   |
23 | pub const _NL_IDENTIFICATION_ADDRESS: C2RustUnnamed = 786434;
   |                                                       ^^^^^^ help: consider: `786_434`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:24:54
   |
24 | pub const _NL_IDENTIFICATION_SOURCE: C2RustUnnamed = 786433;
   |                                                      ^^^^^^ help: consider: `786_433`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:25:53
   |
25 | pub const _NL_IDENTIFICATION_TITLE: C2RustUnnamed = 786432;
   |                                                     ^^^^^^ help: consider: `786_432`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:26:51
   |
26 | pub const _NL_NUM_LC_MEASUREMENT: C2RustUnnamed = 720898;
   |                                                   ^^^^^^ help: consider: `720_898`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:27:52
   |
27 | pub const _NL_MEASUREMENT_CODESET: C2RustUnnamed = 720897;
   |                                                    ^^^^^^ help: consider: `720_897`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:28:56
   |
28 | pub const _NL_MEASUREMENT_MEASUREMENT: C2RustUnnamed = 720896;
   |                                                        ^^^^^^ help: consider: `720_896`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:29:49
   |
29 | pub const _NL_NUM_LC_TELEPHONE: C2RustUnnamed = 655365;
   |                                                 ^^^^^^ help: consider: `655_365`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:30:50
   |
30 | pub const _NL_TELEPHONE_CODESET: C2RustUnnamed = 655364;
   |                                                  ^^^^^^ help: consider: `655_364`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:31:53
   |
31 | pub const _NL_TELEPHONE_INT_PREFIX: C2RustUnnamed = 655363;
   |                                                     ^^^^^^ help: consider: `655_363`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:32:53
   |
32 | pub const _NL_TELEPHONE_INT_SELECT: C2RustUnnamed = 655362;
   |                                                     ^^^^^^ help: consider: `655_362`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:33:54
   |
33 | pub const _NL_TELEPHONE_TEL_DOM_FMT: C2RustUnnamed = 655361;
   |                                                      ^^^^^^ help: consider: `655_361`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:34:54
   |
34 | pub const _NL_TELEPHONE_TEL_INT_FMT: C2RustUnnamed = 655360;
   |                                                      ^^^^^^ help: consider: `655_360`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:35:47
   |
35 | pub const _NL_NUM_LC_ADDRESS: C2RustUnnamed = 589837;
   |                                               ^^^^^^ help: consider: `589_837`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:36:48
   |
36 | pub const _NL_ADDRESS_CODESET: C2RustUnnamed = 589836;
   |                                                ^^^^^^ help: consider: `589_836`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:37:49
   |
37 | pub const _NL_ADDRESS_LANG_LIB: C2RustUnnamed = 589835;
   |                                                 ^^^^^^ help: consider: `589_835`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:38:50
   |
38 | pub const _NL_ADDRESS_LANG_TERM: C2RustUnnamed = 589834;
   |                                                  ^^^^^^ help: consider: `589_834`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:39:48
   |
39 | pub const _NL_ADDRESS_LANG_AB: C2RustUnnamed = 589833;
   |                                                ^^^^^^ help: consider: `589_833`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:40:50
   |
40 | pub const _NL_ADDRESS_LANG_NAME: C2RustUnnamed = 589832;
   |                                                  ^^^^^^ help: consider: `589_832`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:41:53
   |
41 | pub const _NL_ADDRESS_COUNTRY_ISBN: C2RustUnnamed = 589831;
   |                                                     ^^^^^^ help: consider: `589_831`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:42:52
   |
42 | pub const _NL_ADDRESS_COUNTRY_NUM: C2RustUnnamed = 589830;
   |                                                    ^^^^^^ help: consider: `589_830`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:43:52
   |
43 | pub const _NL_ADDRESS_COUNTRY_CAR: C2RustUnnamed = 589829;
   |                                                    ^^^^^^ help: consider: `589_829`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:44:52
   |
44 | pub const _NL_ADDRESS_COUNTRY_AB3: C2RustUnnamed = 589828;
   |                                                    ^^^^^^ help: consider: `589_828`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:45:52
   |
45 | pub const _NL_ADDRESS_COUNTRY_AB2: C2RustUnnamed = 589827;
   |                                                    ^^^^^^ help: consider: `589_827`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:46:53
   |
46 | pub const _NL_ADDRESS_COUNTRY_POST: C2RustUnnamed = 589826;
   |                                                     ^^^^^^ help: consider: `589_826`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:47:53
   |
47 | pub const _NL_ADDRESS_COUNTRY_NAME: C2RustUnnamed = 589825;
   |                                                     ^^^^^^ help: consider: `589_825`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:48:51
   |
48 | pub const _NL_ADDRESS_POSTAL_FMT: C2RustUnnamed = 589824;
   |                                                   ^^^^^^ help: consider: `589_824`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:49:44
   |
49 | pub const _NL_NUM_LC_NAME: C2RustUnnamed = 524295;
   |                                            ^^^^^^ help: consider: `524_295`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:50:45
   |
50 | pub const _NL_NAME_CODESET: C2RustUnnamed = 524294;
   |                                             ^^^^^^ help: consider: `524_294`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:51:45
   |
51 | pub const _NL_NAME_NAME_MS: C2RustUnnamed = 524293;
   |                                             ^^^^^^ help: consider: `524_293`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:52:47
   |
52 | pub const _NL_NAME_NAME_MISS: C2RustUnnamed = 524292;
   |                                               ^^^^^^ help: consider: `524_292`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:53:46
   |
53 | pub const _NL_NAME_NAME_MRS: C2RustUnnamed = 524291;
   |                                              ^^^^^^ help: consider: `524_291`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:54:45
   |
54 | pub const _NL_NAME_NAME_MR: C2RustUnnamed = 524290;
   |                                             ^^^^^^ help: consider: `524_290`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:55:46
   |
55 | pub const _NL_NAME_NAME_GEN: C2RustUnnamed = 524289;
   |                                              ^^^^^^ help: consider: `524_289`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:56:46
   |
56 | pub const _NL_NAME_NAME_FMT: C2RustUnnamed = 524288;
   |                                              ^^^^^^ help: consider: `524_288`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:57:45
   |
57 | pub const _NL_NUM_LC_PAPER: C2RustUnnamed = 458755;
   |                                             ^^^^^^ help: consider: `458_755`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:58:46
   |
58 | pub const _NL_PAPER_CODESET: C2RustUnnamed = 458754;
   |                                              ^^^^^^ help: consider: `458_754`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:59:44
   |
59 | pub const _NL_PAPER_WIDTH: C2RustUnnamed = 458753;
   |                                            ^^^^^^ help: consider: `458_753`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:60:45
   |
60 | pub const _NL_PAPER_HEIGHT: C2RustUnnamed = 458752;
   |                                             ^^^^^^ help: consider: `458_752`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:61:48
   |
61 | pub const _NL_NUM_LC_MESSAGES: C2RustUnnamed = 327685;
   |                                                ^^^^^^ help: consider: `327_685`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:62:49
   |
62 | pub const _NL_MESSAGES_CODESET: C2RustUnnamed = 327684;
   |                                                 ^^^^^^ help: consider: `327_684`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:63:36
   |
63 | pub const __NOSTR: C2RustUnnamed = 327683;
   |                                    ^^^^^^ help: consider: `327_683`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:64:37
   |
64 | pub const __YESSTR: C2RustUnnamed = 327682;
   |                                     ^^^^^^ help: consider: `327_682`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:65:37
   |
65 | pub const __NOEXPR: C2RustUnnamed = 327681;
   |                                     ^^^^^^ help: consider: `327_681`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:66:38
   |
66 | pub const __YESEXPR: C2RustUnnamed = 327680;
   |                                      ^^^^^^ help: consider: `327_680`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:76:48
   |
76 | pub const _NL_NUM_LC_MONETARY: C2RustUnnamed = 262190;
   |                                                ^^^^^^ help: consider: `262_190`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:77:49
   |
77 | pub const _NL_MONETARY_CODESET: C2RustUnnamed = 262189;
   |                                                 ^^^^^^ help: consider: `262_189`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:78:58
   |
78 | pub const _NL_MONETARY_THOUSANDS_SEP_WC: C2RustUnnamed = 262188;
   |                                                          ^^^^^^ help: consider: `262_188`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:79:58
   |
79 | pub const _NL_MONETARY_DECIMAL_POINT_WC: C2RustUnnamed = 262187;
   |                                                          ^^^^^^ help: consider: `262_187`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:80:57
   |
80 | pub const _NL_MONETARY_CONVERSION_RATE: C2RustUnnamed = 262186;
   |                                                         ^^^^^^ help: consider: `262_186`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:81:54
   |
81 | pub const _NL_MONETARY_DUO_VALID_TO: C2RustUnnamed = 262185;
   |                                                      ^^^^^^ help: consider: `262_185`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:82:56
   |
82 | pub const _NL_MONETARY_DUO_VALID_FROM: C2RustUnnamed = 262184;
   |                                                        ^^^^^^ help: consider: `262_184`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:83:54
   |
83 | pub const _NL_MONETARY_UNO_VALID_TO: C2RustUnnamed = 262183;
   |                                                      ^^^^^^ help: consider: `262_183`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:84:56
   |
84 | pub const _NL_MONETARY_UNO_VALID_FROM: C2RustUnnamed = 262182;
   |                                                        ^^^^^^ help: consider: `262_182`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:85:61
   |
85 | pub const _NL_MONETARY_DUO_INT_N_SIGN_POSN: C2RustUnnamed = 262181;
   |                                                             ^^^^^^ help: consider: `262_181`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:86:61
   |
86 | pub const _NL_MONETARY_DUO_INT_P_SIGN_POSN: C2RustUnnamed = 262180;
   |                                                             ^^^^^^ help: consider: `262_180`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:87:57
   |
87 | pub const _NL_MONETARY_DUO_N_SIGN_POSN: C2RustUnnamed = 262179;
   |                                                         ^^^^^^ help: consider: `262_179`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:88:57
   |
88 | pub const _NL_MONETARY_DUO_P_SIGN_POSN: C2RustUnnamed = 262178;
   |                                                         ^^^^^^ help: consider: `262_178`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:89:64
   |
89 | pub const _NL_MONETARY_DUO_INT_N_SEP_BY_SPACE: C2RustUnnamed = 262177;
   |                                                                ^^^^^^ help: consider: `262_177`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:90:63
   |
90 | pub const _NL_MONETARY_DUO_INT_N_CS_PRECEDES: C2RustUnnamed = 262176;
   |                                                               ^^^^^^ help: consider: `262_176`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:91:64
   |
91 | pub const _NL_MONETARY_DUO_INT_P_SEP_BY_SPACE: C2RustUnnamed = 262175;
   |                                                                ^^^^^^ help: consider: `262_175`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:92:63
   |
92 | pub const _NL_MONETARY_DUO_INT_P_CS_PRECEDES: C2RustUnnamed = 262174;
   |                                                               ^^^^^^ help: consider: `262_174`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:93:60
   |
93 | pub const _NL_MONETARY_DUO_N_SEP_BY_SPACE: C2RustUnnamed = 262173;
   |                                                            ^^^^^^ help: consider: `262_173`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:94:59
   |
94 | pub const _NL_MONETARY_DUO_N_CS_PRECEDES: C2RustUnnamed = 262172;
   |                                                           ^^^^^^ help: consider: `262_172`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:95:60
   |
95 | pub const _NL_MONETARY_DUO_P_SEP_BY_SPACE: C2RustUnnamed = 262171;
   |                                                            ^^^^^^ help: consider: `262_171`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:96:59
   |
96 | pub const _NL_MONETARY_DUO_P_CS_PRECEDES: C2RustUnnamed = 262170;
   |                                                           ^^^^^^ help: consider: `262_170`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:97:57
   |
97 | pub const _NL_MONETARY_DUO_FRAC_DIGITS: C2RustUnnamed = 262169;
   |                                                         ^^^^^^ help: consider: `262_169`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:98:61
   |
98 | pub const _NL_MONETARY_DUO_INT_FRAC_DIGITS: C2RustUnnamed = 262168;
   |                                                             ^^^^^^ help: consider: `262_168`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/localcharset.rs:99:61
   |
99 | pub const _NL_MONETARY_DUO_CURRENCY_SYMBOL: C2RustUnnamed = 262167;
   |                                                             ^^^^^^ help: consider: `262_167`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:100:61
    |
100 | pub const _NL_MONETARY_DUO_INT_CURR_SYMBOL: C2RustUnnamed = 262166;
    |                                                             ^^^^^^ help: consider: `262_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:101:46
    |
101 | pub const __INT_N_SIGN_POSN: C2RustUnnamed = 262165;
    |                                              ^^^^^^ help: consider: `262_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:102:46
    |
102 | pub const __INT_P_SIGN_POSN: C2RustUnnamed = 262164;
    |                                              ^^^^^^ help: consider: `262_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:103:49
    |
103 | pub const __INT_N_SEP_BY_SPACE: C2RustUnnamed = 262163;
    |                                                 ^^^^^^ help: consider: `262_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:104:48
    |
104 | pub const __INT_N_CS_PRECEDES: C2RustUnnamed = 262162;
    |                                                ^^^^^^ help: consider: `262_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:105:49
    |
105 | pub const __INT_P_SEP_BY_SPACE: C2RustUnnamed = 262161;
    |                                                 ^^^^^^ help: consider: `262_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:106:48
    |
106 | pub const __INT_P_CS_PRECEDES: C2RustUnnamed = 262160;
    |                                                ^^^^^^ help: consider: `262_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:107:50
    |
107 | pub const _NL_MONETARY_CRNCYSTR: C2RustUnnamed = 262159;
    |                                                  ^^^^^^ help: consider: `262_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:108:42
    |
108 | pub const __N_SIGN_POSN: C2RustUnnamed = 262158;
    |                                          ^^^^^^ help: consider: `262_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:109:42
    |
109 | pub const __P_SIGN_POSN: C2RustUnnamed = 262157;
    |                                          ^^^^^^ help: consider: `262_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:110:45
    |
110 | pub const __N_SEP_BY_SPACE: C2RustUnnamed = 262156;
    |                                             ^^^^^^ help: consider: `262_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:111:44
    |
111 | pub const __N_CS_PRECEDES: C2RustUnnamed = 262155;
    |                                            ^^^^^^ help: consider: `262_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:112:45
    |
112 | pub const __P_SEP_BY_SPACE: C2RustUnnamed = 262154;
    |                                             ^^^^^^ help: consider: `262_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:113:44
    |
113 | pub const __P_CS_PRECEDES: C2RustUnnamed = 262153;
    |                                            ^^^^^^ help: consider: `262_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:114:42
    |
114 | pub const __FRAC_DIGITS: C2RustUnnamed = 262152;
    |                                          ^^^^^^ help: consider: `262_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:115:46
    |
115 | pub const __INT_FRAC_DIGITS: C2RustUnnamed = 262151;
    |                                              ^^^^^^ help: consider: `262_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:116:44
    |
116 | pub const __NEGATIVE_SIGN: C2RustUnnamed = 262150;
    |                                            ^^^^^^ help: consider: `262_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:117:44
    |
117 | pub const __POSITIVE_SIGN: C2RustUnnamed = 262149;
    |                                            ^^^^^^ help: consider: `262_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:118:43
    |
118 | pub const __MON_GROUPING: C2RustUnnamed = 262148;
    |                                           ^^^^^^ help: consider: `262_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:119:48
    |
119 | pub const __MON_THOUSANDS_SEP: C2RustUnnamed = 262147;
    |                                                ^^^^^^ help: consider: `262_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:120:48
    |
120 | pub const __MON_DECIMAL_POINT: C2RustUnnamed = 262146;
    |                                                ^^^^^^ help: consider: `262_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:121:46
    |
121 | pub const __CURRENCY_SYMBOL: C2RustUnnamed = 262145;
    |                                              ^^^^^^ help: consider: `262_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:122:46
    |
122 | pub const __INT_CURR_SYMBOL: C2RustUnnamed = 262144;
    |                                              ^^^^^^ help: consider: `262_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:210:47
    |
210 | pub const _NL_NUM_LC_COLLATE: C2RustUnnamed = 196627;
    |                                               ^^^^^^ help: consider: `196_627`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:211:48
    |
211 | pub const _NL_COLLATE_CODESET: C2RustUnnamed = 196626;
    |                                                ^^^^^^ help: consider: `196_626`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:212:50
    |
212 | pub const _NL_COLLATE_COLLSEQWC: C2RustUnnamed = 196625;
    |                                                  ^^^^^^ help: consider: `196_625`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:213:50
    |
213 | pub const _NL_COLLATE_COLLSEQMB: C2RustUnnamed = 196624;
    |                                                  ^^^^^^ help: consider: `196_624`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:214:53
    |
214 | pub const _NL_COLLATE_SYMB_EXTRAMB: C2RustUnnamed = 196623;
    |                                                     ^^^^^^ help: consider: `196_623`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:215:53
    |
215 | pub const _NL_COLLATE_SYMB_TABLEMB: C2RustUnnamed = 196622;
    |                                                     ^^^^^^ help: consider: `196_622`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:216:57
    |
216 | pub const _NL_COLLATE_SYMB_HASH_SIZEMB: C2RustUnnamed = 196621;
    |                                                         ^^^^^^ help: consider: `196_621`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:217:51
    |
217 | pub const _NL_COLLATE_INDIRECTWC: C2RustUnnamed = 196620;
    |                                                   ^^^^^^ help: consider: `196_620`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:218:48
    |
218 | pub const _NL_COLLATE_EXTRAWC: C2RustUnnamed = 196619;
    |                                                ^^^^^^ help: consider: `196_619`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:219:49
    |
219 | pub const _NL_COLLATE_WEIGHTWC: C2RustUnnamed = 196618;
    |                                                 ^^^^^^ help: consider: `196_618`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:220:48
    |
220 | pub const _NL_COLLATE_TABLEWC: C2RustUnnamed = 196617;
    |                                                ^^^^^^ help: consider: `196_617`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:221:45
    |
221 | pub const _NL_COLLATE_GAP3: C2RustUnnamed = 196616;
    |                                             ^^^^^^ help: consider: `196_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:222:45
    |
222 | pub const _NL_COLLATE_GAP2: C2RustUnnamed = 196615;
    |                                             ^^^^^^ help: consider: `196_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:223:45
    |
223 | pub const _NL_COLLATE_GAP1: C2RustUnnamed = 196614;
    |                                             ^^^^^^ help: consider: `196_614`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:224:51
    |
224 | pub const _NL_COLLATE_INDIRECTMB: C2RustUnnamed = 196613;
    |                                                   ^^^^^^ help: consider: `196_613`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:225:48
    |
225 | pub const _NL_COLLATE_EXTRAMB: C2RustUnnamed = 196612;
    |                                                ^^^^^^ help: consider: `196_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:226:49
    |
226 | pub const _NL_COLLATE_WEIGHTMB: C2RustUnnamed = 196611;
    |                                                 ^^^^^^ help: consider: `196_611`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:227:48
    |
227 | pub const _NL_COLLATE_TABLEMB: C2RustUnnamed = 196610;
    |                                                ^^^^^^ help: consider: `196_610`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:228:49
    |
228 | pub const _NL_COLLATE_RULESETS: C2RustUnnamed = 196609;
    |                                                 ^^^^^^ help: consider: `196_609`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:229:47
    |
229 | pub const _NL_COLLATE_NRULES: C2RustUnnamed = 196608;
    |                                               ^^^^^^ help: consider: `196_608`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:230:44
    |
230 | pub const _NL_NUM_LC_TIME: C2RustUnnamed = 131231;
    |                                            ^^^^^^ help: consider: `131_231`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:231:45
    |
231 | pub const _NL_WABALTMON_12: C2RustUnnamed = 131230;
    |                                             ^^^^^^ help: consider: `131_230`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:232:45
    |
232 | pub const _NL_WABALTMON_11: C2RustUnnamed = 131229;
    |                                             ^^^^^^ help: consider: `131_229`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:233:45
    |
233 | pub const _NL_WABALTMON_10: C2RustUnnamed = 131228;
    |                                             ^^^^^^ help: consider: `131_228`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:234:44
    |
234 | pub const _NL_WABALTMON_9: C2RustUnnamed = 131227;
    |                                            ^^^^^^ help: consider: `131_227`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:235:44
    |
235 | pub const _NL_WABALTMON_8: C2RustUnnamed = 131226;
    |                                            ^^^^^^ help: consider: `131_226`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:236:44
    |
236 | pub const _NL_WABALTMON_7: C2RustUnnamed = 131225;
    |                                            ^^^^^^ help: consider: `131_225`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:237:44
    |
237 | pub const _NL_WABALTMON_6: C2RustUnnamed = 131224;
    |                                            ^^^^^^ help: consider: `131_224`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:238:44
    |
238 | pub const _NL_WABALTMON_5: C2RustUnnamed = 131223;
    |                                            ^^^^^^ help: consider: `131_223`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:239:44
    |
239 | pub const _NL_WABALTMON_4: C2RustUnnamed = 131222;
    |                                            ^^^^^^ help: consider: `131_222`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:240:44
    |
240 | pub const _NL_WABALTMON_3: C2RustUnnamed = 131221;
    |                                            ^^^^^^ help: consider: `131_221`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:241:44
    |
241 | pub const _NL_WABALTMON_2: C2RustUnnamed = 131220;
    |                                            ^^^^^^ help: consider: `131_220`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:242:44
    |
242 | pub const _NL_WABALTMON_1: C2RustUnnamed = 131219;
    |                                            ^^^^^^ help: consider: `131_219`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:243:44
    |
243 | pub const _NL_ABALTMON_12: C2RustUnnamed = 131218;
    |                                            ^^^^^^ help: consider: `131_218`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:244:44
    |
244 | pub const _NL_ABALTMON_11: C2RustUnnamed = 131217;
    |                                            ^^^^^^ help: consider: `131_217`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:245:44
    |
245 | pub const _NL_ABALTMON_10: C2RustUnnamed = 131216;
    |                                            ^^^^^^ help: consider: `131_216`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:246:43
    |
246 | pub const _NL_ABALTMON_9: C2RustUnnamed = 131215;
    |                                           ^^^^^^ help: consider: `131_215`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:247:43
    |
247 | pub const _NL_ABALTMON_8: C2RustUnnamed = 131214;
    |                                           ^^^^^^ help: consider: `131_214`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:248:43
    |
248 | pub const _NL_ABALTMON_7: C2RustUnnamed = 131213;
    |                                           ^^^^^^ help: consider: `131_213`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:249:43
    |
249 | pub const _NL_ABALTMON_6: C2RustUnnamed = 131212;
    |                                           ^^^^^^ help: consider: `131_212`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:250:43
    |
250 | pub const _NL_ABALTMON_5: C2RustUnnamed = 131211;
    |                                           ^^^^^^ help: consider: `131_211`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:251:43
    |
251 | pub const _NL_ABALTMON_4: C2RustUnnamed = 131210;
    |                                           ^^^^^^ help: consider: `131_210`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:252:43
    |
252 | pub const _NL_ABALTMON_3: C2RustUnnamed = 131209;
    |                                           ^^^^^^ help: consider: `131_209`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:253:43
    |
253 | pub const _NL_ABALTMON_2: C2RustUnnamed = 131208;
    |                                           ^^^^^^ help: consider: `131_208`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:254:43
    |
254 | pub const _NL_ABALTMON_1: C2RustUnnamed = 131207;
    |                                           ^^^^^^ help: consider: `131_207`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:255:43
    |
255 | pub const _NL_WALTMON_12: C2RustUnnamed = 131206;
    |                                           ^^^^^^ help: consider: `131_206`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:256:43
    |
256 | pub const _NL_WALTMON_11: C2RustUnnamed = 131205;
    |                                           ^^^^^^ help: consider: `131_205`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:257:43
    |
257 | pub const _NL_WALTMON_10: C2RustUnnamed = 131204;
    |                                           ^^^^^^ help: consider: `131_204`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:258:42
    |
258 | pub const _NL_WALTMON_9: C2RustUnnamed = 131203;
    |                                          ^^^^^^ help: consider: `131_203`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:259:42
    |
259 | pub const _NL_WALTMON_8: C2RustUnnamed = 131202;
    |                                          ^^^^^^ help: consider: `131_202`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:260:42
    |
260 | pub const _NL_WALTMON_7: C2RustUnnamed = 131201;
    |                                          ^^^^^^ help: consider: `131_201`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:261:42
    |
261 | pub const _NL_WALTMON_6: C2RustUnnamed = 131200;
    |                                          ^^^^^^ help: consider: `131_200`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:262:42
    |
262 | pub const _NL_WALTMON_5: C2RustUnnamed = 131199;
    |                                          ^^^^^^ help: consider: `131_199`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:263:42
    |
263 | pub const _NL_WALTMON_4: C2RustUnnamed = 131198;
    |                                          ^^^^^^ help: consider: `131_198`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:264:42
    |
264 | pub const _NL_WALTMON_3: C2RustUnnamed = 131197;
    |                                          ^^^^^^ help: consider: `131_197`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:265:42
    |
265 | pub const _NL_WALTMON_2: C2RustUnnamed = 131196;
    |                                          ^^^^^^ help: consider: `131_196`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:266:42
    |
266 | pub const _NL_WALTMON_1: C2RustUnnamed = 131195;
    |                                          ^^^^^^ help: consider: `131_195`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:267:40
    |
267 | pub const __ALTMON_12: C2RustUnnamed = 131194;
    |                                        ^^^^^^ help: consider: `131_194`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:268:40
    |
268 | pub const __ALTMON_11: C2RustUnnamed = 131193;
    |                                        ^^^^^^ help: consider: `131_193`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:269:40
    |
269 | pub const __ALTMON_10: C2RustUnnamed = 131192;
    |                                        ^^^^^^ help: consider: `131_192`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:270:39
    |
270 | pub const __ALTMON_9: C2RustUnnamed = 131191;
    |                                       ^^^^^^ help: consider: `131_191`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:271:39
    |
271 | pub const __ALTMON_8: C2RustUnnamed = 131190;
    |                                       ^^^^^^ help: consider: `131_190`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:272:39
    |
272 | pub const __ALTMON_7: C2RustUnnamed = 131189;
    |                                       ^^^^^^ help: consider: `131_189`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:273:39
    |
273 | pub const __ALTMON_6: C2RustUnnamed = 131188;
    |                                       ^^^^^^ help: consider: `131_188`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:274:39
    |
274 | pub const __ALTMON_5: C2RustUnnamed = 131187;
    |                                       ^^^^^^ help: consider: `131_187`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:275:39
    |
275 | pub const __ALTMON_4: C2RustUnnamed = 131186;
    |                                       ^^^^^^ help: consider: `131_186`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:276:39
    |
276 | pub const __ALTMON_3: C2RustUnnamed = 131185;
    |                                       ^^^^^^ help: consider: `131_185`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:277:39
    |
277 | pub const __ALTMON_2: C2RustUnnamed = 131184;
    |                                       ^^^^^^ help: consider: `131_184`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:278:39
    |
278 | pub const __ALTMON_1: C2RustUnnamed = 131183;
    |                                       ^^^^^^ help: consider: `131_183`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:279:45
    |
279 | pub const _NL_TIME_CODESET: C2RustUnnamed = 131182;
    |                                             ^^^^^^ help: consider: `131_182`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:280:43
    |
280 | pub const _NL_W_DATE_FMT: C2RustUnnamed = 131181;
    |                                           ^^^^^^ help: consider: `131_181`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:281:38
    |
281 | pub const _DATE_FMT: C2RustUnnamed = 131180;
    |                                      ^^^^^^ help: consider: `131_180`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:282:46
    |
282 | pub const _NL_TIME_TIMEZONE: C2RustUnnamed = 131179;
    |                                              ^^^^^^ help: consider: `131_179`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:283:51
    |
283 | pub const _NL_TIME_CAL_DIRECTION: C2RustUnnamed = 131178;
    |                                                   ^^^^^^ help: consider: `131_178`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:284:51
    |
284 | pub const _NL_TIME_FIRST_WORKDAY: C2RustUnnamed = 131177;
    |                                                   ^^^^^^ help: consider: `131_177`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:285:51
    |
285 | pub const _NL_TIME_FIRST_WEEKDAY: C2RustUnnamed = 131176;
    |                                                   ^^^^^^ help: consider: `131_176`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:286:50
    |
286 | pub const _NL_TIME_WEEK_1STWEEK: C2RustUnnamed = 131175;
    |                                                  ^^^^^^ help: consider: `131_175`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:287:49
    |
287 | pub const _NL_TIME_WEEK_1STDAY: C2RustUnnamed = 131174;
    |                                                 ^^^^^^ help: consider: `131_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:288:48
    |
288 | pub const _NL_TIME_WEEK_NDAYS: C2RustUnnamed = 131173;
    |                                                ^^^^^^ help: consider: `131_173`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:289:43
    |
289 | pub const _NL_WERA_T_FMT: C2RustUnnamed = 131172;
    |                                           ^^^^^^ help: consider: `131_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:290:45
    |
290 | pub const _NL_WERA_D_T_FMT: C2RustUnnamed = 131171;
    |                                             ^^^^^^ help: consider: `131_171`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:291:44
    |
291 | pub const _NL_WALT_DIGITS: C2RustUnnamed = 131170;
    |                                            ^^^^^^ help: consider: `131_170`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:292:43
    |
292 | pub const _NL_WERA_D_FMT: C2RustUnnamed = 131169;
    |                                           ^^^^^^ help: consider: `131_169`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:293:42
    |
293 | pub const _NL_WERA_YEAR: C2RustUnnamed = 131168;
    |                                          ^^^^^^ help: consider: `131_168`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:294:44
    |
294 | pub const _NL_WT_FMT_AMPM: C2RustUnnamed = 131167;
    |                                            ^^^^^^ help: consider: `131_167`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:295:39
    |
295 | pub const _NL_WT_FMT: C2RustUnnamed = 131166;
    |                                       ^^^^^^ help: consider: `131_166`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:296:39
    |
296 | pub const _NL_WD_FMT: C2RustUnnamed = 131165;
    |                                       ^^^^^^ help: consider: `131_165`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:297:41
    |
297 | pub const _NL_WD_T_FMT: C2RustUnnamed = 131164;
    |                                         ^^^^^^ help: consider: `131_164`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:298:40
    |
298 | pub const _NL_WPM_STR: C2RustUnnamed = 131163;
    |                                        ^^^^^^ help: consider: `131_163`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:299:40
    |
299 | pub const _NL_WAM_STR: C2RustUnnamed = 131162;
    |                                        ^^^^^^ help: consider: `131_162`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:300:40
    |
300 | pub const _NL_WMON_12: C2RustUnnamed = 131161;
    |                                        ^^^^^^ help: consider: `131_161`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:301:40
    |
301 | pub const _NL_WMON_11: C2RustUnnamed = 131160;
    |                                        ^^^^^^ help: consider: `131_160`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:302:40
    |
302 | pub const _NL_WMON_10: C2RustUnnamed = 131159;
    |                                        ^^^^^^ help: consider: `131_159`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:303:39
    |
303 | pub const _NL_WMON_9: C2RustUnnamed = 131158;
    |                                       ^^^^^^ help: consider: `131_158`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:304:39
    |
304 | pub const _NL_WMON_8: C2RustUnnamed = 131157;
    |                                       ^^^^^^ help: consider: `131_157`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:305:39
    |
305 | pub const _NL_WMON_7: C2RustUnnamed = 131156;
    |                                       ^^^^^^ help: consider: `131_156`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:306:39
    |
306 | pub const _NL_WMON_6: C2RustUnnamed = 131155;
    |                                       ^^^^^^ help: consider: `131_155`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:307:39
    |
307 | pub const _NL_WMON_5: C2RustUnnamed = 131154;
    |                                       ^^^^^^ help: consider: `131_154`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:308:39
    |
308 | pub const _NL_WMON_4: C2RustUnnamed = 131153;
    |                                       ^^^^^^ help: consider: `131_153`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:309:39
    |
309 | pub const _NL_WMON_3: C2RustUnnamed = 131152;
    |                                       ^^^^^^ help: consider: `131_152`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:310:39
    |
310 | pub const _NL_WMON_2: C2RustUnnamed = 131151;
    |                                       ^^^^^^ help: consider: `131_151`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:311:39
    |
311 | pub const _NL_WMON_1: C2RustUnnamed = 131150;
    |                                       ^^^^^^ help: consider: `131_150`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:312:42
    |
312 | pub const _NL_WABMON_12: C2RustUnnamed = 131149;
    |                                          ^^^^^^ help: consider: `131_149`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:313:42
    |
313 | pub const _NL_WABMON_11: C2RustUnnamed = 131148;
    |                                          ^^^^^^ help: consider: `131_148`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:314:42
    |
314 | pub const _NL_WABMON_10: C2RustUnnamed = 131147;
    |                                          ^^^^^^ help: consider: `131_147`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:315:41
    |
315 | pub const _NL_WABMON_9: C2RustUnnamed = 131146;
    |                                         ^^^^^^ help: consider: `131_146`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:316:41
    |
316 | pub const _NL_WABMON_8: C2RustUnnamed = 131145;
    |                                         ^^^^^^ help: consider: `131_145`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:317:41
    |
317 | pub const _NL_WABMON_7: C2RustUnnamed = 131144;
    |                                         ^^^^^^ help: consider: `131_144`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:318:41
    |
318 | pub const _NL_WABMON_6: C2RustUnnamed = 131143;
    |                                         ^^^^^^ help: consider: `131_143`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:319:41
    |
319 | pub const _NL_WABMON_5: C2RustUnnamed = 131142;
    |                                         ^^^^^^ help: consider: `131_142`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:320:41
    |
320 | pub const _NL_WABMON_4: C2RustUnnamed = 131141;
    |                                         ^^^^^^ help: consider: `131_141`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:321:41
    |
321 | pub const _NL_WABMON_3: C2RustUnnamed = 131140;
    |                                         ^^^^^^ help: consider: `131_140`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:322:41
    |
322 | pub const _NL_WABMON_2: C2RustUnnamed = 131139;
    |                                         ^^^^^^ help: consider: `131_139`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:323:41
    |
323 | pub const _NL_WABMON_1: C2RustUnnamed = 131138;
    |                                         ^^^^^^ help: consider: `131_138`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:324:39
    |
324 | pub const _NL_WDAY_7: C2RustUnnamed = 131137;
    |                                       ^^^^^^ help: consider: `131_137`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:325:39
    |
325 | pub const _NL_WDAY_6: C2RustUnnamed = 131136;
    |                                       ^^^^^^ help: consider: `131_136`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:326:39
    |
326 | pub const _NL_WDAY_5: C2RustUnnamed = 131135;
    |                                       ^^^^^^ help: consider: `131_135`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:327:39
    |
327 | pub const _NL_WDAY_4: C2RustUnnamed = 131134;
    |                                       ^^^^^^ help: consider: `131_134`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:328:39
    |
328 | pub const _NL_WDAY_3: C2RustUnnamed = 131133;
    |                                       ^^^^^^ help: consider: `131_133`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:329:39
    |
329 | pub const _NL_WDAY_2: C2RustUnnamed = 131132;
    |                                       ^^^^^^ help: consider: `131_132`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:330:39
    |
330 | pub const _NL_WDAY_1: C2RustUnnamed = 131131;
    |                                       ^^^^^^ help: consider: `131_131`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:331:41
    |
331 | pub const _NL_WABDAY_7: C2RustUnnamed = 131130;
    |                                         ^^^^^^ help: consider: `131_130`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:332:41
    |
332 | pub const _NL_WABDAY_6: C2RustUnnamed = 131129;
    |                                         ^^^^^^ help: consider: `131_129`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:333:41
    |
333 | pub const _NL_WABDAY_5: C2RustUnnamed = 131128;
    |                                         ^^^^^^ help: consider: `131_128`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:334:41
    |
334 | pub const _NL_WABDAY_4: C2RustUnnamed = 131127;
    |                                         ^^^^^^ help: consider: `131_127`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:335:41
    |
335 | pub const _NL_WABDAY_3: C2RustUnnamed = 131126;
    |                                         ^^^^^^ help: consider: `131_126`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:336:41
    |
336 | pub const _NL_WABDAY_2: C2RustUnnamed = 131125;
    |                                         ^^^^^^ help: consider: `131_125`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:337:41
    |
337 | pub const _NL_WABDAY_1: C2RustUnnamed = 131124;
    |                                         ^^^^^^ help: consider: `131_124`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:338:49
    |
338 | pub const _NL_TIME_ERA_ENTRIES: C2RustUnnamed = 131123;
    |                                                 ^^^^^^ help: consider: `131_123`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:339:53
    |
339 | pub const _NL_TIME_ERA_NUM_ENTRIES: C2RustUnnamed = 131122;
    |                                                     ^^^^^^ help: consider: `131_122`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:340:38
    |
340 | pub const ERA_T_FMT: C2RustUnnamed = 131121;
    |                                      ^^^^^^ help: consider: `131_121`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:341:40
    |
341 | pub const ERA_D_T_FMT: C2RustUnnamed = 131120;
    |                                        ^^^^^^ help: consider: `131_120`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:342:39
    |
342 | pub const ALT_DIGITS: C2RustUnnamed = 131119;
    |                                       ^^^^^^ help: consider: `131_119`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:343:38
    |
343 | pub const ERA_D_FMT: C2RustUnnamed = 131118;
    |                                      ^^^^^^ help: consider: `131_118`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:344:39
    |
344 | pub const __ERA_YEAR: C2RustUnnamed = 131117;
    |                                       ^^^^^^ help: consider: `131_117`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:345:32
    |
345 | pub const ERA: C2RustUnnamed = 131116;
    |                                ^^^^^^ help: consider: `131_116`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:346:39
    |
346 | pub const T_FMT_AMPM: C2RustUnnamed = 131115;
    |                                       ^^^^^^ help: consider: `131_115`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:347:34
    |
347 | pub const T_FMT: C2RustUnnamed = 131114;
    |                                  ^^^^^^ help: consider: `131_114`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:348:34
    |
348 | pub const D_FMT: C2RustUnnamed = 131113;
    |                                  ^^^^^^ help: consider: `131_113`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:349:36
    |
349 | pub const D_T_FMT: C2RustUnnamed = 131112;
    |                                    ^^^^^^ help: consider: `131_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:350:35
    |
350 | pub const PM_STR: C2RustUnnamed = 131111;
    |                                   ^^^^^^ help: consider: `131_111`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:351:35
    |
351 | pub const AM_STR: C2RustUnnamed = 131110;
    |                                   ^^^^^^ help: consider: `131_110`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:352:35
    |
352 | pub const MON_12: C2RustUnnamed = 131109;
    |                                   ^^^^^^ help: consider: `131_109`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:353:35
    |
353 | pub const MON_11: C2RustUnnamed = 131108;
    |                                   ^^^^^^ help: consider: `131_108`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:354:35
    |
354 | pub const MON_10: C2RustUnnamed = 131107;
    |                                   ^^^^^^ help: consider: `131_107`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:355:34
    |
355 | pub const MON_9: C2RustUnnamed = 131106;
    |                                  ^^^^^^ help: consider: `131_106`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:356:34
    |
356 | pub const MON_8: C2RustUnnamed = 131105;
    |                                  ^^^^^^ help: consider: `131_105`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:357:34
    |
357 | pub const MON_7: C2RustUnnamed = 131104;
    |                                  ^^^^^^ help: consider: `131_104`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:358:34
    |
358 | pub const MON_6: C2RustUnnamed = 131103;
    |                                  ^^^^^^ help: consider: `131_103`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:359:34
    |
359 | pub const MON_5: C2RustUnnamed = 131102;
    |                                  ^^^^^^ help: consider: `131_102`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:360:34
    |
360 | pub const MON_4: C2RustUnnamed = 131101;
    |                                  ^^^^^^ help: consider: `131_101`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:361:34
    |
361 | pub const MON_3: C2RustUnnamed = 131100;
    |                                  ^^^^^^ help: consider: `131_100`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:362:34
    |
362 | pub const MON_2: C2RustUnnamed = 131099;
    |                                  ^^^^^^ help: consider: `131_099`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:363:34
    |
363 | pub const MON_1: C2RustUnnamed = 131098;
    |                                  ^^^^^^ help: consider: `131_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:364:37
    |
364 | pub const ABMON_12: C2RustUnnamed = 131097;
    |                                     ^^^^^^ help: consider: `131_097`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:365:37
    |
365 | pub const ABMON_11: C2RustUnnamed = 131096;
    |                                     ^^^^^^ help: consider: `131_096`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:366:37
    |
366 | pub const ABMON_10: C2RustUnnamed = 131095;
    |                                     ^^^^^^ help: consider: `131_095`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:367:36
    |
367 | pub const ABMON_9: C2RustUnnamed = 131094;
    |                                    ^^^^^^ help: consider: `131_094`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:368:36
    |
368 | pub const ABMON_8: C2RustUnnamed = 131093;
    |                                    ^^^^^^ help: consider: `131_093`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:369:36
    |
369 | pub const ABMON_7: C2RustUnnamed = 131092;
    |                                    ^^^^^^ help: consider: `131_092`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:370:36
    |
370 | pub const ABMON_6: C2RustUnnamed = 131091;
    |                                    ^^^^^^ help: consider: `131_091`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:371:36
    |
371 | pub const ABMON_5: C2RustUnnamed = 131090;
    |                                    ^^^^^^ help: consider: `131_090`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:372:36
    |
372 | pub const ABMON_4: C2RustUnnamed = 131089;
    |                                    ^^^^^^ help: consider: `131_089`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:373:36
    |
373 | pub const ABMON_3: C2RustUnnamed = 131088;
    |                                    ^^^^^^ help: consider: `131_088`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:374:36
    |
374 | pub const ABMON_2: C2RustUnnamed = 131087;
    |                                    ^^^^^^ help: consider: `131_087`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:375:36
    |
375 | pub const ABMON_1: C2RustUnnamed = 131086;
    |                                    ^^^^^^ help: consider: `131_086`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:376:34
    |
376 | pub const DAY_7: C2RustUnnamed = 131085;
    |                                  ^^^^^^ help: consider: `131_085`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:377:34
    |
377 | pub const DAY_6: C2RustUnnamed = 131084;
    |                                  ^^^^^^ help: consider: `131_084`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:378:34
    |
378 | pub const DAY_5: C2RustUnnamed = 131083;
    |                                  ^^^^^^ help: consider: `131_083`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:379:34
    |
379 | pub const DAY_4: C2RustUnnamed = 131082;
    |                                  ^^^^^^ help: consider: `131_082`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:380:34
    |
380 | pub const DAY_3: C2RustUnnamed = 131081;
    |                                  ^^^^^^ help: consider: `131_081`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:381:34
    |
381 | pub const DAY_2: C2RustUnnamed = 131080;
    |                                  ^^^^^^ help: consider: `131_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:382:34
    |
382 | pub const DAY_1: C2RustUnnamed = 131079;
    |                                  ^^^^^^ help: consider: `131_079`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:383:36
    |
383 | pub const ABDAY_7: C2RustUnnamed = 131078;
    |                                    ^^^^^^ help: consider: `131_078`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:384:36
    |
384 | pub const ABDAY_6: C2RustUnnamed = 131077;
    |                                    ^^^^^^ help: consider: `131_077`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:385:36
    |
385 | pub const ABDAY_5: C2RustUnnamed = 131076;
    |                                    ^^^^^^ help: consider: `131_076`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:386:36
    |
386 | pub const ABDAY_4: C2RustUnnamed = 131075;
    |                                    ^^^^^^ help: consider: `131_075`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:387:36
    |
387 | pub const ABDAY_3: C2RustUnnamed = 131074;
    |                                    ^^^^^^ help: consider: `131_074`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:388:36
    |
388 | pub const ABDAY_2: C2RustUnnamed = 131073;
    |                                    ^^^^^^ help: consider: `131_073`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/localcharset.rs:389:36
    |
389 | pub const ABDAY_1: C2RustUnnamed = 131072;
    |                                    ^^^^^^ help: consider: `131_072`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/mcel.rs:31:44
   |
31 | pub const MCEL_CHAR_MAX: C2RustUnnamed_1 = 1114111;
   |                                            ^^^^^^^ help: consider: `1_114_111`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: operator precedence can trip the unwary
   --> src/mcel.rs:119:9
    |
119 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: consider parenthesizing your expression: `(c1.err as libc::c_int - c2.err as libc::c_int) | (cmp == 0) as libc::c_int`
    |
    = note: `-W clippy::precedence` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence

warning: redundant field names in struct initialization
   --> src/mcel.rs:149:13
    |
149 |             err: err,
    |             ^^^^^^^^ help: replace it with: `err`
    |
    = note: `-W clippy::redundant-field-names` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

warning: redundant field names in struct initialization
   --> src/mcel.rs:170:13
    |
170 |             ch: ch,
    |             ^^^^^^ help: replace it with: `ch`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

warning: long literal lacking separators
  --> src/memcasecmp.rs:22:35
   |
22 |             + 1 as libc::c_int <= 2147483647 as libc::c_int
   |                                   ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:12:31
   |
12 |     let mut v: libc::c_long = 200809 as libc::c_long;
   |                               ^^^^^^ help: consider: `200_809`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:23:23
   |
23 |     return (if v < (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long {
   |                       ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:24:12
   |
24 |         (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long
   |            ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:25:19
   |
25 |     } else if v < 2147483647 as libc::c_int as libc::c_long {
   |                   ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/posixver.rs:28:9
   |
28 |         2147483647 as libc::c_int as libc::c_long
   |         ^^^^^^^^^^ help: consider: `2_147_483_647`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:185:9
    |
185 |     mut o: *mut quoting_options,
    |         ^
186 |     mut c: libc::c_char,
    |         ^
187 |     mut i: libc::c_int,
    |         ^
...
190 |     let mut p: *mut libc::c_uint = ((*(if !o.is_null() {
    |             ^
...
209 |     let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |             ^
    |
    = note: `-W clippy::many-single-char-names` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: 5 bindings with single-character names in scope
   --> src/quotearg.rs:309:13
    |
309 |     let mut i: size_t = 0;
    |             ^
...
440 |             let mut c: libc::c_uchar = 0;
    |                     ^
...
794 |                     let mut m: size_t = 0;
    |                             ^
...
813 |                         let mut w: char32_t = 0;
    |                                 ^
...
838 |                                     let mut j: size_t = 0;
    |                                             ^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#many_single_char_names

warning: long literal lacking separators
   --> src/quotearg.rs:328:36
    |
328 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:331:36
    |
331 |                 current_block_48 = 1283995450065962895;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:336:36
    |
336 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:366:36
    |
366 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:370:36
    |
370 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:373:36
    |
373 |                 current_block_48 = 2694013637280298776;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:376:36
    |
376 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:379:36
    |
379 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:383:36
    |
383 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:390:13
    |
390 |             1283995450065962895 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `1_283_995_450_065_962_895`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:401:36
    |
401 |                 current_block_48 = 2989495919056355252;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_989_495_919_056_355_252`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:403:13
    |
403 |             2694013637280298776 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_694_013_637_280_298_776`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:405:36
    |
405 |                 current_block_48 = 2266290538919981374;
    |                                    ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:410:13
    |
410 |             2266290538919981374 => {
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `2_266_290_538_919_981_374`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:414:36
    |
414 |                 current_block_48 = 14141891332124833771;
    |                                    ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:419:13
    |
419 |             14141891332124833771 => {
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_141_891_332_124_833_771`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:434:29
    |
434 |         while if argsize == 18446744073709551615 as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:450:39
    |
450 |                     <= (if argsize == 18446744073709551615 as libc::c_ulong
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:465:37
    |
465 |                     current_block = 7928555609993211441;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:475:45
    |
475 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:531:41
    |
531 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:533:41
    |
533 |                         current_block = 13619784596304402172;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_619_784_596_304_402_172`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:535:41
    |
535 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:541:45
    |
541 | ...                   current_block = 17954593875197965021;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:543:33
    |
543 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:545:57
    |
545 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:565:69
    |
565 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:601:45
    |
601 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:604:45
    |
604 | ...                   current_block = 14514781131754033399;
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `14_514_781_131_754_033_399`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:606:33
    |
606 | ...                   17954593875197965021 => {
    |                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `17_954_593_875_197_965_021`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:608:57
    |
608 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:628:69
    |
628 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:664:45
    |
664 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:667:45
    |
667 | ...                   current_block = 253337042034819032;
    |                                       ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:673:37
    |
673 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:677:37
    |
677 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:681:37
    |
681 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:685:37
    |
685 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:689:37
    |
689 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:693:37
    |
693 |                     current_block = 9215498979640025612;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:697:37
    |
697 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:705:45
    |
705 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:708:41
    |
708 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:713:41
    |
713 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:715:41
    |
715 |                         current_block = 9215498979640025612;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:719:38
    |
719 |                     if if argsize == 18446744073709551615 as libc::c_ulong {
    |                                      ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:726:41
    |
726 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:728:41
    |
728 |                         current_block = 16442922512115311366;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:732:37
    |
732 |                     current_block = 16442922512115311366;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:735:37
    |
735 |                     current_block = 4634307283396172174;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:738:37
    |
738 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:741:37
    |
741 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:744:37
    |
744 |                     current_block = 16620298045565028098;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:747:37
    |
747 |                     current_block = 15155215915847730705;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:756:45
    |
756 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:779:41
    |
779 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:781:41
    |
781 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:791:37
    |
791 |                     current_block = 253337042034819032;
    |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:810:39
    |
810 |                         if argsize == 18446744073709551615 as libc::c_ulong {
    |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:846:65
    |
846 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:871:53
    |
871 | ...                   current_block = 7928555609993211441;
    |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:956:41
    |
956 |                         current_block = 4476262310586904498;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:958:41
    |
958 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:963:17
    |
963 |                 16442922512115311366 => {
    |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_442_922_512_115_311_366`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:965:41
    |
965 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:967:41
    |
967 |                         current_block = 4634307283396172174;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:970:17
    |
970 |                 9215498979640025612 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_215_498_979_640_025_612`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:975:41
    |
975 |                         current_block = 7928555609993211441;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:978:37
    |
978 |                     current_block = 1190876092451756080;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:983:17
    |
983 |                 1190876092451756080 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `1_190_876_092_451_756_080`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:986:41
    |
986 |                         current_block = 3173013908131212616;
    |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:988:41
    |
988 |                         current_block = 253337042034819032;
    |                                         ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:991:17
    |
991 |                 4634307283396172174 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_634_307_283_396_172_174`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:993:37
    |
993 |                     current_block = 7549413860336125482;
    |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:998:17
    |
998 |                 7549413860336125482 => {
    |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `7_549_413_860_336_125_482`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/quotearg.rs:999:37
    |
999 |                     current_block = 13059411171234995867;
    |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1004:17
     |
1004 |                 13059411171234995867 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `13_059_411_171_234_995_867`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1005:37
     |
1005 |                     current_block = 16620298045565028098;
     |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1010:17
     |
1010 |                 16620298045565028098 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `16_620_298_045_565_028_098`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1011:37
     |
1011 |                     current_block = 15155215915847730705;
     |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1016:17
     |
1016 |                 15155215915847730705 => {
     |                 ^^^^^^^^^^^^^^^^^^^^ help: consider: `15_155_215_915_847_730_705`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1021:41
     |
1021 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1024:37
     |
1024 |                     current_block = 253337042034819032;
     |                                     ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1029:17
     |
1029 |                 253337042034819032 => {
     |                 ^^^^^^^^^^^^^^^^^^ help: consider: `253_337_042_034_819_032`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1050:41
     |
1050 |                         current_block = 4476262310586904498;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1052:41
     |
1052 |                         current_block = 3173013908131212616;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1058:17
     |
1058 |                 3173013908131212616 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `3_173_013_908_131_212_616`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1060:41
     |
1060 |                         current_block = 7928555609993211441;
     |                                         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1090:37
     |
1090 |                     current_block = 4476262310586904498;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1095:17
     |
1095 |                 4476262310586904498 => {
     |                 ^^^^^^^^^^^^^^^^^^^ help: consider: `4_476_262_310_586_904_498`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1128:29
     |
1128 |             current_block = 7928555609993211441;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1135:29
     |
1135 |             current_block = 6412618891452676311;
     |                             ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/quotearg.rs:1150:16
     |
1150 |           } else {
     |  ________________^
1151 | |             if !(buffersize == 0 && orig_buffersize != 0) {
1152 | |                 current_block = 6412618891452676311;
1153 | |                 break;
...    |
1156 | |             len = 0 as libc::c_int as size_t;
1157 | |         }
     | |_________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/quotearg.rs:1152:33
     |
1152 |                 current_block = 6412618891452676311;
     |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_412_618_891_452_676_311`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1160:9
     |
1160 |         7928555609993211441 => {
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `7_928_555_609_993_211_441`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/quotearg.rs:1362:13
     |
1362 |     let mut qsize: size_t = quotearg_buffer_restyled(
     |             ^^^^^
     |
     = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
    --> src/quotearg.rs:1359:13
     |
1359 |     let mut size: size_t = (*sv.offset(n as isize)).size;
     |             ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/quotearg.rs:1326:44
     |
1326 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                            ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1327:11
     |
1327 |         < 9223372036854775807 as libc::c_long
     |           ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1329:9
     |
1329 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^ help: consider: `2_147_483_647`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1331:9
     |
1331 |         9223372036854775807 as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1405:9
     |
1405 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1435:39
     |
1435 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |                                       ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1484:35
     |
1484 |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
     |                                   ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1517:9
     |
1517 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1533:9
     |
1533 |         18446744073709551615 as libc::c_ulong,
     |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/quotearg.rs:1602:32
     |
1602 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |                                ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:34:12
   |
34 |       } else {
   |  ____________^
35 | |         let mut length: size_t = strlen(result);
36 | |         if length < bufsize {
37 | |             memcpy(
...  |
56 | |         }
57 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
  --> src/setlocale_null_unlocked.rs:43:16
   |
43 |           } else {
   |  ________________^
44 | |             if bufsize > 0 as libc::c_int as libc::c_ulong {
45 | |                 memcpy(
46 | |                     buf as *mut libc::c_void,
...  |
55 | |             return 34 as libc::c_int;
56 | |         }
   | |_________^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/skipchars.rs:30:44
   |
30 | pub const MCEL_CHAR_MAX: C2RustUnnamed_1 = 1114111;
   |                                            ^^^^^^^ help: consider: `1_114_111`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant field names in struct initialization
   --> src/skipchars.rs:150:13
    |
150 |             err: err,
    |             ^^^^^^^^ help: replace it with: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

warning: redundant field names in struct initialization
   --> src/skipchars.rs:169:13
    |
169 |             ch: ch,
    |             ^^^^^^ help: replace it with: `ch`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

warning: redundant else block
  --> src/xmalloc.rs:35:12
   |
35 |       } else {
   |  ____________^
36 | |         return _gl_alloc_nomem()
37 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:32:30
   |
32 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:41:9
   |
41 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:47:9
   |
47 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |         ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
  --> src/xmalloc.rs:73:12
   |
73 |       } else {
   |  ____________^
74 | |         return _gl_alloc_nomem()
75 | |     };
   | |_____^
   |
   = help: remove the `else` block and move the contents out
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
  --> src/xmalloc.rs:61:30
   |
61 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                              ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:62:34
   |
62 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |                                  ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
  --> src/xmalloc.rs:85:37
   |
85 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |                                     ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:560:18
    |
560 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                  ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:206:10
    |
206 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |          ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: binding's name is too similar to existing binding
   --> src/xmalloc.rs:560:27
    |
560 |             let (fresh12, fresh13) = n0.overflowing_add(n_incr_min);
    |                           ^^^^^^^
    |
note: existing binding defined here
   --> src/xmalloc.rs:206:18
    |
206 |     let (fresh2, fresh3) = n0.overflowing_add(n0 >> 1 as libc::c_int);
    |                  ^^^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
   --> src/xmalloc.rs:209:13
    |
209 |         n = 9223372036854775807 as libc::c_long;
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:411:16
    |
411 |           } else {
    |  ________________^
412 | |             if s == 0 as libc::c_int as libc::c_long {
413 | |                 0 as libc::c_int
414 | |             } else {
...   |
525 | |             }
526 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
411 ~         } else if s == 0 as libc::c_int as libc::c_long {
412 +             0 as libc::c_int
413 +         } else {
414 +             if n < 0 as libc::c_int as libc::c_long {
415 +                 if (if (if ((if 1 as libc::c_int != 0 {
416 +                     0 as libc::c_int as libc::c_long
417 +                 } else {
418 +                     (if 1 as libc::c_int != 0 {
419 +                         0 as libc::c_int as libc::c_long
420 +                     } else {
421 +                         n
422 +                     }) + 0 as libc::c_int as idx_t
423 +                 }) - 1 as libc::c_int as libc::c_long)
424 +                     < 0 as libc::c_int as libc::c_long
425 +                 {
426 +                     !(((((if 1 as libc::c_int != 0 {
427 +                         0 as libc::c_int as libc::c_long
428 +                     } else {
429 +                         (if 1 as libc::c_int != 0 {
430 +                             0 as libc::c_int as libc::c_long
431 +                         } else {
432 +                             n
433 +                         }) + 0 as libc::c_int as idx_t
434 +                     }) + 1 as libc::c_int as libc::c_long)
435 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
436 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
437 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
438 +                         - 1 as libc::c_int as libc::c_long)
439 +                         * 2 as libc::c_int as libc::c_long
440 +                         + 1 as libc::c_int as libc::c_long)
441 +                 } else {
442 +                     (if 1 as libc::c_int != 0 {
443 +                         0 as libc::c_int as libc::c_long
444 +                     } else {
445 +                         (if 1 as libc::c_int != 0 {
446 +                             0 as libc::c_int as libc::c_long
447 +                         } else {
448 +                             n
449 +                         }) + 0 as libc::c_int as idx_t
450 +                     }) + 0 as libc::c_int as libc::c_long
451 +                 }) < 0 as libc::c_int as libc::c_long
452 +                 {
453 +                     (((if 1 as libc::c_int != 0 {
454 +                         0 as libc::c_int as libc::c_long
455 +                     } else {
456 +                         n
457 +                     }) + 0 as libc::c_int as idx_t)
458 +                         < -(if ((if 1 as libc::c_int != 0 {
459 +                             0 as libc::c_int as libc::c_long
460 +                         } else {
461 +                             (if 1 as libc::c_int != 0 {
462 +                                 0 as libc::c_int as libc::c_long
463 +                             } else {
464 +                                 n
465 +                             }) + 0 as libc::c_int as idx_t
466 +                         }) - 1 as libc::c_int as libc::c_long)
467 +                             < 0 as libc::c_int as libc::c_long
468 +                         {
469 +                             ((((if 1 as libc::c_int != 0 {
470 +                                 0 as libc::c_int as libc::c_long
471 +                             } else {
472 +                                 (if 1 as libc::c_int != 0 {
473 +                                     0 as libc::c_int as libc::c_long
474 +                                 } else {
475 +                                     n
476 +                                 }) + 0 as libc::c_int as idx_t
477 +                             }) + 1 as libc::c_int as libc::c_long)
478 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
479 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
480 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
481 +                                 - 1 as libc::c_int as libc::c_long)
482 +                                 * 2 as libc::c_int as libc::c_long
483 +                                 + 1 as libc::c_int as libc::c_long
484 +                         } else {
485 +                             (if 1 as libc::c_int != 0 {
486 +                                 0 as libc::c_int as libc::c_long
487 +                             } else {
488 +                                 (if 1 as libc::c_int != 0 {
489 +                                     0 as libc::c_int as libc::c_long
490 +                                 } else {
491 +                                     n
492 +                                 }) + 0 as libc::c_int as idx_t
493 +                             }) - 1 as libc::c_int as libc::c_long
494 +                         })) as libc::c_int
495 +                 } else {
496 +                     ((0 as libc::c_int as libc::c_long)
497 +                         < (if 1 as libc::c_int != 0 {
498 +                             0 as libc::c_int as libc::c_long
499 +                         } else {
500 +                             n
501 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
502 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
503 +                 {
504 +                     if ((if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         s
508 +                     }) - 1 as libc::c_int as libc::c_long)
509 +                         < 0 as libc::c_int as libc::c_long
510 +                     {
511 +                         ((0 as libc::c_int as libc::c_long)
512 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
513 +                     } else {
514 +                         ((-(1 as libc::c_int) as libc::c_long
515 +                             - 0 as libc::c_int as idx_t)
516 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
517 +                     }
518 +                 } else {
519 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
520 +                 }
521 +             } else {
522 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
523 +             }
524 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:303:20
    |
303 |               } else {
    |  ____________________^
304 | |                 if (if (if ((if 1 as libc::c_int != 0 {
305 | |                     0 as libc::c_int as libc::c_long
306 | |                 } else {
...   |
409 | |                 }
410 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
303 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
304 +                 0 as libc::c_int as libc::c_long
305 +             } else {
306 +                 (if 1 as libc::c_int != 0 {
307 +                     0 as libc::c_int as libc::c_long
308 +                 } else {
309 +                     s
310 +                 }) + 0 as libc::c_int as idx_t
311 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
312 +             {
313 +                 !(((((if 1 as libc::c_int != 0 {
314 +                     0 as libc::c_int as libc::c_long
315 +                 } else {
316 +                     (if 1 as libc::c_int != 0 {
317 +                         0 as libc::c_int as libc::c_long
318 +                     } else {
319 +                         s
320 +                     }) + 0 as libc::c_int as idx_t
321 +                 }) + 1 as libc::c_int as libc::c_long)
322 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
323 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
324 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
325 +                     - 1 as libc::c_int as libc::c_long)
326 +                     * 2 as libc::c_int as libc::c_long
327 +                     + 1 as libc::c_int as libc::c_long)
328 +             } else {
329 +                 (if 1 as libc::c_int != 0 {
330 +                     0 as libc::c_int as libc::c_long
331 +                 } else {
332 +                     (if 1 as libc::c_int != 0 {
333 +                         0 as libc::c_int as libc::c_long
334 +                     } else {
335 +                         s
336 +                     }) + 0 as libc::c_int as idx_t
337 +                 }) + 0 as libc::c_int as libc::c_long
338 +             }) < 0 as libc::c_int as libc::c_long
339 +             {
340 +                 (((if 1 as libc::c_int != 0 {
341 +                     0 as libc::c_int as libc::c_long
342 +                 } else {
343 +                     s
344 +                 }) + 0 as libc::c_int as idx_t)
345 +                     < -(if ((if 1 as libc::c_int != 0 {
346 +                         0 as libc::c_int as libc::c_long
347 +                     } else {
348 +                         (if 1 as libc::c_int != 0 {
349 +                             0 as libc::c_int as libc::c_long
350 +                         } else {
351 +                             s
352 +                         }) + 0 as libc::c_int as idx_t
353 +                     }) - 1 as libc::c_int as libc::c_long)
354 +                         < 0 as libc::c_int as libc::c_long
355 +                     {
356 +                         ((((if 1 as libc::c_int != 0 {
357 +                             0 as libc::c_int as libc::c_long
358 +                         } else {
359 +                             (if 1 as libc::c_int != 0 {
360 +                                 0 as libc::c_int as libc::c_long
361 +                             } else {
362 +                                 s
363 +                             }) + 0 as libc::c_int as idx_t
364 +                         }) + 1 as libc::c_int as libc::c_long)
365 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
366 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
367 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
368 +                             - 1 as libc::c_int as libc::c_long)
369 +                             * 2 as libc::c_int as libc::c_long
370 +                             + 1 as libc::c_int as libc::c_long
371 +                     } else {
372 +                         (if 1 as libc::c_int != 0 {
373 +                             0 as libc::c_int as libc::c_long
374 +                         } else {
375 +                             (if 1 as libc::c_int != 0 {
376 +                                 0 as libc::c_int as libc::c_long
377 +                             } else {
378 +                                 s
379 +                             }) + 0 as libc::c_int as idx_t
380 +                         }) - 1 as libc::c_int as libc::c_long
381 +                     })) as libc::c_int
382 +             } else {
383 +                 ((0 as libc::c_int as libc::c_long)
384 +                     < (if 1 as libc::c_int != 0 {
385 +                         0 as libc::c_int as libc::c_long
386 +                     } else {
387 +                         s
388 +                     }) + 0 as libc::c_int as idx_t) as libc::c_int
389 +             }) != 0 && s == -(1 as libc::c_int) as libc::c_long
390 +             {
391 +                 if ((if 1 as libc::c_int != 0 {
392 +                     0 as libc::c_int as libc::c_long
393 +                 } else {
394 +                     n
395 +                 }) - 1 as libc::c_int as libc::c_long)
396 +                     < 0 as libc::c_int as libc::c_long
397 +                 {
398 +                     ((0 as libc::c_int as libc::c_long)
399 +                         < n + 0 as libc::c_int as idx_t) as libc::c_int
400 +                 } else {
401 +                     ((0 as libc::c_int as libc::c_long) < n
402 +                         && (-(1 as libc::c_int) as libc::c_long
403 +                             - 0 as libc::c_int as idx_t)
404 +                             < n - 1 as libc::c_int as libc::c_long) as libc::c_int
405 +                 }
406 +             } else {
407 +                 (0 as libc::c_int as idx_t / s < n) as libc::c_int
408 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:291:25
    |
291 | /                         (if 1 as libc::c_int != 0 {
292 | |                             0 as libc::c_int as libc::c_long
293 | |                         } else {
294 | |                             s
...   |
297 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
298 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
291 ~                         ((if 1 as libc::c_int != 0 {
292 +                             0 as libc::c_int as libc::c_long
293 +                         } else {
294 +                             s
295 +                         }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
296 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
297 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:414:20
    |
414 |               } else {
    |  ____________________^
415 | |                 if n < 0 as libc::c_int as libc::c_long {
416 | |                     if (if (if ((if 1 as libc::c_int != 0 {
417 | |                         0 as libc::c_int as libc::c_long
...   |
524 | |                 }
525 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
414 ~             } else if n < 0 as libc::c_int as libc::c_long {
415 +                 if (if (if ((if 1 as libc::c_int != 0 {
416 +                     0 as libc::c_int as libc::c_long
417 +                 } else {
418 +                     (if 1 as libc::c_int != 0 {
419 +                         0 as libc::c_int as libc::c_long
420 +                     } else {
421 +                         n
422 +                     }) + 0 as libc::c_int as idx_t
423 +                 }) - 1 as libc::c_int as libc::c_long)
424 +                     < 0 as libc::c_int as libc::c_long
425 +                 {
426 +                     !(((((if 1 as libc::c_int != 0 {
427 +                         0 as libc::c_int as libc::c_long
428 +                     } else {
429 +                         (if 1 as libc::c_int != 0 {
430 +                             0 as libc::c_int as libc::c_long
431 +                         } else {
432 +                             n
433 +                         }) + 0 as libc::c_int as idx_t
434 +                     }) + 1 as libc::c_int as libc::c_long)
435 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
436 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
437 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
438 +                         - 1 as libc::c_int as libc::c_long)
439 +                         * 2 as libc::c_int as libc::c_long
440 +                         + 1 as libc::c_int as libc::c_long)
441 +                 } else {
442 +                     (if 1 as libc::c_int != 0 {
443 +                         0 as libc::c_int as libc::c_long
444 +                     } else {
445 +                         (if 1 as libc::c_int != 0 {
446 +                             0 as libc::c_int as libc::c_long
447 +                         } else {
448 +                             n
449 +                         }) + 0 as libc::c_int as idx_t
450 +                     }) + 0 as libc::c_int as libc::c_long
451 +                 }) < 0 as libc::c_int as libc::c_long
452 +                 {
453 +                     (((if 1 as libc::c_int != 0 {
454 +                         0 as libc::c_int as libc::c_long
455 +                     } else {
456 +                         n
457 +                     }) + 0 as libc::c_int as idx_t)
458 +                         < -(if ((if 1 as libc::c_int != 0 {
459 +                             0 as libc::c_int as libc::c_long
460 +                         } else {
461 +                             (if 1 as libc::c_int != 0 {
462 +                                 0 as libc::c_int as libc::c_long
463 +                             } else {
464 +                                 n
465 +                             }) + 0 as libc::c_int as idx_t
466 +                         }) - 1 as libc::c_int as libc::c_long)
467 +                             < 0 as libc::c_int as libc::c_long
468 +                         {
469 +                             ((((if 1 as libc::c_int != 0 {
470 +                                 0 as libc::c_int as libc::c_long
471 +                             } else {
472 +                                 (if 1 as libc::c_int != 0 {
473 +                                     0 as libc::c_int as libc::c_long
474 +                                 } else {
475 +                                     n
476 +                                 }) + 0 as libc::c_int as idx_t
477 +                             }) + 1 as libc::c_int as libc::c_long)
478 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
479 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
480 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
481 +                                 - 1 as libc::c_int as libc::c_long)
482 +                                 * 2 as libc::c_int as libc::c_long
483 +                                 + 1 as libc::c_int as libc::c_long
484 +                         } else {
485 +                             (if 1 as libc::c_int != 0 {
486 +                                 0 as libc::c_int as libc::c_long
487 +                             } else {
488 +                                 (if 1 as libc::c_int != 0 {
489 +                                     0 as libc::c_int as libc::c_long
490 +                                 } else {
491 +                                     n
492 +                                 }) + 0 as libc::c_int as idx_t
493 +                             }) - 1 as libc::c_int as libc::c_long
494 +                         })) as libc::c_int
495 +                 } else {
496 +                     ((0 as libc::c_int as libc::c_long)
497 +                         < (if 1 as libc::c_int != 0 {
498 +                             0 as libc::c_int as libc::c_long
499 +                         } else {
500 +                             n
501 +                         }) + 0 as libc::c_int as idx_t) as libc::c_int
502 +                 }) != 0 && n == -(1 as libc::c_int) as libc::c_long
503 +                 {
504 +                     if ((if 1 as libc::c_int != 0 {
505 +                         0 as libc::c_int as libc::c_long
506 +                     } else {
507 +                         s
508 +                     }) - 1 as libc::c_int as libc::c_long)
509 +                         < 0 as libc::c_int as libc::c_long
510 +                     {
511 +                         ((0 as libc::c_int as libc::c_long)
512 +                             < s + 0 as libc::c_int as idx_t) as libc::c_int
513 +                     } else {
514 +                         ((-(1 as libc::c_int) as libc::c_long
515 +                             - 0 as libc::c_int as idx_t)
516 +                             < s - 1 as libc::c_int as libc::c_long) as libc::c_int
517 +                     }
518 +                 } else {
519 +                     (0 as libc::c_int as idx_t / n < s) as libc::c_int
520 +                 }
521 +             } else {
522 +                 (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
523 +             }
    |

warning: long literal lacking separators
   --> src/xmalloc.rs:537:13
    |
537 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:538:15
    |
538 |             < 18446744073709551615 as libc::c_ulong
    |               ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:540:13
    |
540 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/xmalloc.rs:542:13
    |
542 |             18446744073709551615 as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^ help: consider: `18_446_744_073_709_551_615`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:770:28
    |
770 |                       } else {
    |  ____________________________^
771 | |                         if s == 0 as libc::c_int as libc::c_long {
772 | |                             0 as libc::c_int
773 | |                         } else {
...   |
884 | |                         }
885 | |                     }) != 0
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
770 ~                     } else if s == 0 as libc::c_int as libc::c_long {
771 +                         0 as libc::c_int
772 +                     } else {
773 +                         if n < 0 as libc::c_int as libc::c_long {
774 +                             if (if (if ((if 1 as libc::c_int != 0 {
775 +                                 0 as libc::c_int as libc::c_long
776 +                             } else {
777 +                                 (if 1 as libc::c_int != 0 {
778 +                                     0 as libc::c_int as libc::c_long
779 +                                 } else {
780 +                                     n
781 +                                 }) + 0 as libc::c_int as idx_t
782 +                             }) - 1 as libc::c_int as libc::c_long)
783 +                                 < 0 as libc::c_int as libc::c_long
784 +                             {
785 +                                 !(((((if 1 as libc::c_int != 0 {
786 +                                     0 as libc::c_int as libc::c_long
787 +                                 } else {
788 +                                     (if 1 as libc::c_int != 0 {
789 +                                         0 as libc::c_int as libc::c_long
790 +                                     } else {
791 +                                         n
792 +                                     }) + 0 as libc::c_int as idx_t
793 +                                 }) + 1 as libc::c_int as libc::c_long)
794 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
795 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
796 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
797 +                                     - 1 as libc::c_int as libc::c_long)
798 +                                     * 2 as libc::c_int as libc::c_long
799 +                                     + 1 as libc::c_int as libc::c_long)
800 +                             } else {
801 +                                 (if 1 as libc::c_int != 0 {
802 +                                     0 as libc::c_int as libc::c_long
803 +                                 } else {
804 +                                     (if 1 as libc::c_int != 0 {
805 +                                         0 as libc::c_int as libc::c_long
806 +                                     } else {
807 +                                         n
808 +                                     }) + 0 as libc::c_int as idx_t
809 +                                 }) + 0 as libc::c_int as libc::c_long
810 +                             }) < 0 as libc::c_int as libc::c_long
811 +                             {
812 +                                 (((if 1 as libc::c_int != 0 {
813 +                                     0 as libc::c_int as libc::c_long
814 +                                 } else {
815 +                                     n
816 +                                 }) + 0 as libc::c_int as idx_t)
817 +                                     < -(if ((if 1 as libc::c_int != 0 {
818 +                                         0 as libc::c_int as libc::c_long
819 +                                     } else {
820 +                                         (if 1 as libc::c_int != 0 {
821 +                                             0 as libc::c_int as libc::c_long
822 +                                         } else {
823 +                                             n
824 +                                         }) + 0 as libc::c_int as idx_t
825 +                                     }) - 1 as libc::c_int as libc::c_long)
826 +                                         < 0 as libc::c_int as libc::c_long
827 +                                     {
828 +                                         ((((if 1 as libc::c_int != 0 {
829 +                                             0 as libc::c_int as libc::c_long
830 +                                         } else {
831 +                                             (if 1 as libc::c_int != 0 {
832 +                                                 0 as libc::c_int as libc::c_long
833 +                                             } else {
834 +                                                 n
835 +                                             }) + 0 as libc::c_int as idx_t
836 +                                         }) + 1 as libc::c_int as libc::c_long)
837 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
838 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
839 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
840 +                                             - 1 as libc::c_int as libc::c_long)
841 +                                             * 2 as libc::c_int as libc::c_long
842 +                                             + 1 as libc::c_int as libc::c_long
843 +                                     } else {
844 +                                         (if 1 as libc::c_int != 0 {
845 +                                             0 as libc::c_int as libc::c_long
846 +                                         } else {
847 +                                             (if 1 as libc::c_int != 0 {
848 +                                                 0 as libc::c_int as libc::c_long
849 +                                             } else {
850 +                                                 n
851 +                                             }) + 0 as libc::c_int as idx_t
852 +                                         }) - 1 as libc::c_int as libc::c_long
853 +                                     })) as libc::c_int
854 +                             } else {
855 +                                 ((0 as libc::c_int as libc::c_long)
856 +                                     < (if 1 as libc::c_int != 0 {
857 +                                         0 as libc::c_int as libc::c_long
858 +                                     } else {
859 +                                         n
860 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
861 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
862 +                             {
863 +                                 if ((if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     s
867 +                                 }) - 1 as libc::c_int as libc::c_long)
868 +                                     < 0 as libc::c_int as libc::c_long
869 +                                 {
870 +                                     ((0 as libc::c_int as libc::c_long)
871 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
872 +                                 } else {
873 +                                     ((-(1 as libc::c_int) as libc::c_long
874 +                                         - 0 as libc::c_int as idx_t)
875 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
876 +                                 }
877 +                             } else {
878 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
879 +                             }
880 +                         } else {
881 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
882 +                         }
883 ~                     }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:661:32
    |
661 |                           } else {
    |  ________________________________^
662 | |                             if (if (if ((if 1 as libc::c_int != 0 {
663 | |                                 0 as libc::c_int as libc::c_long
664 | |                             } else {
...   |
768 | |                             }
769 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
661 ~                         } else if (if (if ((if 1 as libc::c_int != 0 {
662 +                             0 as libc::c_int as libc::c_long
663 +                         } else {
664 +                             (if 1 as libc::c_int != 0 {
665 +                                 0 as libc::c_int as libc::c_long
666 +                             } else {
667 +                                 s
668 +                             }) + 0 as libc::c_int as idx_t
669 +                         }) - 1 as libc::c_int as libc::c_long)
670 +                             < 0 as libc::c_int as libc::c_long
671 +                         {
672 +                             !(((((if 1 as libc::c_int != 0 {
673 +                                 0 as libc::c_int as libc::c_long
674 +                             } else {
675 +                                 (if 1 as libc::c_int != 0 {
676 +                                     0 as libc::c_int as libc::c_long
677 +                                 } else {
678 +                                     s
679 +                                 }) + 0 as libc::c_int as idx_t
680 +                             }) + 1 as libc::c_int as libc::c_long)
681 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
682 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
683 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
684 +                                 - 1 as libc::c_int as libc::c_long)
685 +                                 * 2 as libc::c_int as libc::c_long
686 +                                 + 1 as libc::c_int as libc::c_long)
687 +                         } else {
688 +                             (if 1 as libc::c_int != 0 {
689 +                                 0 as libc::c_int as libc::c_long
690 +                             } else {
691 +                                 (if 1 as libc::c_int != 0 {
692 +                                     0 as libc::c_int as libc::c_long
693 +                                 } else {
694 +                                     s
695 +                                 }) + 0 as libc::c_int as idx_t
696 +                             }) + 0 as libc::c_int as libc::c_long
697 +                         }) < 0 as libc::c_int as libc::c_long
698 +                         {
699 +                             (((if 1 as libc::c_int != 0 {
700 +                                 0 as libc::c_int as libc::c_long
701 +                             } else {
702 +                                 s
703 +                             }) + 0 as libc::c_int as idx_t)
704 +                                 < -(if ((if 1 as libc::c_int != 0 {
705 +                                     0 as libc::c_int as libc::c_long
706 +                                 } else {
707 +                                     (if 1 as libc::c_int != 0 {
708 +                                         0 as libc::c_int as libc::c_long
709 +                                     } else {
710 +                                         s
711 +                                     }) + 0 as libc::c_int as idx_t
712 +                                 }) - 1 as libc::c_int as libc::c_long)
713 +                                     < 0 as libc::c_int as libc::c_long
714 +                                 {
715 +                                     ((((if 1 as libc::c_int != 0 {
716 +                                         0 as libc::c_int as libc::c_long
717 +                                     } else {
718 +                                         (if 1 as libc::c_int != 0 {
719 +                                             0 as libc::c_int as libc::c_long
720 +                                         } else {
721 +                                             s
722 +                                         }) + 0 as libc::c_int as idx_t
723 +                                     }) + 1 as libc::c_int as libc::c_long)
724 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
725 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
726 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
727 +                                         - 1 as libc::c_int as libc::c_long)
728 +                                         * 2 as libc::c_int as libc::c_long
729 +                                         + 1 as libc::c_int as libc::c_long
730 +                                 } else {
731 +                                     (if 1 as libc::c_int != 0 {
732 +                                         0 as libc::c_int as libc::c_long
733 +                                     } else {
734 +                                         (if 1 as libc::c_int != 0 {
735 +                                             0 as libc::c_int as libc::c_long
736 +                                         } else {
737 +                                             s
738 +                                         }) + 0 as libc::c_int as idx_t
739 +                                     }) - 1 as libc::c_int as libc::c_long
740 +                                 })) as libc::c_int
741 +                         } else {
742 +                             ((0 as libc::c_int as libc::c_long)
743 +                                 < (if 1 as libc::c_int != 0 {
744 +                                     0 as libc::c_int as libc::c_long
745 +                                 } else {
746 +                                     s
747 +                                 }) + 0 as libc::c_int as idx_t) as libc::c_int
748 +                         }) != 0 && s == -(1 as libc::c_int) as libc::c_long
749 +                         {
750 +                             if ((if 1 as libc::c_int != 0 {
751 +                                 0 as libc::c_int as libc::c_long
752 +                             } else {
753 +                                 n
754 +                             }) - 1 as libc::c_int as libc::c_long)
755 +                                 < 0 as libc::c_int as libc::c_long
756 +                             {
757 +                                 ((0 as libc::c_int as libc::c_long)
758 +                                     < n + 0 as libc::c_int as idx_t) as libc::c_int
759 +                             } else {
760 +                                 ((0 as libc::c_int as libc::c_long) < n
761 +                                     && (-(1 as libc::c_int) as libc::c_long
762 +                                         - 0 as libc::c_int as idx_t)
763 +                                         < n - 1 as libc::c_int as libc::c_long) as libc::c_int
764 +                             }
765 +                         } else {
766 +                             (0 as libc::c_int as idx_t / s < n) as libc::c_int
767 +                         }
    |

warning: operator precedence can trip the unwary
   --> src/xmalloc.rs:648:37
    |
648 | / ...                   (if 1 as libc::c_int != 0 {
649 | | ...                       0 as libc::c_int as libc::c_long
650 | | ...                   } else {
651 | | ...                       s
...   |
654 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
655 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
648 ~                                     ((if 1 as libc::c_int != 0 {
649 +                                         0 as libc::c_int as libc::c_long
650 +                                     } else {
651 +                                         s
652 +                                     }) + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
653 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
654 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xmalloc.rs:773:32
    |
773 |                           } else {
    |  ________________________________^
774 | |                             if n < 0 as libc::c_int as libc::c_long {
775 | |                                 if (if (if ((if 1 as libc::c_int != 0 {
776 | |                                     0 as libc::c_int as libc::c_long
...   |
883 | |                             }
884 | |                         }
    | |_________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
773 ~                         } else if n < 0 as libc::c_int as libc::c_long {
774 +                             if (if (if ((if 1 as libc::c_int != 0 {
775 +                                 0 as libc::c_int as libc::c_long
776 +                             } else {
777 +                                 (if 1 as libc::c_int != 0 {
778 +                                     0 as libc::c_int as libc::c_long
779 +                                 } else {
780 +                                     n
781 +                                 }) + 0 as libc::c_int as idx_t
782 +                             }) - 1 as libc::c_int as libc::c_long)
783 +                                 < 0 as libc::c_int as libc::c_long
784 +                             {
785 +                                 !(((((if 1 as libc::c_int != 0 {
786 +                                     0 as libc::c_int as libc::c_long
787 +                                 } else {
788 +                                     (if 1 as libc::c_int != 0 {
789 +                                         0 as libc::c_int as libc::c_long
790 +                                     } else {
791 +                                         n
792 +                                     }) + 0 as libc::c_int as idx_t
793 +                                 }) + 1 as libc::c_int as libc::c_long)
794 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
795 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
796 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
797 +                                     - 1 as libc::c_int as libc::c_long)
798 +                                     * 2 as libc::c_int as libc::c_long
799 +                                     + 1 as libc::c_int as libc::c_long)
800 +                             } else {
801 +                                 (if 1 as libc::c_int != 0 {
802 +                                     0 as libc::c_int as libc::c_long
803 +                                 } else {
804 +                                     (if 1 as libc::c_int != 0 {
805 +                                         0 as libc::c_int as libc::c_long
806 +                                     } else {
807 +                                         n
808 +                                     }) + 0 as libc::c_int as idx_t
809 +                                 }) + 0 as libc::c_int as libc::c_long
810 +                             }) < 0 as libc::c_int as libc::c_long
811 +                             {
812 +                                 (((if 1 as libc::c_int != 0 {
813 +                                     0 as libc::c_int as libc::c_long
814 +                                 } else {
815 +                                     n
816 +                                 }) + 0 as libc::c_int as idx_t)
817 +                                     < -(if ((if 1 as libc::c_int != 0 {
818 +                                         0 as libc::c_int as libc::c_long
819 +                                     } else {
820 +                                         (if 1 as libc::c_int != 0 {
821 +                                             0 as libc::c_int as libc::c_long
822 +                                         } else {
823 +                                             n
824 +                                         }) + 0 as libc::c_int as idx_t
825 +                                     }) - 1 as libc::c_int as libc::c_long)
826 +                                         < 0 as libc::c_int as libc::c_long
827 +                                     {
828 +                                         ((((if 1 as libc::c_int != 0 {
829 +                                             0 as libc::c_int as libc::c_long
830 +                                         } else {
831 +                                             (if 1 as libc::c_int != 0 {
832 +                                                 0 as libc::c_int as libc::c_long
833 +                                             } else {
834 +                                                 n
835 +                                             }) + 0 as libc::c_int as idx_t
836 +                                         }) + 1 as libc::c_int as libc::c_long)
837 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
838 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
839 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
840 +                                             - 1 as libc::c_int as libc::c_long)
841 +                                             * 2 as libc::c_int as libc::c_long
842 +                                             + 1 as libc::c_int as libc::c_long
843 +                                     } else {
844 +                                         (if 1 as libc::c_int != 0 {
845 +                                             0 as libc::c_int as libc::c_long
846 +                                         } else {
847 +                                             (if 1 as libc::c_int != 0 {
848 +                                                 0 as libc::c_int as libc::c_long
849 +                                             } else {
850 +                                                 n
851 +                                             }) + 0 as libc::c_int as idx_t
852 +                                         }) - 1 as libc::c_int as libc::c_long
853 +                                     })) as libc::c_int
854 +                             } else {
855 +                                 ((0 as libc::c_int as libc::c_long)
856 +                                     < (if 1 as libc::c_int != 0 {
857 +                                         0 as libc::c_int as libc::c_long
858 +                                     } else {
859 +                                         n
860 +                                     }) + 0 as libc::c_int as idx_t) as libc::c_int
861 +                             }) != 0 && n == -(1 as libc::c_int) as libc::c_long
862 +                             {
863 +                                 if ((if 1 as libc::c_int != 0 {
864 +                                     0 as libc::c_int as libc::c_long
865 +                                 } else {
866 +                                     s
867 +                                 }) - 1 as libc::c_int as libc::c_long)
868 +                                     < 0 as libc::c_int as libc::c_long
869 +                                 {
870 +                                     ((0 as libc::c_int as libc::c_long)
871 +                                         < s + 0 as libc::c_int as idx_t) as libc::c_int
872 +                                 } else {
873 +                                     ((-(1 as libc::c_int) as libc::c_long
874 +                                         - 0 as libc::c_int as idx_t)
875 +                                         < s - 1 as libc::c_int as libc::c_long) as libc::c_int
876 +                                 }
877 +                             } else {
878 +                                 (0 as libc::c_int as idx_t / n < s) as libc::c_int
879 +                             }
880 +                         } else {
881 +                             (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
882 +                         }
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:232:16
    |
232 |           } else {
    |  ________________^
233 | |             if scale_factor == 0 as libc::c_int {
234 | |                 0 as libc::c_int
235 | |             } else {
...   |
349 | |             }
350 | |         }) != 0
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
232 ~         } else if scale_factor == 0 as libc::c_int {
233 +             0 as libc::c_int
234 +         } else {
235 +             if *x < 0 as libc::c_int as libc::c_long {
236 +                 if (if (if ((if 1 as libc::c_int != 0 {
237 +                     0 as libc::c_int as libc::c_long
238 +                 } else {
239 +                     (if 1 as libc::c_int != 0 {
240 +                         0 as libc::c_int as libc::c_long
241 +                     } else {
242 +                         *x
243 +                     }) + 0 as libc::c_int as intmax_t
244 +                 }) - 1 as libc::c_int as libc::c_long)
245 +                     < 0 as libc::c_int as libc::c_long
246 +                 {
247 +                     !(((((if 1 as libc::c_int != 0 {
248 +                         0 as libc::c_int as libc::c_long
249 +                     } else {
250 +                         (if 1 as libc::c_int != 0 {
251 +                             0 as libc::c_int as libc::c_long
252 +                         } else {
253 +                             *x
254 +                         }) + 0 as libc::c_int as intmax_t
255 +                     }) + 1 as libc::c_int as libc::c_long)
256 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
257 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
258 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
259 +                         - 1 as libc::c_int as libc::c_long)
260 +                         * 2 as libc::c_int as libc::c_long
261 +                         + 1 as libc::c_int as libc::c_long)
262 +                 } else {
263 +                     (if 1 as libc::c_int != 0 {
264 +                         0 as libc::c_int as libc::c_long
265 +                     } else {
266 +                         (if 1 as libc::c_int != 0 {
267 +                             0 as libc::c_int as libc::c_long
268 +                         } else {
269 +                             *x
270 +                         }) + 0 as libc::c_int as intmax_t
271 +                     }) + 0 as libc::c_int as libc::c_long
272 +                 }) < 0 as libc::c_int as libc::c_long
273 +                 {
274 +                     (((if 1 as libc::c_int != 0 {
275 +                         0 as libc::c_int as libc::c_long
276 +                     } else {
277 +                         *x
278 +                     }) + 0 as libc::c_int as intmax_t)
279 +                         < -(if ((if 1 as libc::c_int != 0 {
280 +                             0 as libc::c_int as libc::c_long
281 +                         } else {
282 +                             (if 1 as libc::c_int != 0 {
283 +                                 0 as libc::c_int as libc::c_long
284 +                             } else {
285 +                                 *x
286 +                             }) + 0 as libc::c_int as intmax_t
287 +                         }) - 1 as libc::c_int as libc::c_long)
288 +                             < 0 as libc::c_int as libc::c_long
289 +                         {
290 +                             ((((if 1 as libc::c_int != 0 {
291 +                                 0 as libc::c_int as libc::c_long
292 +                             } else {
293 +                                 (if 1 as libc::c_int != 0 {
294 +                                     0 as libc::c_int as libc::c_long
295 +                                 } else {
296 +                                     *x
297 +                                 }) + 0 as libc::c_int as intmax_t
298 +                             }) + 1 as libc::c_int as libc::c_long)
299 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
300 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
301 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
302 +                                 - 1 as libc::c_int as libc::c_long)
303 +                                 * 2 as libc::c_int as libc::c_long
304 +                                 + 1 as libc::c_int as libc::c_long
305 +                         } else {
306 +                             (if 1 as libc::c_int != 0 {
307 +                                 0 as libc::c_int as libc::c_long
308 +                             } else {
309 +                                 (if 1 as libc::c_int != 0 {
310 +                                     0 as libc::c_int as libc::c_long
311 +                                 } else {
312 +                                     *x
313 +                                 }) + 0 as libc::c_int as intmax_t
314 +                             }) - 1 as libc::c_int as libc::c_long
315 +                         })) as libc::c_int
316 +                 } else {
317 +                     ((0 as libc::c_int as libc::c_long)
318 +                         < (if 1 as libc::c_int != 0 {
319 +                             0 as libc::c_int as libc::c_long
320 +                         } else {
321 +                             *x
322 +                         }) + 0 as libc::c_int as intmax_t) as libc::c_int
323 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
324 +                 {
325 +                     if ((if 1 as libc::c_int != 0 {
326 +                         0 as libc::c_int
327 +                     } else {
328 +                         scale_factor
329 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
330 +                     {
331 +                         ((0 as libc::c_int as libc::c_long)
332 +                             < scale_factor as libc::c_long
333 +                                 + 0 as libc::c_int as intmax_t) as libc::c_int
334 +                     } else {
335 +                         ((-(1 as libc::c_int) as libc::c_long
336 +                             - 0 as libc::c_int as intmax_t)
337 +                             < (scale_factor - 1 as libc::c_int) as libc::c_long)
338 +                             as libc::c_int
339 +                     }
340 +                 } else {
341 +                     (0 as libc::c_int as intmax_t / *x
342 +                         < scale_factor as libc::c_long) as libc::c_int
343 +                 }
344 +             } else {
345 +                 ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
346 +                     < *x) as libc::c_int
347 +             }
348 ~         }) != 0
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:126:20
    |
126 |               } else {
    |  ____________________^
127 | |                 if (if (if ((if 1 as libc::c_int != 0 {
128 | |                     0 as libc::c_int as libc::c_long
129 | |                 } else {
...   |
230 | |                 }
231 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
126 ~             } else if (if (if ((if 1 as libc::c_int != 0 {
127 +                 0 as libc::c_int as libc::c_long
128 +             } else {
129 +                 (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
130 +                     as libc::c_long + 0 as libc::c_int as intmax_t
131 +             }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
132 +             {
133 +                 !(((((if 1 as libc::c_int != 0 {
134 +                     0 as libc::c_int as libc::c_long
135 +                 } else {
136 +                     (if 1 as libc::c_int != 0 {
137 +                         0 as libc::c_int
138 +                     } else {
139 +                         scale_factor
140 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t
141 +                 }) + 1 as libc::c_int as libc::c_long)
142 +                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
143 +                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
144 +                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
145 +                     - 1 as libc::c_int as libc::c_long)
146 +                     * 2 as libc::c_int as libc::c_long
147 +                     + 1 as libc::c_int as libc::c_long)
148 +             } else {
149 +                 (if 1 as libc::c_int != 0 {
150 +                     0 as libc::c_int as libc::c_long
151 +                 } else {
152 +                     (if 1 as libc::c_int != 0 {
153 +                         0 as libc::c_int
154 +                     } else {
155 +                         scale_factor
156 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t
157 +                 }) + 0 as libc::c_int as libc::c_long
158 +             }) < 0 as libc::c_int as libc::c_long
159 +             {
160 +                 (((if 1 as libc::c_int != 0 {
161 +                     0 as libc::c_int
162 +                 } else {
163 +                     scale_factor
164 +                 }) as libc::c_long + 0 as libc::c_int as intmax_t)
165 +                     < -(if ((if 1 as libc::c_int != 0 {
166 +                         0 as libc::c_int as libc::c_long
167 +                     } else {
168 +                         (if 1 as libc::c_int != 0 {
169 +                             0 as libc::c_int
170 +                         } else {
171 +                             scale_factor
172 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t
173 +                     }) - 1 as libc::c_int as libc::c_long)
174 +                         < 0 as libc::c_int as libc::c_long
175 +                     {
176 +                         ((((if 1 as libc::c_int != 0 {
177 +                             0 as libc::c_int as libc::c_long
178 +                         } else {
179 +                             (if 1 as libc::c_int != 0 {
180 +                                 0 as libc::c_int
181 +                             } else {
182 +                                 scale_factor
183 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
184 +                         }) + 1 as libc::c_int as libc::c_long)
185 +                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
186 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
187 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
188 +                             - 1 as libc::c_int as libc::c_long)
189 +                             * 2 as libc::c_int as libc::c_long
190 +                             + 1 as libc::c_int as libc::c_long
191 +                     } else {
192 +                         (if 1 as libc::c_int != 0 {
193 +                             0 as libc::c_int as libc::c_long
194 +                         } else {
195 +                             (if 1 as libc::c_int != 0 {
196 +                                 0 as libc::c_int
197 +                             } else {
198 +                                 scale_factor
199 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
200 +                         }) - 1 as libc::c_int as libc::c_long
201 +                     })) as libc::c_int
202 +             } else {
203 +                 ((0 as libc::c_int as libc::c_long)
204 +                     < (if 1 as libc::c_int != 0 {
205 +                         0 as libc::c_int
206 +                     } else {
207 +                         scale_factor
208 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
209 +             }) != 0 && scale_factor == -(1 as libc::c_int)
210 +             {
211 +                 if ((if 1 as libc::c_int != 0 {
212 +                     0 as libc::c_int as libc::c_long
213 +                 } else {
214 +                     *x
215 +                 }) - 1 as libc::c_int as libc::c_long)
216 +                     < 0 as libc::c_int as libc::c_long
217 +                 {
218 +                     ((0 as libc::c_int as libc::c_long)
219 +                         < *x + 0 as libc::c_int as intmax_t) as libc::c_int
220 +                 } else {
221 +                     ((0 as libc::c_int as libc::c_long) < *x
222 +                         && (-(1 as libc::c_int) as libc::c_long
223 +                             - 0 as libc::c_int as intmax_t)
224 +                             < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
225 +                 }
226 +             } else {
227 +                 ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
228 +                     as libc::c_int
229 +             }
    |

warning: operator precedence can trip the unwary
   --> src/xstrtoimax.rs:114:25
    |
114 | /                         (if 1 as libc::c_int != 0 {
115 | |                             0 as libc::c_int
116 | |                         } else {
117 | |                             scale_factor
...   |
120 | |                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
121 | |                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
    |
114 ~                         ((if 1 as libc::c_int != 0 {
115 +                             0 as libc::c_int
116 +                         } else {
117 +                             scale_factor
118 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
119 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
120 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |

warning: this `else { if .. }` block can be collapsed
   --> src/xstrtoimax.rs:235:20
    |
235 |               } else {
    |  ____________________^
236 | |                 if *x < 0 as libc::c_int as libc::c_long {
237 | |                     if (if (if ((if 1 as libc::c_int != 0 {
238 | |                         0 as libc::c_int as libc::c_long
...   |
348 | |                 }
349 | |             }
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
    |
235 ~             } else if *x < 0 as libc::c_int as libc::c_long {
236 +                 if (if (if ((if 1 as libc::c_int != 0 {
237 +                     0 as libc::c_int as libc::c_long
238 +                 } else {
239 +                     (if 1 as libc::c_int != 0 {
240 +                         0 as libc::c_int as libc::c_long
241 +                     } else {
242 +                         *x
243 +                     }) + 0 as libc::c_int as intmax_t
244 +                 }) - 1 as libc::c_int as libc::c_long)
245 +                     < 0 as libc::c_int as libc::c_long
246 +                 {
247 +                     !(((((if 1 as libc::c_int != 0 {
248 +                         0 as libc::c_int as libc::c_long
249 +                     } else {
250 +                         (if 1 as libc::c_int != 0 {
251 +                             0 as libc::c_int as libc::c_long
252 +                         } else {
253 +                             *x
254 +                         }) + 0 as libc::c_int as intmax_t
255 +                     }) + 1 as libc::c_int as libc::c_long)
256 +                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
257 +                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
258 +                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
259 +                         - 1 as libc::c_int as libc::c_long)
260 +                         * 2 as libc::c_int as libc::c_long
261 +                         + 1 as libc::c_int as libc::c_long)
262 +                 } else {
263 +                     (if 1 as libc::c_int != 0 {
264 +                         0 as libc::c_int as libc::c_long
265 +                     } else {
266 +                         (if 1 as libc::c_int != 0 {
267 +                             0 as libc::c_int as libc::c_long
268 +                         } else {
269 +                             *x
270 +                         }) + 0 as libc::c_int as intmax_t
271 +                     }) + 0 as libc::c_int as libc::c_long
272 +                 }) < 0 as libc::c_int as libc::c_long
273 +                 {
274 +                     (((if 1 as libc::c_int != 0 {
275 +                         0 as libc::c_int as libc::c_long
276 +                     } else {
277 +                         *x
278 +                     }) + 0 as libc::c_int as intmax_t)
279 +                         < -(if ((if 1 as libc::c_int != 0 {
280 +                             0 as libc::c_int as libc::c_long
281 +                         } else {
282 +                             (if 1 as libc::c_int != 0 {
283 +                                 0 as libc::c_int as libc::c_long
284 +                             } else {
285 +                                 *x
286 +                             }) + 0 as libc::c_int as intmax_t
287 +                         }) - 1 as libc::c_int as libc::c_long)
288 +                             < 0 as libc::c_int as libc::c_long
289 +                         {
290 +                             ((((if 1 as libc::c_int != 0 {
291 +                                 0 as libc::c_int as libc::c_long
292 +                             } else {
293 +                                 (if 1 as libc::c_int != 0 {
294 +                                     0 as libc::c_int as libc::c_long
295 +                                 } else {
296 +                                     *x
297 +                                 }) + 0 as libc::c_int as intmax_t
298 +                             }) + 1 as libc::c_int as libc::c_long)
299 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
300 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
301 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
302 +                                 - 1 as libc::c_int as libc::c_long)
303 +                                 * 2 as libc::c_int as libc::c_long
304 +                                 + 1 as libc::c_int as libc::c_long
305 +                         } else {
306 +                             (if 1 as libc::c_int != 0 {
307 +                                 0 as libc::c_int as libc::c_long
308 +                             } else {
309 +                                 (if 1 as libc::c_int != 0 {
310 +                                     0 as libc::c_int as libc::c_long
311 +                                 } else {
312 +                                     *x
313 +                                 }) + 0 as libc::c_int as intmax_t
314 +                             }) - 1 as libc::c_int as libc::c_long
315 +                         })) as libc::c_int
316 +                 } else {
317 +                     ((0 as libc::c_int as libc::c_long)
318 +                         < (if 1 as libc::c_int != 0 {
319 +                             0 as libc::c_int as libc::c_long
320 +                         } else {
321 +                             *x
322 +                         }) + 0 as libc::c_int as intmax_t) as libc::c_int
323 +                 }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
324 +                 {
325 +                     if ((if 1 as libc::c_int != 0 {
326 +                         0 as libc::c_int
327 +                     } else {
328 +                         scale_factor
329 +                     }) - 1 as libc::c_int) < 0 as libc::c_int
330 +                     {
331 +                         ((0 as libc::c_int as libc::c_long)
332 +                             < scale_factor as libc::c_long
333 +                                 + 0 as libc::c_int as intmax_t) as libc::c_int
334 +                     } else {
335 +                         ((-(1 as libc::c_int) as libc::c_long
336 +                             - 0 as libc::c_int as intmax_t)
337 +                             < (scale_factor - 1 as libc::c_int) as libc::c_long)
338 +                             as libc::c_int
339 +                     }
340 +                 } else {
341 +                     (0 as libc::c_int as intmax_t / *x
342 +                         < scale_factor as libc::c_long) as libc::c_int
343 +                 }
344 +             } else {
345 +                 ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
346 +                     < *x) as libc::c_int
347 +             }
    |

warning: unnecessary `unsafe` block
  --> src/argmatch.rs:94:49
   |
94 | pub static mut argmatch_die: argmatch_exit_fn = unsafe {
   |                                                 ^^^^^^ unnecessary `unsafe` block
   |
   = note: `#[warn(unused_unsafe)]` on by default

warning: unnecessary structure name repetition
  --> src/argmatch.rs:58:22
   |
58 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = note: `-W clippy::use-self` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/argmatch.rs:69:29
   |
69 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: item name starts with its containing module's name
  --> src/argmatch.rs:77:1
   |
77 | pub type argmatch_exit_fn = Option::<unsafe extern "C" fn() -> ()>;
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = note: `-W clippy::module-name-repetitions` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: item name starts with its containing module's name
  --> src/argmatch.rs:94:1
   |
94 | / pub static mut argmatch_die: argmatch_exit_fn = unsafe {
95 | |     Some(__argmatch_die as unsafe extern "C" fn() -> ())
96 | | };
   | |__^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:98:1
    |
98  | / pub unsafe extern "C" fn argmatch(
99  | |     mut arg: *const libc::c_char,
100 | |     mut arglist: *const *const libc::c_char,
101 | |     mut vallist: *const libc::c_void,
...   |
132 | |     if ambiguous { return -(2 as libc::c_int) as ptrdiff_t } else { return matchind };
133 | | }
    | |_^
    |
    = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/argmatch.rs:132:20
    |
132 |     if ambiguous { return -(2 as libc::c_int) as ptrdiff_t } else { return matchind };
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `-(2 as libc::c_int) as ptrdiff_t`
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/argmatch.rs:132:69
    |
132 |     if ambiguous { return -(2 as libc::c_int) as ptrdiff_t } else { return matchind };
    |                                                                     ^^^^^^^^^^^^^^^ help: remove `return`: `matchind`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:106:35
    |
106 |     let mut matchind: ptrdiff_t = -(1 as libc::c_int) as ptrdiff_t;
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:109:9
    |
109 |     i = 0 as libc::c_int as size_t;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:110:29
    |
110 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:110:29
    |
110 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:111:36
    |
111 |         if strncmp(*arglist.offset(i as isize), arg, arglen) == 0 {
    |                                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:111:36
    |
111 |         if strncmp(*arglist.offset(i as isize), arg, arglen) == 0 {
    |                                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:112:39
    |
112 |             if strlen(*arglist.offset(i as isize)) == arglen {
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:112:39
    |
112 |             if strlen(*arglist.offset(i as isize)) == arglen {
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
   --> src/argmatch.rs:113:24
    |
113 |                 return i as ptrdiff_t
    |                        ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:114:35
    |
114 |             } else if matchind == -(1 as libc::c_int) as libc::c_long {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
   --> src/argmatch.rs:115:28
    |
115 |                 matchind = i as ptrdiff_t;
    |                            ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:118:21
    |
118 | /                     (vallist as *const libc::c_char)
119 | |                         .offset(valsize.wrapping_mul(matchind as libc::c_ulong) as isize)
120 | |                         as *const libc::c_void,
    | |______________________________________________^
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
118 ~                     (vallist as *const libc::c_char)
119 ~                         .offset(valsize.wrapping_mul(matchind as libc::c_ulong) as isize).cast::<libc::c_void>(),
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:118:21
    |
118 |                     (vallist as *const libc::c_char)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:119:33
    |
119 |                         .offset(valsize.wrapping_mul(matchind as libc::c_ulong) as isize)
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:119:33
    |
119 |                         .offset(valsize.wrapping_mul(matchind as libc::c_ulong) as isize)
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/argmatch.rs:119:54
    |
119 |                         .offset(valsize.wrapping_mul(matchind as libc::c_ulong) as isize)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:121:21
    |
121 | /                     (vallist as *const libc::c_char)
122 | |                         .offset(valsize.wrapping_mul(i) as isize) as *const libc::c_void,
    | |________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
121 ~                     (vallist as *const libc::c_char)
122 ~                         .offset(valsize.wrapping_mul(i) as isize).cast::<libc::c_void>(),
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:121:21
    |
121 |                     (vallist as *const libc::c_char)
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:122:33
    |
122 |                         .offset(valsize.wrapping_mul(i) as isize) as *const libc::c_void,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:122:33
    |
122 |                         .offset(valsize.wrapping_mul(i) as isize) as *const libc::c_void,
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/argmatch.rs:130:9
    |
130 |         i;
    |         ^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:132:27
    |
132 |     if ambiguous { return -(2 as libc::c_int) as ptrdiff_t } else { return matchind };
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(2 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:135:1
    |
135 | / pub unsafe extern "C" fn argmatch_exact(
136 | |     mut arg: *const libc::c_char,
137 | |     mut arglist: *const *const libc::c_char,
138 | | ) -> ptrdiff_t {
...   |
148 | |     return -(1 as libc::c_int) as ptrdiff_t;
149 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/argmatch.rs:135:1
    |
135 | / pub unsafe extern "C" fn argmatch_exact(
136 | |     mut arg: *const libc::c_char,
137 | |     mut arglist: *const *const libc::c_char,
138 | | ) -> ptrdiff_t {
...   |
148 | |     return -(1 as libc::c_int) as ptrdiff_t;
149 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/argmatch.rs:148:5
    |
148 |     return -(1 as libc::c_int) as ptrdiff_t;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `-(1 as libc::c_int) as ptrdiff_t`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:140:9
    |
140 |     i = 0 as libc::c_int as size_t;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:141:29
    |
141 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:141:29
    |
141 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:142:35
    |
142 |         if strcmp(*arglist.offset(i as isize), arg) == 0 {
    |                                   ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:142:35
    |
142 |         if strcmp(*arglist.offset(i as isize), arg) == 0 {
    |                                   ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `i64` may wrap around the value
   --> src/argmatch.rs:143:20
    |
143 |             return i as ptrdiff_t;
    |                    ^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/argmatch.rs:146:9
    |
146 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:148:12
    |
148 |     return -(1 as libc::c_int) as ptrdiff_t;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:151:1
    |
151 | / pub unsafe extern "C" fn argmatch_invalid(
152 | |     mut context: *const libc::c_char,
153 | |     mut value: *const libc::c_char,
154 | |     mut problem: ptrdiff_t,
...   |
203 | |     };
204 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/argmatch.rs:151:1
    |
151 | / pub unsafe extern "C" fn argmatch_invalid(
152 | |     mut context: *const libc::c_char,
153 | |     mut value: *const libc::c_char,
154 | |     mut problem: ptrdiff_t,
...   |
203 | |     };
204 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:157:12
    |
157 |         == -(1 as libc::c_int) as libc::c_long
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:159:17
    |
159 |         gettext(b"invalid argument %s for %s\0" as *const u8 as *const libc::c_char)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"invalid argument %s for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:161:17
    |
161 |         gettext(b"ambiguous argument %s for %s\0" as *const u8 as *const libc::c_char)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ambiguous argument %s for %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/argmatch.rs:163:5
    |
163 | /     if 0 != 0 {
164 | |         error(
165 | |             0 as libc::c_int,
166 | |             0 as libc::c_int,
...   |
202 | |         });
203 | |     };
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/argmatch.rs:163:8
    |
163 |     if 0 != 0 {
    |        ^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: unnecessary `!=` operation
   --> src/argmatch.rs:171:9
    |
171 | /         if 0 as libc::c_int != 0 as libc::c_int {
172 | |             unreachable!();
173 | |         } else {};
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/argmatch.rs:171:12
    |
171 |         if 0 as libc::c_int != 0 as libc::c_int {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/argmatch.rs:176:13
    |
176 |             let __errstatus: libc::c_int = 0 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: unnecessary `!=` operation
   --> src/argmatch.rs:184:13
    |
184 | /             if __errstatus != 0 as libc::c_int {
185 | |                 unreachable!();
186 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/argmatch.rs:190:13
    |
190 |             let __errstatus: libc::c_int = 0 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: unnecessary `!=` operation
   --> src/argmatch.rs:198:13
    |
198 | /             if __errstatus != 0 as libc::c_int {
199 | |                 unreachable!();
200 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:206:1
    |
206 | / pub unsafe extern "C" fn argmatch_valid(
207 | |     mut arglist: *const *const libc::c_char,
208 | |     mut vallist: *const libc::c_void,
209 | |     mut valsize: size_t,
...   |
244 | |     putc_unlocked('\n' as i32, stderr);
245 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/argmatch.rs:206:1
    |
206 | / pub unsafe extern "C" fn argmatch_valid(
207 | |     mut arglist: *const *const libc::c_char,
208 | |     mut vallist: *const libc::c_void,
209 | |     mut valsize: size_t,
...   |
244 | |     putc_unlocked('\n' as i32, stderr);
245 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/argmatch.rs:212:45
    |
212 |     let mut last_val: *const libc::c_char = 0 as *const libc::c_char;
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:214:17
    |
214 |         gettext(b"Valid arguments are:\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Valid arguments are:\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:217:9
    |
217 |     i = 0 as libc::c_int as size_t;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:218:29
    |
218 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:218:29
    |
218 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:219:17
    |
219 |         if i == 0 as libc::c_int as libc::c_ulong
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:221:17
    |
221 |                 last_val as *const libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `last_val.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:222:17
    |
222 | /                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
223 | |                     as *const libc::c_void,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:222:17
    |
222 |                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:222:57
    |
222 |                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:222:57
    |
222 |                 (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:229:17
    |
229 |                 b"\n  - %s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n  - %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:230:39
    |
230 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:230:39
    |
230 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:232:24
    |
232 |             last_val = (vallist as *const libc::c_char)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:233:25
    |
233 |                 .offset(valsize.wrapping_mul(i) as isize);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:233:25
    |
233 |                 .offset(valsize.wrapping_mul(i) as isize);
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:237:17
    |
237 |                 b", %s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b", %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:238:39
    |
238 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:238:39
    |
238 |                 quote(*arglist.offset(i as isize)),
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/argmatch.rs:242:9
    |
242 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:247:1
    |
247 | / pub unsafe extern "C" fn __xargmatch_internal(
248 | |     mut context: *const libc::c_char,
249 | |     mut arg: *const libc::c_char,
250 | |     mut arglist: *const *const libc::c_char,
...   |
269 | |     return -(1 as libc::c_int) as ptrdiff_t;
270 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/argmatch.rs:269:5
    |
269 |     return -(1 as libc::c_int) as ptrdiff_t;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `-(1 as libc::c_int) as ptrdiff_t`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `if _ { .. } else { .. }` is an expression
   --> src/argmatch.rs:256:5
    |
256 | /     let mut res: ptrdiff_t = 0;
257 | |     if allow_abbreviation {
258 | |         res = argmatch(arg, arglist, vallist, valsize);
259 | |     } else {
260 | |         res = argmatch_exact(arg, arglist);
261 | |     }
    | |_____^ help: it is more idiomatic to write: `let <mut> res = if allow_abbreviation { argmatch(arg, arglist, vallist, valsize) } else { argmatch_exact(arg, arglist) };`
    |
    = note: `-W clippy::useless-let-if-seq` implied by `-W clippy::nursery`
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:262:15
    |
262 |     if res >= 0 as libc::c_int as libc::c_long {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/argmatch.rs:269:12
    |
269 |     return -(1 as libc::c_int) as ptrdiff_t;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/argmatch.rs:272:1
    |
272 | / pub unsafe extern "C" fn argmatch_to_argument(
273 | |     mut value: *const libc::c_void,
274 | |     mut arglist: *const *const libc::c_char,
275 | |     mut vallist: *const libc::c_void,
...   |
293 | |     return 0 as *const libc::c_char;
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/argmatch.rs:272:1
    |
272 | / pub unsafe extern "C" fn argmatch_to_argument(
273 | |     mut value: *const libc::c_void,
274 | |     mut arglist: *const *const libc::c_char,
275 | |     mut vallist: *const libc::c_void,
...   |
293 | |     return 0 as *const libc::c_char;
294 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/argmatch.rs:293:5
    |
293 |     return 0 as *const libc::c_char;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *const libc::c_char`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/argmatch.rs:279:9
    |
279 |     i = 0 as libc::c_int as size_t;
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:280:29
    |
280 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:280:29
    |
280 |     while !(*arglist.offset(i as isize)).is_null() {
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:283:13
    |
283 | /             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
284 | |                 as *const libc::c_void,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/argmatch.rs:283:13
    |
283 |             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vallist.cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:283:53
    |
283 |             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:283:53
    |
283 |             (vallist as *const libc::c_char).offset(valsize.wrapping_mul(i) as isize)
    |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/argmatch.rs:288:36
    |
288 |             return *arglist.offset(i as isize);
    |                                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/argmatch.rs:288:36
    |
288 |             return *arglist.offset(i as isize);
    |                                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/argmatch.rs:291:9
    |
291 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `0 as *const _` detected
   --> src/argmatch.rs:293:12
    |
293 |     return 0 as *const libc::c_char;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:5:1
   |
5  | / pub unsafe extern "C" fn c_isalnum(mut c: libc::c_int) -> bool {
6  | |     match c {
7  | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
8  | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
13 | |     };
14 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:5:1
   |
5  | / pub unsafe extern "C" fn c_isalnum(mut c: libc::c_int) -> bool {
6  | |     match c {
7  | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
8  | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
13 | |     };
14 | | }
   | |_^
   |
   = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:11:22
   |
11 |         | 89 | 90 => return 1 as libc::c_int != 0,
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:12:14
   |
12 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:18:1
   |
18 | / pub unsafe extern "C" fn c_isalpha(mut c: libc::c_int) -> bool {
19 | |     match c {
20 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
21 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 65 | 66
...  |
25 | |     };
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:18:1
   |
18 | / pub unsafe extern "C" fn c_isalpha(mut c: libc::c_int) -> bool {
19 | |     match c {
20 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
21 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 | 65 | 66
...  |
25 | |     };
26 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:23:52
   |
23 |         | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:24:14
   |
24 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:30:1
   |
30 | / pub unsafe extern "C" fn c_isascii(mut c: libc::c_int) -> bool {
31 | |     match c {
32 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
33 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
...  |
42 | |     };
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:30:1
   |
30 | / pub unsafe extern "C" fn c_isascii(mut c: libc::c_int) -> bool {
31 | |     match c {
32 | |         32 | 7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16
33 | |         | 17 | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127
...  |
42 | |     };
43 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:40:37
   |
40 |         | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:41:14
   |
41 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:47:1
   |
47 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
48 | |     return c == ' ' as i32 || c == '\t' as i32;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:47:1
   |
47 | / pub unsafe extern "C" fn c_isblank(mut c: libc::c_int) -> bool {
48 | |     return c == ' ' as i32 || c == '\t' as i32;
49 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:48:5
   |
48 |     return c == ' ' as i32 || c == '\t' as i32;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c == ' ' as i32 || c == '\t' as i32`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:53:1
   |
53 | / pub unsafe extern "C" fn c_iscntrl(mut c: libc::c_int) -> bool {
54 | |     match c {
55 | |         7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16 | 17
56 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => {
...  |
60 | |     };
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:53:1
   |
53 | / pub unsafe extern "C" fn c_iscntrl(mut c: libc::c_int) -> bool {
54 | |     match c {
55 | |         7 | 8 | 12 | 10 | 13 | 9 | 11 | 0 | 1 | 2 | 3 | 4 | 5 | 6 | 14 | 15 | 16 | 17
56 | |         | 18 | 19 | 20 | 21 | 22 | 23 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 127 => {
...  |
60 | |     };
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:57:13
   |
57 |             return 1 as libc::c_int != 0;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:59:14
   |
59 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:65:1
   |
65 | / pub unsafe extern "C" fn c_isdigit(mut c: libc::c_int) -> bool {
66 | |     match c {
67 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
68 | |         _ => return 0 as libc::c_int != 0,
69 | |     };
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:65:1
   |
65 | / pub unsafe extern "C" fn c_isdigit(mut c: libc::c_int) -> bool {
66 | |     match c {
67 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
68 | |         _ => return 0 as libc::c_int != 0,
69 | |     };
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:67:60
   |
67 |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 => return 1 as libc::c_int != 0,
   |                                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:68:14
   |
68 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:74:1
   |
74 | / pub unsafe extern "C" fn c_isgraph(mut c: libc::c_int) -> bool {
75 | |     match c {
76 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
77 | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
84 | |     };
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:74:1
   |
74 | / pub unsafe extern "C" fn c_isgraph(mut c: libc::c_int) -> bool {
75 | |     match c {
76 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
77 | |         | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114 | 115
...  |
84 | |     };
85 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:82:27
   |
82 |         | 88 | 89 | 90 => return 1 as libc::c_int != 0,
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:83:14
   |
83 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_ctype.rs:89:1
   |
89 | / pub unsafe extern "C" fn c_islower(mut c: libc::c_int) -> bool {
90 | |     match c {
91 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
92 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...  |
96 | |     };
97 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
  --> src/c_ctype.rs:89:1
   |
89 | / pub unsafe extern "C" fn c_islower(mut c: libc::c_int) -> bool {
90 | |     match c {
91 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
92 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...  |
96 | |     };
97 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
  --> src/c_ctype.rs:93:13
   |
93 |             return 1 as libc::c_int != 0;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_ctype.rs:95:14
   |
95 |         _ => return 0 as libc::c_int != 0,
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:101:1
    |
101 | / pub unsafe extern "C" fn c_isprint(mut c: libc::c_int) -> bool {
102 | |     match c {
103 | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
104 | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
...   |
111 | |     };
112 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:101:1
    |
101 | / pub unsafe extern "C" fn c_isprint(mut c: libc::c_int) -> bool {
102 | |     match c {
103 | |         32 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101
104 | |         | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110 | 111 | 112 | 113 | 114
...   |
111 | |     };
112 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:109:37
    |
109 |         | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:110:14
    |
110 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:116:1
    |
116 | / pub unsafe extern "C" fn c_ispunct(mut c: libc::c_int) -> bool {
117 | |     match c {
118 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
119 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
122 | |     };
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:116:1
    |
116 | / pub unsafe extern "C" fn c_ispunct(mut c: libc::c_int) -> bool {
117 | |     match c {
118 | |         33 | 34 | 35 | 36 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 58
119 | |         | 59 | 60 | 61 | 62 | 63 | 64 | 91 | 92 | 93 | 94 | 95 | 96 | 123 | 124 | 125
...   |
122 | |     };
123 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:120:18
    |
120 |         | 126 => return 1 as libc::c_int != 0,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:121:14
    |
121 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:127:1
    |
127 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
128 | |     match c {
129 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
130 | |         _ => return 0 as libc::c_int != 0,
131 | |     };
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:127:1
    |
127 | / pub unsafe extern "C" fn c_isspace(mut c: libc::c_int) -> bool {
128 | |     match c {
129 | |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
130 | |         _ => return 0 as libc::c_int != 0,
131 | |     };
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:129:39
    |
129 |         32 | 9 | 10 | 11 | 12 | 13 => return 1 as libc::c_int != 0,
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:130:14
    |
130 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:136:1
    |
136 | / pub unsafe extern "C" fn c_isupper(mut c: libc::c_int) -> bool {
137 | |     match c {
138 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
139 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
140 | |         _ => return 0 as libc::c_int != 0,
141 | |     };
142 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:136:1
    |
136 | / pub unsafe extern "C" fn c_isupper(mut c: libc::c_int) -> bool {
137 | |     match c {
138 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
139 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
140 | |         _ => return 0 as libc::c_int != 0,
141 | |     };
142 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:139:62
    |
139 |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => return 1 as libc::c_int != 0,
    |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:140:14
    |
140 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:146:1
    |
146 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
147 | |     match c {
148 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
149 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
150 | |         _ => return 0 as libc::c_int != 0,
151 | |     };
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:146:1
    |
146 | / pub unsafe extern "C" fn c_isxdigit(mut c: libc::c_int) -> bool {
147 | |     match c {
148 | |         48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 97 | 98 | 99 | 100 | 101 | 102
149 | |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
150 | |         _ => return 0 as libc::c_int != 0,
151 | |     };
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:149:42
    |
149 |         | 65 | 66 | 67 | 68 | 69 | 70 => return 1 as libc::c_int != 0,
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:150:14
    |
150 |         _ => return 0 as libc::c_int != 0,
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:156:1
    |
156 | / pub unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
157 | |     match c {
158 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
159 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...   |
163 | |     };
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:156:1
    |
156 | / pub unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
157 | |     match c {
158 | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
159 | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...   |
163 | |     };
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:160:13
    |
160 |             return c - 'A' as i32 + 'a' as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'A' as i32 + 'a' as i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:162:14
    |
162 |         _ => return c,
    |              ^^^^^^^^ help: remove `return`: `c`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/c_ctype.rs:168:1
    |
168 | / pub unsafe extern "C" fn c_toupper(mut c: libc::c_int) -> libc::c_int {
169 | |     match c {
170 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
171 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this could be a `const fn`
   --> src/c_ctype.rs:168:1
    |
168 | / pub unsafe extern "C" fn c_toupper(mut c: libc::c_int) -> libc::c_int {
169 | |     match c {
170 | |         97 | 98 | 99 | 100 | 101 | 102 | 103 | 104 | 105 | 106 | 107 | 108 | 109 | 110
171 | |         | 111 | 112 | 113 | 114 | 115 | 116 | 117 | 118 | 119 | 120 | 121 | 122 => {
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/c_ctype.rs:172:13
    |
172 |             return c - 'a' as i32 + 'A' as i32;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'a' as i32 + 'A' as i32`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/c_ctype.rs:174:14
    |
174 |         _ => return c,
    |              ^^^^^^^^ help: remove `return`: `c`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: this could be a `const fn`
  --> src/c_strcasecmp.rs:3:1
   |
3  | / unsafe extern "C" fn c_tolower(mut c: libc::c_int) -> libc::c_int {
4  | |     match c {
5  | |         65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80
6  | |         | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 => {
...  |
10 | |     };
11 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
 --> src/c_strcasecmp.rs:7:13
  |
7 |             return c - 'A' as i32 + 'a' as i32;
  |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c - 'A' as i32 + 'a' as i32`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
 --> src/c_strcasecmp.rs:9:14
  |
9 |         _ => return c,
  |              ^^^^^^^^ help: remove `return`: `c`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/c_strcasecmp.rs:13:1
   |
13 | / pub unsafe extern "C" fn c_strcasecmp(
14 | |     mut s1: *const libc::c_char,
15 | |     mut s2: *const libc::c_char,
16 | | ) -> libc::c_int {
...  |
45 | |     };
46 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
  --> src/c_strcasecmp.rs:34:12
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `c1 as libc::c_int != c2 as libc::c_int`
   |
   = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/c_strcasecmp.rs:41:9
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `c1 as libc::c_int - c2 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/c_strcasecmp.rs:43:9
   |
43 | /         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 | |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   | |______________________________________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
43 ~         (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
44 +             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/c_strcasecmp.rs:17:40
   |
17 |     let mut p1: *const libc::c_uchar = s1 as *const libc::c_uchar;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `s1.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/c_strcasecmp.rs:18:40
   |
18 |     let mut p2: *const libc::c_uchar = s2 as *const libc::c_uchar;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `s2.cast::<u8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u8` may truncate the value
  --> src/c_strcasecmp.rs:25:14
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
  --> src/c_strcasecmp.rs:25:14
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:25:24
   |
25 |         c1 = c_tolower(*p1 as libc::c_int) as libc::c_uchar;
   |                        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u8` may truncate the value
  --> src/c_strcasecmp.rs:26:14
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
  --> src/c_strcasecmp.rs:26:14
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:26:24
   |
26 |         c2 = c_tolower(*p2 as libc::c_int) as libc::c_uchar;
   |                        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:27:12
   |
27 |         if c1 as libc::c_int == '\0' as i32 {
   |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/c_strcasecmp.rs:31:9
   |
31 |         p1;
   |         ^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
  --> src/c_strcasecmp.rs:33:9
   |
33 |         p2;
   |         ^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:34:14
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |              ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:34:35
   |
34 |         if !(c1 as libc::c_int == c2 as libc::c_int) {
   |                                   ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:41:16
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |                ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:41:36
   |
41 |         return c1 as libc::c_int - c2 as libc::c_int
   |                                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/c_strcasecmp.rs:43:16
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1 as libc::c_int > c2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:43:17
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                 ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:43:37
   |
43 |         return (c1 as libc::c_int > c2 as libc::c_int) as libc::c_int
   |                                     ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/c_strcasecmp.rs:44:15
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((c1 as libc::c_int) < c2 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:44:16
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |                ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/c_strcasecmp.rs:44:38
   |
44 |             - ((c1 as libc::c_int) < c2 as libc::c_int) as libc::c_int
   |                                      ^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/close_stream.rs:30:22
   |
30 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/close_stream.rs:41:29
   |
41 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/close_stream.rs:50:1
   |
50 | / pub unsafe extern "C" fn close_stream(mut stream: *mut FILE) -> libc::c_int {
51 | |     let some_pending: bool = __fpending(stream) != 0 as libc::c_int as libc::c_ulong;
52 | |     let prev_fail: bool = ferror_unlocked(stream) != 0 as libc::c_int;
53 | |     let fclose_fail: bool = rpl_fclose(stream) != 0 as libc::c_int;
...  |
64 | |     return 0 as libc::c_int;
65 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/close_stream.rs:64:5
   |
64 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/close_stream.rs:51:52
   |
51 |     let some_pending: bool = __fpending(stream) != 0 as libc::c_int as libc::c_ulong;
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:54:8
   |
54 |     if prev_fail as libc::c_int != 0
   |        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(prev_fail)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:55:12
   |
55 |         || fclose_fail as libc::c_int != 0
   |            ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fclose_fail)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/close_stream.rs:56:17
   |
56 |             && (some_pending as libc::c_int != 0
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(some_pending)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/closeout.rs:38:22
   |
38 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/closeout.rs:49:29
   |
49 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:63:1
   |
63 | / pub unsafe extern "C" fn close_stdout_set_file_name(mut file: *const libc::c_char) {
64 | |     file_name = file;
65 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
  --> src/closeout.rs:68:1
   |
68 | / pub unsafe extern "C" fn close_stdout_set_ignore_EPIPE(mut ignore: bool) {
69 | |     ignore_EPIPE = ignore;
70 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/closeout.rs:72:1
    |
72  | / pub unsafe extern "C" fn close_stdout() {
73  | |     if close_stream(stdout) != 0 as libc::c_int
74  | |         && !(ignore_EPIPE as libc::c_int != 0
75  | |             && *__errno_location() == 32 as libc::c_int)
...   |
166 | |     }
167 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/closeout.rs:74:14
   |
74 |         && !(ignore_EPIPE as libc::c_int != 0
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(ignore_EPIPE)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:78:13
   |
78 |             b"write error\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
   --> src/closeout.rs:80:9
    |
80  | /         if !file_name.is_null() {
81  | |             if 0 != 0 {
82  | |                 error(
83  | |                     0 as libc::c_int,
...   |
160 | |             };
161 | |         }
    | |_________^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:81:13
    |
81  | /             if 0 != 0 {
82  | |                 error(
83  | |                     0 as libc::c_int,
84  | |                     *__errno_location(),
...   |
120 | |                 });
121 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:81:16
   |
81 |             if 0 != 0 {
   |                ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:85:21
   |
85 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/closeout.rs:89:17
   |
89 | /                 if 0 as libc::c_int != 0 as libc::c_int {
90 | |                     unreachable!();
91 | |                 } else {};
   | |_________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/closeout.rs:89:20
   |
89 |                 if 0 as libc::c_int != 0 as libc::c_int {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
  --> src/closeout.rs:94:21
   |
94 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/closeout.rs:98:25
   |
98 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:102:21
    |
102 | /                     if __errstatus != 0 as libc::c_int {
103 | |                         unreachable!();
104 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:108:21
    |
108 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:112:25
    |
112 |                         b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:116:21
    |
116 | /                     if __errstatus != 0 as libc::c_int {
117 | |                         unreachable!();
118 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/closeout.rs:123:13
    |
123 | /             if 0 != 0 {
124 | |                 error(
125 | |                     0 as libc::c_int,
126 | |                     *__errno_location(),
...   |
159 | |                 });
160 | |             };
    | |_____________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:123:16
    |
123 |             if 0 != 0 {
    |                ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:127:21
    |
127 |                     b"%s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:130:17
    |
130 | /                 if 0 as libc::c_int != 0 as libc::c_int {
131 | |                     unreachable!();
132 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/closeout.rs:130:20
    |
130 |                 if 0 as libc::c_int != 0 as libc::c_int {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:135:21
    |
135 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:139:25
    |
139 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:142:21
    |
142 | /                     if __errstatus != 0 as libc::c_int {
143 | |                         unreachable!();
144 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/closeout.rs:148:21
    |
148 |                     let __errstatus: libc::c_int = 0 as libc::c_int;
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/closeout.rs:152:25
    |
152 |                         b"%s\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/closeout.rs:155:21
    |
155 | /                     if __errstatus != 0 as libc::c_int {
156 | |                         unreachable!();
157 | |                     } else {};
    | |_____________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
   --> src/closeout.rs:164:8
    |
164 |     if SANITIZE_ADDRESS as libc::c_int == 0 && close_stream(stderr) != 0 as libc::c_int {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary structure name repetition
  --> src/fadvise.rs:33:22
   |
33 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fadvise.rs:44:29
   |
44 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:61:1
   |
61 | / pub unsafe extern "C" fn fdadvise(
62 | |     mut fd: libc::c_int,
63 | |     mut offset: off_t,
64 | |     mut len: off_t,
...  |
67 | |     posix_fadvise(fd, offset, len, advice as libc::c_int);
68 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `u32` to `i32` may wrap around the value
  --> src/fadvise.rs:67:36
   |
67 |     posix_fadvise(fd, offset, len, advice as libc::c_int);
   |                                    ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
  --> src/fadvise.rs:70:1
   |
70 | / pub unsafe extern "C" fn fadvise(mut fp: *mut FILE, mut advice: fadvice_t) {
71 | |     if !fp.is_null() {
72 | |         fdadvise(
73 | |             fileno(fp),
...  |
78 | |     }
79 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:74:13
   |
74 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fadvise.rs:75:13
   |
75 |             0 as libc::c_int as off_t,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/fclose.rs:32:22
   |
32 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fclose.rs:43:29
   |
43 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fclose.rs:52:1
   |
52 | / pub unsafe extern "C" fn rpl_fclose(mut fp: *mut FILE) -> libc::c_int {
53 | |     let mut saved_errno: libc::c_int = 0 as libc::c_int;
54 | |     let mut fd: libc::c_int = 0;
55 | |     let mut result: libc::c_int = 0 as libc::c_int;
...  |
71 | |     return result;
72 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fclose.rs:52:1
   |
52 | / pub unsafe extern "C" fn rpl_fclose(mut fp: *mut FILE) -> libc::c_int {
53 | |     let mut saved_errno: libc::c_int = 0 as libc::c_int;
54 | |     let mut fd: libc::c_int = 0;
55 | |     let mut result: libc::c_int = 0 as libc::c_int;
...  |
71 | |     return result;
72 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this boolean expression can be simplified
  --> src/fclose.rs:60:9
   |
60 |     if (!(__freading(fp) != 0 as libc::c_int)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `__freading(fp) == 0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/fclose.rs:71:5
   |
71 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fclose.rs:61:30
   |
61 |         || lseek(fileno(fp), 0 as libc::c_int as __off_t, 1 as libc::c_int)
   |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fclose.rs:62:16
   |
62 |             != -(1 as libc::c_int) as libc::c_long) && rpl_fflush(fp) != 0
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/fflush.rs:29:22
   |
29 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fflush.rs:40:29
   |
40 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fflush.rs:50:8
   |
50 |     if (*fp)._flags & 0x100 as libc::c_int != 0 {
   |        ^^^^^^^^^^^^
   |
   = note: `-W clippy::used-underscore-binding` implied by `-W clippy::pedantic`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fflush.rs:51:24
   |
51 |         rpl_fseeko(fp, 0 as libc::c_int as off_t, 1 as libc::c_int);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
  --> src/fflush.rs:55:1
   |
55 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
56 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
57 | |         return fflush(stream);
58 | |     }
59 | |     clear_ungetc_buffer_preserving_position(stream);
60 | |     return fflush(stream);
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fflush.rs:55:1
   |
55 | / pub unsafe extern "C" fn rpl_fflush(mut stream: *mut FILE) -> libc::c_int {
56 | |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
57 | |         return fflush(stream);
58 | |     }
59 | |     clear_ungetc_buffer_preserving_position(stream);
60 | |     return fflush(stream);
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this boolean expression can be simplified
  --> src/fflush.rs:56:28
   |
56 |     if stream.is_null() || !(__freading(stream) != 0 as libc::c_int) {
   |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `__freading(stream) == 0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
  --> src/fflush.rs:60:5
   |
60 |     return fflush(stream);
   |     ^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fflush(stream)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/fpurge.rs:27:22
   |
27 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fpurge.rs:38:29
   |
38 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fpurge.rs:47:1
   |
47 | / pub unsafe extern "C" fn fpurge(mut fp: *mut FILE) -> libc::c_int {
48 | |     __fpurge(fp);
49 | |     return 0 as libc::c_int;
50 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/fpurge.rs:49:5
   |
49 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary structure name repetition
  --> src/freopen_safer.rs:36:22
   |
36 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/freopen_safer.rs:47:29
   |
47 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unneeded `return` statement
  --> src/freopen_safer.rs:67:5
   |
67 |     return 1 as libc::c_int != 0;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `1 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/freopen_safer.rs:57:9
   |
57 |         b"/dev/null\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/dev/null\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/freopen_safer.rs:70:1
    |
70  | / pub unsafe extern "C" fn freopen_safer(
71  | |     mut name: *const libc::c_char,
72  | |     mut mode: *const libc::c_char,
73  | |     mut f: *mut FILE,
...   |
136 | |     return f;
137 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/freopen_safer.rs:136:5
    |
136 |     return f;
    |     ^^^^^^^^^ help: remove `return`: `f`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/freopen_safer.rs:97:5
    |
97  | /     match current_block_8 {
98  | |         8409498848974359248 => {
99  | |             if dup2(1 as libc::c_int, 1 as libc::c_int) != 1 as libc::c_int {
100 | |                 protect_out = 1 as libc::c_int != 0;
...   |
104 | |         _ => {}
105 | |     }
    | |_____^
    |
    = note: `-W clippy::single-match` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
97  ~     if current_block_8 == 8409498848974359248 {
98  +         if dup2(1 as libc::c_int, 1 as libc::c_int) != 1 as libc::c_int {
99  +             protect_out = 1 as libc::c_int != 0;
100 +         }
101 +         current_block_8 = 878006807312935268;
102 +     }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/freopen_safer.rs:106:5
    |
106 | /     match current_block_8 {
107 | |         878006807312935268 => {
108 | |             if dup2(0 as libc::c_int, 0 as libc::c_int) != 0 as libc::c_int {
109 | |                 protect_in = 1 as libc::c_int != 0;
...   |
112 | |         _ => {}
113 | |     }
    | |_____^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
106 ~     if current_block_8 == 878006807312935268 {
107 +         if dup2(0 as libc::c_int, 0 as libc::c_int) != 0 as libc::c_int {
108 +             protect_in = 1 as libc::c_int != 0;
109 +         }
110 +     }
    |

warning: this `if` has identical blocks
   --> src/freopen_safer.rs:114:72
    |
114 |       if protect_in as libc::c_int != 0 && !protect_fd(0 as libc::c_int) {
    |  ________________________________________________________________________^
115 | |         f = 0 as *mut FILE;
116 | |     } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    | |_____^
    |
    = note: `-W clippy::if-same-then-else` implied by `-W clippy::all`
note: same as this
   --> src/freopen_safer.rs:116:80
    |
116 |       } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    |  ________________________________________________________________________________^
117 | |         f = 0 as *mut FILE;
118 | |     } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: this `if` has identical blocks
   --> src/freopen_safer.rs:116:80
    |
116 |       } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    |  ________________________________________________________________________________^
117 | |         f = 0 as *mut FILE;
118 | |     } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    | |_____^
    |
note: same as this
   --> src/freopen_safer.rs:118:80
    |
118 |       } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    |  ________________________________________________________________________________^
119 | |         f = 0 as *mut FILE;
120 | |     } else {
    | |_____^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_same_then_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/freopen_safer.rs:114:8
    |
114 |     if protect_in as libc::c_int != 0 && !protect_fd(0 as libc::c_int) {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(protect_in)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/freopen_safer.rs:115:13
    |
115 |         f = 0 as *mut FILE;
    |             ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/freopen_safer.rs:116:15
    |
116 |     } else if protect_out as libc::c_int != 0 && !protect_fd(1 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(protect_out)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/freopen_safer.rs:117:13
    |
117 |         f = 0 as *mut FILE;
    |             ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/freopen_safer.rs:118:15
    |
118 |     } else if protect_err as libc::c_int != 0 && !protect_fd(2 as libc::c_int) {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(protect_err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
   --> src/freopen_safer.rs:119:13
    |
119 |         f = 0 as *mut FILE;
    |             ^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<FILE>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary structure name repetition
  --> src/fseeko.rs:29:22
   |
29 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/fseeko.rs:40:29
   |
40 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/fseeko.rs:50:1
   |
50 | / pub unsafe extern "C" fn rpl_fseeko(
51 | |     mut fp: *mut FILE,
52 | |     mut offset: off_t,
53 | |     mut whence: libc::c_int,
...  |
66 | |     return fseeko(fp, offset, whence);
67 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/fseeko.rs:66:5
   |
66 |     return fseeko(fp, offset, whence);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `fseeko(fp, offset, whence)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: used binding `_IO_read_end` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:8
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_read_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:55:30
   |
55 |     if (*fp)._IO_read_end == (*fp)._IO_read_ptr
   |                              ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_ptr` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:12
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |            ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_write_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:35
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                   ^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_IO_save_base` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:56:59
   |
56 |         && (*fp)._IO_write_ptr == (*fp)._IO_write_base && ((*fp)._IO_save_base).is_null()
   |                                                           ^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/fseeko.rs:59:19
   |
59 |         if pos == -(1 as libc::c_int) as libc::c_long {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: used binding `_flags` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:62:9
   |
62 |         (*fp)._flags &= !(0x10 as libc::c_int);
   |         ^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: used binding `_offset` which is prefixed with an underscore. A leading underscore signals that a binding will not be used
  --> src/fseeko.rs:63:9
   |
63 |         (*fp)._offset = pos;
   |         ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#used_underscore_binding

warning: unsafe function's docs miss `# Safety` section
  --> src/hard_locale.rs:12:1
   |
12 | / pub unsafe extern "C" fn hard_locale(mut category: libc::c_int) -> bool {
13 | |     let mut locale: [libc::c_char; 257] = [0; 257];
14 | |     if setlocale_null_r(
15 | |         category,
...  |
29 | |     return 0 as libc::c_int != 0;
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/hard_locale.rs:29:5
   |
29 |     return 0 as libc::c_int != 0;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int != 0`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/hard_locale.rs:22:38
   |
22 |     if !(strcmp(locale.as_mut_ptr(), b"C\0" as *const u8 as *const libc::c_char)
   |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"C\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/hard_locale.rs:24:40
   |
24 |         || strcmp(locale.as_mut_ptr(), b"POSIX\0" as *const u8 as *const libc::c_char)
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"POSIX\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:19:1
   |
19 | / pub unsafe extern "C" fn ireallocarray(
20 | |     mut p: *mut libc::c_void,
21 | |     mut n: idx_t,
22 | |     mut s: idx_t,
...  |
38 | |     };
39 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:35:9
   |
35 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:37:9
   |
37 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:24:8
   |
24 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:25:12
   |
25 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |            ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:27:30
   |
27 |         let mut nx: size_t = n as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:28:30
   |
28 |         let mut sx: size_t = s as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:29:17
   |
29 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:29:58
   |
29 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/ialloc.rs:31:18
   |
31 |             sx = 1 as libc::c_int as size_t;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:43:1
   |
43 | / pub unsafe extern "C" fn icalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
44 | |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
45 | |         if s != 0 as libc::c_int as libc::c_long {
46 | |             return _gl_alloc_nomem();
...  |
56 | |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
57 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:56:5
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `calloc(n as libc::c_ulong, s as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:44:50
   |
44 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:45:17
   |
45 |         if s != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:48:13
   |
48 |         n = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:50:50
   |
50 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:51:17
   |
51 |         if n != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:54:13
   |
54 |         s = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:56:19
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                   ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:56:39
   |
56 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                                       ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:61:1
   |
61 | / pub unsafe extern "C" fn irealloc(
62 | |     mut p: *mut libc::c_void,
63 | |     mut s: idx_t,
64 | | ) -> *mut libc::c_void {
...  |
70 | |     };
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:67:9
   |
67 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/ialloc.rs:69:9
   |
69 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:65:8
   |
65 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:66:24
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/ialloc.rs:66:29
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((s == 0) as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/ialloc.rs:66:29
   |
66 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(s == 0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:75:1
   |
75 | / pub unsafe extern "C" fn imalloc(mut s: idx_t) -> *mut libc::c_void {
76 | |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 | |         malloc(s as libc::c_ulong)
78 | |     } else {
79 | |         _gl_alloc_nomem()
80 | |     };
81 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:76:5
   |
76 | /     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 | |         malloc(s as libc::c_ulong)
78 | |     } else {
79 | |         _gl_alloc_nomem()
80 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
76 ~     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
77 +         malloc(s as libc::c_ulong)
78 +     } else {
79 +         _gl_alloc_nomem()
80 +     }
   |

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:76:15
   |
76 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/ialloc.rs:77:16
   |
77 |         malloc(s as libc::c_ulong)
   |                ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/ialloc.rs:86:1
   |
86 | / pub unsafe extern "C" fn _gl_alloc_nomem() -> *mut libc::c_void {
87 | |     *__errno_location() = 12 as libc::c_int;
88 | |     return 0 as *mut libc::c_void;
89 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/ialloc.rs:88:5
   |
88 |     return 0 as *mut libc::c_void;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/ialloc.rs:88:12
   |
88 |     return 0 as *mut libc::c_void;
   |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary structure name repetition
  --> src/linebuffer.rs:42:22
   |
42 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/linebuffer.rs:53:29
   |
53 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/linebuffer.rs:71:1
   |
71 | / pub unsafe extern "C" fn initbuffer(mut linebuffer: *mut linebuffer) {
72 | |     memset(
73 | |         linebuffer as *mut libc::c_void,
74 | |         0 as libc::c_int,
75 | |         ::core::mem::size_of::<linebuffer>() as libc::c_ulong,
76 | |     );
77 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
  --> src/linebuffer.rs:73:9
   |
73 |         linebuffer as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `linebuffer.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/linebuffer.rs:79:1
   |
79 | / pub unsafe extern "C" fn readlinebuffer(
80 | |     mut linebuffer: *mut linebuffer,
81 | |     mut stream: *mut FILE,
82 | | ) -> *mut linebuffer {
83 | |     return readlinebuffer_delim(linebuffer, stream, '\n' as i32 as libc::c_char);
84 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/linebuffer.rs:83:5
   |
83 |     return readlinebuffer_delim(linebuffer, stream, '\n' as i32 as libc::c_char);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `readlinebuffer_delim(linebuffer, stream, '\n' as i32 as libc::c_char)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
  --> src/linebuffer.rs:83:53
   |
83 |     return readlinebuffer_delim(linebuffer, stream, '\n' as i32 as libc::c_char);
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
   --> src/linebuffer.rs:86:1
    |
86  | / pub unsafe extern "C" fn readlinebuffer_delim(
87  | |     mut linebuffer: *mut linebuffer,
88  | |     mut stream: *mut FILE,
89  | |     mut delimiter: libc::c_char,
...   |
132 | |     return linebuffer;
133 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this boolean expression can be simplified
   --> src/linebuffer.rs:127:12
    |
127 |         if !(c != delimiter as libc::c_int) {
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `c == delimiter as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/linebuffer.rs:132:5
    |
132 |     return linebuffer;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `linebuffer`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/linebuffer.rs:94:52
   |
94 |     let mut end: *mut libc::c_char = buffer.offset((*linebuffer).size as isize);
   |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `0 as *mut _` detected
  --> src/linebuffer.rs:96:16
   |
96 |         return 0 as *mut linebuffer;
   |                ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/linebuffer.rs:102:24
    |
102 |                 return 0 as *mut linebuffer;
    |                        ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:104:16
    |
104 |             if *p.offset(-(1 as libc::c_int) as isize) as libc::c_int
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*p.offset(-(1 as libc::c_int) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:105:20
    |
105 |                 == delimiter as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:109:17
    |
109 |             c = delimiter as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/linebuffer.rs:113:22
    |
113 |               buffer = xpalloc(
    |  ______________________^
114 | |                 buffer as *mut libc::c_void,
115 | |                 &mut (*linebuffer).size,
116 | |                 1 as libc::c_int as idx_t,
117 | |                 -(1 as libc::c_int) as ptrdiff_t,
118 | |                 1 as libc::c_int as idx_t,
119 | |             ) as *mut libc::c_char;
    | |__________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
113 ~             buffer = xpalloc(
114 +                 buffer as *mut libc::c_void,
115 +                 &mut (*linebuffer).size,
116 +                 1 as libc::c_int as idx_t,
117 +                 -(1 as libc::c_int) as ptrdiff_t,
118 +                 1 as libc::c_int as idx_t,
119 ~             ).cast::<i8>();
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/linebuffer.rs:114:17
    |
114 |                 buffer as *mut libc::c_void,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buffer.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/linebuffer.rs:116:17
    |
116 |                 1 as libc::c_int as idx_t,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/linebuffer.rs:117:17
    |
117 |                 -(1 as libc::c_int) as ptrdiff_t,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/linebuffer.rs:118:17
    |
118 |                 1 as libc::c_int as idx_t,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/linebuffer.rs:120:31
    |
120 |             p = buffer.offset(oldsize as isize);
    |                               ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/linebuffer.rs:122:33
    |
122 |             end = buffer.offset((*linebuffer).size as isize);
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i8` may truncate the value
   --> src/linebuffer.rs:126:19
    |
126 |         *fresh0 = c as libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/linebuffer.rs:127:19
    |
127 |         if !(c != delimiter as libc::c_int) {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/linebuffer.rs:135:1
    |
135 | / pub unsafe extern "C" fn freebuffer(mut linebuffer: *mut linebuffer) {
136 | |     free((*linebuffer).buffer as *mut libc::c_void);
137 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
   --> src/linebuffer.rs:136:10
    |
136 |     free((*linebuffer).buffer as *mut libc::c_void);
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*linebuffer).buffer.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/localcharset.rs:391:1
    |
391 | / pub unsafe extern "C" fn locale_charset() -> *const libc::c_char {
392 | |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
393 | |     codeset = nl_langinfo(CODESET as libc::c_int);
394 | |     if codeset.is_null() {
...   |
400 | |     return codeset;
401 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/localcharset.rs:400:5
    |
400 |     return codeset;
    |     ^^^^^^^^^^^^^^^ help: remove `return`: `codeset`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
   --> src/localcharset.rs:392:44
    |
392 |     let mut codeset: *const libc::c_char = 0 as *const libc::c_char;
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/localcharset.rs:393:27
    |
393 |     codeset = nl_langinfo(CODESET as libc::c_int);
    |                           ^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:395:19
    |
395 |         codeset = b"\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/localcharset.rs:397:8
    |
397 |     if *codeset.offset(0 as libc::c_int as isize) as libc::c_int == '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*codeset.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/localcharset.rs:398:19
    |
398 |         codeset = b"ASCII\0" as *const u8 as *const libc::c_char;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ASCII\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:38:9
   |
38 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name ends with its containing module's name
  --> src/mbrtoc32.rs:48:1
   |
48 | / pub unsafe extern "C" fn rpl_mbrtoc32(
49 | |     mut pwc: *mut char32_t,
50 | |     mut s: *const libc::c_char,
51 | |     mut n: size_t,
...  |
77 | |     return ret;
78 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mbrtoc32.rs:77:5
   |
77 |     return ret;
   |     ^^^^^^^^^^^ help: remove `return`: `ret`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/mbrtoc32.rs:55:15
   |
55 |         pwc = 0 as *mut char32_t;
   |               ^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<char32_t>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbrtoc32.rs:56:13
   |
56 |         s = b"\0" as *const u8 as *const libc::c_char;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:57:13
   |
57 |         n = 1 as libc::c_int as size_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:63:14
   |
63 |     if ret < -(3 as libc::c_int) as size_t && mbsinit(ps) == 0 {
   |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:66:15
   |
66 |     if ret == -(3 as libc::c_int) as size_t {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:8
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:69:53
   |
69 |     if -(2 as libc::c_int) as size_t <= ret && n != 0 as libc::c_int as libc::c_ulong
   |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u32` may become silently lossy if you later change the type
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `u32::from(*s as libc::c_uchar)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/mbrtoc32.rs:73:20
   |
73 |             *pwc = *s as libc::c_uchar as char32_t;
   |                    ^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mbrtoc32.rs:75:16
   |
75 |         return 1 as libc::c_int as size_t;
   |                ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/mbszero.rs:25:1
   |
25 | / pub unsafe extern "C" fn mbszero(mut ps: *mut mbstate_t) {
26 | |     memset(
27 | |         ps as *mut libc::c_void,
28 | |         0 as libc::c_int,
29 | |         ::core::mem::size_of::<mbstate_t>() as libc::c_ulong,
30 | |     );
31 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
  --> src/mbszero.rs:27:9
   |
27 |         ps as *mut libc::c_void,
   |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: item name starts with its containing module's name
  --> src/mcel.rs:36:1
   |
36 | / pub struct mcel_t {
37 | |     pub ch: char32_t,
38 | |     pub err: libc::c_uchar,
39 | |     pub len: libc::c_uchar,
40 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unsafe function's docs miss `# Safety` section
  --> src/mcel.rs:46:1
   |
46 | / pub unsafe extern "C" fn mcel_scanz(mut p: *const libc::c_char) -> mcel_t {
47 | |     return mcel_scant(p, '\0' as i32 as libc::c_char);
48 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/mcel.rs:46:1
   |
46 | / pub unsafe extern "C" fn mcel_scanz(mut p: *const libc::c_char) -> mcel_t {
47 | |     return mcel_scant(p, '\0' as i32 as libc::c_char);
48 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mcel.rs:47:5
   |
47 |     return mcel_scant(p, '\0' as i32 as libc::c_char);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scant(p, '\0' as i32 as libc::c_char)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
  --> src/mcel.rs:47:26
   |
47 |     return mcel_scant(p, '\0' as i32 as libc::c_char);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
  --> src/mcel.rs:52:1
   |
52 | / pub unsafe extern "C" fn mcel_scant(
53 | |     mut p: *const libc::c_char,
54 | |     mut terminator: libc::c_char,
55 | | ) -> mcel_t {
...  |
70 | |     return mcel_scan(p, lim);
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/mcel.rs:52:1
   |
52 | / pub unsafe extern "C" fn mcel_scant(
53 | |     mut p: *const libc::c_char,
54 | |     mut terminator: libc::c_char,
55 | | ) -> mcel_t {
...  |
70 | |     return mcel_scan(p, lim);
71 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/mcel.rs:70:5
   |
70 |     return mcel_scan(p, lim);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scan(p, lim)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
  --> src/mcel.rs:57:24
   |
57 |         return mcel_ch(*p as char32_t, 1 as libc::c_int as size_t);
   |                        ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mcel.rs:57:40
   |
57 |         return mcel_ch(*p as char32_t, 1 as libc::c_int as size_t);
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/mcel.rs:61:15
   |
61 |     while i < MCEL_LEN_MAX as libc::c_int - 1 as libc::c_int {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/mcel.rs:64:17
   |
64 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*lim as libc::c_int != terminator as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/mcel.rs:64:18
   |
64 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
   |                  ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*lim)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/mcel.rs:64:41
   |
64 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(terminator)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/mcel.rs:68:9
   |
68 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/mcel.rs:75:1
    |
75  | / pub unsafe extern "C" fn mcel_scan(
76  | |     mut p: *const libc::c_char,
77  | |     mut lim: *const libc::c_char,
78  | | ) -> mcel_t {
...   |
100 | |     return mcel_ch(ch, len);
101 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:75:1
    |
75  | / pub unsafe extern "C" fn mcel_scan(
76  | |     mut p: *const libc::c_char,
77  | |     mut lim: *const libc::c_char,
78  | | ) -> mcel_t {
...   |
100 | |     return mcel_ch(ch, len);
101 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/mcel.rs:100:5
    |
100 |     return mcel_ch(ch, len);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_ch(ch, len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
  --> src/mcel.rs:81:24
   |
81 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
   |                        ^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mcel.rs:81:39
   |
81 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/mcel.rs:92:9
   |
92 |         lim.offset_from(p) as libc::c_long as size_t,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/mcel.rs:95:8
   |
95 |       if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
   |  ________^
96 | |         < len) as libc::c_int as libc::c_long != 0
   | |_____________________________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
   |
95 ~     if i64::from(((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
96 ~         < len) as libc::c_int) != 0
   |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/mcel.rs:95:8
   |
95 |       if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
   |  ________^
96 | |         < len) as libc::c_int as libc::c_long != 0
   | |_____________________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
   |
95 ~     if i32::from((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
96 ~         < len) as libc::c_long != 0
   |

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mcel.rs:95:9
   |
95 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/mcel.rs:95:54
   |
95 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/mcel.rs:98:25
   |
98 |         return mcel_err(c as libc::c_uchar);
   |                         ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/mcel.rs:105:1
    |
105 | / pub unsafe extern "C" fn mcel_isbasic(mut c: libc::c_char) -> bool {
106 | |     return (0 as libc::c_int <= c as libc::c_int
107 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
108 | |         as libc::c_long != 0;
109 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:105:1
    |
105 | / pub unsafe extern "C" fn mcel_isbasic(mut c: libc::c_char) -> bool {
106 | |     return (0 as libc::c_int <= c as libc::c_int
107 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
108 | |         as libc::c_long != 0;
109 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this could be a `const fn`
   --> src/mcel.rs:105:1
    |
105 | / pub unsafe extern "C" fn mcel_isbasic(mut c: libc::c_char) -> bool {
106 | |     return (0 as libc::c_int <= c as libc::c_int
107 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
108 | |         as libc::c_long != 0;
109 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/mcel.rs:106:5
    |
106 | /     return (0 as libc::c_int <= c as libc::c_int
107 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
108 | |         as libc::c_long != 0;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
106 ~     (0 as libc::c_int <= c as libc::c_int
107 +         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
108 +         as libc::c_long != 0
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/mcel.rs:106:12
    |
106 |       return (0 as libc::c_int <= c as libc::c_int
    |  ____________^
107 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
108 | |         as libc::c_long != 0;
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
106 ~     return i64::from((0 as libc::c_int <= c as libc::c_int
107 ~         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int) != 0;
    |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/mcel.rs:106:12
    |
106 |       return (0 as libc::c_int <= c as libc::c_int
    |  ____________^
107 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
106 ~     return i32::from(0 as libc::c_int <= c as libc::c_int
107 +         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:106:33
    |
106 |     return (0 as libc::c_int <= c as libc::c_int
    |                                 ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:107:12
    |
107 |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:107:33
    |
107 |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
   --> src/mcel.rs:113:1
    |
113 | / pub unsafe extern "C" fn mcel_tocmp(
114 | |     mut to: Option::<unsafe extern "C" fn(wint_t) -> wint_t>,
115 | |     mut c1: mcel_t,
116 | |     mut c2: mcel_t,
...   |
128 | |     return ch1 - ch2;
129 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:113:1
    |
113 | / pub unsafe extern "C" fn mcel_tocmp(
114 | |     mut to: Option::<unsafe extern "C" fn(wint_t) -> wint_t>,
115 | |     mut c1: mcel_t,
116 | |     mut c2: mcel_t,
...   |
128 | |     return ch1 - ch2;
129 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/mcel.rs:128:5
    |
128 |     return ch1 - ch2;
    |     ^^^^^^^^^^^^^^^^^ help: remove `return`: `ch1 - ch2`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/mcel.rs:119:8
    |
119 |       if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int)
    |  ________^
120 | |         as libc::c_long != 0
    | |_______________________^ help: try: `i64::from(c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:119:9
    |
119 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int)
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:119:33
    |
119 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int)
    |                                 ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/mcel.rs:119:57
    |
119 |     if (c1.err as libc::c_int - c2.err as libc::c_int | (cmp == 0) as libc::c_int)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(cmp == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:124:32
    |
124 |       let mut ch1: libc::c_int = to.expect("non-null function pointer")(c1.ch)
    |  ________________________________^
125 | |         as libc::c_int;
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:126:32
    |
126 |       let mut ch2: libc::c_int = to.expect("non-null function pointer")(c2.ch)
    |  ________________________________^
127 | |         as libc::c_int;
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
   --> src/mcel.rs:133:1
    |
133 | / pub unsafe extern "C" fn mcel_cmp(mut c1: mcel_t, mut c2: mcel_t) -> libc::c_int {
134 | |     let mut ch1: libc::c_int = c1.ch as libc::c_int;
135 | |     let mut ch2: libc::c_int = c2.ch as libc::c_int;
136 | |     return (c1.err as libc::c_int - c2.err as libc::c_int)
137 | |         * ((1 as libc::c_int) << MCEL_ERR_SHIFT as libc::c_int) + (ch1 - ch2);
138 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:133:1
    |
133 | / pub unsafe extern "C" fn mcel_cmp(mut c1: mcel_t, mut c2: mcel_t) -> libc::c_int {
134 | |     let mut ch1: libc::c_int = c1.ch as libc::c_int;
135 | |     let mut ch2: libc::c_int = c2.ch as libc::c_int;
136 | |     return (c1.err as libc::c_int - c2.err as libc::c_int)
137 | |         * ((1 as libc::c_int) << MCEL_ERR_SHIFT as libc::c_int) + (ch1 - ch2);
138 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this could be a `const fn`
   --> src/mcel.rs:133:1
    |
133 | / pub unsafe extern "C" fn mcel_cmp(mut c1: mcel_t, mut c2: mcel_t) -> libc::c_int {
134 | |     let mut ch1: libc::c_int = c1.ch as libc::c_int;
135 | |     let mut ch2: libc::c_int = c2.ch as libc::c_int;
136 | |     return (c1.err as libc::c_int - c2.err as libc::c_int)
137 | |         * ((1 as libc::c_int) << MCEL_ERR_SHIFT as libc::c_int) + (ch1 - ch2);
138 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/mcel.rs:136:5
    |
136 | /     return (c1.err as libc::c_int - c2.err as libc::c_int)
137 | |         * ((1 as libc::c_int) << MCEL_ERR_SHIFT as libc::c_int) + (ch1 - ch2);
    | |______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
136 ~     (c1.err as libc::c_int - c2.err as libc::c_int)
137 +         * ((1 as libc::c_int) << MCEL_ERR_SHIFT as libc::c_int) + (ch1 - ch2)
    |

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:134:32
    |
134 |     let mut ch1: libc::c_int = c1.ch as libc::c_int;
    |                                ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:135:32
    |
135 |     let mut ch2: libc::c_int = c2.ch as libc::c_int;
    |                                ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:136:13
    |
136 |     return (c1.err as libc::c_int - c2.err as libc::c_int)
    |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c1.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:136:37
    |
136 |     return (c1.err as libc::c_int - c2.err as libc::c_int)
    |                                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c2.err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:137:34
    |
137 |         * ((1 as libc::c_int) << MCEL_ERR_SHIFT as libc::c_int) + (ch1 - ch2);
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
   --> src/mcel.rs:142:1
    |
142 | / pub unsafe extern "C" fn mcel_err(mut err: libc::c_uchar) -> mcel_t {
143 | |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
144 | |         unreachable!();
145 | |     };
...   |
153 | |     };
154 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:142:1
    |
142 | / pub unsafe extern "C" fn mcel_err(mut err: libc::c_uchar) -> mcel_t {
143 | |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
144 | |         unreachable!();
145 | |     };
...   |
153 | |     };
154 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/mcel.rs:146:5
    |
146 | /     return {
147 | |         let mut init = mcel_t {
148 | |             ch: 0,
149 | |             err: err,
...   |
152 | |         init
153 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
146 ~     {
147 +         let mut init = mcel_t {
148 +             ch: 0,
149 +             err: err,
150 +             len: 1 as libc::c_int as libc::c_uchar,
151 +         };
152 +         init
153 +     }
    |

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:143:8
    |
143 |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/mcel.rs:143:39
    |
143 |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
    |                                       ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: returning the result of a `let` binding from a block
   --> src/mcel.rs:152:9
    |
147 | /         let mut init = mcel_t {
148 | |             ch: 0,
149 | |             err: err,
150 | |             len: 1 as libc::c_int as libc::c_uchar,
151 | |         };
    | |__________- unnecessary `let` binding
152 |           init
    |           ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
147 ~         
148 ~         mcel_t {
149 +             ch: 0,
150 +             err: err,
151 +             len: 1 as libc::c_int as libc::c_uchar,
152 +         }
    |

warning: casting `i32` to `u8` may truncate the value
   --> src/mcel.rs:150:18
    |
150 |             len: 1 as libc::c_int as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/mcel.rs:150:18
    |
150 |             len: 1 as libc::c_int as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/mcel.rs:158:1
    |
158 | / pub unsafe extern "C" fn mcel_ch(mut ch: char32_t, mut len: size_t) -> mcel_t {
159 | |     if (0 as libc::c_int as libc::c_ulong) < len {} else {
160 | |         unreachable!();
161 | |     };
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/mcel.rs:158:1
    |
158 | / pub unsafe extern "C" fn mcel_ch(mut ch: char32_t, mut len: size_t) -> mcel_t {
159 | |     if (0 as libc::c_int as libc::c_ulong) < len {} else {
160 | |         unreachable!();
161 | |     };
...   |
175 | |     };
176 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
   --> src/mcel.rs:168:5
    |
168 | /     return {
169 | |         let mut init = mcel_t {
170 | |             ch: ch,
171 | |             err: 0,
...   |
174 | |         init
175 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
168 ~     {
169 +         let mut init = mcel_t {
170 +             ch: ch,
171 +             err: 0,
172 +             len: len as libc::c_uchar,
173 +         };
174 +         init
175 +     }
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/mcel.rs:159:8
    |
159 |     if (0 as libc::c_int as libc::c_ulong) < len {} else {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/mcel.rs:162:15
    |
162 |     if len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong {} else {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:162:15
    |
162 |     if len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong {} else {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/mcel.rs:165:14
    |
165 |     if ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint {} else {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/mcel.rs:165:14
    |
165 |     if ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint {} else {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/mcel.rs:174:9
    |
169 | /         let mut init = mcel_t {
170 | |             ch: ch,
171 | |             err: 0,
172 | |             len: len as libc::c_uchar,
173 | |         };
    | |__________- unnecessary `let` binding
174 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
169 ~         
170 ~         mcel_t {
171 +             ch: ch,
172 +             err: 0,
173 +             len: len as libc::c_uchar,
174 +         }
    |

warning: casting `u64` to `u8` may truncate the value
   --> src/mcel.rs:172:18
    |
172 |             len: len as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
  --> src/memcasecmp.rs:7:1
   |
7  | / pub unsafe extern "C" fn memcasecmp(
8  | |     mut vs1: *const libc::c_void,
9  | |     mut vs2: *const libc::c_void,
10 | |     mut n: size_t,
...  |
34 | |     return 0 as libc::c_int;
35 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/memcasecmp.rs:34:5
   |
34 |     return 0 as libc::c_int;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
  --> src/memcasecmp.rs:13:39
   |
13 |     let mut s1: *const libc::c_char = vs1 as *const libc::c_char;
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vs1.cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/memcasecmp.rs:14:39
   |
14 |     let mut s2: *const libc::c_char = vs2 as *const libc::c_char;
   |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `vs2.cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/memcasecmp.rs:15:9
   |
15 |     i = 0 as libc::c_int as size_t;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/memcasecmp.rs:17:37
   |
17 |         let mut u1: libc::c_uchar = *s1.offset(i as isize) as libc::c_uchar;
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/memcasecmp.rs:17:48
   |
17 |         let mut u1: libc::c_uchar = *s1.offset(i as isize) as libc::c_uchar;
   |                                                ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/memcasecmp.rs:17:48
   |
17 |         let mut u1: libc::c_uchar = *s1.offset(i as isize) as libc::c_uchar;
   |                                                ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
  --> src/memcasecmp.rs:18:37
   |
18 |         let mut u2: libc::c_uchar = *s2.offset(i as isize) as libc::c_uchar;
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/memcasecmp.rs:18:48
   |
18 |         let mut u2: libc::c_uchar = *s2.offset(i as isize) as libc::c_uchar;
   |                                                ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/memcasecmp.rs:18:48
   |
18 |         let mut u2: libc::c_uchar = *s2.offset(i as isize) as libc::c_uchar;
   |                                                ^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/memcasecmp.rs:19:43
   |
19 |         let mut U1: libc::c_int = toupper(u1 as libc::c_int);
   |                                           ^^^^^^^^^^^^^^^^^ help: try: `i32::from(u1)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/memcasecmp.rs:20:43
   |
20 |         let mut U2: libc::c_int = toupper(u2 as libc::c_int);
   |                                           ^^^^^^^^^^^^^^^^^ help: try: `i32::from(u2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/memcasecmp.rs:26:13
   |
26 |             (U1 > U2) as libc::c_int - (U1 < U2) as libc::c_int
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(U1 > U2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/memcasecmp.rs:26:40
   |
26 |             (U1 > U2) as libc::c_int - (U1 < U2) as libc::c_int
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(U1 < U2)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
  --> src/memcasecmp.rs:32:9
   |
32 |         i;
   |         ^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
  --> src/posixver.rs:11:1
   |
11 | / pub unsafe extern "C" fn posix2_version() -> libc::c_int {
12 | |     let mut v: libc::c_long = 200809 as libc::c_long;
13 | |     let mut s: *const libc::c_char = getenv(
14 | |         b"_POSIX2_VERSION\0" as *const u8 as *const libc::c_char,
...  |
29 | |     }) as libc::c_int;
30 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/posixver.rs:23:5
   |
23 | /     return (if v < (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long {
24 | |         (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long
25 | |     } else if v < 2147483647 as libc::c_int as libc::c_long {
26 | |         v
27 | |     } else {
28 | |         2147483647 as libc::c_int as libc::c_long
29 | |     }) as libc::c_int;
   | |______________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
23 ~     (if v < (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long {
24 +         (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long
25 +     } else if v < 2147483647 as libc::c_int as libc::c_long {
26 +         v
27 +     } else {
28 +         2147483647 as libc::c_int as libc::c_long
29 +     }) as libc::c_int
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/posixver.rs:14:9
   |
14 |         b"_POSIX2_VERSION\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"_POSIX2_VERSION\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/posixver.rs:16:24
   |
16 |     if !s.is_null() && *s as libc::c_int != 0 {
   |                        ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*s)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
  --> src/posixver.rs:17:40
   |
17 |         let mut e: *mut libc::c_char = 0 as *mut libc::c_char;
   |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i64` to `i32` may truncate the value
  --> src/posixver.rs:23:12
   |
23 |       return (if v < (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long {
   |  ____________^
24 | |         (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long
25 | |     } else if v < 2147483647 as libc::c_int as libc::c_long {
26 | |         v
27 | |     } else {
28 | |         2147483647 as libc::c_int as libc::c_long
29 | |     }) as libc::c_int;
   | |_____________________^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/posixver.rs:23:20
   |
23 |     return (if v < (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long {
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(2147483647 as libc::c_int) - 1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/posixver.rs:24:9
   |
24 |         (-(2147483647 as libc::c_int) - 1 as libc::c_int) as libc::c_long
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(2147483647 as libc::c_int) - 1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/posixver.rs:25:19
   |
25 |     } else if v < 2147483647 as libc::c_int as libc::c_long {
   |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/posixver.rs:28:9
   |
28 |         2147483647 as libc::c_int as libc::c_long
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary structure name repetition
  --> src/progname.rs:35:22
   |
35 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/progname.rs:46:29
   |
46 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
  --> src/progname.rs:59:1
   |
59 | / pub unsafe extern "C" fn set_program_name(mut argv0: *const libc::c_char) {
60 | |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
61 | |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
62 | |     if argv0.is_null() {
...  |
95 | |     program_invocation_name = argv0 as *mut libc::c_char;
96 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `0 as *const _` detected
  --> src/progname.rs:60:42
   |
60 |     let mut slash: *const libc::c_char = 0 as *const libc::c_char;
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
  --> src/progname.rs:61:41
   |
61 |     let mut base: *const libc::c_char = 0 as *const libc::c_char;
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:64:13
   |
64 | /             b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8
65 | |                 as *const libc::c_char,
   | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"A NULL argv[0] was passed through an exec system call.\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary boolean `not` operation
  --> src/progname.rs:71:12
   |
71 |       base = if !slash.is_null() {
   |  ____________^
72 | |         slash.offset(1 as libc::c_int as isize)
73 | |     } else {
74 | |         argv0
75 | |     };
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/progname.rs:76:51
   |
76 |     if base.offset_from(argv0) as libc::c_long >= 7 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(7 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:79:13
   |
79 |             b"/.libs/\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/.libs/\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:80:13
   |
80 |             7 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/progname.rs:86:13
   |
86 |             b"lt-\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"lt-\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/progname.rs:87:13
   |
87 |             3 as libc::c_int as libc::c_ulong,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/propername_lite.rs:8:1
   |
8  | / pub unsafe extern "C" fn proper_name_lite(
9  | |     mut name_ascii: *const libc::c_char,
10 | |     mut name_utf8: *const libc::c_char,
11 | | ) -> *const libc::c_char {
...  |
23 | |     };
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/propername_lite.rs:13:5
   |
13 | /     return if translation != name_ascii {
14 | |         translation
15 | |     } else if c_strcasecmp(
16 | |         locale_charset(),
...  |
22 | |         name_ascii
23 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
13 ~     if translation != name_ascii {
14 +         translation
15 +     } else if c_strcasecmp(
16 +         locale_charset(),
17 +         b"UTF-8\0" as *const u8 as *const libc::c_char,
18 +     ) == 0 as libc::c_int
19 +     {
20 +         name_utf8
21 +     } else {
22 +         name_ascii
23 +     }
   |

warning: `as` casting between raw pointers without changing its mutability
  --> src/propername_lite.rs:17:9
   |
17 |         b"UTF-8\0" as *const u8 as *const libc::c_char,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
   --> src/quotearg.rs:105:5
    |
105 |     return iswprint(wc);
    |     ^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `iswprint(wc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:110:9
    |
110 |         ps as *mut libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `ps.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:117:5
    |
117 |     b"literal\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"literal\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:118:5
    |
118 |     b"shell\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:119:5
    |
119 |     b"shell-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:120:5
    |
120 |     b"shell-escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:121:5
    |
121 |     b"shell-escape-always\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"shell-escape-always\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:122:5
    |
122 |     b"c\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:123:5
    |
123 |     b"c-maybe\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"c-maybe\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:124:5
    |
124 |     b"escape\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"escape\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:125:5
    |
125 |     b"locale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"locale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:126:5
    |
126 |     b"clocale\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"clocale\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:150:1
    |
150 | / pub unsafe extern "C" fn clone_quoting_options(
151 | |     mut o: *mut quoting_options,
152 | | ) -> *mut quoting_options {
153 | |     let mut e: libc::c_int = *__errno_location();
...   |
163 | |     return p;
164 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:163:5
    |
163 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:154:39
    |
154 |       let mut p: *mut quoting_options = xmemdup(
    |  _______________________________________^
155 | |         (if !o.is_null() {
156 | |             o
157 | |         } else {
...   |
160 | |         ::core::mem::size_of::<quoting_options>() as libc::c_ulong,
161 | |     ) as *mut quoting_options;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
154 ~     let mut p: *mut quoting_options = xmemdup(
155 +         (if !o.is_null() {
156 +             o
157 +         } else {
158 +             &mut default_quoting_options as *mut quoting_options
159 +         }) as *const libc::c_void,
160 +         ::core::mem::size_of::<quoting_options>() as libc::c_ulong,
161 ~     ).cast::<src::quotearg::quoting_options>();
    |

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:155:9
    |
155 | /         (if !o.is_null() {
156 | |             o
157 | |         } else {
158 | |             &mut default_quoting_options as *mut quoting_options
159 | |         }) as *const libc::c_void,
    | |__________^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:158:13
    |
158 |             &mut default_quoting_options as *mut quoting_options
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:166:1
    |
166 | / pub unsafe extern "C" fn get_quoting_style(
167 | |     mut o: *const quoting_options,
168 | | ) -> quoting_style {
169 | |     return (*if !o.is_null() {
...   |
174 | |         .style;
175 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:169:5
    |
169 | /     return (*if !o.is_null() {
170 | |         o
171 | |     } else {
172 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 | |     })
174 | |         .style;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
169 ~     (*if !o.is_null() {
170 +         o
171 +     } else {
172 +         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 +     })
174 +         .style
    |

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:169:14
    |
169 |       return (*if !o.is_null() {
    |  ______________^
170 | |         o
171 | |     } else {
172 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
173 | |     })
    | |_____^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:172:9
    |
172 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:177:1
    |
177 | / pub unsafe extern "C" fn set_quoting_style(
178 | |     mut o: *mut quoting_options,
179 | |     mut s: quoting_style,
180 | | ) {
181 | |     (*if !o.is_null() { o } else { &mut default_quoting_options }).style = s;
182 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:181:7
    |
181 |     (*if !o.is_null() { o } else { &mut default_quoting_options }).style = s;
    |       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:184:1
    |
184 | / pub unsafe extern "C" fn set_char_quoting(
185 | |     mut o: *mut quoting_options,
186 | |     mut c: libc::c_char,
187 | |     mut i: libc::c_int,
...   |
212 | |     return r;
213 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:212:5
    |
212 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:189:33
    |
189 |     let mut uc: libc::c_uchar = c as libc::c_uchar;
    |                                 ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary boolean `not` operation
   --> src/quotearg.rs:190:39
    |
190 |       let mut p: *mut libc::c_uint = ((*(if !o.is_null() {
    |  _______________________________________^
191 | |         o
192 | |     } else {
193 | |         &mut default_quoting_options as *mut quoting_options
194 | |     }))
    | |______^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
   --> src/quotearg.rs:193:9
    |
193 |         &mut default_quoting_options as *mut quoting_options
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:198:13
    |
198 | /             (uc as libc::c_ulong)
199 | |                 .wrapping_div(
200 | |                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
201 | |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
202 | |                 ) as isize,
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:198:13
    |
198 | /             (uc as libc::c_ulong)
199 | |                 .wrapping_div(
200 | |                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
201 | |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
202 | |                 ) as isize,
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
   --> src/quotearg.rs:198:13
    |
198 |             (uc as libc::c_ulong)
    |             ^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(uc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:201:39
    |
201 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `i32` may truncate the value
   --> src/quotearg.rs:204:34
    |
204 |       let mut shift: libc::c_int = (uc as libc::c_ulong)
    |  __________________________________^
205 | |         .wrapping_rem(
206 | |             (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
207 | |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong),
208 | |         ) as libc::c_int;
    | |________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `u64` may become silently lossy if you later change the type
   --> src/quotearg.rs:204:34
    |
204 |     let mut shift: libc::c_int = (uc as libc::c_ulong)
    |                                  ^^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(uc)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:207:31
    |
207 |                 .wrapping_mul(8 as libc::c_int as libc::c_ulong),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:209:30
    |
209 |       let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |  ______________________________^
210 | |         as libc::c_int;
    | |______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:209:45
    |
209 |     let mut r: libc::c_int = (*p >> shift & 1 as libc::c_int as libc::c_uint)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:211:11
    |
211 |     *p ^= ((i & 1 as libc::c_int ^ r) << shift) as libc::c_uint;
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:215:1
    |
215 | / pub unsafe extern "C" fn set_quoting_flags(
216 | |     mut o: *mut quoting_options,
217 | |     mut i: libc::c_int,
218 | | ) -> libc::c_int {
...   |
225 | |     return r;
226 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:225:5
    |
225 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/quotearg.rs:228:1
    |
228 | / pub unsafe extern "C" fn set_custom_quoting(
229 | |     mut o: *mut quoting_options,
230 | |     mut left_quote: *const libc::c_char,
231 | |     mut right_quote: *const libc::c_char,
...   |
241 | |     (*o).right_quote = right_quote;
242 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/quotearg.rs:260:5
    |
260 |     return o;
    |     ^^^^^^^^^ help: remove `return`: `o`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: returning the result of a `let` binding from a block
   --> src/quotearg.rs:254:9
    |
247 | /         let mut init = quoting_options {
248 | |             style: literal_quoting_style,
249 | |             flags: 0 as libc::c_int,
250 | |             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
251 | |             left_quote: 0 as *const libc::c_char,
252 | |             right_quote: 0 as *const libc::c_char,
253 | |         };
    | |__________- unnecessary `let` binding
254 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
247 ~         
248 ~         quoting_options {
249 +             style: literal_quoting_style,
250 +             flags: 0 as libc::c_int,
251 +             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
252 +             left_quote: 0 as *const libc::c_char,
253 +             right_quote: 0 as *const libc::c_char,
254 +         }
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:250:31
    |
250 |             quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:251:25
    |
251 |             left_quote: 0 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/quotearg.rs:252:26
    |
252 |             right_quote: 0 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:256:33
    |
256 |     if style as libc::c_uint == custom_quoting_style as libc::c_int as libc::c_uint {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:256:33
    |
256 |     if style as libc::c_uint == custom_quoting_style as libc::c_int as libc::c_uint {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/quotearg.rs:290:5
    |
290 | /     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
291 | |         b"\"\0" as *const u8 as *const libc::c_char
292 | |     } else {
293 | |         b"'\0" as *const u8 as *const libc::c_char
294 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
290 ~     if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
291 +         b"\"\0" as *const u8 as *const libc::c_char
292 +     } else {
293 +         b"'\0" as *const u8 as *const libc::c_char
294 +     }
    |

warning: `0 as *const _` detected
   --> src/quotearg.rs:267:48
    |
267 |     let mut locale_code: *const libc::c_char = 0 as *const libc::c_char;
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:272:34
    |
272 |     if c_strcasecmp(locale_code, b"UTF-8\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"UTF-8\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:275:19
    |
275 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:276:13
    |
276 |             b"\xE2\x80\x98\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x98\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:278:13
    |
278 |             b"\xE2\x80\x99\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xE2\x80\x99\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:281:34
    |
281 |     if c_strcasecmp(locale_code, b"GB18030\0" as *const u8 as *const libc::c_char)
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GB18030\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:284:19
    |
284 |         return if *msgid.offset(0 as libc::c_int as isize) as libc::c_int == '`' as i32 {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*msgid.offset(0 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:285:13
    |
285 |             b"\xA1\x07e\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\x07e\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:287:13
    |
287 |             b"\xA1\xAF\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\xA1\xAF\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:290:36
    |
290 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:290:36
    |
290 |     return if s as libc::c_uint == clocale_quoting_style as libc::c_int as libc::c_uint {
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:291:9
    |
291 |         b"\"\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:293:9
    |
293 |         b"'\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/quotearg.rs:820:28
    |
820 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `bytes != 0 as libc::c_int as libc::c_ulong`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (122/25)
   --> src/quotearg.rs:296:22
    |
296 | unsafe extern "C" fn quotearg_buffer_restyled(
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (890/100)
    --> src/quotearg.rs:296:1
     |
296  | / unsafe extern "C" fn quotearg_buffer_restyled(
297  | |     mut buffer: *mut libc::c_char,
298  | |     mut buffersize: size_t,
299  | |     mut arg: *const libc::c_char,
...    |
1196 | |     };
1197 | | }
     | |_^
     |
     = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/quotearg.rs:1167:13
     |
1167 | /             return quotearg_buffer_restyled(
1168 | |                 buffer,
1169 | |                 buffersize,
1170 | |                 arg,
...    |
1176 | |                 right_quote,
1177 | |             );
     | |______________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1167 ~             quotearg_buffer_restyled(
1168 +                 buffer,
1169 +                 buffersize,
1170 +                 arg,
1171 +                 argsize,
1172 +                 quoting_style,
1173 +                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1174 +                 0 as *const libc::c_uint,
1175 +                 left_quote,
1176 +                 right_quote,
1177 +             )
     |

warning: unneeded `return` statement
    --> src/quotearg.rs:1194:13
     |
1194 |             return len;
     |             ^^^^^^^^^^^ help: remove `return`: `len`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:310:27
    |
310 |     let mut len: size_t = 0 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:311:39
    |
311 |     let mut orig_buffersize: size_t = 0 as libc::c_int as size_t;
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `0 as *const _` detected
   --> src/quotearg.rs:312:49
    |
312 |     let mut quote_string: *const libc::c_char = 0 as *const libc::c_char;
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:313:40
    |
313 |     let mut quote_string_len: size_t = 0 as libc::c_int as size_t;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:316:12
    |
316 |         == 1 as libc::c_int as libc::c_ulong;
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:317:48
    |
317 |     let mut elide_outer_quotes: bool = flags & QA_ELIDE_OUTER_QUOTES as libc::c_int
    |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:340:24
    |
340 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:340:24
    |
340 |                     != custom_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:343:25
    |
343 |                         b"`\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"`\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:347:25
    |
347 |                         b"'\0" as *const u8 as *const libc::c_char,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:355:44
    |
355 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:355:44
    |
355 | ...                   *buffer.offset(len as isize) = *quote_string;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:358:25
    |
358 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
   --> src/quotearg.rs:360:25
    |
360 |                         quote_string;
    |                         ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:393:56
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:393:40
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:393:40
    |
393 |                         *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:396:21
    |
396 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:399:32
    |
399 |                 quote_string = b"\"\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:400:36
    |
400 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:409:9
    |
409 | /         match current_block_48 {
410 | |             2266290538919981374 => {
411 | |                 if !elide_outer_quotes {
412 | |                     backslash_escapes = 1 as libc::c_int != 0;
...   |
416 | |             _ => {}
417 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
409 ~         if current_block_48 == 2266290538919981374 {
410 +             if !elide_outer_quotes {
411 +                 backslash_escapes = 1 as libc::c_int != 0;
412 +             }
413 +             current_block_48 = 14141891332124833771;
414 +         }
    |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
   --> src/quotearg.rs:418:9
    |
418 | /         match current_block_48 {
419 | |             14141891332124833771 => {
420 | |                 quoting_style = shell_always_quoting_style;
421 | |                 if !elide_outer_quotes {
...   |
431 | |             _ => {}
432 | |         }
    | |_________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
    |
418 ~         if current_block_48 == 14141891332124833771 {
419 +             quoting_style = shell_always_quoting_style;
420 +             if !elide_outer_quotes {
421 +                 if len < buffersize {
422 +                     *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
423 +                 }
424 +                 len = len.wrapping_add(1);
425 +                 len;
426 +             }
427 +             quote_string = b"'\0" as *const u8 as *const libc::c_char;
428 +             quote_string_len = 1 as libc::c_int as size_t;
429 +         }
    |

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:423:56
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:423:40
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:423:40
    |
423 |                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                        ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:426:21
    |
426 |                     len;
    |                     ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:428:32
    |
428 |                 quote_string = b"'\0" as *const u8 as *const libc::c_char;
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"'\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:429:36
    |
429 |                 quote_string_len = 1 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:433:13
    |
433 |         i = 0 as libc::c_int as size_t;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:435:13
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize) as libc::c_int == '\0' as i32)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:435:14
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:435:26
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:435:26
    |
435 |             (*arg.offset(i as isize) as libc::c_int == '\0' as i32) as libc::c_int
    |                          ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:437:13
    |
437 |             (i == argsize) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(i == argsize)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:445:16
    |
445 |             if backslash_escapes as libc::c_int != 0
    |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:447:24
    |
447 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:447:24
    |
447 |                     != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:456:21
    |
456 | /                         argsize
457 | |                     })
    | |_____________________^
    |
    = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
    = note: the end suggestion probably needs some adjustments to use the expression result correctly
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
456 ~                     }
457 ~                     argsize)
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:451:28
    |
451 |                         && (1 as libc::c_int as libc::c_ulong) < quote_string_len
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:459:21
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `arg.offset(i as isize).cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:459:32
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:459:32
    |
459 |                     arg.offset(i as isize) as *const libc::c_void,
    |                                ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
   --> src/quotearg.rs:460:21
    |
460 |                     quote_string as *const libc::c_void,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `quote_string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:470:17
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:470:29
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:470:29
    |
470 |             c = *arg.offset(i as isize) as libc::c_uchar;
    |                             ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:471:19
    |
471 |             match c as libc::c_int {
    |                   ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:480:32
    |
480 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:480:32
    |
480 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:484:64
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:484:48
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:484:48
    |
484 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:487:29
    |
487 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:489:64
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:489:48
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:489:48
    |
489 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:492:29
    |
492 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:494:64
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:494:48
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:494:48
    |
494 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:497:29
    |
497 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:501:60
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:501:44
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:501:44
    |
501 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:504:25
    |
504 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:506:32
    |
506 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:506:32
    |
506 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:507:47
    |
507 | ...                   && i.wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:510:36
    |
510 |   ...                   <= *arg
    |  __________________________^
511 | | ...                       .offset(
512 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
513 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
510 ~                                 <= i32::from(*arg
511 +                                     .offset(
512 +                                         i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
513 +                                     ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:512:41
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:512:41
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:512:56
    |
512 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:514:32
    |
514 |   ...                   && *arg
    |  __________________________^
515 | | ...                       .offset(
516 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
517 | | ...                       ) as libc::c_int <= '9' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
514 ~                             && i32::from(*arg
515 +                                 .offset(
516 +                                     i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
517 ~                                 )) <= '9' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:516:37
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:516:37
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:516:52
    |
516 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:520:64
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:520:48
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:520:48
    |
520 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:523:29
    |
523 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:525:64
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:525:48
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:525:48
    |
525 | ...                   *buffer.offset(len as isize) = '0' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:528:29
    |
528 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:530:29
    |
530 |                         c = '0' as i32 as libc::c_uchar;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:530:29
    |
530 |                         c = '0' as i32 as libc::c_uchar;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:532:39
    |
532 |                     } else if flags & QA_ELIDE_NULL_BYTES as libc::c_int != 0 {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:550:48
    |
550 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:551:59
    |
551 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:553:44
    |
553 |   ...                   && *arg
    |  __________________________^
554 | | ...                       .offset(
555 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
556 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
553 ~                                         && i32::from(*arg
554 +                                             .offset(
555 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
556 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:555:49
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:555:49
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:555:64
    |
555 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:558:47
    |
558 |   ...                   match *arg
    |  _____________________________^
559 | | ...                       .offset(
560 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
561 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
558 ~                                         match i32::from(*arg
559 +                                             .offset(
560 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
561 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:560:49
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:560:49
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:560:64
    |
560 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:568:53
    |
568 |   ...                   c = *arg
    |  ___________________________^
569 | | ...                       .offset(
570 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
571 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:570:57
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:570:57
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:570:72
    |
570 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:573:67
    |
573 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:576:84
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:576:68
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:576:68
    |
576 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:579:49
    |
579 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:581:84
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:581:68
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:581:68
    |
581 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:584:49
    |
584 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:586:84
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:586:68
    |
586 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:591:84
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:591:68
    |
591 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:613:48
    |
613 | ...                   if flags & QA_SPLIT_TRIGRAPHS as libc::c_int != 0
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:614:59
    |
614 | ...                   && i.wrapping_add(2 as libc::c_int as libc::c_ulong)
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:616:44
    |
616 |   ...                   && *arg
    |  __________________________^
617 | | ...                       .offset(
618 | | ...                           i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
619 | | ...                       ) as libc::c_int == '?' as i32
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
616 ~                                         && i32::from(*arg
617 +                                             .offset(
618 +                                                 i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
619 ~                                             )) == '?' as i32
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:618:49
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:618:49
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:618:64
    |
618 | ...                   i.wrapping_add(1 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:621:47
    |
621 |   ...                   match *arg
    |  _____________________________^
622 | | ...                       .offset(
623 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
624 | | ...                       ) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
621 ~                                         match i32::from(*arg
622 +                                             .offset(
623 +                                                 i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
624 +                                             ))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:623:49
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:623:49
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:623:64
    |
623 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:631:53
    |
631 |   ...                   c = *arg
    |  ___________________________^
632 | | ...                       .offset(
633 | | ...                           i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
634 | | ...                       ) as libc::c_uchar;
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:633:57
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:633:57
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:633:72
    |
633 | ...                   i.wrapping_add(2 as libc::c_int as libc::c_ulong) as isize,
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:636:67
    |
636 | ...                   .wrapping_add(2 as libc::c_int as libc::c_ulong) as size_t
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:639:84
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:639:68
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:639:68
    |
639 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:642:49
    |
642 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:644:84
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:644:68
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:644:68
    |
644 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:647:49
    |
647 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:649:84
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:649:68
    |
649 | ...                   *buffer.offset(len as isize) = '"' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:654:84
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:654:68
    |
654 | ...                   *buffer.offset(len as isize) = '?' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:672:27
    |
672 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:672:27
    |
672 |                     esc = 'a' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:676:27
    |
676 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:676:27
    |
676 |                     esc = 'b' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:680:27
    |
680 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:680:27
    |
680 |                     esc = 'f' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:684:27
    |
684 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:684:27
    |
684 |                     esc = 'n' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:688:27
    |
688 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:688:27
    |
688 |                     esc = 'r' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:692:27
    |
692 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:692:27
    |
692 |                     esc = 't' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:696:27
    |
696 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:696:27
    |
696 |                     esc = 'v' as i32 as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:702:28
    |
702 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:702:28
    |
702 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:709:31
    |
709 |                     } else if backslash_escapes as libc::c_int != 0
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:710:28
    |
710 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:720:25
    |
720 | /                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
721 | |                             == '\0' as i32) as libc::c_int
    | |__________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
720 ~                         i32::from(*arg.offset(1 as libc::c_int as isize) as libc::c_int
721 +                             == '\0' as i32)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:720:26
    |
720 |                         (*arg.offset(1 as libc::c_int as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(1 as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:723:25
    |
723 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(argsize == 1 as libc::c_int as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:723:37
    |
723 |                         (argsize == 1 as libc::c_int as libc::c_ulong) as libc::c_int
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: all if blocks contain the same code at the end
   --> src/quotearg.rs:781:21
    |
781 | /                         current_block = 253337042034819032;
782 | |                     }
    | |_____________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
    |
781 ~                     }
782 +                     current_block = 253337042034819032;
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:753:28
    |
753 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:753:28
    |
753 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:761:42
    |
761 | ...                   buffersize = 0 as libc::c_int as size_t;
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:764:60
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:764:44
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:764:44
    |
764 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:767:25
    |
767 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:769:60
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:769:44
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:769:44
    |
769 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:772:25
    |
772 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:774:60
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:774:44
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:774:44
    |
774 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:777:25
    |
777 |                         len;
    |                         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `if _ { .. } else { .. }` is an expression
   --> src/quotearg.rs:795:21
    |
795 | /                     let mut printable: bool = false;
796 | |                     if unibyte_locale {
797 | |                         m = 1 as libc::c_int as size_t;
798 | |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
...   |
861 | |                         }
862 | |                     }
    | |_____________________^
    |
    = note: you might not need `mut` at all
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_let_if_seq
help: it is more idiomatic to write
    |
795 ~                     let <mut> printable = if unibyte_locale { ..; *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
796 +                             as libc::c_int
797 +                             & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
798 +                             != 0 as libc::c_int } else { ..; false };
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:797:29
    |
797 |                         m = 1 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:798:37
    |
798 |                           printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |  _____________________________________^
799 | |                             as libc::c_int
    | |__________________________________________^ help: try: `i32::from(*(*__ctype_b_loc()).offset(c as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:798:64
    |
798 |                         printable = *(*__ctype_b_loc()).offset(c as libc::c_int as isize)
    |                                                                ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISprint as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:800:31
    |
800 | ...                   & _ISprint as libc::c_int as libc::c_ushort as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:808:29
    |
808 |                         m = 0 as libc::c_int as size_t;
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:816:42
    |
816 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:816:42
    |
816 | ...                   &*arg.offset(i.wrapping_add(m) as isize),
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:820:39
    |
820 |                         if !(bytes == 0 as libc::c_int as libc::c_ulong) {
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:821:41
    |
821 | ...                   if bytes == -(1 as libc::c_int) as size_t {
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:823:48
    |
823 | ...                   } else if bytes == -(2 as libc::c_int) as size_t {
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:826:40
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*arg.offset(i.wrapping_add(m) as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:826:52
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:826:52
    |
826 | ...                   && *arg.offset(i.wrapping_add(m) as isize) as libc::c_int
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:830:37
    |
830 | ...                   m;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:834:40
    |
834 | ...                   && elide_outer_quotes as libc::c_int != 0
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:836:44
    |
836 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:836:44
    |
836 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:839:41
    |
839 | ...                   j = 1 as libc::c_int as size_t;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:841:47
    |
841 |   ...                   match *arg
    |  _____________________________^
842 | | ...                       .offset(i.wrapping_add(m).wrapping_add(j) as isize)
843 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
841 ~                                         match i32::from(*arg
842 +                                             .offset(i.wrapping_add(m).wrapping_add(j) as isize))
    |

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:842:53
    |
842 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:842:53
    |
842 | ...                   .offset(i.wrapping_add(m).wrapping_add(j) as isize)
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:852:41
    |
852 | ...                   j;
    |                       ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:864:24
    |
864 |                     if (1 as libc::c_int as libc::c_ulong) < m
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:865:28
    |
865 |                         || backslash_escapes as libc::c_int != 0 && !printable
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:869:32
    |
869 | ...                   if backslash_escapes as libc::c_int != 0 && !printable {
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:876:40
    |
876 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:876:40
    |
876 | ...                   == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:880:72
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:880:56
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:880:56
    |
880 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:883:37
    |
883 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:885:72
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:885:56
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:885:56
    |
885 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:888:37
    |
888 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:890:72
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:890:56
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:890:56
    |
890 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:893:37
    |
893 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:897:68
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:897:52
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:897:52
    |
897 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:900:33
    |
900 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:905:45
    |
905 |   ...                   ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
    |  ___________________________^
906 | | ...                   as libc::c_char;
    | |_____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:905:60
    |
905 | ...                   ) = ('0' as i32 + (c as libc::c_int >> 6 as libc::c_int))
    |                                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:904:45
    |
904 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:904:45
    |
904 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:909:33
    |
909 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:914:45
    |
914 |   ...                   ) = ('0' as i32
    |  ___________________________^
915 | | ...                   + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
916 | | ...                   as libc::c_char;
    | |_____________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:915:44
    |
915 | ...                   + (c as libc::c_int >> 3 as libc::c_int & 7 as libc::c_int))
    |                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:913:45
    |
913 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:913:45
    |
913 | ...                   len as isize,
    |                       ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:919:33
    |
919 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u8` may truncate the value
   --> src/quotearg.rs:920:37
    |
920 |   ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |  ___________________________^
921 | | ...                       as libc::c_uchar;
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/quotearg.rs:920:37
    |
920 |   ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |  ___________________________^
921 | | ...                       as libc::c_uchar;
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/quotearg.rs:920:52
    |
920 | ...                   c = ('0' as i32 + (c as libc::c_int & 7 as libc::c_int))
    |                                          ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:924:68
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:924:52
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:924:52
    |
924 | ...                   *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:927:33
    |
927 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:930:55
    |
930 | ...                   if ilim <= i.wrapping_add(1 as libc::c_int as libc::c_ulong)
    |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:934:32
    |
934 | ...                   if pending_shell_escape_end as libc::c_int != 0 && !escaping
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:937:68
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:937:52
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:937:52
    |
937 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:940:33
    |
940 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
   --> src/quotearg.rs:942:68
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:942:52
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:942:52
    |
942 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:945:33
    |
945 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
   --> src/quotearg.rs:949:64
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                                      ^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:949:48
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:949:48
    |
949 | ...                   *buffer.offset(len as isize) = c as libc::c_char;
    |                                      ^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/quotearg.rs:952:29
    |
952 | ...                   len;
    |                       ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/quotearg.rs:954:33
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/quotearg.rs:954:45
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/quotearg.rs:954:45
    |
954 | ...                   c = *arg.offset(i as isize) as libc::c_uchar;
    |                                       ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/quotearg.rs:964:21
    |
964 | /                     if i != 0 as libc::c_int as libc::c_ulong {
965 | |                         current_block = 253337042034819032;
966 | |                     } else {
967 | |                         current_block = 4634307283396172174;
968 | |                     }
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/quotearg.rs:964:29
    |
964 |                     if i != 0 as libc::c_int as libc::c_ulong {
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/quotearg.rs:972:28
    |
972 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/quotearg.rs:972:28
    |
972 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/quotearg.rs:973:28
    |
973 |                         && elide_outer_quotes as libc::c_int != 0
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:997:13
     |
997  | /             match current_block {
998  | |                 7549413860336125482 => {
999  | |                     current_block = 13059411171234995867;
1000 | |                 }
1001 | |                 _ => {}
1002 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
997  ~             if current_block == 7549413860336125482 {
998  +                 current_block = 13059411171234995867;
999  +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1003:13
     |
1003 | /             match current_block {
1004 | |                 13059411171234995867 => {
1005 | |                     current_block = 16620298045565028098;
1006 | |                 }
1007 | |                 _ => {}
1008 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1003 ~             if current_block == 13059411171234995867 {
1004 +                 current_block = 16620298045565028098;
1005 +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1009:13
     |
1009 | /             match current_block {
1010 | |                 16620298045565028098 => {
1011 | |                     current_block = 15155215915847730705;
1012 | |                 }
1013 | |                 _ => {}
1014 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1009 ~             if current_block == 16620298045565028098 {
1010 +                 current_block = 15155215915847730705;
1011 +             }
     |

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1015:13
     |
1015 | /             match current_block {
1016 | |                 15155215915847730705 => {
1017 | |                     if quoting_style as libc::c_uint
1018 | |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1026 | |                 _ => {}
1027 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1015 ~             if current_block == 15155215915847730705 {
1016 +                 if quoting_style as libc::c_uint
1017 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1018 +                     && elide_outer_quotes as libc::c_int != 0
1019 +                 {
1020 +                     current_block = 7928555609993211441;
1021 +                     break 's_25;
1022 +                 }
1023 +                 current_block = 253337042034819032;
1024 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1018:28
     |
1018 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1018:28
     |
1018 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1019:28
     |
1019 |                         && elide_outer_quotes as libc::c_int != 0
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1028:13
     |
1028 | /             match current_block {
1029 | |                 253337042034819032 => {
1030 | |                     if !((backslash_escapes as libc::c_int != 0
1031 | |                         && quoting_style as libc::c_uint
...    |
1055 | |                 _ => {}
1056 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1028 ~             if current_block == 253337042034819032 {
1029 +                 if !((backslash_escapes as libc::c_int != 0
1030 +                     && quoting_style as libc::c_uint
1031 +                         != shell_always_quoting_style as libc::c_int as libc::c_uint
1032 +                     || elide_outer_quotes as libc::c_int != 0)
1033 +                     && !quote_these_too.is_null()
1034 +                     && *quote_these_too
1035 +                         .offset(
1036 +                             (c as libc::c_ulong)
1037 +                                 .wrapping_div(
1038 +                                     (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1039 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1040 +                                 ) as isize,
1041 +                         )
1042 +                         >> (c as libc::c_ulong)
1043 +                             .wrapping_rem(
1044 +                                 (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1045 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1046 +                             ) & 1 as libc::c_int as libc::c_uint != 0)
1047 +                     && !is_right_quote
1048 +                 {
1049 +                     current_block = 4476262310586904498;
1050 +                 } else {
1051 +                     current_block = 3173013908131212616;
1052 +                 }
1053 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1030:27
     |
1030 |                     if !((backslash_escapes as libc::c_int != 0
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1032:32
     |
1032 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1032:32
     |
1032 | ...                   != shell_always_quoting_style as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1033:28
     |
1033 |                         || elide_outer_quotes as libc::c_int != 0)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1037:33
     |
1037 | / ...                   (c as libc::c_ulong)
1038 | | ...                       .wrapping_div(
1039 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1040 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1041 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1037:33
     |
1037 | / ...                   (c as libc::c_ulong)
1038 | | ...                       .wrapping_div(
1039 | | ...                           (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1040 | | ...                               .wrapping_mul(8 as libc::c_int as libc::c_ulong),
1041 | | ...                       ) as isize,
     | |____________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1037:33
     |
1037 | ...                   (c as libc::c_ulong)
     |                       ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1040:59
     |
1040 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `u64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1043:32
     |
1043 | ...                   >> (c as libc::c_ulong)
     |                          ^^^^^^^^^^^^^^^^^^^^ help: try: `u64::from(c)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1046:55
     |
1046 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong),
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1047:37
     |
1047 | ...                   ) & 1 as libc::c_int as libc::c_uint != 0)
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1057:13
     |
1057 | /             match current_block {
1058 | |                 3173013908131212616 => {
1059 | |                     if elide_outer_quotes {
1060 | |                         current_block = 7928555609993211441;
...    |
1092 | |                 _ => {}
1093 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1057 ~             if current_block == 3173013908131212616 {
1058 +                 if elide_outer_quotes {
1059 +                     current_block = 7928555609993211441;
1060 +                     break 's_25;
1061 +                 }
1062 +                 escaping = 1 as libc::c_int != 0;
1063 +                 if quoting_style as libc::c_uint
1064 +                     == shell_always_quoting_style as libc::c_int as libc::c_uint
1065 +                     && !pending_shell_escape_end
1066 +                 {
1067 +                     if len < buffersize {
1068 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1069 +                     }
1070 +                     len = len.wrapping_add(1);
1071 +                     len;
1072 +                     if len < buffersize {
1073 +                         *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
1074 +                     }
1075 +                     len = len.wrapping_add(1);
1076 +                     len;
1077 +                     if len < buffersize {
1078 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1079 +                     }
1080 +                     len = len.wrapping_add(1);
1081 +                     len;
1082 +                     pending_shell_escape_end = 1 as libc::c_int != 0;
1083 +                 }
1084 +                 if len < buffersize {
1085 +                     *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
1086 +                 }
1087 +                 len = len.wrapping_add(1);
1088 +                 len;
1089 +                 current_block = 4476262310586904498;
1090 +             }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1065:28
     |
1065 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1065:28
     |
1065 |                         == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1069:60
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1069:44
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1069:44
     |
1069 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1072:25
     |
1072 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1074:60
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1074:44
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1074:44
     |
1074 | ...                   *buffer.offset(len as isize) = '$' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1077:25
     |
1077 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1079:60
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1079:44
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1079:44
     |
1079 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1082:25
     |
1082 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1086:56
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1086:40
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1086:40
     |
1086 |                         *buffer.offset(len as isize) = '\\' as i32 as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1089:21
     |
1089 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1094:13
     |
1094 | /             match current_block {
1095 | |                 4476262310586904498 => {
1096 | |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1097 | |                         if len < buffersize {
...    |
1118 | |                 _ => {}
1119 | |             }
     | |_____________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match
help: try this
     |
1094 ~             if current_block == 4476262310586904498 {
1095 +                 if pending_shell_escape_end as libc::c_int != 0 && !escaping {
1096 +                     if len < buffersize {
1097 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1098 +                     }
1099 +                     len = len.wrapping_add(1);
1100 +                     len;
1101 +                     if len < buffersize {
1102 +                         *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
1103 +                     }
1104 +                     len = len.wrapping_add(1);
1105 +                     len;
1106 +                     pending_shell_escape_end = 0 as libc::c_int != 0;
1107 +                 }
1108 +                 if len < buffersize {
1109 +                     *buffer.offset(len as isize) = c as libc::c_char;
1110 +                 }
1111 +                 len = len.wrapping_add(1);
1112 +                 len;
1113 +                 if !c_and_shell_quote_compat {
1114 +                     all_c_and_shell_quote_compat = 0 as libc::c_int != 0;
1115 +                 }
1116 +             }
     |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1096:24
     |
1096 |                     if pending_shell_escape_end as libc::c_int != 0 && !escaping {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(pending_shell_escape_end)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1098:60
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1098:44
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1098:44
     |
1098 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1101:25
     |
1101 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1103:60
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1103:44
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1103:44
     |
1103 | ...                   *buffer.offset(len as isize) = '\'' as i32 as libc::c_char;
     |                                      ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1106:25
     |
1106 |                         len;
     |                         ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `u8` to `i8` may wrap around the value
    --> src/quotearg.rs:1110:56
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                                        ^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1110:40
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1110:40
     |
1110 |                         *buffer.offset(len as isize) = c as libc::c_char;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1113:21
     |
1113 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1121:13
     |
1121 |             i;
     |             ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1123:19
     |
1123 |         if len == 0 as libc::c_int as libc::c_ulong
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1125:20
     |
1125 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1125:20
     |
1125 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1126:16
     |
1126 |             && elide_outer_quotes as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(elide_outer_quotes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1132:16
     |
1132 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1132:16
     |
1132 |             == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1133:39
     |
1133 |             && !elide_outer_quotes && encountered_single_quote as libc::c_int != 0)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(encountered_single_quote)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1156:19
     |
1156 |             len = 0 as libc::c_int as size_t;
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: you seem to be trying to use `match` for an equality check. Consider using `if`
    --> src/quotearg.rs:1159:5
     |
1159 | /     match current_block {
1160 | |         7928555609993211441 => {
1161 | |             if quoting_style as libc::c_uint
1162 | |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
...    |
1195 | |         }
1196 | |     };
     | |_____^
     |
     = note: `-W clippy::single-match-else` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#single_match_else
help: try this
     |
1159 ~     if current_block == 7928555609993211441 {
1160 +         if quoting_style as libc::c_uint
1161 +             == shell_always_quoting_style as libc::c_int as libc::c_uint
1162 +             && backslash_escapes as libc::c_int != 0
1163 +         {
1164 +             quoting_style = shell_escape_always_quoting_style;
1165 +         }
1166 +         return quotearg_buffer_restyled(
1167 +             buffer,
1168 +             buffersize,
1169 +             arg,
1170 +             argsize,
1171 +             quoting_style,
1172 +             flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
1173 +             0 as *const libc::c_uint,
1174 +             left_quote,
1175 +             right_quote,
1176 +         );
1177 +     } else {
1178 +         if !quote_string.is_null() && !elide_outer_quotes {
1179 +             while *quote_string != 0 {
1180 +                 if len < buffersize {
1181 +                     *buffer.offset(len as isize) = *quote_string;
1182 +                 }
1183 +                 len = len.wrapping_add(1);
1184 +                 len;
1185 +                 quote_string = quote_string.offset(1);
1186 +                 quote_string;
1187 +             }
1188 +         }
1189 +         if len < buffersize {
1190 +             *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
1191 +         }
1192 +         return len;
1193 ~     };
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1162:20
     |
1162 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1162:20
     |
1162 |                 == shell_always_quoting_style as libc::c_int as libc::c_uint
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1163:20
     |
1163 |                 && backslash_escapes as libc::c_int != 0
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(backslash_escapes)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1173:26
     |
1173 |                 flags & !(QA_ELIDE_OUTER_QUOTES as libc::c_int),
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *const _` detected
    --> src/quotearg.rs:1174:17
     |
1174 |                 0 as *const libc::c_uint,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_uint>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1183:40
     |
1183 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1183:40
     |
1183 |                         *buffer.offset(len as isize) = *quote_string;
     |                                        ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
    --> src/quotearg.rs:1186:21
     |
1186 |                     len;
     |                     ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: statement with no effect
    --> src/quotearg.rs:1188:21
     |
1188 |                     quote_string;
     |                     ^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1192:48
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
    --> src/quotearg.rs:1192:32
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
    --> src/quotearg.rs:1192:32
     |
1192 |                 *buffer.offset(len as isize) = '\0' as i32 as libc::c_char;
     |                                ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1199:1
     |
1199 | / pub unsafe extern "C" fn quotearg_buffer(
1200 | |     mut buffer: *mut libc::c_char,
1201 | |     mut buffersize: size_t,
1202 | |     mut arg: *const libc::c_char,
...    |
1224 | |     return r;
1225 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1199:1
     |
1199 | / pub unsafe extern "C" fn quotearg_buffer(
1200 | |     mut buffer: *mut libc::c_char,
1201 | |     mut buffersize: size_t,
1202 | |     mut arg: *const libc::c_char,
...    |
1224 | |     return r;
1225 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1224:5
     |
1224 |     return r;
     |     ^^^^^^^^^ help: remove `return`: `r`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1206:41
     |
1206 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1207 | |         o
1208 | |     } else {
1209 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1210 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1209:9
     |
1209 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1227:1
     |
1227 | / pub unsafe extern "C" fn quotearg_alloc(
1228 | |     mut arg: *const libc::c_char,
1229 | |     mut argsize: size_t,
1230 | |     mut o: *const quoting_options,
1231 | | ) -> *mut libc::c_char {
1232 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1233 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1227:1
     |
1227 | / pub unsafe extern "C" fn quotearg_alloc(
1228 | |     mut arg: *const libc::c_char,
1229 | |     mut argsize: size_t,
1230 | |     mut o: *const quoting_options,
1231 | | ) -> *mut libc::c_char {
1232 | |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
1233 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1232:5
     |
1232 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1232:45
     |
1232 |     return quotearg_alloc_mem(arg, argsize, 0 as *mut size_t, o);
     |                                             ^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<size_t>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1235:1
     |
1235 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1236 | |     mut arg: *const libc::c_char,
1237 | |     mut argsize: size_t,
1238 | |     mut size: *mut size_t,
...    |
1281 | |     return buf;
1282 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1235:1
     |
1235 | / pub unsafe extern "C" fn quotearg_alloc_mem(
1236 | |     mut arg: *const libc::c_char,
1237 | |     mut argsize: size_t,
1238 | |     mut size: *mut size_t,
...    |
1281 | |     return buf;
1282 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1281:5
     |
1281 |     return buf;
     |     ^^^^^^^^^^^ help: remove `return`: `buf`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1241:41
     |
1241 |       let mut p: *const quoting_options = if !o.is_null() {
     |  _________________________________________^
1242 | |         o
1243 | |     } else {
1244 | |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
1245 | |     };
     | |_____^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: borrow as raw pointer
    --> src/quotearg.rs:1244:9
     |
1244 |         &mut default_quoting_options as *mut quoting_options as *const quoting_options
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unnecessary boolean `not` operation
    --> src/quotearg.rs:1248:11
     |
1248 |           | (if !size.is_null() {
     |  ___________^
1249 | |             0 as libc::c_int
1250 | |         } else {
1251 | |             QA_ELIDE_NULL_BYTES as libc::c_int
1252 | |         });
     | |__________^
     |
     = help: remove the `!` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1251:13
     |
1251 |             QA_ELIDE_NULL_BYTES as libc::c_int
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1254:9
     |
1254 |         0 as *mut libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1255:9
     |
1255 |         0 as libc::c_int as size_t,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1264:23
     |
1264 |         .wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1279:38
     |
1279 |         *size = bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong);
     |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1291:9
     |
1287 | /         let mut init = slotvec {
1288 | |             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1289 | |             val: slot0.as_ptr() as *mut _,
1290 | |         };
     | |__________- unnecessary `let` binding
1291 |           init
     |           ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1287 ~         
1288 ~         slotvec {
1289 +             size: ::core::mem::size_of::<[libc::c_char; 256]>() as libc::c_ulong,
1290 +             val: slot0.as_ptr() as *mut _,
1291 +         }
     |

warning: borrow as raw pointer
    --> src/quotearg.rs:1295:5
     |
1295 |     &slotvec0 as *const slotvec as *mut slotvec
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1298:1
     |
1298 | / pub unsafe extern "C" fn quotearg_free() {
1299 | |     let mut sv: *mut slotvec = slotvec;
1300 | |     let mut i: libc::c_int = 0;
1301 | |     i = 1 as libc::c_int;
...    |
1316 | |     nslots = 1 as libc::c_int;
1317 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1298:1
     |
1298 | / pub unsafe extern "C" fn quotearg_free() {
1299 | |     let mut sv: *mut slotvec = slotvec;
1300 | |     let mut i: libc::c_int = 0;
1301 | |     i = 1 as libc::c_int;
...    |
1316 | |     nslots = 1 as libc::c_int;
1317 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1303:14
     |
1303 |         free((*sv.offset(i as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(i as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: statement with no effect
    --> src/quotearg.rs:1305:9
     |
1305 |         i;
     |         ^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1308:14
     |
1308 |         free((*sv.offset(0 as libc::c_int as isize)).val as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(*sv.offset(0 as libc::c_int as isize)).val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: borrow as raw pointer
    --> src/quotearg.rs:1312:14
     |
1312 |     if sv != &mut slotvec0 as *mut slotvec {
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1313:14
     |
1313 |         free(sv as *mut libc::c_void);
     |              ^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
    --> src/quotearg.rs:1395:5
     |
1395 |     return val;
     |     ^^^^^^^^^^^ help: remove `return`: `val`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1326:39
     |
1326 |       let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |  _______________________________________^
1327 | |         < 9223372036854775807 as libc::c_long
1328 | |     {
1329 | |         2147483647 as libc::c_int as libc::c_long
1330 | |     } else {
1331 | |         9223372036854775807 as libc::c_long
1332 | |     }) as libc::c_int;
     | |_____________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1326:43
     |
1326 |     let mut nslots_max: libc::c_int = (if (2147483647 as libc::c_int as libc::c_long)
     |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1329:9
     |
1329 |         2147483647 as libc::c_int as libc::c_long
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2147483647 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/quotearg.rs:1337:44
     |
1337 |         let mut preallocated: bool = sv == &mut slotvec0 as *mut slotvec;
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(slotvec0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1338:37
     |
1338 |         let mut new_nslots: idx_t = nslots as idx_t;
     |                                     ^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1339:14
     |
1339 |           sv = xpalloc(
     |  ______________^
1340 | |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 | |                 as *mut libc::c_void,
1342 | |             &mut new_nslots,
...    |
1345 | |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1346 | |         ) as *mut slotvec;
     | |_________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
     |
1339 ~         sv = xpalloc(
1340 +             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 +                 as *mut libc::c_void,
1342 +             &mut new_nslots,
1343 +             (n - nslots + 1 as libc::c_int) as idx_t,
1344 +             nslots_max as ptrdiff_t,
1345 +             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
1346 ~         ).cast::<src::quotearg::slotvec>();
     |

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1340:13
     |
1340 | /             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
1341 | |                 as *mut libc::c_void,
     | |____________________________________^ help: try `pointer::cast`, a safer alternative: `(if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv }).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/quotearg.rs:1340:13
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/quotearg.rs:1340:17
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(preallocated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/quotearg.rs:1340:52
     |
1340 |             (if preallocated as libc::c_int != 0 { 0 as *mut slotvec } else { sv })
     |                                                    ^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<slotvec>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1343:13
     |
1343 |             (n - nslots + 1 as libc::c_int) as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(n - nslots + 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1344:13
     |
1344 |             nslots_max as ptrdiff_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots_max)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
    --> src/quotearg.rs:1345:13
     |
1345 |             ::core::mem::size_of::<slotvec>() as libc::c_ulong as idx_t,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1352:13
     |
1352 |             sv.offset(nslots as isize) as *mut libc::c_void,
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `sv.offset(nslots as isize).cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1354:13
     |
1354 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/quotearg.rs:1354:28
     |
1354 |             ((new_nslots - nslots as libc::c_long) as libc::c_ulong)
     |                            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(nslots)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `i32` may truncate the value
    --> src/quotearg.rs:1357:18
     |
1357 |         nslots = new_nslots as libc::c_int;
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u32` to `i32` may wrap around the value
    --> src/quotearg.rs:1361:53
     |
1361 |     let mut flags: libc::c_int = (*options).flags | QA_ELIDE_NULL_BYTES as libc::c_int;
     |                                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/quotearg.rs:1374:35
     |
1374 |         size = qsize.wrapping_add(1 as libc::c_int as libc::c_ulong);
     |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/quotearg.rs:1377:18
     |
1377 |             free(val as *mut libc::c_void);
     |                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `val.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `ref` on an entire `let` pattern is discouraged, take a reference with `&` instead
    --> src/quotearg.rs:1380:13
     |
1380 |         let ref mut fresh0 = (*sv.offset(n as isize)).val;
     |         ----^^^^^^^^^^^^^^-------------------------------- help: try: `let fresh0 = &mut (*sv.offset(n as isize)).val;`
     |
     = note: `-W clippy::toplevel-ref-arg` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#toplevel_ref_arg

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1398:1
     |
1398 | / pub unsafe extern "C" fn quotearg_n(
1399 | |     mut n: libc::c_int,
1400 | |     mut arg: *const libc::c_char,
1401 | | ) -> *mut libc::c_char {
...    |
1407 | |     );
1408 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1398:1
     |
1398 | / pub unsafe extern "C" fn quotearg_n(
1399 | |     mut n: libc::c_int,
1400 | |     mut arg: *const libc::c_char,
1401 | | ) -> *mut libc::c_char {
...    |
1407 | |     );
1408 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1402:5
     |
1402 | /     return quotearg_n_options(
1403 | |         n,
1404 | |         arg,
1405 | |         18446744073709551615 as libc::c_ulong,
1406 | |         &mut default_quoting_options,
1407 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1402 ~     quotearg_n_options(
1403 +         n,
1404 +         arg,
1405 +         18446744073709551615 as libc::c_ulong,
1406 +         &mut default_quoting_options,
1407 +     )
     |

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1406:9
     |
1406 |         &mut default_quoting_options,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = note: `-W clippy::unnecessary-mut-passed` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1410:1
     |
1410 | / pub unsafe extern "C" fn quotearg_n_mem(
1411 | |     mut n: libc::c_int,
1412 | |     mut arg: *const libc::c_char,
1413 | |     mut argsize: size_t,
1414 | | ) -> *mut libc::c_char {
1415 | |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
1416 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1410:1
     |
1410 | / pub unsafe extern "C" fn quotearg_n_mem(
1411 | |     mut n: libc::c_int,
1412 | |     mut arg: *const libc::c_char,
1413 | |     mut argsize: size_t,
1414 | | ) -> *mut libc::c_char {
1415 | |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
1416 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1415:5
     |
1415 |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut default_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1415:48
     |
1415 |     return quotearg_n_options(n, arg, argsize, &mut default_quoting_options);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1418:1
     |
1418 | / pub unsafe extern "C" fn quotearg(mut arg: *const libc::c_char) -> *mut libc::c_char {
1419 | |     return quotearg_n(0 as libc::c_int, arg);
1420 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1419:5
     |
1419 |     return quotearg_n(0 as libc::c_int, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n(0 as libc::c_int, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1422:1
     |
1422 | / pub unsafe extern "C" fn quotearg_mem(
1423 | |     mut arg: *const libc::c_char,
1424 | |     mut argsize: size_t,
1425 | | ) -> *mut libc::c_char {
1426 | |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
1427 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1422:1
     |
1422 | / pub unsafe extern "C" fn quotearg_mem(
1423 | |     mut arg: *const libc::c_char,
1424 | |     mut argsize: size_t,
1425 | | ) -> *mut libc::c_char {
1426 | |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
1427 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1426:5
     |
1426 |     return quotearg_n_mem(0 as libc::c_int, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_mem(0 as libc::c_int, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1429:1
     |
1429 | / pub unsafe extern "C" fn quotearg_n_style(
1430 | |     mut n: libc::c_int,
1431 | |     mut s: quoting_style,
1432 | |     mut arg: *const libc::c_char,
...    |
1435 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1436 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1429:1
     |
1429 | / pub unsafe extern "C" fn quotearg_n_style(
1430 | |     mut n: libc::c_int,
1431 | |     mut s: quoting_style,
1432 | |     mut arg: *const libc::c_char,
...    |
1435 | |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
1436 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1435:5
     |
1435 |     return quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, 18446744073709551615 as libc::c_ulong, &o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1438:1
     |
1438 | / pub unsafe extern "C" fn quotearg_n_style_mem(
1439 | |     mut n: libc::c_int,
1440 | |     mut s: quoting_style,
1441 | |     mut arg: *const libc::c_char,
...    |
1445 | |     return quotearg_n_options(n, arg, argsize, &o);
1446 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1438:1
     |
1438 | / pub unsafe extern "C" fn quotearg_n_style_mem(
1439 | |     mut n: libc::c_int,
1440 | |     mut s: quoting_style,
1441 | |     mut arg: *const libc::c_char,
...    |
1445 | |     return quotearg_n_options(n, arg, argsize, &o);
1446 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1445:5
     |
1445 |     return quotearg_n_options(n, arg, argsize, &o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1448:1
     |
1448 | / pub unsafe extern "C" fn quotearg_style(
1449 | |     mut s: quoting_style,
1450 | |     mut arg: *const libc::c_char,
1451 | | ) -> *mut libc::c_char {
1452 | |     return quotearg_n_style(0 as libc::c_int, s, arg);
1453 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1448:1
     |
1448 | / pub unsafe extern "C" fn quotearg_style(
1449 | |     mut s: quoting_style,
1450 | |     mut arg: *const libc::c_char,
1451 | | ) -> *mut libc::c_char {
1452 | |     return quotearg_n_style(0 as libc::c_int, s, arg);
1453 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1452:5
     |
1452 |     return quotearg_n_style(0 as libc::c_int, s, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_style(0 as libc::c_int, s, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1455:1
     |
1455 | / pub unsafe extern "C" fn quotearg_style_mem(
1456 | |     mut s: quoting_style,
1457 | |     mut arg: *const libc::c_char,
1458 | |     mut argsize: size_t,
1459 | | ) -> *mut libc::c_char {
1460 | |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
1461 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1455:1
     |
1455 | / pub unsafe extern "C" fn quotearg_style_mem(
1456 | |     mut s: quoting_style,
1457 | |     mut arg: *const libc::c_char,
1458 | |     mut argsize: size_t,
1459 | | ) -> *mut libc::c_char {
1460 | |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
1461 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1460:5
     |
1460 |     return quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_style_mem(0 as libc::c_int, s, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_char_mem(
1464 | |     mut arg: *const libc::c_char,
1465 | |     mut argsize: size_t,
1466 | |     mut ch: libc::c_char,
...    |
1477 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1463:1
     |
1463 | / pub unsafe extern "C" fn quotearg_char_mem(
1464 | |     mut arg: *const libc::c_char,
1465 | |     mut argsize: size_t,
1466 | |     mut ch: libc::c_char,
...    |
1477 | |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
1478 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1477:5
     |
1477 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
    --> src/quotearg.rs:1472:21
     |
1472 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1473:22
     |
1473 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1477:63
     |
1477 |     return quotearg_n_options(0 as libc::c_int, arg, argsize, &mut options);
     |                                                               ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn quotearg_char(
1481 | |     mut arg: *const libc::c_char,
1482 | |     mut ch: libc::c_char,
1483 | | ) -> *mut libc::c_char {
1484 | |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
1485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1480:1
     |
1480 | / pub unsafe extern "C" fn quotearg_char(
1481 | |     mut arg: *const libc::c_char,
1482 | |     mut ch: libc::c_char,
1483 | | ) -> *mut libc::c_char {
1484 | |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
1485 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1484:5
     |
1484 |     return quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char_mem(arg, 18446744073709551615 as libc::c_ulong, ch)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1487:1
     |
1487 | / pub unsafe extern "C" fn quotearg_colon(
1488 | |     mut arg: *const libc::c_char,
1489 | | ) -> *mut libc::c_char {
1490 | |     return quotearg_char(arg, ':' as i32 as libc::c_char);
1491 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1487:1
     |
1487 | / pub unsafe extern "C" fn quotearg_colon(
1488 | |     mut arg: *const libc::c_char,
1489 | | ) -> *mut libc::c_char {
1490 | |     return quotearg_char(arg, ':' as i32 as libc::c_char);
1491 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1490:5
     |
1490 |     return quotearg_char(arg, ':' as i32 as libc::c_char);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char(arg, ':' as i32 as libc::c_char)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1490:31
     |
1490 |     return quotearg_char(arg, ':' as i32 as libc::c_char);
     |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1493:1
     |
1493 | / pub unsafe extern "C" fn quotearg_colon_mem(
1494 | |     mut arg: *const libc::c_char,
1495 | |     mut argsize: size_t,
1496 | | ) -> *mut libc::c_char {
1497 | |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
1498 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1493:1
     |
1493 | / pub unsafe extern "C" fn quotearg_colon_mem(
1494 | |     mut arg: *const libc::c_char,
1495 | |     mut argsize: size_t,
1496 | | ) -> *mut libc::c_char {
1497 | |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
1498 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1497:5
     |
1497 |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1497:44
     |
1497 |     return quotearg_char_mem(arg, argsize, ':' as i32 as libc::c_char);
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1500:1
     |
1500 | / pub unsafe extern "C" fn quotearg_n_style_colon(
1501 | |     mut n: libc::c_int,
1502 | |     mut s: quoting_style,
1503 | |     mut arg: *const libc::c_char,
...    |
1519 | |     );
1520 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1500:1
     |
1500 | / pub unsafe extern "C" fn quotearg_n_style_colon(
1501 | |     mut n: libc::c_int,
1502 | |     mut s: quoting_style,
1503 | |     mut arg: *const libc::c_char,
...    |
1519 | |     );
1520 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1514:5
     |
1514 | /     return quotearg_n_options(
1515 | |         n,
1516 | |         arg,
1517 | |         18446744073709551615 as libc::c_ulong,
1518 | |         &mut options,
1519 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1514 ~     quotearg_n_options(
1515 +         n,
1516 +         arg,
1517 +         18446744073709551615 as libc::c_ulong,
1518 +         &mut options,
1519 +     )
     |

warning: `0 as *const _` detected
    --> src/quotearg.rs:1509:21
     |
1509 |         left_quote: 0 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
    --> src/quotearg.rs:1510:22
     |
1510 |         right_quote: 0 as *const libc::c_char,
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/quotearg.rs:1513:36
     |
1513 |     set_char_quoting(&mut options, ':' as i32 as libc::c_char, 1 as libc::c_int);
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1518:9
     |
1518 |         &mut options,
     |         ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1522:1
     |
1522 | / pub unsafe extern "C" fn quotearg_n_custom(
1523 | |     mut n: libc::c_int,
1524 | |     mut left_quote: *const libc::c_char,
1525 | |     mut right_quote: *const libc::c_char,
...    |
1534 | |     );
1535 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1522:1
     |
1522 | / pub unsafe extern "C" fn quotearg_n_custom(
1523 | |     mut n: libc::c_int,
1524 | |     mut left_quote: *const libc::c_char,
1525 | |     mut right_quote: *const libc::c_char,
...    |
1534 | |     );
1535 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1528:5
     |
1528 | /     return quotearg_n_custom_mem(
1529 | |         n,
1530 | |         left_quote,
1531 | |         right_quote,
1532 | |         arg,
1533 | |         18446744073709551615 as libc::c_ulong,
1534 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1528 ~     quotearg_n_custom_mem(
1529 +         n,
1530 +         left_quote,
1531 +         right_quote,
1532 +         arg,
1533 +         18446744073709551615 as libc::c_ulong,
1534 +     )
     |

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1537:1
     |
1537 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1538 | |     mut n: libc::c_int,
1539 | |     mut left_quote: *const libc::c_char,
1540 | |     mut right_quote: *const libc::c_char,
...    |
1546 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1547 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1537:1
     |
1537 | / pub unsafe extern "C" fn quotearg_n_custom_mem(
1538 | |     mut n: libc::c_int,
1539 | |     mut left_quote: *const libc::c_char,
1540 | |     mut right_quote: *const libc::c_char,
...    |
1546 | |     return quotearg_n_options(n, arg, argsize, &mut o);
1547 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1546:5
     |
1546 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut o)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1546:48
     |
1546 |     return quotearg_n_options(n, arg, argsize, &mut o);
     |                                                ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1549:1
     |
1549 | / pub unsafe extern "C" fn quotearg_custom(
1550 | |     mut left_quote: *const libc::c_char,
1551 | |     mut right_quote: *const libc::c_char,
1552 | |     mut arg: *const libc::c_char,
1553 | | ) -> *mut libc::c_char {
1554 | |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
1555 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1549:1
     |
1549 | / pub unsafe extern "C" fn quotearg_custom(
1550 | |     mut left_quote: *const libc::c_char,
1551 | |     mut right_quote: *const libc::c_char,
1552 | |     mut arg: *const libc::c_char,
1553 | | ) -> *mut libc::c_char {
1554 | |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
1555 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1554:5
     |
1554 |     return quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_custom(0 as libc::c_int, left_quote, right_quote, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1557:1
     |
1557 | / pub unsafe extern "C" fn quotearg_custom_mem(
1558 | |     mut left_quote: *const libc::c_char,
1559 | |     mut right_quote: *const libc::c_char,
1560 | |     mut arg: *const libc::c_char,
...    |
1569 | |     );
1570 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
    --> src/quotearg.rs:1557:1
     |
1557 | / pub unsafe extern "C" fn quotearg_custom_mem(
1558 | |     mut left_quote: *const libc::c_char,
1559 | |     mut right_quote: *const libc::c_char,
1560 | |     mut arg: *const libc::c_char,
...    |
1569 | |     );
1570 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
    --> src/quotearg.rs:1563:5
     |
1563 | /     return quotearg_n_custom_mem(
1564 | |         0 as libc::c_int,
1565 | |         left_quote,
1566 | |         right_quote,
1567 | |         arg,
1568 | |         argsize,
1569 | |     );
     | |______^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
     |
1563 ~     quotearg_n_custom_mem(
1564 +         0 as libc::c_int,
1565 +         left_quote,
1566 +         right_quote,
1567 +         arg,
1568 +         argsize,
1569 +     )
     |

warning: returning the result of a `let` binding from a block
    --> src/quotearg.rs:1580:5
     |
1573 | /     let mut init = quoting_options {
1574 | |         style: locale_quoting_style,
1575 | |         flags: 0 as libc::c_int,
1576 | |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1577 | |         left_quote: 0 as *const libc::c_char,
1578 | |         right_quote: 0 as *const libc::c_char,
1579 | |     };
     | |______- unnecessary `let` binding
1580 |       init
     |       ^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
     |
1573 ~     
1574 ~     quoting_options {
1575 +         style: locale_quoting_style,
1576 +         flags: 0 as libc::c_int,
1577 +         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
1578 +         left_quote: 0 as *const libc::c_char,
1579 +         right_quote: 0 as *const libc::c_char,
1580 +     }
     |

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/quotearg.rs:1576:27
     |
1576 |         quote_these_too: [0 as libc::c_int as libc::c_uint, 0, 0, 0, 0, 0, 0, 0],
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1583:1
     |
1583 | / pub unsafe extern "C" fn quote_n_mem(
1584 | |     mut n: libc::c_int,
1585 | |     mut arg: *const libc::c_char,
1586 | |     mut argsize: size_t,
1587 | | ) -> *const libc::c_char {
1588 | |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
1589 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1588:5
     |
1588 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quotearg_n_options(n, arg, argsize, &mut quote_quoting_options)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: the function `quotearg_n_options` doesn't need a mutable reference
    --> src/quotearg.rs:1588:48
     |
1588 |     return quotearg_n_options(n, arg, argsize, &mut quote_quoting_options);
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_mut_passed

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1591:1
     |
1591 | / pub unsafe extern "C" fn quote_mem(
1592 | |     mut arg: *const libc::c_char,
1593 | |     mut argsize: size_t,
1594 | | ) -> *const libc::c_char {
1595 | |     return quote_n_mem(0 as libc::c_int, arg, argsize);
1596 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1595:5
     |
1595 |     return quote_n_mem(0 as libc::c_int, arg, argsize);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(0 as libc::c_int, arg, argsize)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1598:1
     |
1598 | / pub unsafe extern "C" fn quote_n(
1599 | |     mut n: libc::c_int,
1600 | |     mut arg: *const libc::c_char,
1601 | | ) -> *const libc::c_char {
1602 | |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
1603 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1602:5
     |
1602 |     return quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n_mem(n, arg, 18446744073709551615 as libc::c_ulong)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
    --> src/quotearg.rs:1605:1
     |
1605 | / pub unsafe extern "C" fn quote(mut arg: *const libc::c_char) -> *const libc::c_char {
1606 | |     return quote_n(0 as libc::c_int, arg);
1607 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
    --> src/quotearg.rs:1606:5
     |
1606 |     return quote_n(0 as libc::c_int, arg);
     |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `quote_n(0 as libc::c_int, arg)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null.rs:12:1
   |
12 | / pub unsafe extern "C" fn setlocale_null_r(
13 | |     mut category: libc::c_int,
14 | |     mut buf: *mut libc::c_char,
15 | |     mut bufsize: size_t,
16 | | ) -> libc::c_int {
17 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
  --> src/setlocale_null.rs:12:1
   |
12 | / pub unsafe extern "C" fn setlocale_null_r(
13 | |     mut category: libc::c_int,
14 | |     mut buf: *mut libc::c_char,
15 | |     mut bufsize: size_t,
16 | | ) -> libc::c_int {
17 | |     return setlocale_null_r_unlocked(category, buf, bufsize);
18 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: unneeded `return` statement
  --> src/setlocale_null.rs:17:5
   |
17 |     return setlocale_null_r_unlocked(category, buf, bufsize);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_r_unlocked(category, buf, bufsize)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null.rs:20:1
   |
20 | / pub unsafe extern "C" fn setlocale_null(
21 | |     mut category: libc::c_int,
22 | | ) -> *const libc::c_char {
23 | |     return setlocale_null_unlocked(category);
24 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null.rs:23:5
   |
23 |     return setlocale_null_unlocked(category);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `setlocale_null_unlocked(category)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:16:1
   |
16 | / pub unsafe extern "C" fn setlocale_null_unlocked(
17 | |     mut category: libc::c_int,
18 | | ) -> *const libc::c_char {
19 | |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
20 | |     return result;
21 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:20:5
   |
20 |     return result;
   |     ^^^^^^^^^^^^^^ help: remove `return`: `result`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *const _` detected
  --> src/setlocale_null_unlocked.rs:19:63
   |
19 |     let mut result: *const libc::c_char = setlocale(category, 0 as *const libc::c_char);
   |                                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/setlocale_null_unlocked.rs:23:1
   |
23 | / pub unsafe extern "C" fn setlocale_null_r_unlocked(
24 | |     mut category: libc::c_int,
25 | |     mut buf: *mut libc::c_char,
26 | |     mut bufsize: size_t,
...  |
57 | |     };
58 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:33:9
   |
33 |         return 22 as libc::c_int;
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `22 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:42:13
   |
42 |             return 0 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/setlocale_null_unlocked.rs:55:13
   |
55 |             return 34 as libc::c_int;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `34 as libc::c_int`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:30:22
   |
30 |         if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:31:54
   |
31 |             *buf.offset(0 as libc::c_int as isize) = '\0' as i32 as libc::c_char;
   |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:38:17
   |
38 |                 buf as *mut libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:39:17
   |
39 |                 result as *const libc::c_void,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:40:37
   |
40 |                 length.wrapping_add(1 as libc::c_int as libc::c_ulong),
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:44:26
   |
44 |             if bufsize > 0 as libc::c_int as libc::c_ulong {
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:46:21
   |
46 |                     buf as *mut libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `buf.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/setlocale_null_unlocked.rs:47:21
   |
47 |                     result as *const libc::c_void,
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:48:42
   |
48 |                     bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong),
   |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i8` may truncate the value
  --> src/setlocale_null_unlocked.rs:53:25
   |
53 |                     ) = '\0' as i32 as libc::c_char;
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
  --> src/setlocale_null_unlocked.rs:52:25
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/setlocale_null_unlocked.rs:52:46
   |
52 |                         bufsize.wrapping_sub(1 as libc::c_int as libc::c_ulong) as isize,
   |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
  --> src/skipchars.rs:43:1
   |
43 | / pub unsafe extern "C" fn skip_buf_matching(
44 | |     mut buf: *const libc::c_char,
45 | |     mut lim: *const libc::c_char,
46 | |     mut predicate: Option::<unsafe extern "C" fn(mcel_t) -> bool>,
...  |
60 | |     return s as *mut libc::c_char;
61 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/skipchars.rs:60:5
   |
60 |     return s as *mut libc::c_char;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `s as *mut libc::c_char`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/skipchars.rs:54:13
   |
54 |             predicate.expect("non-null function pointer")(g) as libc::c_int
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(predicate.expect("non-null function pointer")(g))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/skipchars.rs:55:20
   |
55 |                 == ok as libc::c_int
   |                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/skipchars.rs:58:22
   |
58 |         s = s.offset(g.len as libc::c_int as isize);
   |                      ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(g.len)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
  --> src/skipchars.rs:65:1
   |
65 | / pub unsafe extern "C" fn skip_str_matching(
66 | |     mut str: *const libc::c_char,
67 | |     mut predicate: Option::<unsafe extern "C" fn(mcel_t) -> bool>,
68 | |     mut ok: bool,
...  |
81 | |     return s as *mut libc::c_char;
82 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/skipchars.rs:81:5
   |
81 |     return s as *mut libc::c_char;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `s as *mut libc::c_char`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `i32` may become silently lossy if you later change the type
  --> src/skipchars.rs:72:11
   |
72 |     while *s as libc::c_int != 0
   |           ^^^^^^^^^^^^^^^^^ help: try: `i32::from(*s)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/skipchars.rs:75:13
   |
75 |             predicate.expect("non-null function pointer")(g) as libc::c_int
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(predicate.expect("non-null function pointer")(g))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/skipchars.rs:76:20
   |
76 |                 == ok as libc::c_int
   |                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
  --> src/skipchars.rs:79:22
   |
79 |         s = s.offset(g.len as libc::c_int as isize);
   |                      ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(g.len)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unneeded `return` statement
  --> src/skipchars.rs:85:5
   |
85 |     return mcel_scant(p, '\0' as i32 as libc::c_char);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scant(p, '\0' as i32 as libc::c_char)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i8` may truncate the value
  --> src/skipchars.rs:85:26
   |
85 |     return mcel_scant(p, '\0' as i32 as libc::c_char);
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unneeded `return` statement
   --> src/skipchars.rs:106:5
    |
106 |     return mcel_scan(p, lim);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_scan(p, lim)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
  --> src/skipchars.rs:93:24
   |
93 |         return mcel_ch(*p as char32_t, 1 as libc::c_int as size_t);
   |                        ^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/skipchars.rs:93:40
   |
93 |         return mcel_ch(*p as char32_t, 1 as libc::c_int as size_t);
   |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
  --> src/skipchars.rs:97:15
   |
97 |     while i < MCEL_LEN_MAX as libc::c_int - 1 as libc::c_int {
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/skipchars.rs:100:17
    |
100 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*lim as libc::c_int != terminator as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:100:18
    |
100 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
    |                  ^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*lim)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:100:41
    |
100 |                 (*lim as libc::c_int != terminator as libc::c_int) as libc::c_int
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(terminator)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/skipchars.rs:104:9
    |
104 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
   --> src/skipchars.rs:134:5
    |
134 |     return mcel_ch(ch, len);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_ch(ch, len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
   --> src/skipchars.rs:115:24
    |
115 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
    |                        ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/skipchars.rs:115:39
    |
115 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/skipchars.rs:126:9
    |
126 |         lim.offset_from(p) as libc::c_long as size_t,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/skipchars.rs:129:8
    |
129 |       if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |  ________^
130 | |         < len) as libc::c_int as libc::c_long != 0
    | |_____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
129 ~     if i64::from(((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
130 ~         < len) as libc::c_int) != 0
    |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/skipchars.rs:129:8
    |
129 |       if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |  ________^
130 | |         < len) as libc::c_int as libc::c_long != 0
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
129 ~     if i32::from((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
130 ~         < len) as libc::c_long != 0
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/skipchars.rs:129:9
    |
129 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/skipchars.rs:129:54
    |
129 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/skipchars.rs:132:25
    |
132 |         return mcel_err(c as libc::c_uchar);
    |                         ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/skipchars.rs:137:1
    |
137 | / unsafe extern "C" fn mcel_isbasic(mut c: libc::c_char) -> bool {
138 | |     return (0 as libc::c_int <= c as libc::c_int
139 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
140 | |         as libc::c_long != 0;
141 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/skipchars.rs:138:5
    |
138 | /     return (0 as libc::c_int <= c as libc::c_int
139 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
140 | |         as libc::c_long != 0;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
138 ~     (0 as libc::c_int <= c as libc::c_int
139 +         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
140 +         as libc::c_long != 0
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/skipchars.rs:138:12
    |
138 |       return (0 as libc::c_int <= c as libc::c_int
    |  ____________^
139 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
140 | |         as libc::c_long != 0;
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
138 ~     return i64::from((0 as libc::c_int <= c as libc::c_int
139 ~         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int) != 0;
    |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/skipchars.rs:138:12
    |
138 |       return (0 as libc::c_int <= c as libc::c_int
    |  ____________^
139 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
138 ~     return i32::from(0 as libc::c_int <= c as libc::c_int
139 +         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:138:33
    |
138 |     return (0 as libc::c_int <= c as libc::c_int
    |                                 ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:139:12
    |
139 |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/skipchars.rs:139:33
    |
139 |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/skipchars.rs:147:5
    |
147 | /     return {
148 | |         let mut init = mcel_t {
149 | |             ch: 0,
150 | |             err: err,
...   |
153 | |         init
154 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
147 ~     {
148 +         let mut init = mcel_t {
149 +             ch: 0,
150 +             err: err,
151 +             len: 1 as libc::c_int as libc::c_uchar,
152 +         };
153 +         init
154 +     }
    |

warning: casting `u32` to `i32` may wrap around the value
   --> src/skipchars.rs:144:8
    |
144 |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/skipchars.rs:144:39
    |
144 |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
    |                                       ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(err)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: returning the result of a `let` binding from a block
   --> src/skipchars.rs:153:9
    |
148 | /         let mut init = mcel_t {
149 | |             ch: 0,
150 | |             err: err,
151 | |             len: 1 as libc::c_int as libc::c_uchar,
152 | |         };
    | |__________- unnecessary `let` binding
153 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
148 ~         
149 ~         mcel_t {
150 +             ch: 0,
151 +             err: err,
152 +             len: 1 as libc::c_int as libc::c_uchar,
153 +         }
    |

warning: casting `i32` to `u8` may truncate the value
   --> src/skipchars.rs:151:18
    |
151 |             len: 1 as libc::c_int as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/skipchars.rs:151:18
    |
151 |             len: 1 as libc::c_int as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/skipchars.rs:167:5
    |
167 | /     return {
168 | |         let mut init = mcel_t {
169 | |             ch: ch,
170 | |             err: 0,
...   |
173 | |         init
174 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
167 ~     {
168 +         let mut init = mcel_t {
169 +             ch: ch,
170 +             err: 0,
171 +             len: len as libc::c_uchar,
172 +         };
173 +         init
174 +     }
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/skipchars.rs:158:8
    |
158 |     if (0 as libc::c_int as libc::c_ulong) < len {} else {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/skipchars.rs:161:15
    |
161 |     if len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong {} else {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/skipchars.rs:161:15
    |
161 |     if len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong {} else {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/skipchars.rs:164:14
    |
164 |     if ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint {} else {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/skipchars.rs:164:14
    |
164 |     if ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint {} else {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/skipchars.rs:173:9
    |
168 | /         let mut init = mcel_t {
169 | |             ch: ch,
170 | |             err: 0,
171 | |             len: len as libc::c_uchar,
172 | |         };
    | |__________- unnecessary `let` binding
173 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
168 ~         
169 ~         mcel_t {
170 +             ch: ch,
171 +             err: 0,
172 +             len: len as libc::c_uchar,
173 +         }
    |

warning: casting `u64` to `u8` may truncate the value
   --> src/skipchars.rs:171:18
    |
171 |             len: len as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
 --> src/version.rs:3:47
  |
3 |   pub static mut Version: *const libc::c_char = b"9.5.42-bbc97\0" as *const u8
  |  _______________________________________________^
4 | |     as *const libc::c_char;
  | |__________________________^ help: try `pointer::cast`, a safer alternative: `(b"9.5.42-bbc97\0" as *const u8).cast::<i8>()`
  |
  = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary structure name repetition
  --> src/version_etc.rs:43:22
   |
43 |     pub _chain: *mut _IO_FILE,
   |                      ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
  --> src/version_etc.rs:54:29
   |
54 |     pub _freeres_list: *mut _IO_FILE,
   |                             ^^^^^^^^ help: use the applicable keyword: `Self`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: this function has too many lines (174/100)
   --> src/version_etc.rs:65:1
    |
65  | / pub unsafe extern "C" fn version_etc_arn(
66  | |     mut stream: *mut FILE,
67  | |     mut command_name: *const libc::c_char,
68  | |     mut package: *const libc::c_char,
...   |
246 | |     };
247 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary boolean `not` operation
  --> src/version_etc.rs:73:5
   |
73 | /     if !command_name.is_null() {
74 | |         fprintf(
75 | |             stream,
76 | |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
...  |
87 | |         );
88 | |     }
   | |_____^
   |
   = help: remove the `!` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:76:13
   |
76 |             b"%s (%s) %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s (%s) %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:84:13
   |
84 |             b"%s %s\n\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s %s\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:92:17
   |
92 |         gettext(b"(C)\0" as *const u8 as *const libc::c_char),
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"(C)\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
  --> src/version_etc.rs:93:9
   |
93 |         COPYRIGHT_YEAR as libc::c_int,
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
  --> src/version_etc.rs:95:20
   |
95 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:99:13
    |
99  | /             b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere...
100 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"License GPLv3+: GNU GPL version 3 or later <%s>.\nThis is free software: you are free to change and redistribute it.\nThere is NO WARRANTY, to the extent permitted by law.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:102:9
    |
102 |         b"https://gnu.org/licenses/gpl.html\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://gnu.org/licenses/gpl.html\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:104:20
    |
104 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stream);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:110:25
    |
110 |                 gettext(b"Written by %s.\n\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:118:21
    |
118 |                     b"Written by %s and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:128:21
    |
128 |                     b"Written by %s, %s, and %s.\n\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:139:21
    |
139 | /                     b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8
140 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:152:21
    |
152 | /                     b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8
153 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:166:21
    |
166 | /                     b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8
167 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:181:21
    |
181 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8
182 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:197:21
    |
197 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8
198 | |                         as *const libc::c_char,
    | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\nand %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:214:21
    |
214 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0"
215 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, and %s.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:232:21
    |
232 | /                     b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0"
233 | |                         as *const u8 as *const libc::c_char,
    | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Written by %s, %s, %s,\n%s, %s, %s, %s,\n%s, %s, and others.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:249:1
    |
249 | / pub unsafe extern "C" fn version_etc_ar(
250 | |     mut stream: *mut FILE,
251 | |     mut command_name: *const libc::c_char,
252 | |     mut package: *const libc::c_char,
...   |
262 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
263 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:249:1
    |
249 | / pub unsafe extern "C" fn version_etc_ar(
250 | |     mut stream: *mut FILE,
251 | |     mut command_name: *const libc::c_char,
252 | |     mut package: *const libc::c_char,
...   |
262 | |     version_etc_arn(stream, command_name, package, version, authors, n_authors);
263 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:257:17
    |
257 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:258:29
    |
258 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `isize` may wrap around the value on targets with 64-bit wide pointers
   --> src/version_etc.rs:258:29
    |
258 |     while !(*authors.offset(n_authors as isize)).is_null() {
    |                             ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: statement with no effect
   --> src/version_etc.rs:260:9
    |
260 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:265:1
    |
265 | / pub unsafe extern "C" fn version_etc_va(
266 | |     mut stream: *mut FILE,
267 | |     mut command_name: *const libc::c_char,
268 | |     mut package: *const libc::c_char,
...   |
291 | |     );
292 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: item name starts with its containing module's name
   --> src/version_etc.rs:265:1
    |
265 | / pub unsafe extern "C" fn version_etc_va(
266 | |     mut stream: *mut FILE,
267 | |     mut command_name: *const libc::c_char,
268 | |     mut package: *const libc::c_char,
...   |
291 | |     );
292 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#module_name_repetitions

warning: `0 as *const _` detected
   --> src/version_etc.rs:273:51
    |
273 |     let mut authtab: [*const libc::c_char; 10] = [0 as *const libc::c_char; 10];
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:274:17
    |
274 |     n_authors = 0 as libc::c_int as size_t;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/version_etc.rs:275:23
    |
275 |     while n_authors < 10 as libc::c_int as libc::c_ulong
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:277:21
    |
277 |             authtab[n_authors as usize] = authors.arg::<*const libc::c_char>();
    |                     ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `u64` to `usize` may truncate the value on targets with 32-bit wide pointers
   --> src/version_etc.rs:278:23
    |
278 |             !(authtab[n_authors as usize]).is_null()
    |                       ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: statement with no effect
   --> src/version_etc.rs:282:9
    |
282 |         n_authors;
    |         ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:294:1
    |
294 | / pub unsafe extern "C" fn version_etc(
295 | |     mut stream: *mut FILE,
296 | |     mut command_name: *const libc::c_char,
297 | |     mut package: *const libc::c_char,
...   |
303 | |     version_etc_va(stream, command_name, package, version, authors.as_va_list());
304 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unsafe function's docs miss `# Safety` section
   --> src/version_etc.rs:306:1
    |
306 | / pub unsafe extern "C" fn emit_bug_reporting_address() {
307 | |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stdout);
308 | |     printf(
309 | |         gettext(b"Report bugs to: %s\n\0" as *const u8 as *const libc::c_char),
...   |
323 | |     );
324 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:307:20
    |
307 |     fputs_unlocked(b"\n\0" as *const u8 as *const libc::c_char, stdout);
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:309:17
    |
309 |         gettext(b"Report bugs to: %s\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Report bugs to: %s\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:310:9
    |
310 |         b"bug-coreutils@gnu.org\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"bug-coreutils@gnu.org\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:313:17
    |
313 |         gettext(b"%s home page: <%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s home page: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:314:9
    |
314 |         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:315:9
    |
315 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:319:13
    |
319 | /             b"General help using GNU software: <%s>\n\0" as *const u8
320 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"General help using GNU software: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/version_etc.rs:322:9
    |
322 |         b"https://www.gnu.org/gethelp/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/gethelp/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unsafe function's docs miss `# Safety` section
  --> src/xalloc_die.rs:14:1
   |
14 | / pub unsafe extern "C" fn xalloc_die() {
15 | |     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
...  |
53 | |     abort();
54 | | }
   | |_^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:15:5
   |
15 | /     if 0 != 0 {
16 | |         error(
17 | |             exit_failure,
18 | |             0 as libc::c_int,
...  |
51 | |         });
52 | |     };
   | |_____^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
  --> src/xalloc_die.rs:15:8
   |
15 |     if 0 != 0 {
   |        ^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:19:13
   |
19 |             b"%s\0" as *const u8 as *const libc::c_char,
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:20:21
   |
20 |             gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:22:9
   |
22 | /         if exit_failure != 0 as libc::c_int {
23 | |             unreachable!();
24 | |         } else {};
   | |_________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:27:13
   |
27 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:31:17
   |
31 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:32:25
   |
32 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:34:13
   |
34 | /             if __errstatus != 0 as libc::c_int {
35 | |                 unreachable!();
36 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
  --> src/xalloc_die.rs:40:13
   |
40 |             let __errstatus: libc::c_int = exit_failure;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:44:17
   |
44 |                 b"%s\0" as *const u8 as *const libc::c_char,
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
  --> src/xalloc_die.rs:45:25
   |
45 |                 gettext(b"memory exhausted\0" as *const u8 as *const libc::c_char),
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"memory exhausted\0" as *const u8).cast::<i8>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
  --> src/xalloc_die.rs:47:13
   |
47 | /             if __errstatus != 0 as libc::c_int {
48 | |                 unreachable!();
49 | |             } else {};
   | |_____________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unneeded `return` statement
  --> src/xmalloc.rs:34:9
   |
34 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:36:9
   |
36 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:32:8
   |
32 |     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:33:24
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:33:29
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from((s == 0) as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xmalloc.rs:33:29
   |
33 |         p = realloc(p, (s | (s == 0) as libc::c_int as libc::c_long) as libc::c_ulong);
   |                             ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(s == 0)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unneeded `return` statement
  --> src/xmalloc.rs:53:5
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `calloc(n as libc::c_ulong, s as libc::c_ulong)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:41:50
   |
41 |     if (18446744073709551615 as libc::c_ulong) < n as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:42:17
   |
42 |         if s != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:45:13
   |
45 |         n = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:47:50
   |
47 |     if (18446744073709551615 as libc::c_ulong) < s as libc::c_ulong {
   |                                                  ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:48:17
   |
48 |         if n != 0 as libc::c_int as libc::c_long {
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:51:13
   |
51 |         s = 0 as libc::c_int as idx_t;
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:53:19
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                   ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:53:39
   |
53 |     return calloc(n as libc::c_ulong, s as libc::c_ulong);
   |                                       ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:72:9
   |
72 |         return p;
   |         ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
  --> src/xmalloc.rs:74:9
   |
74 |         return _gl_alloc_nomem()
   |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `_gl_alloc_nomem()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:61:8
   |
61 |     if n as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |        ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:62:12
   |
62 |         && s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong
   |            ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:64:30
   |
64 |         let mut nx: size_t = n as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:65:30
   |
65 |         let mut sx: size_t = s as size_t;
   |                              ^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:66:17
   |
66 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xmalloc.rs:66:58
   |
66 |         if n == 0 as libc::c_int as libc::c_long || s == 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:68:18
   |
68 |             sx = 1 as libc::c_int as size_t;
   |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:81:5
   |
81 |     return 0 as *mut libc::c_void;
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as *mut libc::c_void`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
  --> src/xmalloc.rs:81:12
   |
81 |     return 0 as *mut libc::c_void;
   |            ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unneeded `return` statement
  --> src/xmalloc.rs:85:5
   |
85 | /     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
86 | |         malloc(s as libc::c_ulong)
87 | |     } else {
88 | |         _gl_alloc_nomem()
89 | |     };
   | |______^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
   |
85 ~     if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
86 +         malloc(s as libc::c_ulong)
87 +     } else {
88 +         _gl_alloc_nomem()
89 +     }
   |

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:85:15
   |
85 |     return if s as libc::c_ulong <= 18446744073709551615 as libc::c_ulong {
   |               ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
  --> src/xmalloc.rs:86:16
   |
86 |         malloc(s as libc::c_ulong)
   |                ^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
  --> src/xmalloc.rs:95:5
   |
95 |     return p;
   |     ^^^^^^^^^ help: remove `return`: `p`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:98:1
    |
98  | / pub unsafe extern "C" fn xmalloc(mut s: size_t) -> *mut libc::c_void {
99  | |     return check_nonnull(malloc(s));
100 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
  --> src/xmalloc.rs:99:5
   |
99 |     return check_nonnull(malloc(s));
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(malloc(s))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:102:1
    |
102 | / pub unsafe extern "C" fn ximalloc(mut s: idx_t) -> *mut libc::c_void {
103 | |     return check_nonnull(imalloc(s));
104 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:103:5
    |
103 |     return check_nonnull(imalloc(s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(imalloc(s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:106:1
    |
106 | / pub unsafe extern "C" fn xcharalloc(mut n: size_t) -> *mut libc::c_char {
107 | |     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
...   |
113 | |     }) as *mut libc::c_char;
114 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:107:5
    |
107 | /     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
110 | |         xmalloc(n)
111 | |     } else {
112 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 | |     }) as *mut libc::c_char;
    | |____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
107 ~     (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 +         == 1 as libc::c_int as libc::c_ulong
109 +     {
110 +         xmalloc(n)
111 +     } else {
112 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 +     }) as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:107:12
    |
107 |       return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
    |  ____________^
108 | |         == 1 as libc::c_int as libc::c_ulong
109 | |     {
110 | |         xmalloc(n)
111 | |     } else {
112 | |         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 | |     }) as *mut libc::c_char;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
107 ~     return (if ::core::mem::size_of::<libc::c_char>() as libc::c_ulong
108 +         == 1 as libc::c_int as libc::c_ulong
109 +     {
110 +         xmalloc(n)
111 +     } else {
112 +         xnmalloc(n, ::core::mem::size_of::<libc::c_char>() as libc::c_ulong)
113 ~     }).cast::<i8>();
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:108:12
    |
108 |         == 1 as libc::c_int as libc::c_ulong
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:116:1
    |
116 | / pub unsafe extern "C" fn xrealloc(
117 | |     mut p: *mut libc::c_void,
118 | |     mut s: size_t,
119 | | ) -> *mut libc::c_void {
...   |
124 | |     return r;
125 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:124:5
    |
124 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:127:1
    |
127 | / pub unsafe extern "C" fn xirealloc(
128 | |     mut p: *mut libc::c_void,
129 | |     mut s: idx_t,
130 | | ) -> *mut libc::c_void {
131 | |     return check_nonnull(irealloc(p, s));
132 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:131:5
    |
131 |     return check_nonnull(irealloc(p, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(irealloc(p, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:134:1
    |
134 | / pub unsafe extern "C" fn xreallocarray(
135 | |     mut p: *mut libc::c_void,
136 | |     mut n: size_t,
137 | |     mut s: size_t,
...   |
143 | |     return r;
144 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:143:5
    |
143 |     return r;
    |     ^^^^^^^^^ help: remove `return`: `r`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:146:1
    |
146 | / pub unsafe extern "C" fn xireallocarray(
147 | |     mut p: *mut libc::c_void,
148 | |     mut n: idx_t,
149 | |     mut s: idx_t,
150 | | ) -> *mut libc::c_void {
151 | |     return check_nonnull(ireallocarray(p, n, s));
152 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:151:5
    |
151 |     return check_nonnull(ireallocarray(p, n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(ireallocarray(p, n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:154:1
    |
154 | / pub unsafe extern "C" fn xnmalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
155 | |     return xreallocarray(0 as *mut libc::c_void, n, s);
156 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:155:5
    |
155 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xreallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:155:26
    |
155 |     return xreallocarray(0 as *mut libc::c_void, n, s);
    |                          ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:158:1
    |
158 | / pub unsafe extern "C" fn xinmalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
159 | |     return xireallocarray(0 as *mut libc::c_void, n, s);
160 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:159:5
    |
159 |     return xireallocarray(0 as *mut libc::c_void, n, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xireallocarray(0 as *mut libc::c_void, n, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xmalloc.rs:159:27
    |
159 |     return xireallocarray(0 as *mut libc::c_void, n, s);
    |                           ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:162:1
    |
162 | / pub unsafe extern "C" fn x2realloc(
163 | |     mut p: *mut libc::c_void,
164 | |     mut ps: *mut size_t,
165 | | ) -> *mut libc::c_void {
166 | |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
167 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:166:5
    |
166 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `x2nrealloc(p, ps, 1 as libc::c_int as size_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:166:30
    |
166 |     return x2nrealloc(p, ps, 1 as libc::c_int as size_t);
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:169:1
    |
169 | / pub unsafe extern "C" fn x2nrealloc(
170 | |     mut p: *mut libc::c_void,
171 | |     mut pn: *mut size_t,
172 | |     mut s: size_t,
...   |
194 | |     return p;
195 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:194:5
    |
194 |     return p;
    |     ^^^^^^^^^ help: remove `return`: `p`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:177:17
    |
177 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:177:18
    |
177 |             n = (DEFAULT_MXFAST as libc::c_int as libc::c_ulong).wrapping_div(s);
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:179:31
    |
179 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:179:31
    |
179 |                 .wrapping_add((n == 0) as libc::c_int as libc::c_ulong) as size_t
    |                               ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n == 0)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:185:54
    |
185 |                 (n >> 1 as libc::c_int).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: borrow as raw pointer
   --> src/xmalloc.rs:187:10
    |
187 |         *(&mut n as *mut size_t) = fresh0;
    |          ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xpalloc(
198 | |     mut pa: *mut libc::c_void,
199 | |     mut pn: *mut idx_t,
200 | |     mut n_incr_min: idx_t,
...   |
901 | |     return pa;
902 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: the function has a cognitive complexity of (131/25)
   --> src/xmalloc.rs:197:26
    |
197 | pub unsafe extern "C" fn xpalloc(
    |                          ^^^^^^^
    |
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (698/100)
   --> src/xmalloc.rs:197:1
    |
197 | / pub unsafe extern "C" fn xpalloc(
198 | |     mut pa: *mut libc::c_void,
199 | |     mut pn: *mut idx_t,
200 | |     mut n_incr_min: idx_t,
...   |
901 | |     return pa;
902 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xmalloc.rs:901:5
    |
901 |     return pa;
    |     ^^^^^^^^^^ help: remove `return`: `pa`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: borrow as raw pointer
   --> src/xmalloc.rs:207:6
    |
207 |     *(&mut n as *mut idx_t) = fresh2;
    |      ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:211:8
    |
211 |     if 0 as libc::c_int as libc::c_long <= n_max && n_max < n {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u64` to `i64` may wrap around the value
   --> src/xmalloc.rs:215:38
    |
215 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
216 | |         < -(1 as libc::c_int) as idx_t
217 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
218 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
549 | |         }) as libc::c_ulong
550 | |     }) as idx_t;
    | |_______________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:215:38
    |
215 |       let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |  ______________________________________^
216 | |         < -(1 as libc::c_int) as idx_t
217 | |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
218 | |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
...   |
549 | |         }) as libc::c_ulong
550 | |     }) as idx_t;
    | |______^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:215:45
    |
215 |     let mut adjusted_nbytes: idx_t = (if if (0 as libc::c_int as idx_t)
    |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:216:11
    |
216 |         < -(1 as libc::c_int) as idx_t
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:217:13
    |
217 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:217:41
    |
217 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { n })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:218:15
    |
218 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:218:51
    |
218 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:219:13
    |
219 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:219:41
    |
219 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { s })
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:220:15
    |
220 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:220:51
    |
220 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:221:20
    |
221 |         && (if s < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:222:20
    |
222 |             if n < 0 as libc::c_int as libc::c_long {
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:223:21
    |
223 |                   if ((if 1 as libc::c_int != 0 {
    |  _____________________^
224 | |                     0 as libc::c_int as libc::c_long
225 | |                 } else {
226 | |                     (if 1 as libc::c_int != 0 {
...   |
230 | |                     }) + s
231 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:224:21
    |
224 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:226:21
    |
226 | /                     (if 1 as libc::c_int != 0 {
227 | |                         0 as libc::c_int as libc::c_long
228 | |                     } else {
229 | |                         -(1 as libc::c_int) as idx_t
230 | |                     }) + s
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:227:25
    |
227 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:229:25
    |
229 |                         -(1 as libc::c_int) as idx_t
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:231:22
    |
231 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:231:58
    |
231 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:233:21
    |
233 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:233:26
    |
233 |                     (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:235:21
    |
235 | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
...   |
300 | |                         -(1 as libc::c_int) as idx_t / -s
301 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |_________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
235 ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
236 +                         0 as libc::c_int as libc::c_long
237 +                     } else {
238 +                         s
239 +                     }) - 1 as libc::c_int as libc::c_long)
240 +                         < 0 as libc::c_int as libc::c_long
241 +                     {
242 +                         !(((((if 1 as libc::c_int != 0 {
243 +                             0 as libc::c_int as libc::c_long
244 +                         } else {
245 +                             s
246 +                         }) + 1 as libc::c_int as libc::c_long)
247 +                             << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
248 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
249 +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
250 +                             - 1 as libc::c_int as libc::c_long)
251 +                             * 2 as libc::c_int as libc::c_long
252 +                             + 1 as libc::c_int as libc::c_long)
253 +                     } else {
254 +                         (if 1 as libc::c_int != 0 {
255 +                             0 as libc::c_int as libc::c_long
256 +                         } else {
257 +                             s
258 +                         }) + 0 as libc::c_int as libc::c_long
259 +                     }) < 0 as libc::c_int as libc::c_long
260 +                     {
261 +                         (s
262 +                             < -(if ((if 1 as libc::c_int != 0 {
263 +                                 0 as libc::c_int as libc::c_long
264 +                             } else {
265 +                                 s
266 +                             }) - 1 as libc::c_int as libc::c_long)
267 +                                 < 0 as libc::c_int as libc::c_long
268 +                             {
269 +                                 ((((if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_long
271 +                                 } else {
272 +                                     s
273 +                                 }) + 1 as libc::c_int as libc::c_long)
274 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
275 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
276 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
277 +                                     - 1 as libc::c_int as libc::c_long)
278 +                                     * 2 as libc::c_int as libc::c_long
279 +                                     + 1 as libc::c_int as libc::c_long
280 +                             } else {
281 +                                 (if 1 as libc::c_int != 0 {
282 +                                     0 as libc::c_int as libc::c_long
283 +                                 } else {
284 +                                     s
285 +                                 }) - 1 as libc::c_int as libc::c_long
286 +                             })) as libc::c_int
287 +                     } else {
288 +                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
289 +                     }) != 0
290 +                     {
291 +                         (if 1 as libc::c_int != 0 {
292 +                             0 as libc::c_int as libc::c_long
293 +                         } else {
294 +                             s
295 +                         }) + -(1 as libc::c_int) as idx_t
296 +                             >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
297 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
298 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
299 +                     } else {
300 +                         -(1 as libc::c_int) as idx_t / -s
301 +                     }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:235:22
    |
235 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
...   |
300 | |                         -(1 as libc::c_int) as idx_t / -s
301 | |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:235:35
    |
235 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
236 | |                         0 as libc::c_int as libc::c_long
237 | |                     } else {
238 | |                         s
239 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:236:25
    |
236 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:239:26
    |
239 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:240:27
    |
240 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:242:30
    |
242 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
243 | |                             0 as libc::c_int as libc::c_long
244 | |                         } else {
245 | |                             s
246 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:243:29
    |
243 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:246:30
    |
246 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:248:47
    |
248 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:249:47
    |
249 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:250:31
    |
250 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:251:31
    |
251 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:252:31
    |
252 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:254:25
    |
254 | /                         (if 1 as libc::c_int != 0 {
255 | |                             0 as libc::c_int as libc::c_long
256 | |                         } else {
257 | |                             s
258 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:255:29
    |
255 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:258:30
    |
258 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:259:26
    |
259 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:261:25
    |
261 | /                         (s
262 | |                             < -(if ((if 1 as libc::c_int != 0 {
263 | |                                 0 as libc::c_int as libc::c_long
264 | |                             } else {
...   |
285 | |                                 }) - 1 as libc::c_int as libc::c_long
286 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
261 ~                         i32::from(s
262 +                             < -(if ((if 1 as libc::c_int != 0 {
263 +                                 0 as libc::c_int as libc::c_long
264 +                             } else {
265 +                                 s
266 +                             }) - 1 as libc::c_int as libc::c_long)
267 +                                 < 0 as libc::c_int as libc::c_long
268 +                             {
269 +                                 ((((if 1 as libc::c_int != 0 {
270 +                                     0 as libc::c_int as libc::c_long
271 +                                 } else {
272 +                                     s
273 +                                 }) + 1 as libc::c_int as libc::c_long)
274 +                                     << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
275 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
276 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
277 +                                     - 1 as libc::c_int as libc::c_long)
278 +                                     * 2 as libc::c_int as libc::c_long
279 +                                     + 1 as libc::c_int as libc::c_long
280 +                             } else {
281 +                                 (if 1 as libc::c_int != 0 {
282 +                                     0 as libc::c_int as libc::c_long
283 +                                 } else {
284 +                                     s
285 +                                 }) - 1 as libc::c_int as libc::c_long
286 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:262:37
    |
262 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
263 | | ...                       0 as libc::c_int as libc::c_long
264 | | ...                   } else {
265 | | ...                       s
266 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:263:33
    |
263 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:266:34
    |
266 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:267:35
    |
267 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:269:36
    |
269 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
270 | | ...                       0 as libc::c_int as libc::c_long
271 | | ...                   } else {
272 | | ...                       s
273 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:270:37
    |
270 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:273:38
    |
273 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:275:55
    |
275 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:276:55
    |
276 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:277:39
    |
277 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:278:39
    |
278 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:279:39
    |
279 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:281:33
    |
281 | / ...                   (if 1 as libc::c_int != 0 {
282 | | ...                       0 as libc::c_int as libc::c_long
283 | | ...                   } else {
284 | | ...                       s
285 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:282:37
    |
282 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:285:38
    |
285 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:288:25
    |
288 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:288:26
    |
288 |                         ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:291:25
    |
291 | /                         (if 1 as libc::c_int != 0 {
292 | |                             0 as libc::c_int as libc::c_long
293 | |                         } else {
294 | |                             s
295 | |                         }) + -(1 as libc::c_int) as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:292:29
    |
292 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:295:30
    |
295 |                         }) + -(1 as libc::c_int) as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:297:47
    |
297 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:298:47
    |
298 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:300:25
    |
300 |                         -(1 as libc::c_int) as idx_t / -s
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:301:27
    |
301 |                     }) <= -(1 as libc::c_int) as libc::c_long - n) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:304:29
    |
304 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
305 | |                     0 as libc::c_int as libc::c_long
306 | |                 } else {
307 | |                     (if 1 as libc::c_int != 0 {
...   |
311 | |                     }) + 0 as libc::c_int as idx_t
312 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:305:21
    |
305 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:307:21
    |
307 | /                     (if 1 as libc::c_int != 0 {
308 | |                         0 as libc::c_int as libc::c_long
309 | |                     } else {
310 | |                         s
311 | |                     }) + 0 as libc::c_int as idx_t
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:308:25
    |
308 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:311:26
    |
311 |                     }) + 0 as libc::c_int as idx_t
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:22
    |
312 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:312:58
    |
312 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:314:26
    |
314 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
315 | |                         0 as libc::c_int as libc::c_long
316 | |                     } else {
317 | |                         (if 1 as libc::c_int != 0 {
...   |
321 | |                         }) + 0 as libc::c_int as idx_t
322 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:315:25
    |
315 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:317:25
    |
317 | /                         (if 1 as libc::c_int != 0 {
318 | |                             0 as libc::c_int as libc::c_long
319 | |                         } else {
320 | |                             s
321 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:318:29
    |
318 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:321:30
    |
321 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:322:26
    |
322 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:324:43
    |
324 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:325:43
    |
325 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:326:27
    |
326 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:327:27
    |
327 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:328:27
    |
328 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:330:21
    |
330 | /                     (if 1 as libc::c_int != 0 {
331 | |                         0 as libc::c_int as libc::c_long
332 | |                     } else {
333 | |                         (if 1 as libc::c_int != 0 {
...   |
337 | |                         }) + 0 as libc::c_int as idx_t
338 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:331:25
    |
331 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:333:25
    |
333 | /                         (if 1 as libc::c_int != 0 {
334 | |                             0 as libc::c_int as libc::c_long
335 | |                         } else {
336 | |                             s
337 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:334:29
    |
334 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:337:30
    |
337 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:338:26
    |
338 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:339:22
    |
339 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:341:21
    |
341 | /                     (((if 1 as libc::c_int != 0 {
342 | |                         0 as libc::c_int as libc::c_long
343 | |                     } else {
344 | |                         s
...   |
381 | |                             }) - 1 as libc::c_int as libc::c_long
382 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
341 ~                     i32::from(((if 1 as libc::c_int != 0 {
342 +                         0 as libc::c_int as libc::c_long
343 +                     } else {
344 +                         s
345 +                     }) + 0 as libc::c_int as idx_t)
346 +                         < -(if ((if 1 as libc::c_int != 0 {
347 +                             0 as libc::c_int as libc::c_long
348 +                         } else {
349 +                             (if 1 as libc::c_int != 0 {
350 +                                 0 as libc::c_int as libc::c_long
351 +                             } else {
352 +                                 s
353 +                             }) + 0 as libc::c_int as idx_t
354 +                         }) - 1 as libc::c_int as libc::c_long)
355 +                             < 0 as libc::c_int as libc::c_long
356 +                         {
357 +                             ((((if 1 as libc::c_int != 0 {
358 +                                 0 as libc::c_int as libc::c_long
359 +                             } else {
360 +                                 (if 1 as libc::c_int != 0 {
361 +                                     0 as libc::c_int as libc::c_long
362 +                                 } else {
363 +                                     s
364 +                                 }) + 0 as libc::c_int as idx_t
365 +                             }) + 1 as libc::c_int as libc::c_long)
366 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
367 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
368 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
369 +                                 - 1 as libc::c_int as libc::c_long)
370 +                                 * 2 as libc::c_int as libc::c_long
371 +                                 + 1 as libc::c_int as libc::c_long
372 +                         } else {
373 +                             (if 1 as libc::c_int != 0 {
374 +                                 0 as libc::c_int as libc::c_long
375 +                             } else {
376 +                                 (if 1 as libc::c_int != 0 {
377 +                                     0 as libc::c_int as libc::c_long
378 +                                 } else {
379 +                                     s
380 +                                 }) + 0 as libc::c_int as idx_t
381 +                             }) - 1 as libc::c_int as libc::c_long
382 +                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:341:23
    |
341 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
342 | |                         0 as libc::c_int as libc::c_long
343 | |                     } else {
344 | |                         s
345 | |                     }) + 0 as libc::c_int as idx_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:342:25
    |
342 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:345:26
    |
345 |                     }) + 0 as libc::c_int as idx_t)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:346:33
    |
346 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
347 | |                             0 as libc::c_int as libc::c_long
348 | |                         } else {
349 | |                             (if 1 as libc::c_int != 0 {
...   |
353 | |                             }) + 0 as libc::c_int as idx_t
354 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:347:29
    |
347 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:349:29
    |
349 | / ...                   (if 1 as libc::c_int != 0 {
350 | | ...                       0 as libc::c_int as libc::c_long
351 | | ...                   } else {
352 | | ...                       s
353 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:350:33
    |
350 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:353:34
    |
353 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:354:30
    |
354 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:355:31
    |
355 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:357:32
    |
357 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
358 | | ...                       0 as libc::c_int as libc::c_long
359 | | ...                   } else {
360 | | ...                       (if 1 as libc::c_int != 0 {
...   |
364 | | ...                       }) + 0 as libc::c_int as idx_t
365 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:358:33
    |
358 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:360:33
    |
360 | / ...                   (if 1 as libc::c_int != 0 {
361 | | ...                       0 as libc::c_int as libc::c_long
362 | | ...                   } else {
363 | | ...                       s
364 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:361:37
    |
361 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:364:38
    |
364 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:365:34
    |
365 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:367:51
    |
367 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:368:51
    |
368 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:369:35
    |
369 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:370:35
    |
370 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:371:35
    |
371 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:373:29
    |
373 | / ...                   (if 1 as libc::c_int != 0 {
374 | | ...                       0 as libc::c_int as libc::c_long
375 | | ...                   } else {
376 | | ...                       (if 1 as libc::c_int != 0 {
...   |
380 | | ...                       }) + 0 as libc::c_int as idx_t
381 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:374:33
    |
374 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:376:33
    |
376 | / ...                   (if 1 as libc::c_int != 0 {
377 | | ...                       0 as libc::c_int as libc::c_long
378 | | ...                   } else {
379 | | ...                       s
380 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:377:37
    |
377 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:380:38
    |
380 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:381:34
    |
381 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:384:21
    |
384 | /                     ((0 as libc::c_int as libc::c_long)
385 | |                         < (if 1 as libc::c_int != 0 {
386 | |                             0 as libc::c_int as libc::c_long
387 | |                         } else {
388 | |                             s
389 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |______________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
384 ~                     i32::from((0 as libc::c_int as libc::c_long)
385 +                         < (if 1 as libc::c_int != 0 {
386 +                             0 as libc::c_int as libc::c_long
387 +                         } else {
388 +                             s
389 +                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:384:22
    |
384 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:385:27
    |
385 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
386 | |                             0 as libc::c_int as libc::c_long
387 | |                         } else {
388 | |                             s
389 | |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:386:29
    |
386 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:389:30
    |
389 |                         }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:390:33
    |
390 |                 }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:392:25
    |
392 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
393 | |                         0 as libc::c_int as libc::c_long
394 | |                     } else {
395 | |                         n
396 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:393:25
    |
393 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:396:26
    |
396 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:397:27
    |
397 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:399:25
    |
399 | /                         ((0 as libc::c_int as libc::c_long)
400 | |                             < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
399 ~                         i32::from((0 as libc::c_int as libc::c_long)
400 +                             < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:399:26
    |
399 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:400:35
    |
400 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:402:25
    |
402 | /                         ((0 as libc::c_int as libc::c_long) < n
403 | |                             && (-(1 as libc::c_int) as libc::c_long
404 | |                                 - 0 as libc::c_int as idx_t)
405 | |                                 < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
402 ~                         i32::from((0 as libc::c_int as libc::c_long) < n
403 +                             && (-(1 as libc::c_int) as libc::c_long
404 +                                 - 0 as libc::c_int as idx_t)
405 +                                 < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:402:26
    |
402 |                         ((0 as libc::c_int as libc::c_long) < n
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:403:33
    |
403 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:404:35
    |
404 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:405:39
    |
405 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:408:21
    |
408 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:408:22
    |
408 |                     (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:412:21
    |
412 |             if s == 0 as libc::c_int as libc::c_long {
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:415:24
    |
415 |                 if n < 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:416:33
    |
416 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
417 | |                         0 as libc::c_int as libc::c_long
418 | |                     } else {
419 | |                         (if 1 as libc::c_int != 0 {
...   |
423 | |                         }) + 0 as libc::c_int as idx_t
424 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:417:25
    |
417 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:419:25
    |
419 | /                         (if 1 as libc::c_int != 0 {
420 | |                             0 as libc::c_int as libc::c_long
421 | |                         } else {
422 | |                             n
423 | |                         }) + 0 as libc::c_int as idx_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:420:29
    |
420 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:423:30
    |
423 |                         }) + 0 as libc::c_int as idx_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:424:26
    |
424 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:425:27
    |
425 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:427:30
    |
427 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
428 | |                             0 as libc::c_int as libc::c_long
429 | |                         } else {
430 | |                             (if 1 as libc::c_int != 0 {
...   |
434 | |                             }) + 0 as libc::c_int as idx_t
435 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:428:29
    |
428 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:430:29
    |
430 | / ...                   (if 1 as libc::c_int != 0 {
431 | | ...                       0 as libc::c_int as libc::c_long
432 | | ...                   } else {
433 | | ...                       n
434 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:431:33
    |
431 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:434:34
    |
434 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:435:30
    |
435 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:437:47
    |
437 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:438:47
    |
438 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:439:31
    |
439 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:440:31
    |
440 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:441:31
    |
441 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:443:25
    |
443 | /                         (if 1 as libc::c_int != 0 {
444 | |                             0 as libc::c_int as libc::c_long
445 | |                         } else {
446 | |                             (if 1 as libc::c_int != 0 {
...   |
450 | |                             }) + 0 as libc::c_int as idx_t
451 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:444:29
    |
444 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:446:29
    |
446 | / ...                   (if 1 as libc::c_int != 0 {
447 | | ...                       0 as libc::c_int as libc::c_long
448 | | ...                   } else {
449 | | ...                       n
450 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:447:33
    |
447 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:450:34
    |
450 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:451:30
    |
451 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:452:26
    |
452 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:454:25
    |
454 | /                         (((if 1 as libc::c_int != 0 {
455 | |                             0 as libc::c_int as libc::c_long
456 | |                         } else {
457 | |                             n
...   |
494 | |                                 }) - 1 as libc::c_int as libc::c_long
495 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
454 ~                         i32::from(((if 1 as libc::c_int != 0 {
455 +                             0 as libc::c_int as libc::c_long
456 +                         } else {
457 +                             n
458 +                         }) + 0 as libc::c_int as idx_t)
459 +                             < -(if ((if 1 as libc::c_int != 0 {
460 +                                 0 as libc::c_int as libc::c_long
461 +                             } else {
462 +                                 (if 1 as libc::c_int != 0 {
463 +                                     0 as libc::c_int as libc::c_long
464 +                                 } else {
465 +                                     n
466 +                                 }) + 0 as libc::c_int as idx_t
467 +                             }) - 1 as libc::c_int as libc::c_long)
468 +                                 < 0 as libc::c_int as libc::c_long
469 +                             {
470 +                                 ((((if 1 as libc::c_int != 0 {
471 +                                     0 as libc::c_int as libc::c_long
472 +                                 } else {
473 +                                     (if 1 as libc::c_int != 0 {
474 +                                         0 as libc::c_int as libc::c_long
475 +                                     } else {
476 +                                         n
477 +                                     }) + 0 as libc::c_int as idx_t
478 +                                 }) + 1 as libc::c_int as libc::c_long)
479 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
480 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
481 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
482 +                                     - 1 as libc::c_int as libc::c_long)
483 +                                     * 2 as libc::c_int as libc::c_long
484 +                                     + 1 as libc::c_int as libc::c_long
485 +                             } else {
486 +                                 (if 1 as libc::c_int != 0 {
487 +                                     0 as libc::c_int as libc::c_long
488 +                                 } else {
489 +                                     (if 1 as libc::c_int != 0 {
490 +                                         0 as libc::c_int as libc::c_long
491 +                                     } else {
492 +                                         n
493 +                                     }) + 0 as libc::c_int as idx_t
494 +                                 }) - 1 as libc::c_int as libc::c_long
495 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:454:27
    |
454 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
455 | |                             0 as libc::c_int as libc::c_long
456 | |                         } else {
457 | |                             n
458 | |                         }) + 0 as libc::c_int as idx_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:455:29
    |
455 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:458:30
    |
458 |                         }) + 0 as libc::c_int as idx_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:459:37
    |
459 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
460 | | ...                       0 as libc::c_int as libc::c_long
461 | | ...                   } else {
462 | | ...                       (if 1 as libc::c_int != 0 {
...   |
466 | | ...                       }) + 0 as libc::c_int as idx_t
467 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:460:33
    |
460 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:462:33
    |
462 | / ...                   (if 1 as libc::c_int != 0 {
463 | | ...                       0 as libc::c_int as libc::c_long
464 | | ...                   } else {
465 | | ...                       n
466 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:463:37
    |
463 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:466:38
    |
466 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:467:34
    |
467 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:468:35
    |
468 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:470:36
    |
470 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
471 | | ...                       0 as libc::c_int as libc::c_long
472 | | ...                   } else {
473 | | ...                       (if 1 as libc::c_int != 0 {
...   |
477 | | ...                       }) + 0 as libc::c_int as idx_t
478 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:471:37
    |
471 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:473:37
    |
473 | / ...                   (if 1 as libc::c_int != 0 {
474 | | ...                       0 as libc::c_int as libc::c_long
475 | | ...                   } else {
476 | | ...                       n
477 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:474:41
    |
474 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:477:42
    |
477 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:478:38
    |
478 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:480:55
    |
480 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:481:55
    |
481 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:482:39
    |
482 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:483:39
    |
483 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:484:39
    |
484 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:486:33
    |
486 | / ...                   (if 1 as libc::c_int != 0 {
487 | | ...                       0 as libc::c_int as libc::c_long
488 | | ...                   } else {
489 | | ...                       (if 1 as libc::c_int != 0 {
...   |
493 | | ...                       }) + 0 as libc::c_int as idx_t
494 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:487:37
    |
487 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:489:37
    |
489 | / ...                   (if 1 as libc::c_int != 0 {
490 | | ...                       0 as libc::c_int as libc::c_long
491 | | ...                   } else {
492 | | ...                       n
493 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:490:41
    |
490 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:493:42
    |
493 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:494:38
    |
494 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:497:25
    |
497 | /                         ((0 as libc::c_int as libc::c_long)
498 | |                             < (if 1 as libc::c_int != 0 {
499 | |                                 0 as libc::c_int as libc::c_long
500 | |                             } else {
501 | |                                 n
502 | |                             }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
497 ~                         i32::from((0 as libc::c_int as libc::c_long)
498 +                             < (if 1 as libc::c_int != 0 {
499 +                                 0 as libc::c_int as libc::c_long
500 +                             } else {
501 +                                 n
502 +                             }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:497:26
    |
497 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:498:31
    |
498 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
499 | | ...                       0 as libc::c_int as libc::c_long
500 | | ...                   } else {
501 | | ...                       n
502 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:499:33
    |
499 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:502:34
    |
502 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:503:37
    |
503 |                     }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:505:29
    |
505 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
506 | |                             0 as libc::c_int as libc::c_long
507 | |                         } else {
508 | |                             s
509 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:506:29
    |
506 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:509:30
    |
509 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:510:31
    |
510 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:512:29
    |
512 | / ...                   ((0 as libc::c_int as libc::c_long)
513 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
512 ~                             i32::from((0 as libc::c_int as libc::c_long)
513 +                                 < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:512:30
    |
512 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:513:39
    |
513 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:515:29
    |
515 | / ...                   ((-(1 as libc::c_int) as libc::c_long
516 | | ...                       - 0 as libc::c_int as idx_t)
517 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
515 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
516 +                                 - 0 as libc::c_int as idx_t)
517 +                                 < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:515:31
    |
515 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:516:35
    |
516 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:517:39
    |
517 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:520:25
    |
520 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:520:26
    |
520 |                         (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:523:21
    |
523 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:523:22
    |
523 |                     (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:529:10
    |
529 |         *(&mut nbytes as *mut idx_t) = fresh8;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:533:10
    |
533 |         *(&mut nbytes as *mut idx_t) = fresh10;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:534:9
    |
534 |         fresh11 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh11)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:537:12
    |
537 |         if (9223372036854775807 as libc::c_long as libc::c_ulong)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:540:13
    |
540 |             9223372036854775807 as libc::c_long as libc::c_ulong
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:545:9
    |
545 | /         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
546 | |             DEFAULT_MXFAST_0 as libc::c_int
547 | |         } else {
548 | |             0 as libc::c_int
549 | |         }) as libc::c_ulong
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:545:22
    |
545 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(DEFAULT_MXFAST_0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:545:22
    |
545 |         (if nbytes < DEFAULT_MXFAST_0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u32` to `i32` may wrap around the value
   --> src/xmalloc.rs:546:13
    |
546 |             DEFAULT_MXFAST_0 as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:556:15
    |
556 |         *pn = 0 as libc::c_int as idx_t;
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:561:14
    |
561 |             *(&mut n as *mut idx_t) = fresh12;
    |              ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:562:13
    |
562 |             fresh13 as libc::c_int != 0
    |             ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh13)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:563:20
    |
563 |                 || 0 as libc::c_int as libc::c_long <= n_max && n_max < n
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:564:24
    |
564 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:564:54
    |
564 |                 || (if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:565:25
    |
565 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
566 | |                         0 as libc::c_int as libc::c_long
567 | |                     } else {
568 | |                         n
569 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:566:25
    |
566 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:569:26
    |
569 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:570:27
    |
570 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:571:25
    |
571 |                       && ((if 1 as libc::c_int != 0 {
    |  _________________________^
572 | |                         0 as libc::c_int as libc::c_long
573 | |                     } else {
574 | |                         s
575 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:572:25
    |
572 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:575:26
    |
575 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:576:27
    |
576 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:577:32
    |
577 |                     && (if s < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:578:32
    |
578 |                         if n < 0 as libc::c_int as libc::c_long {
    |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:579:33
    |
579 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
580 | | ...                       0 as libc::c_int as libc::c_long
581 | | ...                   } else {
582 | | ...                       (if 1 as libc::c_int != 0 {
...   |
586 | | ...                       }) + s
587 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:580:33
    |
580 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:582:33
    |
582 | / ...                   (if 1 as libc::c_int != 0 {
583 | | ...                       0 as libc::c_int as libc::c_long
584 | | ...                   } else {
585 | | ...                       -(1 as libc::c_int) as idx_t
586 | | ...                   }) + s
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:583:37
    |
583 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:585:37
    |
585 | ...                   -(1 as libc::c_int) as idx_t
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:587:34
    |
587 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:588:35
    |
588 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:590:33
    |
590 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(n < -(1 as libc::c_int) as idx_t / s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:590:38
    |
590 | ...                   (n < -(1 as libc::c_int) as idx_t / s) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:592:33
    |
592 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
...   |
658 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
659 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
592 ~                                 i32::from((if (if (if ((if 1 as libc::c_int != 0 {
593 +                                     0 as libc::c_int as libc::c_long
594 +                                 } else {
595 +                                     s
596 +                                 }) - 1 as libc::c_int as libc::c_long)
597 +                                     < 0 as libc::c_int as libc::c_long
598 +                                 {
599 +                                     !(((((if 1 as libc::c_int != 0 {
600 +                                         0 as libc::c_int as libc::c_long
601 +                                     } else {
602 +                                         s
603 +                                     }) + 1 as libc::c_int as libc::c_long)
604 +                                         << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
605 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
606 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
607 +                                         - 1 as libc::c_int as libc::c_long)
608 +                                         * 2 as libc::c_int as libc::c_long
609 +                                         + 1 as libc::c_int as libc::c_long)
610 +                                 } else {
611 +                                     (if 1 as libc::c_int != 0 {
612 +                                         0 as libc::c_int as libc::c_long
613 +                                     } else {
614 +                                         s
615 +                                     }) + 0 as libc::c_int as libc::c_long
616 +                                 }) < 0 as libc::c_int as libc::c_long
617 +                                 {
618 +                                     (s
619 +                                         < -(if ((if 1 as libc::c_int != 0 {
620 +                                             0 as libc::c_int as libc::c_long
621 +                                         } else {
622 +                                             s
623 +                                         }) - 1 as libc::c_int as libc::c_long)
624 +                                             < 0 as libc::c_int as libc::c_long
625 +                                         {
626 +                                             ((((if 1 as libc::c_int != 0 {
627 +                                                 0 as libc::c_int as libc::c_long
628 +                                             } else {
629 +                                                 s
630 +                                             }) + 1 as libc::c_int as libc::c_long)
631 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
632 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
633 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
634 +                                                 - 1 as libc::c_int as libc::c_long)
635 +                                                 * 2 as libc::c_int as libc::c_long
636 +                                                 + 1 as libc::c_int as libc::c_long
637 +                                         } else {
638 +                                             (if 1 as libc::c_int != 0 {
639 +                                                 0 as libc::c_int as libc::c_long
640 +                                             } else {
641 +                                                 s
642 +                                             }) - 1 as libc::c_int as libc::c_long
643 +                                         })) as libc::c_int
644 +                                 } else {
645 +                                     ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
646 +                                 }) != 0
647 +                                 {
648 +                                     (if 1 as libc::c_int != 0 {
649 +                                         0 as libc::c_int as libc::c_long
650 +                                     } else {
651 +                                         s
652 +                                     }) + -(1 as libc::c_int) as idx_t
653 +                                         >> (::core::mem::size_of::<idx_t>() as libc::c_ulong)
654 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
655 +                                             .wrapping_sub(1 as libc::c_int as libc::c_ulong)
656 +                                 } else {
657 +                                     -(1 as libc::c_int) as idx_t / -s
658 +                                 }) <= -(1 as libc::c_int) as libc::c_long - n)
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:592:34
    |
592 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ________________________^
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
...   |
657 | | ...                       -(1 as libc::c_int) as idx_t / -s
658 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:592:47
    |
592 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________________^
593 | | ...                       0 as libc::c_int as libc::c_long
594 | | ...                   } else {
595 | | ...                       s
596 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:593:37
    |
593 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:596:38
    |
596 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:597:39
    |
597 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:599:42
    |
599 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
600 | | ...                       0 as libc::c_int as libc::c_long
601 | | ...                   } else {
602 | | ...                       s
603 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:600:41
    |
600 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:603:42
    |
603 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:605:59
    |
605 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:606:59
    |
606 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:607:43
    |
607 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:608:43
    |
608 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:609:43
    |
609 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:611:37
    |
611 | / ...                   (if 1 as libc::c_int != 0 {
612 | | ...                       0 as libc::c_int as libc::c_long
613 | | ...                   } else {
614 | | ...                       s
615 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:612:41
    |
612 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:615:42
    |
615 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:616:38
    |
616 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:618:37
    |
618 | / ...                   (s
619 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
620 | | ...                           0 as libc::c_int as libc::c_long
621 | | ...                       } else {
...   |
642 | | ...                           }) - 1 as libc::c_int as libc::c_long
643 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
618 ~                                     i32::from(s
619 +                                         < -(if ((if 1 as libc::c_int != 0 {
620 +                                             0 as libc::c_int as libc::c_long
621 +                                         } else {
622 +                                             s
623 +                                         }) - 1 as libc::c_int as libc::c_long)
624 +                                             < 0 as libc::c_int as libc::c_long
625 +                                         {
626 +                                             ((((if 1 as libc::c_int != 0 {
627 +                                                 0 as libc::c_int as libc::c_long
628 +                                             } else {
629 +                                                 s
630 +                                             }) + 1 as libc::c_int as libc::c_long)
631 +                                                 << (::core::mem::size_of::<idx_t>() as libc::c_ulong)
632 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
633 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
634 +                                                 - 1 as libc::c_int as libc::c_long)
635 +                                                 * 2 as libc::c_int as libc::c_long
636 +                                                 + 1 as libc::c_int as libc::c_long
637 +                                         } else {
638 +                                             (if 1 as libc::c_int != 0 {
639 +                                                 0 as libc::c_int as libc::c_long
640 +                                             } else {
641 +                                                 s
642 +                                             }) - 1 as libc::c_int as libc::c_long
643 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:619:49
    |
619 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
620 | | ...                       0 as libc::c_int as libc::c_long
621 | | ...                   } else {
622 | | ...                       s
623 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:620:45
    |
620 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:623:46
    |
623 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:624:47
    |
624 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:626:48
    |
626 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
627 | | ...                       0 as libc::c_int as libc::c_long
628 | | ...                   } else {
629 | | ...                       s
630 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:627:49
    |
627 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:630:50
    |
630 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:632:67
    |
632 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:633:67
    |
633 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:634:51
    |
634 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:635:51
    |
635 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:636:51
    |
636 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:638:45
    |
638 | / ...                   (if 1 as libc::c_int != 0 {
639 | | ...                       0 as libc::c_int as libc::c_long
640 | | ...                   } else {
641 | | ...                       s
642 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:639:49
    |
639 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:642:50
    |
642 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:645:37
    |
645 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int as libc::c_long) < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:645:38
    |
645 | ...                   ((0 as libc::c_int as libc::c_long) < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:648:37
    |
648 | / ...                   (if 1 as libc::c_int != 0 {
649 | | ...                       0 as libc::c_int as libc::c_long
650 | | ...                   } else {
651 | | ...                       s
652 | | ...                   }) + -(1 as libc::c_int) as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:649:41
    |
649 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:652:42
    |
652 | ...                   }) + -(1 as libc::c_int) as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:654:59
    |
654 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:655:59
    |
655 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:657:37
    |
657 | ...                   -(1 as libc::c_int) as idx_t / -s
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:658:39
    |
658 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - n)
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:662:41
    |
662 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
663 | | ...                       0 as libc::c_int as libc::c_long
664 | | ...                   } else {
665 | | ...                       (if 1 as libc::c_int != 0 {
...   |
669 | | ...                       }) + 0 as libc::c_int as idx_t
670 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:663:33
    |
663 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:665:33
    |
665 | / ...                   (if 1 as libc::c_int != 0 {
666 | | ...                       0 as libc::c_int as libc::c_long
667 | | ...                   } else {
668 | | ...                       s
669 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:666:37
    |
666 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:669:38
    |
669 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:670:34
    |
670 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:671:35
    |
671 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:673:38
    |
673 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
674 | | ...                       0 as libc::c_int as libc::c_long
675 | | ...                   } else {
676 | | ...                       (if 1 as libc::c_int != 0 {
...   |
680 | | ...                       }) + 0 as libc::c_int as idx_t
681 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:674:37
    |
674 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:676:37
    |
676 | / ...                   (if 1 as libc::c_int != 0 {
677 | | ...                       0 as libc::c_int as libc::c_long
678 | | ...                   } else {
679 | | ...                       s
680 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:677:41
    |
677 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:680:42
    |
680 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:681:38
    |
681 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:683:55
    |
683 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:684:55
    |
684 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:685:39
    |
685 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:686:39
    |
686 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:687:39
    |
687 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:689:33
    |
689 | / ...                   (if 1 as libc::c_int != 0 {
690 | | ...                       0 as libc::c_int as libc::c_long
691 | | ...                   } else {
692 | | ...                       (if 1 as libc::c_int != 0 {
...   |
696 | | ...                       }) + 0 as libc::c_int as idx_t
697 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:690:37
    |
690 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:692:37
    |
692 | / ...                   (if 1 as libc::c_int != 0 {
693 | | ...                       0 as libc::c_int as libc::c_long
694 | | ...                   } else {
695 | | ...                       s
696 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:693:41
    |
693 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:696:42
    |
696 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:697:38
    |
697 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:698:34
    |
698 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:700:33
    |
700 | / ...                   (((if 1 as libc::c_int != 0 {
701 | | ...                       0 as libc::c_int as libc::c_long
702 | | ...                   } else {
703 | | ...                       s
...   |
740 | | ...                           }) - 1 as libc::c_int as libc::c_long
741 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
700 ~                                 i32::from(((if 1 as libc::c_int != 0 {
701 +                                     0 as libc::c_int as libc::c_long
702 +                                 } else {
703 +                                     s
704 +                                 }) + 0 as libc::c_int as idx_t)
705 +                                     < -(if ((if 1 as libc::c_int != 0 {
706 +                                         0 as libc::c_int as libc::c_long
707 +                                     } else {
708 +                                         (if 1 as libc::c_int != 0 {
709 +                                             0 as libc::c_int as libc::c_long
710 +                                         } else {
711 +                                             s
712 +                                         }) + 0 as libc::c_int as idx_t
713 +                                     }) - 1 as libc::c_int as libc::c_long)
714 +                                         < 0 as libc::c_int as libc::c_long
715 +                                     {
716 +                                         ((((if 1 as libc::c_int != 0 {
717 +                                             0 as libc::c_int as libc::c_long
718 +                                         } else {
719 +                                             (if 1 as libc::c_int != 0 {
720 +                                                 0 as libc::c_int as libc::c_long
721 +                                             } else {
722 +                                                 s
723 +                                             }) + 0 as libc::c_int as idx_t
724 +                                         }) + 1 as libc::c_int as libc::c_long)
725 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
726 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
727 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
728 +                                             - 1 as libc::c_int as libc::c_long)
729 +                                             * 2 as libc::c_int as libc::c_long
730 +                                             + 1 as libc::c_int as libc::c_long
731 +                                     } else {
732 +                                         (if 1 as libc::c_int != 0 {
733 +                                             0 as libc::c_int as libc::c_long
734 +                                         } else {
735 +                                             (if 1 as libc::c_int != 0 {
736 +                                                 0 as libc::c_int as libc::c_long
737 +                                             } else {
738 +                                                 s
739 +                                             }) + 0 as libc::c_int as idx_t
740 +                                         }) - 1 as libc::c_int as libc::c_long
741 +                                     }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:700:35
    |
700 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
701 | | ...                       0 as libc::c_int as libc::c_long
702 | | ...                   } else {
703 | | ...                       s
704 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:701:37
    |
701 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:704:38
    |
704 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:705:45
    |
705 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
706 | | ...                       0 as libc::c_int as libc::c_long
707 | | ...                   } else {
708 | | ...                       (if 1 as libc::c_int != 0 {
...   |
712 | | ...                       }) + 0 as libc::c_int as idx_t
713 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:706:41
    |
706 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:708:41
    |
708 | / ...                   (if 1 as libc::c_int != 0 {
709 | | ...                       0 as libc::c_int as libc::c_long
710 | | ...                   } else {
711 | | ...                       s
712 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:709:45
    |
709 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:712:46
    |
712 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:713:42
    |
713 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:714:43
    |
714 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:716:44
    |
716 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
717 | | ...                       0 as libc::c_int as libc::c_long
718 | | ...                   } else {
719 | | ...                       (if 1 as libc::c_int != 0 {
...   |
723 | | ...                       }) + 0 as libc::c_int as idx_t
724 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:717:45
    |
717 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:719:45
    |
719 | / ...                   (if 1 as libc::c_int != 0 {
720 | | ...                       0 as libc::c_int as libc::c_long
721 | | ...                   } else {
722 | | ...                       s
723 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:720:49
    |
720 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:723:50
    |
723 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:724:46
    |
724 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:726:63
    |
726 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:727:63
    |
727 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:728:47
    |
728 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:729:47
    |
729 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:730:47
    |
730 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:732:41
    |
732 | / ...                   (if 1 as libc::c_int != 0 {
733 | | ...                       0 as libc::c_int as libc::c_long
734 | | ...                   } else {
735 | | ...                       (if 1 as libc::c_int != 0 {
...   |
739 | | ...                       }) + 0 as libc::c_int as idx_t
740 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:733:45
    |
733 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:735:45
    |
735 | / ...                   (if 1 as libc::c_int != 0 {
736 | | ...                       0 as libc::c_int as libc::c_long
737 | | ...                   } else {
738 | | ...                       s
739 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:736:49
    |
736 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:739:50
    |
739 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:740:46
    |
740 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:743:33
    |
743 | / ...                   ((0 as libc::c_int as libc::c_long)
744 | | ...                       < (if 1 as libc::c_int != 0 {
745 | | ...                           0 as libc::c_int as libc::c_long
746 | | ...                       } else {
747 | | ...                           s
748 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
743 ~                                 i32::from((0 as libc::c_int as libc::c_long)
744 +                                     < (if 1 as libc::c_int != 0 {
745 +                                         0 as libc::c_int as libc::c_long
746 +                                     } else {
747 +                                         s
748 +                                     }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:743:34
    |
743 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:744:39
    |
744 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
745 | | ...                       0 as libc::c_int as libc::c_long
746 | | ...                   } else {
747 | | ...                       s
748 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:745:41
    |
745 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:748:42
    |
748 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:749:45
    |
749 | ...                   }) != 0 && s == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:751:37
    |
751 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
752 | | ...                       0 as libc::c_int as libc::c_long
753 | | ...                   } else {
754 | | ...                       n
755 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:752:37
    |
752 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:755:38
    |
755 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:756:39
    |
756 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:758:37
    |
758 | / ...                   ((0 as libc::c_int as libc::c_long)
759 | | ...                       < n + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
758 ~                                     i32::from((0 as libc::c_int as libc::c_long)
759 +                                         < n + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:758:38
    |
758 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:759:47
    |
759 | ...                   < n + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:761:37
    |
761 | / ...                   ((0 as libc::c_int as libc::c_long) < n
762 | | ...                       && (-(1 as libc::c_int) as libc::c_long
763 | | ...                           - 0 as libc::c_int as idx_t)
764 | | ...                           < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |____________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
761 ~                                     i32::from((0 as libc::c_int as libc::c_long) < n
762 +                                         && (-(1 as libc::c_int) as libc::c_long
763 +                                             - 0 as libc::c_int as idx_t)
764 +                                             < n - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:761:38
    |
761 | ...                   ((0 as libc::c_int as libc::c_long) < n
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:762:45
    |
762 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:763:47
    |
763 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:764:51
    |
764 | ...                   < n - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:767:33
    |
767 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:767:34
    |
767 | ...                   (0 as libc::c_int as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:771:33
    |
771 |                         if s == 0 as libc::c_int as libc::c_long {
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:774:36
    |
774 | ...                   if n < 0 as libc::c_int as libc::c_long {
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:775:45
    |
775 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
    |  ___________________________________^
776 | | ...                       0 as libc::c_int as libc::c_long
777 | | ...                   } else {
778 | | ...                       (if 1 as libc::c_int != 0 {
...   |
782 | | ...                       }) + 0 as libc::c_int as idx_t
783 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:776:37
    |
776 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:778:37
    |
778 | / ...                   (if 1 as libc::c_int != 0 {
779 | | ...                       0 as libc::c_int as libc::c_long
780 | | ...                   } else {
781 | | ...                       n
782 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:779:41
    |
779 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:782:42
    |
782 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:783:38
    |
783 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:784:39
    |
784 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:786:42
    |
786 |   ...                   !(((((if 1 as libc::c_int != 0 {
    |  ____________________________^
787 | | ...                       0 as libc::c_int as libc::c_long
788 | | ...                   } else {
789 | | ...                       (if 1 as libc::c_int != 0 {
...   |
793 | | ...                       }) + 0 as libc::c_int as idx_t
794 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:787:41
    |
787 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:789:41
    |
789 | / ...                   (if 1 as libc::c_int != 0 {
790 | | ...                       0 as libc::c_int as libc::c_long
791 | | ...                   } else {
792 | | ...                       n
793 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:790:45
    |
790 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:793:46
    |
793 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:794:42
    |
794 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:796:59
    |
796 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:797:59
    |
797 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:798:43
    |
798 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:799:43
    |
799 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:800:43
    |
800 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:802:37
    |
802 | / ...                   (if 1 as libc::c_int != 0 {
803 | | ...                       0 as libc::c_int as libc::c_long
804 | | ...                   } else {
805 | | ...                       (if 1 as libc::c_int != 0 {
...   |
809 | | ...                       }) + 0 as libc::c_int as idx_t
810 | | ...                   }) + 0 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:803:41
    |
803 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:805:41
    |
805 | / ...                   (if 1 as libc::c_int != 0 {
806 | | ...                       0 as libc::c_int as libc::c_long
807 | | ...                   } else {
808 | | ...                       n
809 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:806:45
    |
806 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:809:46
    |
809 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:810:42
    |
810 | ...                   }) + 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:811:38
    |
811 | ...                   }) < 0 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:813:37
    |
813 | / ...                   (((if 1 as libc::c_int != 0 {
814 | | ...                       0 as libc::c_int as libc::c_long
815 | | ...                   } else {
816 | | ...                       n
...   |
853 | | ...                           }) - 1 as libc::c_int as libc::c_long
854 | | ...                       })) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
813 ~                                     i32::from(((if 1 as libc::c_int != 0 {
814 +                                         0 as libc::c_int as libc::c_long
815 +                                     } else {
816 +                                         n
817 +                                     }) + 0 as libc::c_int as idx_t)
818 +                                         < -(if ((if 1 as libc::c_int != 0 {
819 +                                             0 as libc::c_int as libc::c_long
820 +                                         } else {
821 +                                             (if 1 as libc::c_int != 0 {
822 +                                                 0 as libc::c_int as libc::c_long
823 +                                             } else {
824 +                                                 n
825 +                                             }) + 0 as libc::c_int as idx_t
826 +                                         }) - 1 as libc::c_int as libc::c_long)
827 +                                             < 0 as libc::c_int as libc::c_long
828 +                                         {
829 +                                             ((((if 1 as libc::c_int != 0 {
830 +                                                 0 as libc::c_int as libc::c_long
831 +                                             } else {
832 +                                                 (if 1 as libc::c_int != 0 {
833 +                                                     0 as libc::c_int as libc::c_long
834 +                                                 } else {
835 +                                                     n
836 +                                                 }) + 0 as libc::c_int as idx_t
837 +                                             }) + 1 as libc::c_int as libc::c_long)
838 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
839 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
840 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
841 +                                                 - 1 as libc::c_int as libc::c_long)
842 +                                                 * 2 as libc::c_int as libc::c_long
843 +                                                 + 1 as libc::c_int as libc::c_long
844 +                                         } else {
845 +                                             (if 1 as libc::c_int != 0 {
846 +                                                 0 as libc::c_int as libc::c_long
847 +                                             } else {
848 +                                                 (if 1 as libc::c_int != 0 {
849 +                                                     0 as libc::c_int as libc::c_long
850 +                                                 } else {
851 +                                                     n
852 +                                                 }) + 0 as libc::c_int as idx_t
853 +                                             }) - 1 as libc::c_int as libc::c_long
854 +                                         }))
    |

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:813:39
    |
813 |   ...                   (((if 1 as libc::c_int != 0 {
    |  _________________________^
814 | | ...                       0 as libc::c_int as libc::c_long
815 | | ...                   } else {
816 | | ...                       n
817 | | ...                   }) + 0 as libc::c_int as idx_t)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:814:41
    |
814 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:817:42
    |
817 | ...                   }) + 0 as libc::c_int as idx_t)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:818:49
    |
818 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
819 | | ...                       0 as libc::c_int as libc::c_long
820 | | ...                   } else {
821 | | ...                       (if 1 as libc::c_int != 0 {
...   |
825 | | ...                       }) + 0 as libc::c_int as idx_t
826 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:819:45
    |
819 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:821:45
    |
821 | / ...                   (if 1 as libc::c_int != 0 {
822 | | ...                       0 as libc::c_int as libc::c_long
823 | | ...                   } else {
824 | | ...                       n
825 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:822:49
    |
822 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:825:50
    |
825 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:826:46
    |
826 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:827:47
    |
827 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:829:48
    |
829 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
830 | | ...                       0 as libc::c_int as libc::c_long
831 | | ...                   } else {
832 | | ...                       (if 1 as libc::c_int != 0 {
...   |
836 | | ...                       }) + 0 as libc::c_int as idx_t
837 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:830:49
    |
830 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:832:49
    |
832 | / ...                   (if 1 as libc::c_int != 0 {
833 | | ...                       0 as libc::c_int as libc::c_long
834 | | ...                   } else {
835 | | ...                       n
836 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:833:53
    |
833 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:836:54
    |
836 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:837:50
    |
837 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:839:67
    |
839 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:840:67
    |
840 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:841:51
    |
841 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:842:51
    |
842 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:843:51
    |
843 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:845:45
    |
845 | / ...                   (if 1 as libc::c_int != 0 {
846 | | ...                       0 as libc::c_int as libc::c_long
847 | | ...                   } else {
848 | | ...                       (if 1 as libc::c_int != 0 {
...   |
852 | | ...                       }) + 0 as libc::c_int as idx_t
853 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:846:49
    |
846 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:848:49
    |
848 | / ...                   (if 1 as libc::c_int != 0 {
849 | | ...                       0 as libc::c_int as libc::c_long
850 | | ...                   } else {
851 | | ...                       n
852 | | ...                   }) + 0 as libc::c_int as idx_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:849:53
    |
849 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:852:54
    |
852 | ...                   }) + 0 as libc::c_int as idx_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:853:50
    |
853 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:856:37
    |
856 | / ...                   ((0 as libc::c_int as libc::c_long)
857 | | ...                       < (if 1 as libc::c_int != 0 {
858 | | ...                           0 as libc::c_int as libc::c_long
859 | | ...                       } else {
860 | | ...                           n
861 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
856 ~                                     i32::from((0 as libc::c_int as libc::c_long)
857 +                                         < (if 1 as libc::c_int != 0 {
858 +                                             0 as libc::c_int as libc::c_long
859 +                                         } else {
860 +                                             n
861 +                                         }) + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:856:38
    |
856 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:857:43
    |
857 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
858 | | ...                       0 as libc::c_int as libc::c_long
859 | | ...                   } else {
860 | | ...                       n
861 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:858:45
    |
858 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:861:46
    |
861 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:862:49
    |
862 | ...                   }) != 0 && n == -(1 as libc::c_int) as libc::c_long
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xmalloc.rs:864:41
    |
864 |   ...                   if ((if 1 as libc::c_int != 0 {
    |  ___________________________^
865 | | ...                       0 as libc::c_int as libc::c_long
866 | | ...                   } else {
867 | | ...                       s
868 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:865:41
    |
865 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:868:42
    |
868 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:869:43
    |
869 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:871:41
    |
871 | / ...                   ((0 as libc::c_int as libc::c_long)
872 | | ...                       < s + 0 as libc::c_int as idx_t) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
871 ~                                         i32::from((0 as libc::c_int as libc::c_long)
872 +                                             < s + 0 as libc::c_int as idx_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:871:42
    |
871 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:872:51
    |
872 | ...                   < s + 0 as libc::c_int as idx_t) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:874:41
    |
874 | / ...                   ((-(1 as libc::c_int) as libc::c_long
875 | | ...                       - 0 as libc::c_int as idx_t)
876 | | ...                       < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
874 ~                                         i32::from((-(1 as libc::c_int) as libc::c_long
875 +                                             - 0 as libc::c_int as idx_t)
876 +                                             < s - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:874:43
    |
874 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:875:47
    |
875 | ...                   - 0 as libc::c_int as idx_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:876:51
    |
876 | ...                   < s - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:879:37
    |
879 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(0 as libc::c_int as idx_t / n < s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:879:38
    |
879 | ...                   (0 as libc::c_int as idx_t / n < s) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:882:33
    |
882 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(-(1 as libc::c_int) as idx_t / s < n)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:882:34
    |
882 | ...                   (-(1 as libc::c_int) as idx_t / s < n) as libc::c_int
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xmalloc.rs:888:22
    |
888 |                     *(&mut nbytes as *mut idx_t) = fresh18;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xmalloc.rs:892:22
    |
892 |                     *(&mut nbytes as *mut idx_t) = fresh20;
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(nbytes)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xmalloc.rs:893:21
    |
893 |                     fresh21 as libc::c_int
    |                     ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh21)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:899:23
    |
899 |     pa = xrealloc(pa, nbytes as size_t);
    |                       ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:904:1
    |
904 | / pub unsafe extern "C" fn xzalloc(mut s: size_t) -> *mut libc::c_void {
905 | |     return xcalloc(s, 1 as libc::c_int as size_t);
906 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:905:5
    |
905 |     return xcalloc(s, 1 as libc::c_int as size_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xcalloc(s, 1 as libc::c_int as size_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:905:23
    |
905 |     return xcalloc(s, 1 as libc::c_int as size_t);
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:908:1
    |
908 | / pub unsafe extern "C" fn xizalloc(mut s: idx_t) -> *mut libc::c_void {
909 | |     return xicalloc(s, 1 as libc::c_int as idx_t);
910 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:909:5
    |
909 |     return xicalloc(s, 1 as libc::c_int as idx_t);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `xicalloc(s, 1 as libc::c_int as idx_t)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:909:24
    |
909 |     return xicalloc(s, 1 as libc::c_int as idx_t);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:912:1
    |
912 | / pub unsafe extern "C" fn xcalloc(mut n: size_t, mut s: size_t) -> *mut libc::c_void {
913 | |     return check_nonnull(calloc(n, s));
914 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:913:5
    |
913 |     return check_nonnull(calloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(calloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:916:1
    |
916 | / pub unsafe extern "C" fn xicalloc(mut n: idx_t, mut s: idx_t) -> *mut libc::c_void {
917 | |     return check_nonnull(icalloc(n, s));
918 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:917:5
    |
917 |     return check_nonnull(icalloc(n, s));
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `check_nonnull(icalloc(n, s))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:920:1
    |
920 | / pub unsafe extern "C" fn xmemdup(
921 | |     mut p: *const libc::c_void,
922 | |     mut s: size_t,
923 | | ) -> *mut libc::c_void {
924 | |     return memcpy(xmalloc(s), p, s);
925 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:924:5
    |
924 |     return memcpy(xmalloc(s), p, s);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `memcpy(xmalloc(s), p, s)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:927:1
    |
927 | / pub unsafe extern "C" fn ximemdup(
928 | |     mut p: *const libc::c_void,
929 | |     mut s: idx_t,
930 | | ) -> *mut libc::c_void {
931 | |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
932 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:931:5
    |
931 |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `memcpy(ximalloc(s), p, s as libc::c_ulong)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:931:35
    |
931 |     return memcpy(ximalloc(s), p, s as libc::c_ulong);
    |                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:934:1
    |
934 | / pub unsafe extern "C" fn ximemdup0(
935 | |     mut p: *const libc::c_void,
936 | |     mut s: idx_t,
937 | | ) -> *mut libc::c_char {
...   |
942 | |         as *mut libc::c_char;
943 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:941:5
    |
941 | /     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
942 | |         as *mut libc::c_char;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
941 ~     memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
942 +         as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:938:41
    |
938 |       let mut result: *mut libc::c_char = ximalloc(s + 1 as libc::c_int as libc::c_long)
    |  _________________________________________^
939 | |         as *mut libc::c_char;
    | |____________________________^ help: try `pointer::cast`, a safer alternative: `ximalloc(s + 1 as libc::c_int as libc::c_long).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xmalloc.rs:938:54
    |
938 |     let mut result: *mut libc::c_char = ximalloc(s + 1 as libc::c_int as libc::c_long)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i8` may truncate the value
   --> src/xmalloc.rs:940:34
    |
940 |     *result.offset(s as isize) = 0 as libc::c_int as libc::c_char;
    |                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/xmalloc.rs:940:20
    |
940 |     *result.offset(s as isize) = 0 as libc::c_int as libc::c_char;
    |                    ^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:941:12
    |
941 |       return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |  ____________^
942 | |         as *mut libc::c_char;
    | |____________________________^ help: try `pointer::cast`, a safer alternative: `memcpy(result as *mut libc::c_void, p, s as libc::c_ulong).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:941:19
    |
941 |     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `result.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:941:51
    |
941 |     return memcpy(result as *mut libc::c_void, p, s as libc::c_ulong)
    |                                                   ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unsafe function's docs miss `# Safety` section
   --> src/xmalloc.rs:945:1
    |
945 | / pub unsafe extern "C" fn xstrdup(mut string: *const libc::c_char) -> *mut libc::c_char {
946 | |     return xmemdup(
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
950 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: unneeded `return` statement
   --> src/xmalloc.rs:946:5
    |
946 | /     return xmemdup(
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
    | |___________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
946 ~     xmemdup(
947 +         string as *const libc::c_void,
948 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 +     ) as *mut libc::c_char
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:946:12
    |
946 |       return xmemdup(
    |  ____________^
947 | |         string as *const libc::c_void,
948 | |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 | |     ) as *mut libc::c_char;
    | |__________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr
help: try `pointer::cast`, a safer alternative
    |
946 ~     return xmemdup(
947 +         string as *const libc::c_void,
948 +         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
949 ~     ).cast::<i8>();
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xmalloc.rs:947:9
    |
947 |         string as *const libc::c_void,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `string.cast::<libc::c_void>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xmalloc.rs:948:39
    |
948 |         (strlen(string)).wrapping_add(1 as libc::c_int as libc::c_ulong),
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: the function has a cognitive complexity of (65/25)
  --> src/xstrtoimax.rs:39:22
   |
39 | unsafe extern "C" fn bkm_scale(
   |                      ^^^^^^^^^
   |
   = help: you could split it up into multiple smaller functions
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (343/100)
   --> src/xstrtoimax.rs:39:1
    |
39  | / unsafe extern "C" fn bkm_scale(
40  | |     mut x: *mut intmax_t,
41  | |     mut scale_factor: libc::c_int,
42  | | ) -> strtol_error {
...   |
385 | |     return LONGINT_OK;
386 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:385:5
    |
385 |     return LONGINT_OK;
    |     ^^^^^^^^^^^^^^^^^^ help: remove `return`: `LONGINT_OK`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:44:11
   |
44 |     if if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
   |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:44:44
   |
44 |     if if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t
   |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:45:13
   |
45 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { *x })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:45:41
   |
45 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int as libc::c_long } else { *x })
   |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:46:15
   |
46 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:46:51
   |
46 |             - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:47:13
   |
47 |         && ((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
   |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:50:21
   |
50 |             if *x < 0 as libc::c_int as libc::c_long {
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:51:21
   |
51 |                   if ((if 1 as libc::c_int != 0 {
   |  _____________________^
52 | |                     0 as libc::c_int as libc::c_long
53 | |                 } else {
54 | |                     (if 1 as libc::c_int != 0 {
...  |
58 | |                     }) + scale_factor as libc::c_long
59 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   | |__________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:52:21
   |
52 |                     0 as libc::c_int as libc::c_long
   |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:54:21
   |
54 | /                     (if 1 as libc::c_int != 0 {
55 | |                         0 as libc::c_int as libc::c_long
56 | |                     } else {
57 | |                         -(1 as libc::c_int) as intmax_t
58 | |                     }) + scale_factor as libc::c_long
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:55:25
   |
55 |                         0 as libc::c_int as libc::c_long
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:57:25
   |
57 |                         -(1 as libc::c_int) as intmax_t
   |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:58:26
   |
58 |                     }) + scale_factor as libc::c_long
   |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:59:22
   |
59 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:59:58
   |
59 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
   |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
  --> src/xstrtoimax.rs:61:21
   |
61 | /                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
62 | |                         as libc::c_int
   | |______________________________________^ help: try: `i32::from(*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:61:27
   |
61 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
  --> src/xstrtoimax.rs:61:61
   |
61 |                     (*x < -(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
   |                                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:64:21
    |
64  | /                     ((if (if (if ((if 1 as libc::c_int != 0 {
65  | |                         0 as libc::c_int
66  | |                     } else {
67  | |                         scale_factor
...   |
123 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
124 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |__________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
64  ~                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
65  +                         0 as libc::c_int
66  +                     } else {
67  +                         scale_factor
68  +                     }) - 1 as libc::c_int) < 0 as libc::c_int
69  +                     {
70  +                         !(((((if 1 as libc::c_int != 0 {
71  +                             0 as libc::c_int
72  +                         } else {
73  +                             scale_factor
74  +                         }) + 1 as libc::c_int)
75  +                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
76  +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
77  +                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
78  +                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
79  +                     } else {
80  +                         (if 1 as libc::c_int != 0 {
81  +                             0 as libc::c_int
82  +                         } else {
83  +                             scale_factor
84  +                         }) + 0 as libc::c_int
85  +                     }) < 0 as libc::c_int
86  +                     {
87  +                         (scale_factor
88  +                             < -(if ((if 1 as libc::c_int != 0 {
89  +                                 0 as libc::c_int
90  +                             } else {
91  +                                 scale_factor
92  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
93  +                             {
94  +                                 ((((if 1 as libc::c_int != 0 {
95  +                                     0 as libc::c_int
96  +                                 } else {
97  +                                     scale_factor
98  +                                 }) + 1 as libc::c_int)
99  +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
100 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
101 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
102 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
103 +                             } else {
104 +                                 (if 1 as libc::c_int != 0 {
105 +                                     0 as libc::c_int
106 +                                 } else {
107 +                                     scale_factor
108 +                                 }) - 1 as libc::c_int
109 +                             })) as libc::c_int
110 +                     } else {
111 +                         ((0 as libc::c_int) < scale_factor) as libc::c_int
112 +                     }) != 0
113 +                     {
114 +                         (if 1 as libc::c_int != 0 {
115 +                             0 as libc::c_int
116 +                         } else {
117 +                             scale_factor
118 +                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
119 +                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
120 +                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
121 +                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
122 +                     } else {
123 +                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
124 +                     }) <= -(1 as libc::c_int) as libc::c_long - *x)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:64:22
    |
64  |                       ((if (if (if ((if 1 as libc::c_int != 0 {
    |  ______________________^
65  | |                         0 as libc::c_int
66  | |                     } else {
67  | |                         scale_factor
...   |
123 | |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
124 | |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:64:35
   |
64 |                       ((if (if (if ((if 1 as libc::c_int != 0 {
   |  ___________________________________^
65 | |                         0 as libc::c_int
66 | |                     } else {
67 | |                         scale_factor
68 | |                     }) - 1 as libc::c_int) < 0 as libc::c_int
   | |______________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:70:30
   |
70 |                           !(((((if 1 as libc::c_int != 0 {
   |  ______________________________^
71 | |                             0 as libc::c_int
72 | |                         } else {
73 | |                             scale_factor
74 | |                         }) + 1 as libc::c_int)
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:76:47
   |
76 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
  --> src/xstrtoimax.rs:77:47
   |
77 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
   |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:80:25
   |
80 | /                         (if 1 as libc::c_int != 0 {
81 | |                             0 as libc::c_int
82 | |                         } else {
83 | |                             scale_factor
84 | |                         }) + 0 as libc::c_int
   | |__________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:87:25
    |
87  | /                         (scale_factor
88  | |                             < -(if ((if 1 as libc::c_int != 0 {
89  | |                                 0 as libc::c_int
90  | |                             } else {
...   |
108 | |                                 }) - 1 as libc::c_int
109 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
87  ~                         i32::from(scale_factor
88  +                             < -(if ((if 1 as libc::c_int != 0 {
89  +                                 0 as libc::c_int
90  +                             } else {
91  +                                 scale_factor
92  +                             }) - 1 as libc::c_int) < 0 as libc::c_int
93  +                             {
94  +                                 ((((if 1 as libc::c_int != 0 {
95  +                                     0 as libc::c_int
96  +                                 } else {
97  +                                     scale_factor
98  +                                 }) + 1 as libc::c_int)
99  +                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
100 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
101 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
102 +                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
103 +                             } else {
104 +                                 (if 1 as libc::c_int != 0 {
105 +                                     0 as libc::c_int
106 +                                 } else {
107 +                                     scale_factor
108 +                                 }) - 1 as libc::c_int
109 +                             }))
    |

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:88:37
   |
88 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
   |  _______________________________^
89 | | ...                       0 as libc::c_int
90 | | ...                   } else {
91 | | ...                       scale_factor
92 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
   | |________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
  --> src/xstrtoimax.rs:94:36
   |
94 |   ...                   ((((if 1 as libc::c_int != 0 {
   |  __________________________^
95 | | ...                       0 as libc::c_int
96 | | ...                   } else {
97 | | ...                       scale_factor
98 | | ...                   }) + 1 as libc::c_int)
   | |________________________^
   |
   = help: change to `==` and swap the blocks of the `if`/`else`
   = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:100:55
    |
100 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:101:55
    |
101 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:104:33
    |
104 | / ...                   (if 1 as libc::c_int != 0 {
105 | | ...                       0 as libc::c_int
106 | | ...                   } else {
107 | | ...                       scale_factor
108 | | ...                   }) - 1 as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:111:25
    |
111 |                         ((0 as libc::c_int) < scale_factor) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:114:25
    |
114 | /                         (if 1 as libc::c_int != 0 {
115 | |                             0 as libc::c_int
116 | |                         } else {
117 | |                             scale_factor
118 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
114 ~                         i64::from((if 1 as libc::c_int != 0 {
115 +                             0 as libc::c_int
116 +                         } else {
117 +                             scale_factor
118 ~                         })) + -(1 as libc::c_int) as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:114:25
    |
114 | /                         (if 1 as libc::c_int != 0 {
115 | |                             0 as libc::c_int
116 | |                         } else {
117 | |                             scale_factor
118 | |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:118:46
    |
118 |                         }) as libc::c_long + -(1 as libc::c_int) as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:120:47
    |
120 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:121:47
    |
121 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:123:25
    |
123 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:123:59
    |
123 |                         -(1 as libc::c_int) as intmax_t / -scale_factor as libc::c_long
    |                                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:124:27
    |
124 |                     }) <= -(1 as libc::c_int) as libc::c_long - *x) as libc::c_int
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:127:29
    |
127 |                   if (if (if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
128 | |                     0 as libc::c_int as libc::c_long
129 | |                 } else {
130 | |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
131 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
132 | |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    | |__________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:128:21
    |
128 |                     0 as libc::c_int as libc::c_long
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:130:21
    |
130 | /                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
131 | |                         as libc::c_long + 0 as libc::c_int as intmax_t
    | |_______________________________________^ help: try: `i64::from((if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor }))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:130:21
    |
130 |                     (if 1 as libc::c_int != 0 { 0 as libc::c_int } else { scale_factor })
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:131:43
    |
131 |                         as libc::c_long + 0 as libc::c_int as intmax_t
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:132:22
    |
132 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:132:58
    |
132 |                 }) - 1 as libc::c_int as libc::c_long) < 0 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:134:26
    |
134 |                       !(((((if 1 as libc::c_int != 0 {
    |  __________________________^
135 | |                         0 as libc::c_int as libc::c_long
136 | |                     } else {
137 | |                         (if 1 as libc::c_int != 0 {
...   |
141 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
142 | |                     }) + 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:135:25
    |
135 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:137:25
    |
137 | /                         (if 1 as libc::c_int != 0 {
138 | |                             0 as libc::c_int
139 | |                         } else {
140 | |                             scale_factor
141 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
137 ~                         i64::from((if 1 as libc::c_int != 0 {
138 +                             0 as libc::c_int
139 +                         } else {
140 +                             scale_factor
141 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:137:25
    |
137 | /                         (if 1 as libc::c_int != 0 {
138 | |                             0 as libc::c_int
139 | |                         } else {
140 | |                             scale_factor
141 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:141:46
    |
141 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:142:26
    |
142 |                     }) + 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:144:43
    |
144 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:145:43
    |
145 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:146:27
    |
146 |                         - 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:147:27
    |
147 |                         * 2 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:148:27
    |
148 |                         + 1 as libc::c_int as libc::c_long)
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:150:21
    |
150 | /                     (if 1 as libc::c_int != 0 {
151 | |                         0 as libc::c_int as libc::c_long
152 | |                     } else {
153 | |                         (if 1 as libc::c_int != 0 {
...   |
157 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
158 | |                     }) + 0 as libc::c_int as libc::c_long
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:151:25
    |
151 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:153:25
    |
153 | /                         (if 1 as libc::c_int != 0 {
154 | |                             0 as libc::c_int
155 | |                         } else {
156 | |                             scale_factor
157 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
153 ~                         i64::from((if 1 as libc::c_int != 0 {
154 +                             0 as libc::c_int
155 +                         } else {
156 +                             scale_factor
157 ~                         })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:153:25
    |
153 | /                         (if 1 as libc::c_int != 0 {
154 | |                             0 as libc::c_int
155 | |                         } else {
156 | |                             scale_factor
157 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:157:46
    |
157 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:158:26
    |
158 |                     }) + 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:159:22
    |
159 |                 }) < 0 as libc::c_int as libc::c_long
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:161:21
    |
161 | /                     (((if 1 as libc::c_int != 0 {
162 | |                         0 as libc::c_int
163 | |                     } else {
164 | |                         scale_factor
...   |
201 | |                             }) - 1 as libc::c_int as libc::c_long
202 | |                         })) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
161 ~                     i32::from(((if 1 as libc::c_int != 0 {
162 +                         0 as libc::c_int
163 +                     } else {
164 +                         scale_factor
165 +                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
166 +                         < -(if ((if 1 as libc::c_int != 0 {
167 +                             0 as libc::c_int as libc::c_long
168 +                         } else {
169 +                             (if 1 as libc::c_int != 0 {
170 +                                 0 as libc::c_int
171 +                             } else {
172 +                                 scale_factor
173 +                             }) as libc::c_long + 0 as libc::c_int as intmax_t
174 +                         }) - 1 as libc::c_int as libc::c_long)
175 +                             < 0 as libc::c_int as libc::c_long
176 +                         {
177 +                             ((((if 1 as libc::c_int != 0 {
178 +                                 0 as libc::c_int as libc::c_long
179 +                             } else {
180 +                                 (if 1 as libc::c_int != 0 {
181 +                                     0 as libc::c_int
182 +                                 } else {
183 +                                     scale_factor
184 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
185 +                             }) + 1 as libc::c_int as libc::c_long)
186 +                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
187 +                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
188 +                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
189 +                                 - 1 as libc::c_int as libc::c_long)
190 +                                 * 2 as libc::c_int as libc::c_long
191 +                                 + 1 as libc::c_int as libc::c_long
192 +                         } else {
193 +                             (if 1 as libc::c_int != 0 {
194 +                                 0 as libc::c_int as libc::c_long
195 +                             } else {
196 +                                 (if 1 as libc::c_int != 0 {
197 +                                     0 as libc::c_int
198 +                                 } else {
199 +                                     scale_factor
200 +                                 }) as libc::c_long + 0 as libc::c_int as intmax_t
201 +                             }) - 1 as libc::c_int as libc::c_long
202 +                         }))
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:161:23
    |
161 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
162 | |                         0 as libc::c_int
163 | |                     } else {
164 | |                         scale_factor
165 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
161 ~                     ((i64::from((if 1 as libc::c_int != 0 {
162 +                         0 as libc::c_int
163 +                     } else {
164 +                         scale_factor
165 ~                     })) + 0 as libc::c_int as intmax_t)
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:161:23
    |
161 |                       (((if 1 as libc::c_int != 0 {
    |  _______________________^
162 | |                         0 as libc::c_int
163 | |                     } else {
164 | |                         scale_factor
165 | |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:165:42
    |
165 |                     }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:166:33
    |
166 |                           < -(if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
167 | |                             0 as libc::c_int as libc::c_long
168 | |                         } else {
169 | |                             (if 1 as libc::c_int != 0 {
...   |
173 | |                             }) as libc::c_long + 0 as libc::c_int as intmax_t
174 | |                         }) - 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:167:29
    |
167 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:169:29
    |
169 | / ...                   (if 1 as libc::c_int != 0 {
170 | | ...                       0 as libc::c_int
171 | | ...                   } else {
172 | | ...                       scale_factor
173 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
169 ~                             i64::from((if 1 as libc::c_int != 0 {
170 +                                 0 as libc::c_int
171 +                             } else {
172 +                                 scale_factor
173 ~                             })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:169:29
    |
169 | / ...                   (if 1 as libc::c_int != 0 {
170 | | ...                       0 as libc::c_int
171 | | ...                   } else {
172 | | ...                       scale_factor
173 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:173:50
    |
173 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:174:30
    |
174 |                         }) - 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:175:31
    |
175 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:177:32
    |
177 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
178 | | ...                       0 as libc::c_int as libc::c_long
179 | | ...                   } else {
180 | | ...                       (if 1 as libc::c_int != 0 {
...   |
184 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
185 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:178:33
    |
178 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:180:33
    |
180 | / ...                   (if 1 as libc::c_int != 0 {
181 | | ...                       0 as libc::c_int
182 | | ...                   } else {
183 | | ...                       scale_factor
184 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
180 ~                                 i64::from((if 1 as libc::c_int != 0 {
181 +                                     0 as libc::c_int
182 +                                 } else {
183 +                                     scale_factor
184 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:180:33
    |
180 | / ...                   (if 1 as libc::c_int != 0 {
181 | | ...                       0 as libc::c_int
182 | | ...                   } else {
183 | | ...                       scale_factor
184 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:184:54
    |
184 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:185:34
    |
185 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:187:51
    |
187 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:188:51
    |
188 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:189:35
    |
189 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:190:35
    |
190 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:191:35
    |
191 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:193:29
    |
193 | / ...                   (if 1 as libc::c_int != 0 {
194 | | ...                       0 as libc::c_int as libc::c_long
195 | | ...                   } else {
196 | | ...                       (if 1 as libc::c_int != 0 {
...   |
200 | | ...                       }) as libc::c_long + 0 as libc::c_int as intmax_t
201 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:194:33
    |
194 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:196:33
    |
196 | / ...                   (if 1 as libc::c_int != 0 {
197 | | ...                       0 as libc::c_int
198 | | ...                   } else {
199 | | ...                       scale_factor
200 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
196 ~                                 i64::from((if 1 as libc::c_int != 0 {
197 +                                     0 as libc::c_int
198 +                                 } else {
199 +                                     scale_factor
200 ~                                 })) + 0 as libc::c_int as intmax_t
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:196:33
    |
196 | / ...                   (if 1 as libc::c_int != 0 {
197 | | ...                       0 as libc::c_int
198 | | ...                   } else {
199 | | ...                       scale_factor
200 | | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:200:54
    |
200 | ...                   }) as libc::c_long + 0 as libc::c_int as intmax_t
    |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:201:34
    |
201 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:204:21
    |
204 | /                     ((0 as libc::c_int as libc::c_long)
205 | |                         < (if 1 as libc::c_int != 0 {
206 | |                             0 as libc::c_int
207 | |                         } else {
208 | |                             scale_factor
209 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_________________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
204 ~                     i32::from((0 as libc::c_int as libc::c_long)
205 +                         < (if 1 as libc::c_int != 0 {
206 +                             0 as libc::c_int
207 +                         } else {
208 +                             scale_factor
209 +                         }) as libc::c_long + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:204:22
    |
204 |                     ((0 as libc::c_int as libc::c_long)
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:205:27
    |
205 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
206 | |                             0 as libc::c_int
207 | |                         } else {
208 | |                             scale_factor
209 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
205 ~                         < i64::from((if 1 as libc::c_int != 0 {
206 +                             0 as libc::c_int
207 +                         } else {
208 +                             scale_factor
209 ~                         })) + 0 as libc::c_int as intmax_t) as libc::c_int
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:205:27
    |
205 |                           < (if 1 as libc::c_int != 0 {
    |  ___________________________^
206 | |                             0 as libc::c_int
207 | |                         } else {
208 | |                             scale_factor
209 | |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:209:46
    |
209 |                         }) as libc::c_long + 0 as libc::c_int as intmax_t) as libc::c_int
    |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:212:25
    |
212 |                       if ((if 1 as libc::c_int != 0 {
    |  _________________________^
213 | |                         0 as libc::c_int as libc::c_long
214 | |                     } else {
215 | |                         *x
216 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:213:25
    |
213 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:216:26
    |
216 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:217:27
    |
217 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:219:25
    |
219 | /                         ((0 as libc::c_int as libc::c_long)
220 | |                             < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_______________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
219 ~                         i32::from((0 as libc::c_int as libc::c_long)
220 +                             < *x + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:219:26
    |
219 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:220:36
    |
220 | ...                   < *x + 0 as libc::c_int as intmax_t) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:222:25
    |
222 | /                         ((0 as libc::c_int as libc::c_long) < *x
223 | |                             && (-(1 as libc::c_int) as libc::c_long
224 | |                                 - 0 as libc::c_int as intmax_t)
225 | |                                 < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    | |_______________________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
222 ~                         i32::from((0 as libc::c_int as libc::c_long) < *x
223 +                             && (-(1 as libc::c_int) as libc::c_long
224 +                                 - 0 as libc::c_int as intmax_t)
225 +                                 < *x - 1 as libc::c_int as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:222:26
    |
222 |                         ((0 as libc::c_int as libc::c_long) < *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:223:33
    |
223 | ...                   && (-(1 as libc::c_int) as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:224:35
    |
224 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:225:40
    |
225 | ...                   < *x - 1 as libc::c_int as libc::c_long) as libc::c_int
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:228:21
    |
228 | /                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
229 | |                         as libc::c_int
    | |______________________________________^ help: try: `i32::from((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:228:23
    |
228 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:228:54
    |
228 |                     ((0 as libc::c_int as intmax_t / scale_factor as libc::c_long) < *x)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:236:25
    |
236 |                 if *x < 0 as libc::c_int as libc::c_long {
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:237:33
    |
237 |                       if (if (if ((if 1 as libc::c_int != 0 {
    |  _________________________________^
238 | |                         0 as libc::c_int as libc::c_long
239 | |                     } else {
240 | |                         (if 1 as libc::c_int != 0 {
...   |
244 | |                         }) + 0 as libc::c_int as intmax_t
245 | |                     }) - 1 as libc::c_int as libc::c_long)
    | |______________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:238:25
    |
238 |                         0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:240:25
    |
240 | /                         (if 1 as libc::c_int != 0 {
241 | |                             0 as libc::c_int as libc::c_long
242 | |                         } else {
243 | |                             *x
244 | |                         }) + 0 as libc::c_int as intmax_t
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:241:29
    |
241 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:244:30
    |
244 |                         }) + 0 as libc::c_int as intmax_t
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:245:26
    |
245 |                     }) - 1 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:246:27
    |
246 |                         < 0 as libc::c_int as libc::c_long
    |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:248:30
    |
248 |                           !(((((if 1 as libc::c_int != 0 {
    |  ______________________________^
249 | |                             0 as libc::c_int as libc::c_long
250 | |                         } else {
251 | |                             (if 1 as libc::c_int != 0 {
...   |
255 | |                             }) + 0 as libc::c_int as intmax_t
256 | |                         }) + 1 as libc::c_int as libc::c_long)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:249:29
    |
249 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:251:29
    |
251 | / ...                   (if 1 as libc::c_int != 0 {
252 | | ...                       0 as libc::c_int as libc::c_long
253 | | ...                   } else {
254 | | ...                       *x
255 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:252:33
    |
252 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:255:34
    |
255 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:256:30
    |
256 |                         }) + 1 as libc::c_int as libc::c_long)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:258:47
    |
258 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:259:47
    |
259 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:260:31
    |
260 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:261:31
    |
261 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:262:31
    |
262 | ...                   + 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:264:25
    |
264 | /                         (if 1 as libc::c_int != 0 {
265 | |                             0 as libc::c_int as libc::c_long
266 | |                         } else {
267 | |                             (if 1 as libc::c_int != 0 {
...   |
271 | |                             }) + 0 as libc::c_int as intmax_t
272 | |                         }) + 0 as libc::c_int as libc::c_long
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:265:29
    |
265 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:267:29
    |
267 | / ...                   (if 1 as libc::c_int != 0 {
268 | | ...                       0 as libc::c_int as libc::c_long
269 | | ...                   } else {
270 | | ...                       *x
271 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:268:33
    |
268 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:271:34
    |
271 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:272:30
    |
272 |                         }) + 0 as libc::c_int as libc::c_long
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:273:26
    |
273 |                     }) < 0 as libc::c_int as libc::c_long
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:275:25
    |
275 | /                         (((if 1 as libc::c_int != 0 {
276 | |                             0 as libc::c_int as libc::c_long
277 | |                         } else {
278 | |                             *x
...   |
315 | |                                 }) - 1 as libc::c_int as libc::c_long
316 | |                             })) as libc::c_int
    | |______________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
275 ~                         i32::from(((if 1 as libc::c_int != 0 {
276 +                             0 as libc::c_int as libc::c_long
277 +                         } else {
278 +                             *x
279 +                         }) + 0 as libc::c_int as intmax_t)
280 +                             < -(if ((if 1 as libc::c_int != 0 {
281 +                                 0 as libc::c_int as libc::c_long
282 +                             } else {
283 +                                 (if 1 as libc::c_int != 0 {
284 +                                     0 as libc::c_int as libc::c_long
285 +                                 } else {
286 +                                     *x
287 +                                 }) + 0 as libc::c_int as intmax_t
288 +                             }) - 1 as libc::c_int as libc::c_long)
289 +                                 < 0 as libc::c_int as libc::c_long
290 +                             {
291 +                                 ((((if 1 as libc::c_int != 0 {
292 +                                     0 as libc::c_int as libc::c_long
293 +                                 } else {
294 +                                     (if 1 as libc::c_int != 0 {
295 +                                         0 as libc::c_int as libc::c_long
296 +                                     } else {
297 +                                         *x
298 +                                     }) + 0 as libc::c_int as intmax_t
299 +                                 }) + 1 as libc::c_int as libc::c_long)
300 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
301 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
302 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
303 +                                     - 1 as libc::c_int as libc::c_long)
304 +                                     * 2 as libc::c_int as libc::c_long
305 +                                     + 1 as libc::c_int as libc::c_long
306 +                             } else {
307 +                                 (if 1 as libc::c_int != 0 {
308 +                                     0 as libc::c_int as libc::c_long
309 +                                 } else {
310 +                                     (if 1 as libc::c_int != 0 {
311 +                                         0 as libc::c_int as libc::c_long
312 +                                     } else {
313 +                                         *x
314 +                                     }) + 0 as libc::c_int as intmax_t
315 +                                 }) - 1 as libc::c_int as libc::c_long
316 +                             }))
    |

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:275:27
    |
275 |                           (((if 1 as libc::c_int != 0 {
    |  ___________________________^
276 | |                             0 as libc::c_int as libc::c_long
277 | |                         } else {
278 | |                             *x
279 | |                         }) + 0 as libc::c_int as intmax_t)
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:276:29
    |
276 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:279:30
    |
279 |                         }) + 0 as libc::c_int as intmax_t)
    |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:280:37
    |
280 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
    |  _______________________________^
281 | | ...                       0 as libc::c_int as libc::c_long
282 | | ...                   } else {
283 | | ...                       (if 1 as libc::c_int != 0 {
...   |
287 | | ...                       }) + 0 as libc::c_int as intmax_t
288 | | ...                   }) - 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:281:33
    |
281 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:283:33
    |
283 | / ...                   (if 1 as libc::c_int != 0 {
284 | | ...                       0 as libc::c_int as libc::c_long
285 | | ...                   } else {
286 | | ...                       *x
287 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:284:37
    |
284 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:287:38
    |
287 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:288:34
    |
288 | ...                   }) - 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:289:35
    |
289 | ...                   < 0 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:291:36
    |
291 |   ...                   ((((if 1 as libc::c_int != 0 {
    |  __________________________^
292 | | ...                       0 as libc::c_int as libc::c_long
293 | | ...                   } else {
294 | | ...                       (if 1 as libc::c_int != 0 {
...   |
298 | | ...                       }) + 0 as libc::c_int as intmax_t
299 | | ...                   }) + 1 as libc::c_int as libc::c_long)
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:292:37
    |
292 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:294:37
    |
294 | / ...                   (if 1 as libc::c_int != 0 {
295 | | ...                       0 as libc::c_int as libc::c_long
296 | | ...                   } else {
297 | | ...                       *x
298 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:295:41
    |
295 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:298:42
    |
298 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:299:38
    |
299 | ...                   }) + 1 as libc::c_int as libc::c_long)
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:301:55
    |
301 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:302:55
    |
302 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:303:39
    |
303 | ...                   - 1 as libc::c_int as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:304:39
    |
304 | ...                   * 2 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:305:39
    |
305 | ...                   + 1 as libc::c_int as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:307:33
    |
307 | / ...                   (if 1 as libc::c_int != 0 {
308 | | ...                       0 as libc::c_int as libc::c_long
309 | | ...                   } else {
310 | | ...                       (if 1 as libc::c_int != 0 {
...   |
314 | | ...                       }) + 0 as libc::c_int as intmax_t
315 | | ...                   }) - 1 as libc::c_int as libc::c_long
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:308:37
    |
308 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:310:37
    |
310 | / ...                   (if 1 as libc::c_int != 0 {
311 | | ...                       0 as libc::c_int as libc::c_long
312 | | ...                   } else {
313 | | ...                       *x
314 | | ...                   }) + 0 as libc::c_int as intmax_t
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:311:41
    |
311 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:314:42
    |
314 | ...                   }) + 0 as libc::c_int as intmax_t
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:315:38
    |
315 | ...                   }) - 1 as libc::c_int as libc::c_long
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:318:25
    |
318 | /                         ((0 as libc::c_int as libc::c_long)
319 | |                             < (if 1 as libc::c_int != 0 {
320 | |                                 0 as libc::c_int as libc::c_long
321 | |                             } else {
322 | |                                 *x
323 | |                             }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |_____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
318 ~                         i32::from((0 as libc::c_int as libc::c_long)
319 +                             < (if 1 as libc::c_int != 0 {
320 +                                 0 as libc::c_int as libc::c_long
321 +                             } else {
322 +                                 *x
323 +                             }) + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:318:26
    |
318 |                         ((0 as libc::c_int as libc::c_long)
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:319:31
    |
319 |   ...                   < (if 1 as libc::c_int != 0 {
    |  _________________________^
320 | | ...                       0 as libc::c_int as libc::c_long
321 | | ...                   } else {
322 | | ...                       *x
323 | | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    | |________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:320:33
    |
320 | ...                   0 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:323:34
    |
323 | ...                   }) + 0 as libc::c_int as intmax_t) as libc::c_int
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:324:38
    |
324 |                     }) != 0 && *x == -(1 as libc::c_int) as libc::c_long
    |                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/xstrtoimax.rs:326:29
    |
326 |                           if ((if 1 as libc::c_int != 0 {
    |  _____________________________^
327 | |                             0 as libc::c_int
328 | |                         } else {
329 | |                             scale_factor
330 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
    | |__________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:332:29
    |
332 | / ...                   ((0 as libc::c_int as libc::c_long)
333 | | ...                       < scale_factor as libc::c_long
334 | | ...                           + 0 as libc::c_int as intmax_t) as libc::c_int
    | |____________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
332 ~                             i32::from((0 as libc::c_int as libc::c_long)
333 +                                 < scale_factor as libc::c_long
334 +                                     + 0 as libc::c_int as intmax_t)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:332:30
    |
332 | ...                   ((0 as libc::c_int as libc::c_long)
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:333:35
    |
333 | ...                   < scale_factor as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:334:39
    |
334 | ...                   + 0 as libc::c_int as intmax_t) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:336:29
    |
336 | / ...                   ((-(1 as libc::c_int) as libc::c_long
337 | | ...                       - 0 as libc::c_int as intmax_t)
338 | | ...                       < (scale_factor - 1 as libc::c_int) as libc::c_long)
339 | | ...                       as libc::c_int
    | |________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
336 ~                             i32::from((-(1 as libc::c_int) as libc::c_long
337 +                                 - 0 as libc::c_int as intmax_t)
338 +                                 < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:336:31
    |
336 | ...                   ((-(1 as libc::c_int) as libc::c_long
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:337:35
    |
337 | ...                   - 0 as libc::c_int as intmax_t)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:338:35
    |
338 | ...                   < (scale_factor - 1 as libc::c_int) as libc::c_long)
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor - 1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:342:25
    |
342 | /                         (0 as libc::c_int as intmax_t / *x
343 | |                             < scale_factor as libc::c_long) as libc::c_int
    | |__________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
342 ~                         i32::from(0 as libc::c_int as intmax_t / *x
343 +                             < scale_factor as libc::c_long)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:342:26
    |
342 |                         (0 as libc::c_int as intmax_t / *x
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:343:31
    |
343 | ...                   < scale_factor as libc::c_long) as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:346:21
    |
346 | /                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
347 | |                         < *x) as libc::c_int
    | |____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
346 ~                     i32::from((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
347 +                         < *x)
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:346:23
    |
346 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:346:57
    |
346 |                     ((-(1 as libc::c_int) as intmax_t / scale_factor as libc::c_long)
    |                                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(scale_factor)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
   --> src/xstrtoimax.rs:353:10
    |
353 |         *(&mut scaled as *mut intmax_t) = fresh4;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
   --> src/xstrtoimax.rs:357:10
    |
357 |         *(&mut scaled as *mut intmax_t) = fresh6;
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(scaled)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/xstrtoimax.rs:358:9
    |
358 |         fresh7 as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh7)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:361:22
    |
361 |         *x = if *x < 0 as libc::c_int as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:362:17
    |
362 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:362:50
    |
362 |             !if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:363:17
    |
363 |                 -(1 as libc::c_int) as intmax_t
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:365:19
    |
365 |                 (((1 as libc::c_int as intmax_t)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:367:39
    |
367 |                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:368:39
    |
368 |                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:369:23
    |
369 |                     - 1 as libc::c_int as libc::c_long)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:370:23
    |
370 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:370:58
    |
370 |                     * 2 as libc::c_int as libc::c_long + 1 as libc::c_int as libc::c_long
    |                                                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:372:19
    |
372 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:372:52
    |
372 |         } else if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:373:13
    |
373 |             -(1 as libc::c_int) as intmax_t
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:375:15
    |
375 |             (((1 as libc::c_int as intmax_t)
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:377:35
    |
377 |                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/xstrtoimax.rs:378:35
    |
378 |                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
    |                                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:379:19
    |
379 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:379:55
    |
379 |                 - 1 as libc::c_int as libc::c_long) * 2 as libc::c_int as libc::c_long
    |                                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:380:19
    |
380 |                 + 1 as libc::c_int as libc::c_long
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this boolean expression can be simplified
   --> src/xstrtoimax.rs:396:12
    |
396 |         if !(fresh8 != 0) {
    |            ^^^^^^^^^^^^^^ help: try: `fresh8 == 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:404:5
    |
404 |     return err;
    |     ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: manual implementation of an assign operation
   --> src/xstrtoimax.rs:395:9
    |
395 |         power = power - 1;
    |         ^^^^^^^^^^^^^^^^^ help: replace it with: `power -= 1`
    |
    = note: `-W clippy::assign-op-pattern` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoimax.rs:399:15
    |
399 |           err = ::core::mem::transmute::<
    |  _______________^
400 | |             libc::c_uint,
401 | |             strtol_error,
402 | |         >(err as libc::c_uint | bkm_scale(x, base) as libc::c_uint);
    | |___________________________________________________________________^
    |
    = note: `-W clippy::useless-transmute` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: unsafe function's docs miss `# Safety` section
   --> src/xstrtoimax.rs:407:1
    |
407 | / pub unsafe extern "C" fn xstrtoimax(
408 | |     mut s: *const libc::c_char,
409 | |     mut ptr: *mut *mut libc::c_char,
410 | |     mut strtol_base: libc::c_int,
...   |
585 | |     return err;
586 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this function has too many lines (172/100)
   --> src/xstrtoimax.rs:407:1
    |
407 | / pub unsafe extern "C" fn xstrtoimax(
408 | |     mut s: *const libc::c_char,
409 | |     mut ptr: *mut *mut libc::c_char,
410 | |     mut strtol_base: libc::c_int,
...   |
585 | |     return err;
586 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
   --> src/xstrtoimax.rs:585:5
    |
585 |     return err;
    |     ^^^^^^^^^^^ help: remove `return`: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `0 as *mut _` detected
   --> src/xstrtoimax.rs:414:40
    |
414 |     let mut t_ptr: *mut libc::c_char = 0 as *mut libc::c_char;
    |                                        ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/xstrtoimax.rs:415:41
    |
415 |     let mut p: *mut *mut libc::c_char = 0 as *mut *mut libc::c_char;
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:420:13
    |
420 | /             b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
421 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:422:13
    |
422 |             b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:423:13
    |
423 |             86 as libc::c_int as libc::c_uint,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoimax.rs:424:15
    |
424 |               (*::core::mem::transmute::<
    |  _______________^
425 | |                 &[u8; 78],
426 | |                 &[libc::c_char; 78],
427 | |             >(
428 | |                 b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
429 | |             ))
    | |_____________^ help: try: `&*(b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0" as *const [u8; 78] as *const [i8; 78])`
    |
    = note: `-W clippy::transmute-ptr-to-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary operation
   --> src/xstrtoimax.rs:433:5
    |
433 | /     'c_2247: {
434 | |         if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
435 | |             __assert_fail(
436 | |                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
...   |
448 | |         }
449 | |     };
    | |______^
    |
    = note: `-W clippy::unnecessary-operation` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unnecessary_operation
help: statement can be reduced to
    |
433 ~     if 0 as libc::c_int <= strtol_base && strtol_base <= 36 as libc::c_int {} else {
434 +             __assert_fail(
435 +                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
436 +                     as *const libc::c_char,
437 +                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
438 +                 86 as libc::c_int as libc::c_uint,
439 +                 (*::core::mem::transmute::<
440 +                     &[u8; 78],
441 +                     &[libc::c_char; 78],
442 +                 >(
443 +                     b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
444 +                 ))
445 +                     .as_ptr(),
446 +             );
447 +         };
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:436:17
    |
436 | /                 b"0 <= strtol_base && strtol_base <= 36\0" as *const u8
437 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"0 <= strtol_base && strtol_base <= 36\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/xstrtoimax.rs:438:17
    |
438 |                 b"./include/xstrtol.c\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"./include/xstrtol.c\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:439:17
    |
439 |                 86 as libc::c_int as libc::c_uint,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: transmute from a reference to a reference
   --> src/xstrtoimax.rs:440:19
    |
440 |                   (*::core::mem::transmute::<
    |  ___________________^
441 | |                     &[u8; 78],
442 | |                     &[libc::c_char; 78],
443 | |                 >(
444 | |                     b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0",
445 | |                 ))
    | |_________________^ help: try: `&*(b"strtol_error xstrtoimax(const char *, char **, int, intmax_t *, const char *)\0" as *const [u8; 78] as *const [i8; 78])`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#transmute_ptr_to_ptr

warning: unnecessary boolean `not` operation
   --> src/xstrtoimax.rs:450:9
    |
450 |     p = if !ptr.is_null() { ptr } else { &mut t_ptr };
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: remove the `!` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:452:8
    |
452 |     if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:452:41
    |
452 |     if (0 as libc::c_int as intmax_t) < -(1 as libc::c_int) as intmax_t {
    |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:454:37
    |
454 |         let mut ch: libc::c_uchar = *q as libc::c_uchar;
    |                                     ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:455:15
    |
455 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*(*__ctype_b_loc()).offset(ch as libc::c_int as isize))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:455:42
    |
455 |         while *(*__ctype_b_loc()).offset(ch as libc::c_int as isize) as libc::c_int
    |                                          ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u16` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(_ISspace as libc::c_int as libc::c_ushort)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u16` may truncate the value
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u16` may lose the sign of the value
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:456:15
    |
456 |             & _ISspace as libc::c_int as libc::c_ushort as libc::c_int != 0
    |               ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/xstrtoimax.rs:459:18
    |
459 |             ch = *q as libc::c_uchar;
    |                  ^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:461:12
    |
461 |         if ch as libc::c_int == '-' as i32 {
    |            ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ch)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:467:41
    |
467 |         if !valid_suffixes.is_null() && **p as libc::c_int != 0
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:468:41
    |
468 |             && !(strchr(valid_suffixes, **p as libc::c_int)).is_null()
    |                                         ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:470:19
    |
470 |             tmp = 1 as libc::c_int as intmax_t;
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:484:8
    |
484 |     if **p as libc::c_int != '\0' as i32 {
    |        ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:488:36
    |
488 |         if (strchr(valid_suffixes, **p as libc::c_int)).is_null() {
    |                                    ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:491:19
    |
491 |                 | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:491:19
    |
491 |                 | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:494:15
    |
494 |         match **p as libc::c_int {
    |               ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:497:27
    |
497 |                       match *(*p.offset(0 as libc::c_int as isize))
    |  ___________________________^
498 | |                         .offset(1 as libc::c_int as isize) as libc::c_int
    | |_________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
497 ~                     match i32::from(*(*p.offset(0 as libc::c_int as isize))
498 +                         .offset(1 as libc::c_int as isize))
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:501:32
    |
501 |   ...                   if *(*p.offset(0 as libc::c_int as isize))
    |  __________________________^
502 | | ...                       .offset(2 as libc::c_int as isize) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
501 ~                             if i32::from(*(*p.offset(0 as libc::c_int as isize))
502 +                                 .offset(2 as libc::c_int as isize))
    |

warning: statement with no effect
   --> src/xstrtoimax.rs:511:29
    |
511 | ...                   suffixes;
    |                       ^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/xstrtoimax.rs:519:15
    |
519 |         match **p as libc::c_int {
    |               ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(**p)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:565:23
    |
565 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:565:23
    |
565 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint)
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoimax.rs:569:15
    |
569 |           err = ::core::mem::transmute::<
    |  _______________^
570 | |             libc::c_uint,
571 | |             strtol_error,
572 | |         >(err as libc::c_uint | overflow as libc::c_uint);
    | |_________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: transmute from a type (`u32`) to itself
   --> src/xstrtoimax.rs:575:19
    |
575 |               err = ::core::mem::transmute::<
    |  ___________________^
576 | |                 libc::c_uint,
577 | |                 strtol_error,
578 | |             >(
579 | |                 err as libc::c_uint
580 | |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
581 | |             );
    | |_____________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#useless_transmute

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/xstrtoimax.rs:580:23
    |
580 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/xstrtoimax.rs:580:23
    |
580 |                     | LONGINT_INVALID_SUFFIX_CHAR as libc::c_int as libc::c_uint,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: path statement with no effect
   --> src/argmatch.rs:130:9
    |
130 |         i;
    |         ^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/argmatch.rs:146:9
    |
146 |         i;
    |         ^^

warning: path statement with no effect
   --> src/argmatch.rs:242:9
    |
242 |         i;
    |         ^^

warning: path statement with no effect
   --> src/argmatch.rs:291:9
    |
291 |         i;
    |         ^^

warning: path statement with no effect
  --> src/c_strcasecmp.rs:31:9
   |
31 |         p1;
   |         ^^^

warning: path statement with no effect
  --> src/c_strcasecmp.rs:33:9
   |
33 |         p2;
   |         ^^^

warning: path statement with no effect
  --> src/mcel.rs:68:9
   |
68 |         i;
   |         ^^

warning: path statement with no effect
  --> src/memcasecmp.rs:32:9
   |
32 |         i;
   |         ^^

warning: path statement with no effect
   --> src/quotearg.rs:358:25
    |
358 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:360:25
    |
360 |                         quote_string;
    |                         ^^^^^^^^^^^^^

warning: path statement with no effect
   --> src/quotearg.rs:396:21
    |
396 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:426:21
    |
426 |                     len;
    |                     ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:487:29
    |
487 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:492:29
    |
492 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:497:29
    |
497 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:504:25
    |
504 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:523:29
    |
523 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:528:29
    |
528 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:579:49
    |
579 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:584:49
    |
584 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:589:49
    |
589 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:594:49
    |
594 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:642:49
    |
642 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:647:49
    |
647 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:652:49
    |
652 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:657:49
    |
657 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:767:25
    |
767 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:772:25
    |
772 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:777:25
    |
777 |                         len;
    |                         ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:830:37
    |
830 | ...                   m;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:852:41
    |
852 | ...                   j;
    |                       ^^

warning: path statement with no effect
   --> src/quotearg.rs:883:37
    |
883 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:888:37
    |
888 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:893:37
    |
893 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:900:33
    |
900 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:909:33
    |
909 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:919:33
    |
919 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:927:33
    |
927 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:940:33
    |
940 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:945:33
    |
945 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
   --> src/quotearg.rs:952:29
    |
952 | ...                   len;
    |                       ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1072:25
     |
1072 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1077:25
     |
1077 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1082:25
     |
1082 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1089:21
     |
1089 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1101:25
     |
1101 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1106:25
     |
1106 |                         len;
     |                         ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1113:21
     |
1113 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1121:13
     |
1121 |             i;
     |             ^^

warning: path statement with no effect
    --> src/quotearg.rs:1186:21
     |
1186 |                     len;
     |                     ^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1188:21
     |
1188 |                     quote_string;
     |                     ^^^^^^^^^^^^^

warning: path statement with no effect
    --> src/quotearg.rs:1305:9
     |
1305 |         i;
     |         ^^

warning: path statement with no effect
   --> src/skipchars.rs:104:9
    |
104 |         i;
    |         ^^

warning: path statement with no effect
   --> src/version_etc.rs:260:9
    |
260 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/version_etc.rs:282:9
    |
282 |         n_authors;
    |         ^^^^^^^^^^

warning: path statement with no effect
   --> src/xstrtoimax.rs:511:29
    |
511 | ...                   suffixes;
    |                       ^^^^^^^^^

warning: `rust` (lib) generated 2472 warnings
warning: long literal lacking separators
   --> src/uniq.rs:240:44
    |
240 | pub const MCEL_CHAR_MAX: C2RustUnnamed_2 = 1114111;
    |                                            ^^^^^^^ help: consider: `1_114_111`
    |
    = note: `-W clippy::unreadable-literal` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant field names in struct initialization
   --> src/uniq.rs:457:13
    |
457 |             ch: ch,
    |             ^^^^^^ help: replace it with: `ch`
    |
    = note: `-W clippy::redundant-field-names` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

warning: redundant field names in struct initialization
   --> src/uniq.rs:472:13
    |
472 |             err: err,
    |             ^^^^^^^^ help: replace it with: `err`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_field_names

warning: long literal lacking separators
   --> src/uniq.rs:542:33
    |
542 | static mut check_chars: idx_t = 9223372036854775807 as libc::c_long;
    |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:799:12
    |
799 |     return 200112 as libc::c_int <= posix_ver && posix_ver < 200809 as libc::c_int;
    |            ^^^^^^ help: consider: `200_112`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:799:62
    |
799 |     return 200112 as libc::c_int <= posix_ver && posix_ver < 200809 as libc::c_int;
    |                                                              ^^^^^^ help: consider: `200_809`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:857:22
    |
857 |     return if size < 9223372036854775807 as libc::c_long {
    |                      ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
   --> src/uniq.rs:860:9
    |
860 |         9223372036854775807 as libc::c_long
    |         ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
   --> src/uniq.rs:897:13
    |
897 |     let mut len: idx_t = 0;
    |             ^^^
    |
    = note: `-W clippy::similar-names` implied by `-W clippy::pedantic`
note: existing binding defined here
   --> src/uniq.rs:868:9
    |
868 |     mut plen: *mut idx_t,
    |         ^^^^
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: redundant else block
   --> src/uniq.rs:928:12
    |
928 |       } else {
    |  ____________^
929 | |         return oldlen != newlen
930 | |             || memcmp(
931 | |                 old as *const libc::c_void,
...   |
934 | |             ) != 0
935 | |     };
    | |_____^
    |
    = note: `-W clippy::redundant-else` implied by `-W clippy::pedantic`
    = help: remove the `else` block and move the contents out
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/uniq.rs:1157:33
     |
1157 |                 current_block = 6476622998065200121;
     |                                 ^^^^^^^^^^^^^^^^^^^ help: consider: `6_476_622_998_065_200_121`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: redundant else block
    --> src/uniq.rs:1168:20
     |
1168 |               } else {
     |  ____________________^
1169 | |                 let mut thislen_0: idx_t = 0;
1170 | |                 let mut thisfield_0: *mut libc::c_char = find_field(
1171 | |                     thisline,
...    |
1257 | |                 }
1258 | |             }
     | |_____________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: redundant else block
    --> src/uniq.rs:1164:24
     |
1164 |                   } else {
     |  ________________________^
1165 | |                     current_block = 6476622998065200121;
1166 | |                     break;
1167 | |                 }
     | |_________________^
     |
     = help: remove the `else` block and move the contents out
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#redundant_else

warning: long literal lacking separators
    --> src/uniq.rs:1162:37
     |
1162 |                     current_block = 6469497169255231809;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `6_469_497_169_255_231_809`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/uniq.rs:1165:37
     |
1165 |                     current_block = 6476622998065200121;
     |                                     ^^^^^^^^^^^^^^^^^^^ help: consider: `6_476_622_998_065_200_121`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/uniq.rs:1181:35
     |
1181 |                 if match_count == 9223372036854775807 as libc::c_long {
     |                                   ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `if` statement can be collapsed
    --> src/uniq.rs:1238:28
     |
1238 |                       } else if match_count == 1 as libc::c_int as libc::c_long {
     |  ____________________________^
1239 | |                         if delimit_groups as libc::c_uint
1240 | |                             == DM_PREPEND as libc::c_int as libc::c_uint
1241 | |                             || delimit_groups as libc::c_uint
...    |
1246 | |                         }
1247 | |                     }
     | |_____________________^
     |
     = note: `-W clippy::collapsible-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_if
help: collapse nested if block
     |
1238 ~                     } else if match_count == 1 as libc::c_int as libc::c_long && (delimit_groups as libc::c_uint
1239 +                             == DM_PREPEND as libc::c_int as libc::c_uint || delimit_groups as libc::c_uint
1240 +                                 == DM_SEPARATE as libc::c_int as libc::c_uint
1241 +                                 && !first_delimiter) {
1242 +                         putchar_unlocked(delimiter as libc::c_int);
1243 +                     }
     |

warning: long literal lacking separators
    --> src/uniq.rs:1261:13
     |
1261 |             6469497169255231809 => {}
     |             ^^^^^^^^^^^^^^^^^^^ help: consider: `6_469_497_169_255_231_809`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: binding's name is too similar to existing binding
    --> src/uniq.rs:1312:9
     |
1312 |     mut argv: *mut *mut libc::c_char,
     |         ^^^^
     |
note: existing binding defined here
    --> src/uniq.rs:1311:9
     |
1311 |     mut argc: libc::c_int,
     |         ^^^^
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#similar_names

warning: long literal lacking separators
    --> src/uniq.rs:1418:48
     |
1418 |                         skip_chars = if size < 9223372036854775807 as libc::c_long {
     |                                                ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: long literal lacking separators
    --> src/uniq.rs:1421:29
     |
1421 | ...                   9223372036854775807 as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: this `else { if .. }` block can be collapsed
    --> src/uniq.rs:1687:32
     |
1687 |                           } else {
     |  ________________________________^
1688 | |                             if 10 as libc::c_int == 0 as libc::c_int {
1689 | |                                 0 as libc::c_int
1690 | |                             } else {
...    |
1806 | |                             }
1807 | |                         }) != 0
     | |_________________________^
     |
     = note: `-W clippy::collapsible-else-if` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1687 ~                         } else if 10 as libc::c_int == 0 as libc::c_int {
1688 +                             0 as libc::c_int
1689 +                         } else {
1690 +                             if skip_fields < 0 as libc::c_int as libc::c_long {
1691 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1692 +                                     0 as libc::c_int as libc::c_long
1693 +                                 } else {
1694 +                                     (if 1 as libc::c_int != 0 {
1695 +                                         0 as libc::c_int as libc::c_long
1696 +                                     } else {
1697 +                                         skip_fields
1698 +                                     }) + 0 as libc::c_int as idx_t
1699 +                                 }) - 1 as libc::c_int as libc::c_long)
1700 +                                     < 0 as libc::c_int as libc::c_long
1701 +                                 {
1702 +                                     !(((((if 1 as libc::c_int != 0 {
1703 +                                         0 as libc::c_int as libc::c_long
1704 +                                     } else {
1705 +                                         (if 1 as libc::c_int != 0 {
1706 +                                             0 as libc::c_int as libc::c_long
1707 +                                         } else {
1708 +                                             skip_fields
1709 +                                         }) + 0 as libc::c_int as idx_t
1710 +                                     }) + 1 as libc::c_int as libc::c_long)
1711 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1712 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1713 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1714 +                                         - 1 as libc::c_int as libc::c_long)
1715 +                                         * 2 as libc::c_int as libc::c_long
1716 +                                         + 1 as libc::c_int as libc::c_long)
1717 +                                 } else {
1718 +                                     (if 1 as libc::c_int != 0 {
1719 +                                         0 as libc::c_int as libc::c_long
1720 +                                     } else {
1721 +                                         (if 1 as libc::c_int != 0 {
1722 +                                             0 as libc::c_int as libc::c_long
1723 +                                         } else {
1724 +                                             skip_fields
1725 +                                         }) + 0 as libc::c_int as idx_t
1726 +                                     }) + 0 as libc::c_int as libc::c_long
1727 +                                 }) < 0 as libc::c_int as libc::c_long
1728 +                                 {
1729 +                                     (((if 1 as libc::c_int != 0 {
1730 +                                         0 as libc::c_int as libc::c_long
1731 +                                     } else {
1732 +                                         skip_fields
1733 +                                     }) + 0 as libc::c_int as idx_t)
1734 +                                         < -(if ((if 1 as libc::c_int != 0 {
1735 +                                             0 as libc::c_int as libc::c_long
1736 +                                         } else {
1737 +                                             (if 1 as libc::c_int != 0 {
1738 +                                                 0 as libc::c_int as libc::c_long
1739 +                                             } else {
1740 +                                                 skip_fields
1741 +                                             }) + 0 as libc::c_int as idx_t
1742 +                                         }) - 1 as libc::c_int as libc::c_long)
1743 +                                             < 0 as libc::c_int as libc::c_long
1744 +                                         {
1745 +                                             ((((if 1 as libc::c_int != 0 {
1746 +                                                 0 as libc::c_int as libc::c_long
1747 +                                             } else {
1748 +                                                 (if 1 as libc::c_int != 0 {
1749 +                                                     0 as libc::c_int as libc::c_long
1750 +                                                 } else {
1751 +                                                     skip_fields
1752 +                                                 }) + 0 as libc::c_int as idx_t
1753 +                                             }) + 1 as libc::c_int as libc::c_long)
1754 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1755 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1756 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1757 +                                                 - 1 as libc::c_int as libc::c_long)
1758 +                                                 * 2 as libc::c_int as libc::c_long
1759 +                                                 + 1 as libc::c_int as libc::c_long
1760 +                                         } else {
1761 +                                             (if 1 as libc::c_int != 0 {
1762 +                                                 0 as libc::c_int as libc::c_long
1763 +                                             } else {
1764 +                                                 (if 1 as libc::c_int != 0 {
1765 +                                                     0 as libc::c_int as libc::c_long
1766 +                                                 } else {
1767 +                                                     skip_fields
1768 +                                                 }) + 0 as libc::c_int as idx_t
1769 +                                             }) - 1 as libc::c_int as libc::c_long
1770 +                                         })) as libc::c_int
1771 +                                 } else {
1772 +                                     ((0 as libc::c_int as libc::c_long)
1773 +                                         < (if 1 as libc::c_int != 0 {
1774 +                                             0 as libc::c_int as libc::c_long
1775 +                                         } else {
1776 +                                             skip_fields
1777 +                                         }) + 0 as libc::c_int as idx_t) as libc::c_int
1778 +                                 }) != 0
1779 +                                     && skip_fields == -(1 as libc::c_int) as libc::c_long
1780 +                                 {
1781 +                                     if ((if 1 as libc::c_int != 0 {
1782 +                                         0 as libc::c_int
1783 +                                     } else {
1784 +                                         10 as libc::c_int
1785 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1786 +                                     {
1787 +                                         ((0 as libc::c_int as libc::c_long)
1788 +                                             < 10 as libc::c_int as libc::c_long
1789 +                                                 + 0 as libc::c_int as idx_t) as libc::c_int
1790 +                                     } else {
1791 +                                         ((-(1 as libc::c_int) as libc::c_long
1792 +                                             - 0 as libc::c_int as idx_t)
1793 +                                             < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1794 +                                             as libc::c_int
1795 +                                     }
1796 +                                 } else {
1797 +                                     (0 as libc::c_int as idx_t / skip_fields
1798 +                                         < 10 as libc::c_int as libc::c_long) as libc::c_int
1799 +                                 }
1800 +                             } else {
1801 +                                 ((-(1 as libc::c_int) as idx_t
1802 +                                     / 10 as libc::c_int as libc::c_long) < skip_fields)
1803 +                                     as libc::c_int
1804 +                             }
1805 ~                         }) != 0
     |

warning: this `else { if .. }` block can be collapsed
    --> src/uniq.rs:1574:36
     |
1574 |   ...                   } else {
     |  ______________________________^
1575 | | ...                       if (if (if ((if 1 as libc::c_int != 0 {
1576 | | ...                           0 as libc::c_int as libc::c_long
1577 | | ...                       } else {
...    |
1685 | | ...                       }
1686 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1574 ~                             } else if (if (if ((if 1 as libc::c_int != 0 {
1575 +                                 0 as libc::c_int as libc::c_long
1576 +                             } else {
1577 +                                 (if 1 as libc::c_int != 0 {
1578 +                                     0 as libc::c_int
1579 +                                 } else {
1580 +                                     10 as libc::c_int
1581 +                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1582 +                             }) - 1 as libc::c_int as libc::c_long)
1583 +                                 < 0 as libc::c_int as libc::c_long
1584 +                             {
1585 +                                 !(((((if 1 as libc::c_int != 0 {
1586 +                                     0 as libc::c_int as libc::c_long
1587 +                                 } else {
1588 +                                     (if 1 as libc::c_int != 0 {
1589 +                                         0 as libc::c_int
1590 +                                     } else {
1591 +                                         10 as libc::c_int
1592 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1593 +                                 }) + 1 as libc::c_int as libc::c_long)
1594 +                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1595 +                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1596 +                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1597 +                                     - 1 as libc::c_int as libc::c_long)
1598 +                                     * 2 as libc::c_int as libc::c_long
1599 +                                     + 1 as libc::c_int as libc::c_long)
1600 +                             } else {
1601 +                                 (if 1 as libc::c_int != 0 {
1602 +                                     0 as libc::c_int as libc::c_long
1603 +                                 } else {
1604 +                                     (if 1 as libc::c_int != 0 {
1605 +                                         0 as libc::c_int
1606 +                                     } else {
1607 +                                         10 as libc::c_int
1608 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1609 +                                 }) + 0 as libc::c_int as libc::c_long
1610 +                             }) < 0 as libc::c_int as libc::c_long
1611 +                             {
1612 +                                 (((if 1 as libc::c_int != 0 {
1613 +                                     0 as libc::c_int
1614 +                                 } else {
1615 +                                     10 as libc::c_int
1616 +                                 }) as libc::c_long + 0 as libc::c_int as idx_t)
1617 +                                     < -(if ((if 1 as libc::c_int != 0 {
1618 +                                         0 as libc::c_int as libc::c_long
1619 +                                     } else {
1620 +                                         (if 1 as libc::c_int != 0 {
1621 +                                             0 as libc::c_int
1622 +                                         } else {
1623 +                                             10 as libc::c_int
1624 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1625 +                                     }) - 1 as libc::c_int as libc::c_long)
1626 +                                         < 0 as libc::c_int as libc::c_long
1627 +                                     {
1628 +                                         ((((if 1 as libc::c_int != 0 {
1629 +                                             0 as libc::c_int as libc::c_long
1630 +                                         } else {
1631 +                                             (if 1 as libc::c_int != 0 {
1632 +                                                 0 as libc::c_int
1633 +                                             } else {
1634 +                                                 10 as libc::c_int
1635 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1636 +                                         }) + 1 as libc::c_int as libc::c_long)
1637 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1638 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1639 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1640 +                                             - 1 as libc::c_int as libc::c_long)
1641 +                                             * 2 as libc::c_int as libc::c_long
1642 +                                             + 1 as libc::c_int as libc::c_long
1643 +                                     } else {
1644 +                                         (if 1 as libc::c_int != 0 {
1645 +                                             0 as libc::c_int as libc::c_long
1646 +                                         } else {
1647 +                                             (if 1 as libc::c_int != 0 {
1648 +                                                 0 as libc::c_int
1649 +                                             } else {
1650 +                                                 10 as libc::c_int
1651 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1652 +                                         }) - 1 as libc::c_int as libc::c_long
1653 +                                     })) as libc::c_int
1654 +                             } else {
1655 +                                 ((0 as libc::c_int as libc::c_long)
1656 +                                     < (if 1 as libc::c_int != 0 {
1657 +                                         0 as libc::c_int
1658 +                                     } else {
1659 +                                         10 as libc::c_int
1660 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1661 +                                     as libc::c_int
1662 +                             }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
1663 +                             {
1664 +                                 if ((if 1 as libc::c_int != 0 {
1665 +                                     0 as libc::c_int as libc::c_long
1666 +                                 } else {
1667 +                                     skip_fields
1668 +                                 }) - 1 as libc::c_int as libc::c_long)
1669 +                                     < 0 as libc::c_int as libc::c_long
1670 +                                 {
1671 +                                     ((0 as libc::c_int as libc::c_long)
1672 +                                         < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
1673 +                                 } else {
1674 +                                     ((0 as libc::c_int as libc::c_long) < skip_fields
1675 +                                         && (-(1 as libc::c_int) as libc::c_long
1676 +                                             - 0 as libc::c_int as idx_t)
1677 +                                             < skip_fields - 1 as libc::c_int as libc::c_long)
1678 +                                         as libc::c_int
1679 +                                 }
1680 +                             } else {
1681 +                                 ((0 as libc::c_int as idx_t
1682 +                                     / 10 as libc::c_int as libc::c_long) < skip_fields)
1683 +                                     as libc::c_int
1684 +                             }
     |

warning: operator precedence can trip the unwary
    --> src/uniq.rs:1560:41
     |
1560 | / ...                   (if 1 as libc::c_int != 0 {
1561 | | ...                       0 as libc::c_int
1562 | | ...                   } else {
1563 | | ...                       10 as libc::c_int
...    |
1566 | | ...                           .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1567 | | ...                           .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     | |______________________________________________________________________________^
     |
     = note: `-W clippy::precedence` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#precedence
help: consider parenthesizing your expression
     |
1560 ~                                         ((if 1 as libc::c_int != 0 {
1561 +                                             0 as libc::c_int
1562 +                                         } else {
1563 +                                             10 as libc::c_int
1564 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t) >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1565 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1566 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |

warning: this `else { if .. }` block can be collapsed
    --> src/uniq.rs:1690:36
     |
1690 |   ...                   } else {
     |  ______________________________^
1691 | | ...                       if skip_fields < 0 as libc::c_int as libc::c_long {
1692 | | ...                           if (if (if ((if 1 as libc::c_int != 0 {
1693 | | ...                               0 as libc::c_int as libc::c_long
...    |
1805 | | ...                       }
1806 | | ...                   }
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#collapsible_else_if
help: collapse nested if block
     |
1690 ~                             } else if skip_fields < 0 as libc::c_int as libc::c_long {
1691 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1692 +                                     0 as libc::c_int as libc::c_long
1693 +                                 } else {
1694 +                                     (if 1 as libc::c_int != 0 {
1695 +                                         0 as libc::c_int as libc::c_long
1696 +                                     } else {
1697 +                                         skip_fields
1698 +                                     }) + 0 as libc::c_int as idx_t
1699 +                                 }) - 1 as libc::c_int as libc::c_long)
1700 +                                     < 0 as libc::c_int as libc::c_long
1701 +                                 {
1702 +                                     !(((((if 1 as libc::c_int != 0 {
1703 +                                         0 as libc::c_int as libc::c_long
1704 +                                     } else {
1705 +                                         (if 1 as libc::c_int != 0 {
1706 +                                             0 as libc::c_int as libc::c_long
1707 +                                         } else {
1708 +                                             skip_fields
1709 +                                         }) + 0 as libc::c_int as idx_t
1710 +                                     }) + 1 as libc::c_int as libc::c_long)
1711 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1712 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1713 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1714 +                                         - 1 as libc::c_int as libc::c_long)
1715 +                                         * 2 as libc::c_int as libc::c_long
1716 +                                         + 1 as libc::c_int as libc::c_long)
1717 +                                 } else {
1718 +                                     (if 1 as libc::c_int != 0 {
1719 +                                         0 as libc::c_int as libc::c_long
1720 +                                     } else {
1721 +                                         (if 1 as libc::c_int != 0 {
1722 +                                             0 as libc::c_int as libc::c_long
1723 +                                         } else {
1724 +                                             skip_fields
1725 +                                         }) + 0 as libc::c_int as idx_t
1726 +                                     }) + 0 as libc::c_int as libc::c_long
1727 +                                 }) < 0 as libc::c_int as libc::c_long
1728 +                                 {
1729 +                                     (((if 1 as libc::c_int != 0 {
1730 +                                         0 as libc::c_int as libc::c_long
1731 +                                     } else {
1732 +                                         skip_fields
1733 +                                     }) + 0 as libc::c_int as idx_t)
1734 +                                         < -(if ((if 1 as libc::c_int != 0 {
1735 +                                             0 as libc::c_int as libc::c_long
1736 +                                         } else {
1737 +                                             (if 1 as libc::c_int != 0 {
1738 +                                                 0 as libc::c_int as libc::c_long
1739 +                                             } else {
1740 +                                                 skip_fields
1741 +                                             }) + 0 as libc::c_int as idx_t
1742 +                                         }) - 1 as libc::c_int as libc::c_long)
1743 +                                             < 0 as libc::c_int as libc::c_long
1744 +                                         {
1745 +                                             ((((if 1 as libc::c_int != 0 {
1746 +                                                 0 as libc::c_int as libc::c_long
1747 +                                             } else {
1748 +                                                 (if 1 as libc::c_int != 0 {
1749 +                                                     0 as libc::c_int as libc::c_long
1750 +                                                 } else {
1751 +                                                     skip_fields
1752 +                                                 }) + 0 as libc::c_int as idx_t
1753 +                                             }) + 1 as libc::c_int as libc::c_long)
1754 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1755 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1756 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1757 +                                                 - 1 as libc::c_int as libc::c_long)
1758 +                                                 * 2 as libc::c_int as libc::c_long
1759 +                                                 + 1 as libc::c_int as libc::c_long
1760 +                                         } else {
1761 +                                             (if 1 as libc::c_int != 0 {
1762 +                                                 0 as libc::c_int as libc::c_long
1763 +                                             } else {
1764 +                                                 (if 1 as libc::c_int != 0 {
1765 +                                                     0 as libc::c_int as libc::c_long
1766 +                                                 } else {
1767 +                                                     skip_fields
1768 +                                                 }) + 0 as libc::c_int as idx_t
1769 +                                             }) - 1 as libc::c_int as libc::c_long
1770 +                                         })) as libc::c_int
1771 +                                 } else {
1772 +                                     ((0 as libc::c_int as libc::c_long)
1773 +                                         < (if 1 as libc::c_int != 0 {
1774 +                                             0 as libc::c_int as libc::c_long
1775 +                                         } else {
1776 +                                             skip_fields
1777 +                                         }) + 0 as libc::c_int as idx_t) as libc::c_int
1778 +                                 }) != 0
1779 +                                     && skip_fields == -(1 as libc::c_int) as libc::c_long
1780 +                                 {
1781 +                                     if ((if 1 as libc::c_int != 0 {
1782 +                                         0 as libc::c_int
1783 +                                     } else {
1784 +                                         10 as libc::c_int
1785 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1786 +                                     {
1787 +                                         ((0 as libc::c_int as libc::c_long)
1788 +                                             < 10 as libc::c_int as libc::c_long
1789 +                                                 + 0 as libc::c_int as idx_t) as libc::c_int
1790 +                                     } else {
1791 +                                         ((-(1 as libc::c_int) as libc::c_long
1792 +                                             - 0 as libc::c_int as idx_t)
1793 +                                             < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1794 +                                             as libc::c_int
1795 +                                     }
1796 +                                 } else {
1797 +                                     (0 as libc::c_int as idx_t / skip_fields
1798 +                                         < 10 as libc::c_int as libc::c_long) as libc::c_int
1799 +                                 }
1800 +                             } else {
1801 +                                 ((-(1 as libc::c_int) as idx_t
1802 +                                     / 10 as libc::c_int as libc::c_long) < skip_fields)
1803 +                                     as libc::c_int
1804 +                             }
     |

warning: long literal lacking separators
    --> src/uniq.rs:1826:39
     |
1826 |                         skip_fields = 9223372036854775807 as libc::c_long;
     |                                       ^^^^^^^^^^^^^^^^^^^ help: consider: `9_223_372_036_854_775_807`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#unreadable_literal

warning: unnecessary structure name repetition
   --> src/uniq.rs:179:22
    |
179 |     pub _chain: *mut _IO_FILE,
    |                      ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = note: `-W clippy::use-self` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: unnecessary structure name repetition
   --> src/uniq.rs:190:29
    |
190 |     pub _freeres_list: *mut _IO_FILE,
    |                             ^^^^^^^^ help: use the applicable keyword: `Self`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#use_self

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:276:13
    |
276 | /             b"\nMandatory arguments to long options are mandatory for short options too.\n\0"
277 | |                 as *const u8 as *const libc::c_char,
    | |___________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nMandatory arguments to long options are mandatory for short options too.\n\0" as *const u8).cast::<i8>()`
    |
    = note: `-W clippy::ptr-as-ptr` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
   --> src/uniq.rs:338:12
    |
338 |         && !(strcmp(program, (*map_prog).program) == 0 as libc::c_int)
    |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `strcmp(program, (*map_prog).program) != 0 as libc::c_int`
    |
    = note: `-W clippy::nonminimal-bool` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: this function has too many lines (113/100)
   --> src/uniq.rs:283:1
    |
283 | / unsafe extern "C" fn emit_ancillary_info(mut program: *const libc::c_char) {
284 | |     let infomap_0: [infomap; 7] = [
285 | |         {
286 | |             let mut init = infomap {
...   |
396 | |     );
397 | | }
    | |_^
    |
    = note: `-W clippy::too-many-lines` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:290:13
    |
286 | /             let mut init = infomap {
287 | |                 program: b"[\0" as *const u8 as *const libc::c_char,
288 | |                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
289 | |             };
    | |______________- unnecessary `let` binding
290 |               init
    |               ^^^^
    |
    = note: `-W clippy::let-and-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
286 ~             
287 ~             infomap {
288 +                 program: b"[\0" as *const u8 as *const libc::c_char,
289 +                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
290 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:287:26
    |
287 |                 program: b"[\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"[\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:288:23
    |
288 |                 node: b"test invocation\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"test invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:297:13
    |
293 | /             let mut init = infomap {
294 | |                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
295 | |                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
296 | |             };
    | |______________- unnecessary `let` binding
297 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
293 ~             
294 ~             infomap {
295 +                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
296 +                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
297 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:294:26
    |
294 |                 program: b"coreutils\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:295:23
    |
295 |                 node: b"Multi-call invocation\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Multi-call invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:304:13
    |
300 | /             let mut init = infomap {
301 | |                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
302 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
303 | |             };
    | |______________- unnecessary `let` binding
304 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
300 ~             
301 ~             infomap {
302 +                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
303 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
304 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:301:26
    |
301 |                 program: b"sha224sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha224sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:302:23
    |
302 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:311:13
    |
307 | /             let mut init = infomap {
308 | |                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
309 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
310 | |             };
    | |______________- unnecessary `let` binding
311 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
307 ~             
308 ~             infomap {
309 +                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
310 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
311 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:308:26
    |
308 |                 program: b"sha256sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha256sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:309:23
    |
309 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:318:13
    |
314 | /             let mut init = infomap {
315 | |                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
316 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
317 | |             };
    | |______________- unnecessary `let` binding
318 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
314 ~             
315 ~             infomap {
316 +                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
317 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
318 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:315:26
    |
315 |                 program: b"sha384sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha384sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:316:23
    |
316 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:325:13
    |
321 | /             let mut init = infomap {
322 | |                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
323 | |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
324 | |             };
    | |______________- unnecessary `let` binding
325 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
321 ~             
322 ~             infomap {
323 +                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
324 +                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
325 +             }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:322:26
    |
322 |                 program: b"sha512sum\0" as *const u8 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha512sum\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:323:23
    |
323 |                 node: b"sha2 utilities\0" as *const u8 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"sha2 utilities\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:332:13
    |
328 | /             let mut init = infomap {
329 | |                 program: 0 as *const libc::c_char,
330 | |                 node: 0 as *const libc::c_char,
331 | |             };
    | |______________- unnecessary `let` binding
332 |               init
    |               ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
328 ~             
329 ~             infomap {
330 +                 program: 0 as *const libc::c_char,
331 +                 node: 0 as *const libc::c_char,
332 +             }
    |

warning: `0 as *const _` detected
   --> src/uniq.rs:329:26
    |
329 |                 program: 0 as *const libc::c_char,
    |                          ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = note: `-W clippy::zero-ptr` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *const _` detected
   --> src/uniq.rs:330:23
    |
330 |                 node: 0 as *const libc::c_char,
    |                       ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: statement with no effect
   --> src/uniq.rs:341:9
    |
341 |         map_prog;
    |         ^^^^^^^^^
    |
    = note: `-W clippy::no-effect` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:347:17
    |
347 |         gettext(b"\n%s online help: <%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\n%s online help: <%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:348:9
    |
348 |         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:349:9
    |
349 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *const _` detected
   --> src/uniq.rs:353:9
    |
353 |         0 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:358:13
    |
358 |             b"en_\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"en_\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:360:31
    |
360 |                 .wrapping_sub(1 as libc::c_int as libc::c_ulong),
    |                               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-sign-loss` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:365:17
    |
365 | /                 b"Report any translation bugs to <https://translationproject.org/team/>\n\0"
366 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Report any translation bugs to <https://translationproject.org/team/>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:373:9
    |
373 |         b"[\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"[\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:376:9
    |
376 |         b"test\0" as *const u8 as *const libc::c_char
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"test\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:381:17
    |
381 |         gettext(b"Full documentation <%s%s>\n\0" as *const u8 as *const libc::c_char),
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Full documentation <%s%s>\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:382:9
    |
382 |         b"https://www.gnu.org/software/coreutils/\0" as *const u8 as *const libc::c_char,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"https://www.gnu.org/software/coreutils/\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:387:13
    |
387 | /             b"or available locally via: info '(coreutils) %s%s'\n\0" as *const u8
388 | |                 as *const libc::c_char,
    | |______________________________________^ help: try `pointer::cast`, a safer alternative: `(b"or available locally via: info '(coreutils) %s%s'\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:392:13
    |
392 |             b" invocation\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b" invocation\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:394:13
    |
394 |             b"\0" as *const u8 as *const libc::c_char
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:404:5
    |
404 | /     if 0 != 0 {
405 | |         error(
406 | |             1 as libc::c_int,
407 | |             saved_errno,
...   |
437 | |         });
438 | |     };
    | |_____^
    |
    = note: `-W clippy::if-not-else` implied by `-W clippy::pedantic`
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/uniq.rs:404:8
    |
404 |     if 0 != 0 {
    |        ^^^^^^
    |
    = note: `-W clippy::eq-op` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:408:21
    |
408 |             gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:410:9
    |
410 | /         if 1 as libc::c_int != 0 as libc::c_int {
411 | |             unreachable!();
412 | |         } else {};
    | |_________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:415:13
    |
415 |             let __errstatus: libc::c_int = 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::no-effect-underscore-binding` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:419:25
    |
419 |                 gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:421:13
    |
421 | /             if __errstatus != 0 as libc::c_int {
422 | |                 unreachable!();
423 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:427:13
    |
427 |             let __errstatus: libc::c_int = 1 as libc::c_int;
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:431:25
    |
431 |                 gettext(b"write error\0" as *const u8 as *const libc::c_char),
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"write error\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:433:13
    |
433 | /             if __errstatus != 0 as libc::c_int {
434 | |                 unreachable!();
435 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unneeded `return` statement
   --> src/uniq.rs:442:5
    |
442 |     return iswblank(wc);
    |     ^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `iswblank(wc)`
    |
    = note: `-W clippy::needless-return` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/uniq.rs:455:5
    |
455 | /     return {
456 | |         let mut init = mcel_t {
457 | |             ch: ch,
458 | |             err: 0,
...   |
461 | |         init
462 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
455 ~     {
456 +         let mut init = mcel_t {
457 +             ch: ch,
458 +             err: 0,
459 +             len: len as libc::c_uchar,
460 +         };
461 +         init
462 +     }
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:446:8
    |
446 |     if (0 as libc::c_int as libc::c_ulong) < len {} else {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:449:15
    |
449 |     if len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong {} else {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:449:15
    |
449 |     if len <= MCEL_LEN_MAX as libc::c_int as libc::c_ulong {} else {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-wrap` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/uniq.rs:452:14
    |
452 |     if ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint {} else {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:452:14
    |
452 |     if ch <= MCEL_CHAR_MAX as libc::c_int as libc::c_uint {} else {
    |              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:461:9
    |
456 | /         let mut init = mcel_t {
457 | |             ch: ch,
458 | |             err: 0,
459 | |             len: len as libc::c_uchar,
460 | |         };
    | |__________- unnecessary `let` binding
461 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
456 ~         
457 ~         mcel_t {
458 +             ch: ch,
459 +             err: 0,
460 +             len: len as libc::c_uchar,
461 +         }
    |

warning: casting `u64` to `u8` may truncate the value
   --> src/uniq.rs:459:18
    |
459 |             len: len as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^
    |
    = note: `-W clippy::cast-possible-truncation` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: unneeded `return` statement
   --> src/uniq.rs:469:5
    |
469 | /     return {
470 | |         let mut init = mcel_t {
471 | |             ch: 0,
472 | |             err: err,
...   |
475 | |         init
476 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
469 ~     {
470 +         let mut init = mcel_t {
471 +             ch: 0,
472 +             err: err,
473 +             len: 1 as libc::c_int as libc::c_uchar,
474 +         };
475 +         init
476 +     }
    |

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:466:8
    |
466 |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:466:39
    |
466 |     if MCEL_ERR_MIN as libc::c_int <= err as libc::c_int {} else {
    |                                       ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(err)`
    |
    = note: `-W clippy::cast-lossless` implied by `-W clippy::pedantic`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:475:9
    |
470 | /         let mut init = mcel_t {
471 | |             ch: 0,
472 | |             err: err,
473 | |             len: 1 as libc::c_int as libc::c_uchar,
474 | |         };
    | |__________- unnecessary `let` binding
475 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
470 ~         
471 ~         mcel_t {
472 +             ch: 0,
473 +             err: err,
474 +             len: 1 as libc::c_int as libc::c_uchar,
475 +         }
    |

warning: casting `i32` to `u8` may truncate the value
   --> src/uniq.rs:473:18
    |
473 |             len: 1 as libc::c_int as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `u8` may lose the sign of the value
   --> src/uniq.rs:473:18
    |
473 |             len: 1 as libc::c_int as libc::c_uchar,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this could be a `const fn`
   --> src/uniq.rs:479:1
    |
479 | / unsafe extern "C" fn mcel_isbasic(mut c: libc::c_char) -> bool {
480 | |     return (0 as libc::c_int <= c as libc::c_int
481 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
482 | |         as libc::c_long != 0;
483 | | }
    | |_^
    |
    = note: `-W clippy::missing-const-for-fn` implied by `-W clippy::nursery`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: unneeded `return` statement
   --> src/uniq.rs:480:5
    |
480 | /     return (0 as libc::c_int <= c as libc::c_int
481 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
482 | |         as libc::c_long != 0;
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
480 ~     (0 as libc::c_int <= c as libc::c_int
481 +         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
482 +         as libc::c_long != 0
    |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:480:12
    |
480 |       return (0 as libc::c_int <= c as libc::c_int
    |  ____________^
481 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
482 | |         as libc::c_long != 0;
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
480 ~     return i64::from((0 as libc::c_int <= c as libc::c_int
481 ~         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int) != 0;
    |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:480:12
    |
480 |       return (0 as libc::c_int <= c as libc::c_int
    |  ____________^
481 | |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    | |___________________________________________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
480 ~     return i32::from(0 as libc::c_int <= c as libc::c_int
481 +         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int)
    |

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:480:33
    |
480 |     return (0 as libc::c_int <= c as libc::c_int
    |                                 ^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:481:12
    |
481 |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    |            ^^^^^^^^^^^^^^^^^^ help: try: `i32::from(c)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:481:33
    |
481 |         && (c as libc::c_int) < MCEL_ERR_MIN as libc::c_int) as libc::c_int
    |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unneeded `return` statement
   --> src/uniq.rs:510:5
    |
510 |     return mcel_ch(ch, len);
    |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `mcel_ch(ch, len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i8` to `u32` may lose the sign of the value
   --> src/uniq.rs:491:24
    |
491 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
    |                        ^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:491:39
    |
491 |         return mcel_ch(c as char32_t, 1 as libc::c_int as size_t);
    |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:502:9
    |
502 |         lim.offset_from(p) as libc::c_long as size_t,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:505:8
    |
505 |       if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |  ________^
506 | |         < len) as libc::c_int as libc::c_long != 0
    | |_____________________________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
505 ~     if i64::from(((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
506 ~         < len) as libc::c_int) != 0
    |

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:505:8
    |
505 |       if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |  ________^
506 | |         < len) as libc::c_int as libc::c_long != 0
    | |_____________________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
    |
505 ~     if i32::from((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
506 ~         < len) as libc::c_long != 0
    |

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:505:9
    |
505 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:505:54
    |
505 |     if ((-(1 as libc::c_int) as size_t).wrapping_div(2 as libc::c_int as libc::c_ulong)
    |                                                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `u8` may lose the sign of the value
   --> src/uniq.rs:508:25
    |
508 |         return mcel_err(c as libc::c_uchar);
    |                         ^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/uniq.rs:530:5
    |
530 |     return s as *mut libc::c_char;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `s as *mut libc::c_char`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:524:13
    |
524 |             predicate.expect("non-null function pointer")(g) as libc::c_int
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(predicate.expect("non-null function pointer")(g))`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:525:20
    |
525 |                 == ok as libc::c_int
    |                    ^^^^^^^^^^^^^^^^^ help: try: `i32::from(ok)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:528:22
    |
528 |         s = s.offset(g.len as libc::c_int as isize);
    |                      ^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(g.len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: this could be a `const fn`
   --> src/uniq.rs:532:1
    |
532 | / unsafe extern "C" fn swap_lines(
533 | |     mut a: *mut *mut linebuffer,
534 | |     mut b: *mut *mut linebuffer,
535 | | ) {
...   |
538 | |     *b = tmp;
539 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_const_for_fn

warning: this looks like you are swapping `*a` and `*b` manually
   --> src/uniq.rs:536:5
    |
536 | /     let mut tmp: *mut linebuffer = *a;
537 | |     *a = *b;
538 | |     *b = tmp;
    | |____________^ help: try: `std::mem::swap(&mut (*a), &mut (*b))`
    |
    = note: `-W clippy::manual-swap` implied by `-W clippy::all`
    = note: or maybe you should use `std::mem::replace`?
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#manual_swap

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:549:5
    |
549 |     b"none\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"none\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:550:5
    |
550 |     b"prepend\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"prepend\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:551:5
    |
551 |     b"separate\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"separate\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:557:5
    |
557 |     b"prepend\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"prepend\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:558:5
    |
558 |     b"append\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"append\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:559:5
    |
559 |     b"separate\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"separate\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:560:5
    |
560 |     b"both\0" as *const u8 as *const libc::c_char,
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"both\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:578:9
    |
572 | /         let mut init = option {
573 | |             name: b"count\0" as *const u8 as *const libc::c_char,
574 | |             has_arg: 0 as libc::c_int,
575 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
576 | |             val: 'c' as i32,
577 | |         };
    | |__________- unnecessary `let` binding
578 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
572 ~         
573 ~         option {
574 +             name: b"count\0" as *const u8 as *const libc::c_char,
575 +             has_arg: 0 as libc::c_int,
576 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
577 +             val: 'c' as i32,
578 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:573:19
    |
573 |             name: b"count\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"count\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:587:9
    |
581 | /         let mut init = option {
582 | |             name: b"repeated\0" as *const u8 as *const libc::c_char,
583 | |             has_arg: 0 as libc::c_int,
584 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
585 | |             val: 'd' as i32,
586 | |         };
    | |__________- unnecessary `let` binding
587 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
581 ~         
582 ~         option {
583 +             name: b"repeated\0" as *const u8 as *const libc::c_char,
584 +             has_arg: 0 as libc::c_int,
585 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
586 +             val: 'd' as i32,
587 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:582:19
    |
582 |             name: b"repeated\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"repeated\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:596:9
    |
590 | /         let mut init = option {
591 | |             name: b"all-repeated\0" as *const u8 as *const libc::c_char,
592 | |             has_arg: 2 as libc::c_int,
593 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
594 | |             val: 'D' as i32,
595 | |         };
    | |__________- unnecessary `let` binding
596 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
590 ~         
591 ~         option {
592 +             name: b"all-repeated\0" as *const u8 as *const libc::c_char,
593 +             has_arg: 2 as libc::c_int,
594 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
595 +             val: 'D' as i32,
596 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:591:19
    |
591 |             name: b"all-repeated\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"all-repeated\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:605:9
    |
599 | /         let mut init = option {
600 | |             name: b"group\0" as *const u8 as *const libc::c_char,
601 | |             has_arg: 2 as libc::c_int,
602 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
603 | |             val: GROUP_OPTION as libc::c_int,
604 | |         };
    | |__________- unnecessary `let` binding
605 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
599 ~         
600 ~         option {
601 +             name: b"group\0" as *const u8 as *const libc::c_char,
602 +             has_arg: 2 as libc::c_int,
603 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
604 +             val: GROUP_OPTION as libc::c_int,
605 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:600:19
    |
600 |             name: b"group\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"group\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:603:18
    |
603 |             val: GROUP_OPTION as libc::c_int,
    |                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:614:9
    |
608 | /         let mut init = option {
609 | |             name: b"ignore-case\0" as *const u8 as *const libc::c_char,
610 | |             has_arg: 0 as libc::c_int,
611 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
612 | |             val: 'i' as i32,
613 | |         };
    | |__________- unnecessary `let` binding
614 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
608 ~         
609 ~         option {
610 +             name: b"ignore-case\0" as *const u8 as *const libc::c_char,
611 +             has_arg: 0 as libc::c_int,
612 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
613 +             val: 'i' as i32,
614 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:609:19
    |
609 |             name: b"ignore-case\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"ignore-case\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:623:9
    |
617 | /         let mut init = option {
618 | |             name: b"unique\0" as *const u8 as *const libc::c_char,
619 | |             has_arg: 0 as libc::c_int,
620 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
621 | |             val: 'u' as i32,
622 | |         };
    | |__________- unnecessary `let` binding
623 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
617 ~         
618 ~         option {
619 +             name: b"unique\0" as *const u8 as *const libc::c_char,
620 +             has_arg: 0 as libc::c_int,
621 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
622 +             val: 'u' as i32,
623 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:618:19
    |
618 |             name: b"unique\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"unique\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:632:9
    |
626 | /         let mut init = option {
627 | |             name: b"skip-fields\0" as *const u8 as *const libc::c_char,
628 | |             has_arg: 1 as libc::c_int,
629 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
630 | |             val: 'f' as i32,
631 | |         };
    | |__________- unnecessary `let` binding
632 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
626 ~         
627 ~         option {
628 +             name: b"skip-fields\0" as *const u8 as *const libc::c_char,
629 +             has_arg: 1 as libc::c_int,
630 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
631 +             val: 'f' as i32,
632 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:627:19
    |
627 |             name: b"skip-fields\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"skip-fields\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:641:9
    |
635 | /         let mut init = option {
636 | |             name: b"skip-chars\0" as *const u8 as *const libc::c_char,
637 | |             has_arg: 1 as libc::c_int,
638 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
639 | |             val: 's' as i32,
640 | |         };
    | |__________- unnecessary `let` binding
641 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
635 ~         
636 ~         option {
637 +             name: b"skip-chars\0" as *const u8 as *const libc::c_char,
638 +             has_arg: 1 as libc::c_int,
639 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
640 +             val: 's' as i32,
641 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:636:19
    |
636 |             name: b"skip-chars\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"skip-chars\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:650:9
    |
644 | /         let mut init = option {
645 | |             name: b"check-chars\0" as *const u8 as *const libc::c_char,
646 | |             has_arg: 1 as libc::c_int,
647 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
648 | |             val: 'w' as i32,
649 | |         };
    | |__________- unnecessary `let` binding
650 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
644 ~         
645 ~         option {
646 +             name: b"check-chars\0" as *const u8 as *const libc::c_char,
647 +             has_arg: 1 as libc::c_int,
648 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
649 +             val: 'w' as i32,
650 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:645:19
    |
645 |             name: b"check-chars\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"check-chars\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:659:9
    |
653 | /         let mut init = option {
654 | |             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
655 | |             has_arg: 0 as libc::c_int,
656 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
657 | |             val: 'z' as i32,
658 | |         };
    | |__________- unnecessary `let` binding
659 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
653 ~         
654 ~         option {
655 +             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
656 +             has_arg: 0 as libc::c_int,
657 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
658 +             val: 'z' as i32,
659 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:654:19
    |
654 |             name: b"zero-terminated\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"zero-terminated\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:668:9
    |
662 | /         let mut init = option {
663 | |             name: b"help\0" as *const u8 as *const libc::c_char,
664 | |             has_arg: 0 as libc::c_int,
665 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
666 | |             val: GETOPT_HELP_CHAR as libc::c_int,
667 | |         };
    | |__________- unnecessary `let` binding
668 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
662 ~         
663 ~         option {
664 +             name: b"help\0" as *const u8 as *const libc::c_char,
665 +             has_arg: 0 as libc::c_int,
666 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
667 +             val: GETOPT_HELP_CHAR as libc::c_int,
668 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:663:19
    |
663 |             name: b"help\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"help\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:677:9
    |
671 | /         let mut init = option {
672 | |             name: b"version\0" as *const u8 as *const libc::c_char,
673 | |             has_arg: 0 as libc::c_int,
674 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
675 | |             val: GETOPT_VERSION_CHAR as libc::c_int,
676 | |         };
    | |__________- unnecessary `let` binding
677 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
671 ~         
672 ~         option {
673 +             name: b"version\0" as *const u8 as *const libc::c_char,
674 +             has_arg: 0 as libc::c_int,
675 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
676 +             val: GETOPT_VERSION_CHAR as libc::c_int,
677 +         }
    |

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:672:19
    |
672 |             name: b"version\0" as *const u8 as *const libc::c_char,
    |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"version\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: returning the result of a `let` binding from a block
   --> src/uniq.rs:686:9
    |
680 | /         let mut init = option {
681 | |             name: 0 as *const libc::c_char,
682 | |             has_arg: 0 as libc::c_int,
683 | |             flag: 0 as *const libc::c_int as *mut libc::c_int,
684 | |             val: 0 as libc::c_int,
685 | |         };
    | |__________- unnecessary `let` binding
686 |           init
    |           ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#let_and_return
help: return the expression directly
    |
680 ~         
681 ~         option {
682 +             name: 0 as *const libc::c_char,
683 +             has_arg: 0 as libc::c_int,
684 +             flag: 0 as *const libc::c_int as *mut libc::c_int,
685 +             val: 0 as libc::c_int,
686 +         }
    |

warning: unsafe function's docs miss `# Safety` section
   --> src/uniq.rs:690:1
    |
690 | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
691 | |     if status != 0 as libc::c_int {
692 | |         fprintf(
693 | |             stderr,
...   |
795 | |     exit(status);
796 | | }
    | |_^
    |
    = note: `-W clippy::missing-safety-doc` implied by `-W clippy::all`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#missing_safety_doc

warning: this function has too many lines (105/100)
   --> src/uniq.rs:690:1
    |
690 | / pub unsafe extern "C" fn usage(mut status: libc::c_int) {
691 | |     if status != 0 as libc::c_int {
692 | |         fprintf(
693 | |             stderr,
...   |
795 | |     exit(status);
796 | | }
    | |_^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unnecessary `!=` operation
   --> src/uniq.rs:691:5
    |
691 | /     if status != 0 as libc::c_int {
692 | |         fprintf(
693 | |             stderr,
694 | |             gettext(
...   |
793 | |         emit_ancillary_info(b"uniq\0" as *const u8 as *const libc::c_char);
794 | |     }
    | |_____^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:695:17
    |
695 | /                 b"Try '%s --help' for more information.\n\0" as *const u8
696 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Try '%s --help' for more information.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:703:17
    |
703 | /                 b"Usage: %s [OPTION]... [INPUT [OUTPUT]]\n\0" as *const u8
704 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Usage: %s [OPTION]... [INPUT [OUTPUT]]\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:710:17
    |
710 | /                 b"Filter adjacent matching lines from INPUT (or standard input),\nwriting to OUTPUT (or standard output).\n\nWith no opti...
711 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"Filter adjacent matching lines from INPUT (or standard input),\nwriting to OUTPUT (or standard output).\n\nWith no options, matching lines are merged to the first occurrence.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:718:17
    |
718 | /                 b"  -c, --count           prefix lines by the number of occurrences\n  -d, --repeated        only print duplicate lines, ...
719 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -c, --count           prefix lines by the number of occurrences\n  -d, --repeated        only print duplicate lines, one for each group\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:725:17
    |
725 | /                 b"  -D                    print all duplicate lines\n      --all-repeated[=METHOD]  like -D, but allow separating groups\...
726 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -D                    print all duplicate lines\n      --all-repeated[=METHOD]  like -D, but allow separating groups\n                                 with an empty line;\n                                 METHOD={none(default),prepend,separate}\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:732:17
    |
732 | /                 b"  -f, --skip-fields=N   avoid comparing the first N fields\n\0"
733 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -f, --skip-fields=N   avoid comparing the first N fields\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:739:17
    |
739 | /                 b"      --group[=METHOD]  show all items, separating groups with an empty line;\n                          METHOD={separa...
740 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --group[=METHOD]  show all items, separating groups with an empty line;\n                          METHOD={separate(default),prepend,append,both}\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:746:17
    |
746 | /                 b"  -i, --ignore-case     ignore differences in case when comparing\n  -s, --skip-chars=N    avoid comparing the first N ...
747 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -i, --ignore-case     ignore differences in case when comparing\n  -s, --skip-chars=N    avoid comparing the first N characters\n  -u, --unique          only print unique lines\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:753:17
    |
753 | /                 b"  -z, --zero-terminated     line delimiter is NUL, not newline\n\0"
754 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -z, --zero-terminated     line delimiter is NUL, not newline\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:760:17
    |
760 | /                 b"  -w, --check-chars=N   compare no more than N characters in lines\n\0"
761 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"  -w, --check-chars=N   compare no more than N characters in lines\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:767:17
    |
767 | /                 b"      --help        display this help and exit\n\0" as *const u8
768 | |                     as *const libc::c_char,
    | |__________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --help        display this help and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:774:17
    |
774 | /                 b"      --version     output version information and exit\n\0"
775 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"      --version     output version information and exit\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:781:17
    |
781 | /                 b"\nA field is a run of blanks (usually spaces and/or TABs), then non-blank\ncharacters.  Fields are skipped before chars...
782 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\nA field is a run of blanks (usually spaces and/or TABs), then non-blank\ncharacters.  Fields are skipped before chars.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:788:17
    |
788 | /                 b"\n'uniq' does not detect repeated lines unless they are adjacent.\nYou may want to sort the input first, or use 'sort -...
789 | |                     as *const u8 as *const libc::c_char,
    | |_______________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"\n'uniq' does not detect repeated lines unless they are adjacent.\nYou may want to sort the input first, or use 'sort -u' without 'uniq'.\n\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:793:29
    |
793 |         emit_ancillary_info(b"uniq\0" as *const u8 as *const libc::c_char);
    |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"uniq\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unneeded `return` statement
   --> src/uniq.rs:799:5
    |
799 |     return 200112 as libc::c_int <= posix_ver && posix_ver < 200809 as libc::c_int;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `200112 as libc::c_int <= posix_ver && posix_ver < 200809 as libc::c_int`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: unneeded `return` statement
   --> src/uniq.rs:857:5
    |
857 | /     return if size < 9223372036854775807 as libc::c_long {
858 | |         size
859 | |     } else {
860 | |         9223372036854775807 as libc::c_long
861 | |     };
    | |______^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
857 ~     if size < 9223372036854775807 as libc::c_long {
858 +         size
859 +     } else {
860 +         9223372036854775807 as libc::c_long
861 +     }
    |

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/uniq.rs:806:8
    |
806 |     if (LONGINT_OVERFLOW as libc::c_int as libc::c_uint)
    |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
   --> src/uniq.rs:806:9
    |
806 |     if (LONGINT_OVERFLOW as libc::c_int as libc::c_uint)
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `0 as *mut _` detected
   --> src/uniq.rs:809:13
    |
809 |             0 as *mut *mut libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:812:13
    |
812 |             b"\0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:813:37
    |
813 |         ) as libc::c_uint || size < 0 as libc::c_int as libc::c_long
    |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
   --> src/uniq.rs:815:9
    |
815 | /         if 0 != 0 {
816 | |             error(
817 | |                 1 as libc::c_int,
818 | |                 0 as libc::c_int,
...   |
854 | |             });
855 | |         };
    | |_________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/uniq.rs:815:12
    |
815 |         if 0 != 0 {
    |            ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:819:17
    |
819 |                 b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:823:13
    |
823 | /             if 1 as libc::c_int != 0 as libc::c_int {
824 | |                 unreachable!();
825 | |             } else {};
    | |_____________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:828:17
    |
828 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:832:21
    |
832 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:836:17
    |
836 | /                 if __errstatus != 0 as libc::c_int {
837 | |                     unreachable!();
838 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
   --> src/uniq.rs:842:17
    |
842 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:846:21
    |
846 |                     b"%s: %s\0" as *const u8 as *const libc::c_char,
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s: %s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
   --> src/uniq.rs:850:17
    |
850 | /                 if __errstatus != 0 as libc::c_int {
851 | |                     unreachable!();
852 | |                 } else {};
    | |_________________________^
    |
    = help: change to `==` and swap the blocks of the `if`/`else`
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unneeded `return` statement
   --> src/uniq.rs:864:5
    |
864 |     return g.ch == '\n' as i32 as libc::c_uint || c32isblank(g.ch) != 0;
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `g.ch == '\n' as i32 as libc::c_uint || c32isblank(g.ch) != 0`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i32` to `u32` may lose the sign of the value
   --> src/uniq.rs:864:20
    |
864 |     return g.ch == '\n' as i32 as libc::c_uint || c32isblank(g.ch) != 0;
    |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unneeded `return` statement
   --> src/uniq.rs:913:5
    |
913 |     return lp;
    |     ^^^^^^^^^^ help: remove `return`: `lp`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: casting `i64` to `isize` may truncate the value on targets with 32-bit wide pointers
   --> src/uniq.rs:872:17
    |
872 |         .offset((*line).length as isize)
    |                 ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:875:11
    |
875 |     while (0 as libc::c_int as libc::c_long) < i && lp < lim as *mut libc::c_char {
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/uniq.rs:889:9
    |
889 |         i;
    |         ^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:892:11
    |
892 |     while (0 as libc::c_int as libc::c_long) < i_0 && lp < lim as *mut libc::c_char {
    |           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:893:24
    |
893 |         lp = lp.offset((mcel_scan(lp, lim)).len as libc::c_int as isize);
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((mcel_scan(lp, lim)).len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/uniq.rs:895:9
    |
895 |         i_0;
    |         ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u64` may lose the sign of the value
   --> src/uniq.rs:900:43
    |
900 |     } else if __ctype_get_mb_cur_max() <= 1 as libc::c_int as libc::c_ulong {
    |                                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:905:15
    |
905 |         while (0 as libc::c_int as libc::c_long) < i_1 && lp < lim as *mut libc::c_char {
    |               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `u8` to `i32` may become silently lossy if you later change the type
   --> src/uniq.rs:906:28
    |
906 |             ep = ep.offset((mcel_scan(lp, lim)).len as libc::c_int as isize);
    |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((mcel_scan(lp, lim)).len)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: statement with no effect
   --> src/uniq.rs:908:13
    |
908 |             i_1;
    |             ^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: unneeded `return` statement
   --> src/uniq.rs:922:9
    |
922 | /         return oldlen != newlen
923 | |             || memcasecmp(
924 | |                 old as *const libc::c_void,
925 | |                 new as *const libc::c_void,
926 | |                 oldlen as size_t,
927 | |             ) != 0
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
922 ~         oldlen != newlen
923 +             || memcasecmp(
924 +                 old as *const libc::c_void,
925 +                 new as *const libc::c_void,
926 +                 oldlen as size_t,
927 +             ) != 0
    |

warning: unneeded `return` statement
   --> src/uniq.rs:929:9
    |
929 | /         return oldlen != newlen
930 | |             || memcmp(
931 | |                 old as *const libc::c_void,
932 | |                 new as *const libc::c_void,
933 | |                 oldlen as libc::c_ulong,
934 | |             ) != 0
    | |__________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return
help: remove `return`
    |
929 ~         oldlen != newlen
930 +             || memcmp(
931 +                 old as *const libc::c_void,
932 +                 new as *const libc::c_void,
933 +                 oldlen as libc::c_ulong,
934 +             ) != 0
    |

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:926:17
    |
926 |                 oldlen as size_t,
    |                 ^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:933:17
    |
933 |                 oldlen as libc::c_ulong,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:942:24
    |
942 |     if if linecount == 0 as libc::c_int as libc::c_long {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:943:9
    |
943 |         output_unique as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_unique)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:945:9
    |
945 |         output_first_repeated as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_first_repeated)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
   --> src/uniq.rs:947:9
    |
947 |         output_later_repeated as libc::c_int
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_later_repeated)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:954:13
    |
954 |             b"%7jd \0" as *const u8 as *const libc::c_char,
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%7jd \0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i64` may become silently lossy if you later change the type
   --> src/uniq.rs:955:25
    |
955 |             linecount + 1 as libc::c_int as libc::c_long,
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:961:9
    |
961 |         (*line).length as size_t,
    |         ^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
   --> src/uniq.rs:963:10
    |
963 |     ) != (*line).length as libc::c_ulong
    |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: this boolean expression can be simplified
   --> src/uniq.rs:986:8
    |
986 |       if !(strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    |  ________^
987 | |         || !(freopen_safer(infile, b"r\0" as *const u8 as *const libc::c_char, stdin))
988 | |             .is_null())
    | |_______________________^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
    |
986 ~     if strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) != 0 as libc::c_int && (freopen_safer(infile, b"r\0" as *const u8 as *const libc::c_char, stdin))
987 +             .is_null()
    |

warning: this boolean expression can be simplified
    --> src/uniq.rs:1041:8
     |
1041 |       if !(strcmp(outfile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
     |  ________^
1042 | |         || !(freopen_safer(outfile, b"w\0" as *const u8 as *const libc::c_char, stdout))
1043 | |             .is_null())
     | |_______________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
     |
1041 ~     if strcmp(outfile, b"-\0" as *const u8 as *const libc::c_char) != 0 as libc::c_int && (freopen_safer(outfile, b"w\0" as *const u8 as *const libc::c_char, stdout))
1042 +             .is_null()
     |

warning: this boolean expression can be simplified
    --> src/uniq.rs:1156:16
     |
1156 |             if !(feof_unlocked(stdin) == 0) {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `feof_unlocked(stdin) != 0`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool

warning: the function has a cognitive complexity of (40/25)
   --> src/uniq.rs:968:22
    |
968 | unsafe extern "C" fn check_file(
    |                      ^^^^^^^^^^
    |
    = note: `-W clippy::cognitive-complexity` implied by `-W clippy::nursery`
    = help: you could split it up into multiple smaller functions
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (328/100)
    --> src/uniq.rs:968:1
     |
968  | / unsafe extern "C" fn check_file(
969  | |     mut infile: *const libc::c_char,
970  | |     mut outfile: *const libc::c_char,
971  | |     mut delimiter: libc::c_char,
...    |
1308 | |     free(lb2.buffer as *mut libc::c_void);
1309 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: `0 as *mut _` detected
   --> src/uniq.rs:977:17
    |
977 |         buffer: 0 as *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/uniq.rs:982:17
    |
982 |         buffer: 0 as *mut libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/uniq.rs:984:41
    |
984 |     let mut thisline: *mut linebuffer = 0 as *mut linebuffer;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `0 as *mut _` detected
   --> src/uniq.rs:985:41
    |
985 |     let mut prevline: *mut linebuffer = 0 as *mut linebuffer;
    |                                         ^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<linebuffer>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:986:25
    |
986 |     if !(strcmp(infile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
    |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:987:36
    |
987 |         || !(freopen_safer(infile, b"r\0" as *const u8 as *const libc::c_char, stdin))
    |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"r\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:990:9
     |
990  | /         if 0 != 0 {
991  | |             error(
992  | |                 1 as libc::c_int,
993  | |                 *__errno_location(),
...    |
1038 | |             });
1039 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
   --> src/uniq.rs:990:12
    |
990 |         if 0 != 0 {
    |            ^^^^^^
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
   --> src/uniq.rs:994:17
    |
994 |                 b"%s\0" as *const u8 as *const libc::c_char,
    |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
    |
    = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1001:13
     |
1001 | /             if 1 as libc::c_int != 0 as libc::c_int {
1002 | |                 unreachable!();
1003 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1006:17
     |
1006 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1010:21
     |
1010 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1017:17
     |
1017 | /                 if __errstatus != 0 as libc::c_int {
1018 | |                     unreachable!();
1019 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1023:17
     |
1023 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1027:21
     |
1027 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1034:17
     |
1034 | /                 if __errstatus != 0 as libc::c_int {
1035 | |                     unreachable!();
1036 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1041:26
     |
1041 |     if !(strcmp(outfile, b"-\0" as *const u8 as *const libc::c_char) == 0 as libc::c_int
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1042:37
     |
1042 |         || !(freopen_safer(outfile, b"w\0" as *const u8 as *const libc::c_char, stdout))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"w\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1045:9
     |
1045 | /         if 0 != 0 {
1046 | |             error(
1047 | |                 1 as libc::c_int,
1048 | |                 *__errno_location(),
...    |
1093 | |             });
1094 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1045:12
     |
1045 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1049:17
     |
1049 |                 b"%s\0" as *const u8 as *const libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1056:13
     |
1056 | /             if 1 as libc::c_int != 0 as libc::c_int {
1057 | |                 unreachable!();
1058 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1061:17
     |
1061 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1065:21
     |
1065 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1072:17
     |
1072 | /                 if __errstatus != 0 as libc::c_int {
1073 | |                     unreachable!();
1074 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1078:17
     |
1078 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1082:21
     |
1082 |                     b"%s\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"%s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1089:17
     |
1089 | /                 if __errstatus != 0 as libc::c_int {
1090 | |                     unreachable!();
1091 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1101:8
     |
1101 |     if output_unique as libc::c_int != 0 && output_first_repeated as libc::c_int != 0
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_unique)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1101:45
     |
1101 |     if output_unique as libc::c_int != 0 && output_first_repeated as libc::c_int != 0
     |                                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_first_repeated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/uniq.rs:1104:48
     |
1104 |         let mut prevfield: *mut libc::c_char = 0 as *mut libc::c_char;
     |                                                ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1113:20
     |
1113 |                 || different(thisfield, prevfield, thislen, prevlen) as libc::c_int != 0;
     |                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(different(thisfield, prevfield, thislen, prevlen))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1114:16
     |
1114 |             if new_group as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_group)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1115:48
     |
1115 |                 && grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1115:48
     |
1115 |                 && grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1116:49
     |
1116 |                 && (grouping as libc::c_uint == GM_PREPEND as libc::c_int as libc::c_uint
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1116:49
     |
1116 |                 && (grouping as libc::c_uint == GM_PREPEND as libc::c_int as libc::c_uint
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1117:52
     |
1117 |                     || grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1117:52
     |
1117 |                     || grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                                    ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1118:24
     |
1118 |                     || first_group_printed as libc::c_int != 0
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(first_group_printed)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1120:32
     |
1120 | ...                   == GM_APPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1120:32
     |
1120 | ...                   == GM_APPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1122:36
     |
1122 | ...                   == GM_SEPARATE as libc::c_int as libc::c_uint))
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1122:36
     |
1122 | ...                   == GM_SEPARATE as libc::c_int as libc::c_uint))
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1124:34
     |
1124 |                 putchar_unlocked(delimiter as libc::c_int);
     |                                  ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1126:16
     |
1126 |             if new_group as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(new_group)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1127:48
     |
1127 |                 || grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1127:48
     |
1127 |                 || grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                                ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/uniq.rs:1132:21
     |
1132 |                     (*thisline).length as size_t,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i64` to `u64` may lose the sign of the value
    --> src/uniq.rs:1134:22
     |
1134 |                 ) != (*thisline).length as libc::c_ulong
     |                      ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1144:41
     |
1144 |         if (grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1144:41
     |
1144 |         if (grouping as libc::c_uint == GM_BOTH as libc::c_int as libc::c_uint
     |                                         ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1145:44
     |
1145 |             || grouping as libc::c_uint == GM_APPEND as libc::c_int as libc::c_uint)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1145:44
     |
1145 |             || grouping as libc::c_uint == GM_APPEND as libc::c_int as libc::c_uint)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1146:16
     |
1146 |             && first_group_printed as libc::c_int != 0
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(first_group_printed)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1148:30
     |
1148 |             putchar_unlocked(delimiter as libc::c_int);
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1153:41
     |
1153 |         let mut match_count: intmax_t = 0 as libc::c_int as intmax_t;
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: all if blocks contain the same code at the end
    --> src/uniq.rs:1166:17
     |
1166 | /                     break;
1167 | |                 }
     | |_________________^
     |
     = note: `-W clippy::branches-sharing-code` implied by `-W clippy::nursery`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#branches_sharing_code
help: consider moving these statements after the if
     |
1166 ~                 }
1167 +                 break;
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1161:17
     |
1161 | /                 if ferror_unlocked(stdin) != 0 {
1162 | |                     current_block = 6469497169255231809;
1163 | |                     break;
1164 | |                 } else {
1165 | |                     current_block = 6476622998065200121;
1166 | |                     break;
1167 | |                 }
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i64` is more cleanly stated with `i64::from(_)`
    --> src/uniq.rs:1180:32
     |
1180 |                 match_count += match_0 as libc::c_long;
     |                                ^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(match_0)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1183:25
     |
1183 | /                         if 0 != 0 {
1184 | |                             error(
1185 | |                                 1 as libc::c_int,
1186 | |                                 0 as libc::c_int,
...    |
1225 | |                             });
1226 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1183:28
     |
1183 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1188:37
     |
1188 | / ...                   b"too many repeated lines\0" as *const u8
1189 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"too many repeated lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1192:29
     |
1192 | / ...                   if 1 as libc::c_int != 0 as libc::c_int {
1193 | | ...                       unreachable!();
1194 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1197:33
     |
1197 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1202:41
     |
1202 | / ...                   b"too many repeated lines\0" as *const u8
1203 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"too many repeated lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1206:33
     |
1206 | / ...                   if __errstatus != 0 as libc::c_int {
1207 | | ...                       unreachable!();
1208 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1212:33
     |
1212 | ...                   let __errstatus: libc::c_int = 1 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1217:41
     |
1217 | / ...                   b"too many repeated lines\0" as *const u8
1218 | | ...                       as *const libc::c_char,
     | |________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"too many repeated lines\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1221:33
     |
1221 | / ...                   if __errstatus != 0 as libc::c_int {
1222 | | ...                       unreachable!();
1223 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: statement with no effect
    --> src/uniq.rs:1229:21
     |
1229 |                     match_count;
     |                     ^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1232:24
     |
1232 |                     != DM_NONE as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1232:24
     |
1232 |                     != DM_NONE as libc::c_int as libc::c_uint
     |                        ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1238:46
     |
1238 |                     } else if match_count == 1 as libc::c_int as libc::c_long {
     |                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1240:32
     |
1240 | ...                   == DM_PREPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1240:32
     |
1240 | ...                   == DM_PREPEND as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1242:36
     |
1242 | ...                   == DM_SEPARATE as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1242:36
     |
1242 | ...                   == DM_SEPARATE as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1245:46
     |
1245 | ...                   putchar_unlocked(delimiter as libc::c_int);
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(delimiter)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1249:32
     |
1249 |                 if !match_0 || output_later_repeated as libc::c_int != 0 {
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_later_repeated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1255:39
     |
1255 |                         match_count = 0 as libc::c_int as intmax_t;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1268:9
     |
1268 | /         if 0 != 0 {
1269 | |             error(
1270 | |                 1 as libc::c_int,
1271 | |                 *__errno_location(),
...    |
1304 | |             });
1305 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1268:12
     |
1268 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1272:25
     |
1272 |                 gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1275:13
     |
1275 | /             if 1 as libc::c_int != 0 as libc::c_int {
1276 | |                 unreachable!();
1277 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1280:17
     |
1280 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1284:29
     |
1284 |                     gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1287:17
     |
1287 | /                 if __errstatus != 0 as libc::c_int {
1288 | |                     unreachable!();
1289 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1293:17
     |
1293 |                 let __errstatus: libc::c_int = 1 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1297:29
     |
1297 |                     gettext(b"error reading %s\0" as *const u8 as *const libc::c_char),
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"error reading %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1300:17
     |
1300 | /                 if __errstatus != 0 as libc::c_int {
1301 | |                     unreachable!();
1302 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1307:10
     |
1307 |     free(lb1.buffer as *mut libc::c_void);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `lb1.buffer.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1308:10
     |
1308 |     free(lb2.buffer as *mut libc::c_void);
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `lb2.buffer.cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: this boolean expression can be simplified
    --> src/uniq.rs:1481:24
     |
1481 |                       if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |  ________________________^
1482 | |                         && ((if 1 as libc::c_int != 0 {
1483 | |                             0 as libc::c_int as libc::c_long
1484 | |                         } else {
...    |
1823 | |                             !fresh12
1824 | |                         })
     | |__________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
     |
1481 ~                     if ((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
1482 +                         && ((if 1 as libc::c_int != 0 {
1483 +                             0 as libc::c_int as libc::c_long
1484 +                         } else {
1485 +                             skip_fields
1486 +                         }) - 1 as libc::c_int as libc::c_long)
1487 +                             < 0 as libc::c_int as libc::c_long
1488 +                         && ((if 1 as libc::c_int != 0 {
1489 +                             0 as libc::c_int
1490 +                         } else {
1491 +                             10 as libc::c_int
1492 +                         }) - 1 as libc::c_int) < 0 as libc::c_int
1493 +                         && (if (10 as libc::c_int) < 0 as libc::c_int {
1494 +                             if skip_fields < 0 as libc::c_int as libc::c_long {
1495 +                                 if ((if 1 as libc::c_int != 0 {
1496 +                                     0 as libc::c_int as libc::c_long
1497 +                                 } else {
1498 +                                     (if 1 as libc::c_int != 0 {
1499 +                                         0 as libc::c_int as libc::c_long
1500 +                                     } else {
1501 +                                         -(1 as libc::c_int) as idx_t
1502 +                                     }) + 10 as libc::c_int as libc::c_long
1503 +                                 }) - 1 as libc::c_int as libc::c_long)
1504 +                                     < 0 as libc::c_int as libc::c_long
1505 +                                 {
1506 +                                     (skip_fields
1507 +                                         < -(1 as libc::c_int) as idx_t
1508 +                                             / 10 as libc::c_int as libc::c_long) as libc::c_int
1509 +                                 } else {
1510 +                                     ((if (if (if ((if 1 as libc::c_int != 0 {
1511 +                                         0 as libc::c_int
1512 +                                     } else {
1513 +                                         10 as libc::c_int
1514 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1515 +                                     {
1516 +                                         !(((((if 1 as libc::c_int != 0 {
1517 +                                             0 as libc::c_int
1518 +                                         } else {
1519 +                                             10 as libc::c_int
1520 +                                         }) + 1 as libc::c_int)
1521 +                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1522 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1523 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1524 +                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1525 +                                     } else {
1526 +                                         (if 1 as libc::c_int != 0 {
1527 +                                             0 as libc::c_int
1528 +                                         } else {
1529 +                                             10 as libc::c_int
1530 +                                         }) + 0 as libc::c_int
1531 +                                     }) < 0 as libc::c_int
1532 +                                     {
1533 +                                         ((10 as libc::c_int)
1534 +                                             < -(if ((if 1 as libc::c_int != 0 {
1535 +                                                 0 as libc::c_int
1536 +                                             } else {
1537 +                                                 10 as libc::c_int
1538 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1539 +                                             {
1540 +                                                 ((((if 1 as libc::c_int != 0 {
1541 +                                                     0 as libc::c_int
1542 +                                                 } else {
1543 +                                                     10 as libc::c_int
1544 +                                                 }) + 1 as libc::c_int)
1545 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1546 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1547 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1548 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1549 +                                             } else {
1550 +                                                 (if 1 as libc::c_int != 0 {
1551 +                                                     0 as libc::c_int
1552 +                                                 } else {
1553 +                                                     10 as libc::c_int
1554 +                                                 }) - 1 as libc::c_int
1555 +                                             })) as libc::c_int
1556 +                                     } else {
1557 +                                         ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
1558 +                                     }) != 0
1559 +                                     {
1560 +                                         (if 1 as libc::c_int != 0 {
1561 +                                             0 as libc::c_int
1562 +                                         } else {
1563 +                                             10 as libc::c_int
1564 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t
1565 +                                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1566 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1567 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1568 +                                     } else {
1569 +                                         -(1 as libc::c_int) as idx_t
1570 +                                             / -(10 as libc::c_int) as libc::c_long
1571 +                                     }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
1572 +                                         as libc::c_int
1573 +                                 }
1574 +                             } else {
1575 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1576 +                                     0 as libc::c_int as libc::c_long
1577 +                                 } else {
1578 +                                     (if 1 as libc::c_int != 0 {
1579 +                                         0 as libc::c_int
1580 +                                     } else {
1581 +                                         10 as libc::c_int
1582 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1583 +                                 }) - 1 as libc::c_int as libc::c_long)
1584 +                                     < 0 as libc::c_int as libc::c_long
1585 +                                 {
1586 +                                     !(((((if 1 as libc::c_int != 0 {
1587 +                                         0 as libc::c_int as libc::c_long
1588 +                                     } else {
1589 +                                         (if 1 as libc::c_int != 0 {
1590 +                                             0 as libc::c_int
1591 +                                         } else {
1592 +                                             10 as libc::c_int
1593 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1594 +                                     }) + 1 as libc::c_int as libc::c_long)
1595 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1596 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1597 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1598 +                                         - 1 as libc::c_int as libc::c_long)
1599 +                                         * 2 as libc::c_int as libc::c_long
1600 +                                         + 1 as libc::c_int as libc::c_long)
1601 +                                 } else {
1602 +                                     (if 1 as libc::c_int != 0 {
1603 +                                         0 as libc::c_int as libc::c_long
1604 +                                     } else {
1605 +                                         (if 1 as libc::c_int != 0 {
1606 +                                             0 as libc::c_int
1607 +                                         } else {
1608 +                                             10 as libc::c_int
1609 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1610 +                                     }) + 0 as libc::c_int as libc::c_long
1611 +                                 }) < 0 as libc::c_int as libc::c_long
1612 +                                 {
1613 +                                     (((if 1 as libc::c_int != 0 {
1614 +                                         0 as libc::c_int
1615 +                                     } else {
1616 +                                         10 as libc::c_int
1617 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1618 +                                         < -(if ((if 1 as libc::c_int != 0 {
1619 +                                             0 as libc::c_int as libc::c_long
1620 +                                         } else {
1621 +                                             (if 1 as libc::c_int != 0 {
1622 +                                                 0 as libc::c_int
1623 +                                             } else {
1624 +                                                 10 as libc::c_int
1625 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1626 +                                         }) - 1 as libc::c_int as libc::c_long)
1627 +                                             < 0 as libc::c_int as libc::c_long
1628 +                                         {
1629 +                                             ((((if 1 as libc::c_int != 0 {
1630 +                                                 0 as libc::c_int as libc::c_long
1631 +                                             } else {
1632 +                                                 (if 1 as libc::c_int != 0 {
1633 +                                                     0 as libc::c_int
1634 +                                                 } else {
1635 +                                                     10 as libc::c_int
1636 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1637 +                                             }) + 1 as libc::c_int as libc::c_long)
1638 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1639 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1640 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1641 +                                                 - 1 as libc::c_int as libc::c_long)
1642 +                                                 * 2 as libc::c_int as libc::c_long
1643 +                                                 + 1 as libc::c_int as libc::c_long
1644 +                                         } else {
1645 +                                             (if 1 as libc::c_int != 0 {
1646 +                                                 0 as libc::c_int as libc::c_long
1647 +                                             } else {
1648 +                                                 (if 1 as libc::c_int != 0 {
1649 +                                                     0 as libc::c_int
1650 +                                                 } else {
1651 +                                                     10 as libc::c_int
1652 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1653 +                                             }) - 1 as libc::c_int as libc::c_long
1654 +                                         })) as libc::c_int
1655 +                                 } else {
1656 +                                     ((0 as libc::c_int as libc::c_long)
1657 +                                         < (if 1 as libc::c_int != 0 {
1658 +                                             0 as libc::c_int
1659 +                                         } else {
1660 +                                             10 as libc::c_int
1661 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t)
1662 +                                         as libc::c_int
1663 +                                 }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
1664 +                                 {
1665 +                                     if ((if 1 as libc::c_int != 0 {
1666 +                                         0 as libc::c_int as libc::c_long
1667 +                                     } else {
1668 +                                         skip_fields
1669 +                                     }) - 1 as libc::c_int as libc::c_long)
1670 +                                         < 0 as libc::c_int as libc::c_long
1671 +                                     {
1672 +                                         ((0 as libc::c_int as libc::c_long)
1673 +                                             < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
1674 +                                     } else {
1675 +                                         ((0 as libc::c_int as libc::c_long) < skip_fields
1676 +                                             && (-(1 as libc::c_int) as libc::c_long
1677 +                                                 - 0 as libc::c_int as idx_t)
1678 +                                                 < skip_fields - 1 as libc::c_int as libc::c_long)
1679 +                                             as libc::c_int
1680 +                                     }
1681 +                                 } else {
1682 +                                     ((0 as libc::c_int as idx_t
1683 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1684 +                                         as libc::c_int
1685 +                                 }
1686 +                             }
1687 +                         } else {
1688 +                             if 10 as libc::c_int == 0 as libc::c_int {
1689 +                                 0 as libc::c_int
1690 +                             } else {
1691 +                                 if skip_fields < 0 as libc::c_int as libc::c_long {
1692 +                                     if (if (if ((if 1 as libc::c_int != 0 {
1693 +                                         0 as libc::c_int as libc::c_long
1694 +                                     } else {
1695 +                                         (if 1 as libc::c_int != 0 {
1696 +                                             0 as libc::c_int as libc::c_long
1697 +                                         } else {
1698 +                                             skip_fields
1699 +                                         }) + 0 as libc::c_int as idx_t
1700 +                                     }) - 1 as libc::c_int as libc::c_long)
1701 +                                         < 0 as libc::c_int as libc::c_long
1702 +                                     {
1703 +                                         !(((((if 1 as libc::c_int != 0 {
1704 +                                             0 as libc::c_int as libc::c_long
1705 +                                         } else {
1706 +                                             (if 1 as libc::c_int != 0 {
1707 +                                                 0 as libc::c_int as libc::c_long
1708 +                                             } else {
1709 +                                                 skip_fields
1710 +                                             }) + 0 as libc::c_int as idx_t
1711 +                                         }) + 1 as libc::c_int as libc::c_long)
1712 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1713 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1714 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1715 +                                             - 1 as libc::c_int as libc::c_long)
1716 +                                             * 2 as libc::c_int as libc::c_long
1717 +                                             + 1 as libc::c_int as libc::c_long)
1718 +                                     } else {
1719 +                                         (if 1 as libc::c_int != 0 {
1720 +                                             0 as libc::c_int as libc::c_long
1721 +                                         } else {
1722 +                                             (if 1 as libc::c_int != 0 {
1723 +                                                 0 as libc::c_int as libc::c_long
1724 +                                             } else {
1725 +                                                 skip_fields
1726 +                                             }) + 0 as libc::c_int as idx_t
1727 +                                         }) + 0 as libc::c_int as libc::c_long
1728 +                                     }) < 0 as libc::c_int as libc::c_long
1729 +                                     {
1730 +                                         (((if 1 as libc::c_int != 0 {
1731 +                                             0 as libc::c_int as libc::c_long
1732 +                                         } else {
1733 +                                             skip_fields
1734 +                                         }) + 0 as libc::c_int as idx_t)
1735 +                                             < -(if ((if 1 as libc::c_int != 0 {
1736 +                                                 0 as libc::c_int as libc::c_long
1737 +                                             } else {
1738 +                                                 (if 1 as libc::c_int != 0 {
1739 +                                                     0 as libc::c_int as libc::c_long
1740 +                                                 } else {
1741 +                                                     skip_fields
1742 +                                                 }) + 0 as libc::c_int as idx_t
1743 +                                             }) - 1 as libc::c_int as libc::c_long)
1744 +                                                 < 0 as libc::c_int as libc::c_long
1745 +                                             {
1746 +                                                 ((((if 1 as libc::c_int != 0 {
1747 +                                                     0 as libc::c_int as libc::c_long
1748 +                                                 } else {
1749 +                                                     (if 1 as libc::c_int != 0 {
1750 +                                                         0 as libc::c_int as libc::c_long
1751 +                                                     } else {
1752 +                                                         skip_fields
1753 +                                                     }) + 0 as libc::c_int as idx_t
1754 +                                                 }) + 1 as libc::c_int as libc::c_long)
1755 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1756 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1757 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1758 +                                                     - 1 as libc::c_int as libc::c_long)
1759 +                                                     * 2 as libc::c_int as libc::c_long
1760 +                                                     + 1 as libc::c_int as libc::c_long
1761 +                                             } else {
1762 +                                                 (if 1 as libc::c_int != 0 {
1763 +                                                     0 as libc::c_int as libc::c_long
1764 +                                                 } else {
1765 +                                                     (if 1 as libc::c_int != 0 {
1766 +                                                         0 as libc::c_int as libc::c_long
1767 +                                                     } else {
1768 +                                                         skip_fields
1769 +                                                     }) + 0 as libc::c_int as idx_t
1770 +                                                 }) - 1 as libc::c_int as libc::c_long
1771 +                                             })) as libc::c_int
1772 +                                     } else {
1773 +                                         ((0 as libc::c_int as libc::c_long)
1774 +                                             < (if 1 as libc::c_int != 0 {
1775 +                                                 0 as libc::c_int as libc::c_long
1776 +                                             } else {
1777 +                                                 skip_fields
1778 +                                             }) + 0 as libc::c_int as idx_t) as libc::c_int
1779 +                                     }) != 0
1780 +                                         && skip_fields == -(1 as libc::c_int) as libc::c_long
1781 +                                     {
1782 +                                         if ((if 1 as libc::c_int != 0 {
1783 +                                             0 as libc::c_int
1784 +                                         } else {
1785 +                                             10 as libc::c_int
1786 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
1787 +                                         {
1788 +                                             ((0 as libc::c_int as libc::c_long)
1789 +                                                 < 10 as libc::c_int as libc::c_long
1790 +                                                     + 0 as libc::c_int as idx_t) as libc::c_int
1791 +                                         } else {
1792 +                                             ((-(1 as libc::c_int) as libc::c_long
1793 +                                                 - 0 as libc::c_int as idx_t)
1794 +                                                 < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1795 +                                                 as libc::c_int
1796 +                                         }
1797 +                                     } else {
1798 +                                         (0 as libc::c_int as idx_t / skip_fields
1799 +                                             < 10 as libc::c_int as libc::c_long) as libc::c_int
1800 +                                     }
1801 +                                 } else {
1802 +                                     ((-(1 as libc::c_int) as idx_t
1803 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1804 +                                         as libc::c_int
1805 +                                 }
1806 +                             }
1807 +                         }) != 0
1808 +                     {
1809 +                         let (fresh7, _fresh8) = skip_fields
1810 +                             .overflowing_mul((10 as libc::c_int).into());
1811 +                         *(&mut skip_fields as *mut idx_t) = fresh7;
1812 +                         1 as libc::c_int
1813 +                     } else {
1814 +                         let (fresh9, fresh10) = skip_fields
1815 +                             .overflowing_mul((10 as libc::c_int).into());
1816 +                         *(&mut skip_fields as *mut idx_t) = fresh9;
1817 +                         fresh10 as libc::c_int
1818 +                     }) != 0) || !{
1819 +                             let (fresh11, fresh12) = skip_fields
1820 +                                 .overflowing_add((optc - '0' as i32).into());
1821 +                             *(&mut skip_fields as *mut idx_t) = fresh11;
1822 +                             !fresh12
1823 +                         }
     |

warning: this boolean expression can be simplified
    --> src/uniq.rs:1481:26
     |
1481 |                       if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |  __________________________^
1482 | |                         && ((if 1 as libc::c_int != 0 {
1483 | |                             0 as libc::c_int as libc::c_long
1484 | |                         } else {
...    |
1817 | |                         fresh10 as libc::c_int
1818 | |                     }) != 0)
     | |____________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#nonminimal_bool
help: try
     |
1481 ~                     if !((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
1482 +                         && ((if 1 as libc::c_int != 0 {
1483 +                             0 as libc::c_int as libc::c_long
1484 +                         } else {
1485 +                             skip_fields
1486 +                         }) - 1 as libc::c_int as libc::c_long)
1487 +                             < 0 as libc::c_int as libc::c_long
1488 +                         && ((if 1 as libc::c_int != 0 {
1489 +                             0 as libc::c_int
1490 +                         } else {
1491 +                             10 as libc::c_int
1492 +                         }) - 1 as libc::c_int) < 0 as libc::c_int
1493 +                         && (if (10 as libc::c_int) < 0 as libc::c_int {
1494 +                             if skip_fields < 0 as libc::c_int as libc::c_long {
1495 +                                 if ((if 1 as libc::c_int != 0 {
1496 +                                     0 as libc::c_int as libc::c_long
1497 +                                 } else {
1498 +                                     (if 1 as libc::c_int != 0 {
1499 +                                         0 as libc::c_int as libc::c_long
1500 +                                     } else {
1501 +                                         -(1 as libc::c_int) as idx_t
1502 +                                     }) + 10 as libc::c_int as libc::c_long
1503 +                                 }) - 1 as libc::c_int as libc::c_long)
1504 +                                     < 0 as libc::c_int as libc::c_long
1505 +                                 {
1506 +                                     (skip_fields
1507 +                                         < -(1 as libc::c_int) as idx_t
1508 +                                             / 10 as libc::c_int as libc::c_long) as libc::c_int
1509 +                                 } else {
1510 +                                     ((if (if (if ((if 1 as libc::c_int != 0 {
1511 +                                         0 as libc::c_int
1512 +                                     } else {
1513 +                                         10 as libc::c_int
1514 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1515 +                                     {
1516 +                                         !(((((if 1 as libc::c_int != 0 {
1517 +                                             0 as libc::c_int
1518 +                                         } else {
1519 +                                             10 as libc::c_int
1520 +                                         }) + 1 as libc::c_int)
1521 +                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1522 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1523 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1524 +                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1525 +                                     } else {
1526 +                                         (if 1 as libc::c_int != 0 {
1527 +                                             0 as libc::c_int
1528 +                                         } else {
1529 +                                             10 as libc::c_int
1530 +                                         }) + 0 as libc::c_int
1531 +                                     }) < 0 as libc::c_int
1532 +                                     {
1533 +                                         ((10 as libc::c_int)
1534 +                                             < -(if ((if 1 as libc::c_int != 0 {
1535 +                                                 0 as libc::c_int
1536 +                                             } else {
1537 +                                                 10 as libc::c_int
1538 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1539 +                                             {
1540 +                                                 ((((if 1 as libc::c_int != 0 {
1541 +                                                     0 as libc::c_int
1542 +                                                 } else {
1543 +                                                     10 as libc::c_int
1544 +                                                 }) + 1 as libc::c_int)
1545 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1546 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1547 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1548 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1549 +                                             } else {
1550 +                                                 (if 1 as libc::c_int != 0 {
1551 +                                                     0 as libc::c_int
1552 +                                                 } else {
1553 +                                                     10 as libc::c_int
1554 +                                                 }) - 1 as libc::c_int
1555 +                                             })) as libc::c_int
1556 +                                     } else {
1557 +                                         ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
1558 +                                     }) != 0
1559 +                                     {
1560 +                                         (if 1 as libc::c_int != 0 {
1561 +                                             0 as libc::c_int
1562 +                                         } else {
1563 +                                             10 as libc::c_int
1564 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t
1565 +                                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1566 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1567 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1568 +                                     } else {
1569 +                                         -(1 as libc::c_int) as idx_t
1570 +                                             / -(10 as libc::c_int) as libc::c_long
1571 +                                     }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
1572 +                                         as libc::c_int
1573 +                                 }
1574 +                             } else {
1575 +                                 if (if (if ((if 1 as libc::c_int != 0 {
1576 +                                     0 as libc::c_int as libc::c_long
1577 +                                 } else {
1578 +                                     (if 1 as libc::c_int != 0 {
1579 +                                         0 as libc::c_int
1580 +                                     } else {
1581 +                                         10 as libc::c_int
1582 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t
1583 +                                 }) - 1 as libc::c_int as libc::c_long)
1584 +                                     < 0 as libc::c_int as libc::c_long
1585 +                                 {
1586 +                                     !(((((if 1 as libc::c_int != 0 {
1587 +                                         0 as libc::c_int as libc::c_long
1588 +                                     } else {
1589 +                                         (if 1 as libc::c_int != 0 {
1590 +                                             0 as libc::c_int
1591 +                                         } else {
1592 +                                             10 as libc::c_int
1593 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1594 +                                     }) + 1 as libc::c_int as libc::c_long)
1595 +                                         << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1596 +                                             .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1597 +                                             .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1598 +                                         - 1 as libc::c_int as libc::c_long)
1599 +                                         * 2 as libc::c_int as libc::c_long
1600 +                                         + 1 as libc::c_int as libc::c_long)
1601 +                                 } else {
1602 +                                     (if 1 as libc::c_int != 0 {
1603 +                                         0 as libc::c_int as libc::c_long
1604 +                                     } else {
1605 +                                         (if 1 as libc::c_int != 0 {
1606 +                                             0 as libc::c_int
1607 +                                         } else {
1608 +                                             10 as libc::c_int
1609 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t
1610 +                                     }) + 0 as libc::c_int as libc::c_long
1611 +                                 }) < 0 as libc::c_int as libc::c_long
1612 +                                 {
1613 +                                     (((if 1 as libc::c_int != 0 {
1614 +                                         0 as libc::c_int
1615 +                                     } else {
1616 +                                         10 as libc::c_int
1617 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1618 +                                         < -(if ((if 1 as libc::c_int != 0 {
1619 +                                             0 as libc::c_int as libc::c_long
1620 +                                         } else {
1621 +                                             (if 1 as libc::c_int != 0 {
1622 +                                                 0 as libc::c_int
1623 +                                             } else {
1624 +                                                 10 as libc::c_int
1625 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1626 +                                         }) - 1 as libc::c_int as libc::c_long)
1627 +                                             < 0 as libc::c_int as libc::c_long
1628 +                                         {
1629 +                                             ((((if 1 as libc::c_int != 0 {
1630 +                                                 0 as libc::c_int as libc::c_long
1631 +                                             } else {
1632 +                                                 (if 1 as libc::c_int != 0 {
1633 +                                                     0 as libc::c_int
1634 +                                                 } else {
1635 +                                                     10 as libc::c_int
1636 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1637 +                                             }) + 1 as libc::c_int as libc::c_long)
1638 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1639 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1640 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1641 +                                                 - 1 as libc::c_int as libc::c_long)
1642 +                                                 * 2 as libc::c_int as libc::c_long
1643 +                                                 + 1 as libc::c_int as libc::c_long
1644 +                                         } else {
1645 +                                             (if 1 as libc::c_int != 0 {
1646 +                                                 0 as libc::c_int as libc::c_long
1647 +                                             } else {
1648 +                                                 (if 1 as libc::c_int != 0 {
1649 +                                                     0 as libc::c_int
1650 +                                                 } else {
1651 +                                                     10 as libc::c_int
1652 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1653 +                                             }) - 1 as libc::c_int as libc::c_long
1654 +                                         })) as libc::c_int
1655 +                                 } else {
1656 +                                     ((0 as libc::c_int as libc::c_long)
1657 +                                         < (if 1 as libc::c_int != 0 {
1658 +                                             0 as libc::c_int
1659 +                                         } else {
1660 +                                             10 as libc::c_int
1661 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t)
1662 +                                         as libc::c_int
1663 +                                 }) != 0 && 10 as libc::c_int == -(1 as libc::c_int)
1664 +                                 {
1665 +                                     if ((if 1 as libc::c_int != 0 {
1666 +                                         0 as libc::c_int as libc::c_long
1667 +                                     } else {
1668 +                                         skip_fields
1669 +                                     }) - 1 as libc::c_int as libc::c_long)
1670 +                                         < 0 as libc::c_int as libc::c_long
1671 +                                     {
1672 +                                         ((0 as libc::c_int as libc::c_long)
1673 +                                             < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
1674 +                                     } else {
1675 +                                         ((0 as libc::c_int as libc::c_long) < skip_fields
1676 +                                             && (-(1 as libc::c_int) as libc::c_long
1677 +                                                 - 0 as libc::c_int as idx_t)
1678 +                                                 < skip_fields - 1 as libc::c_int as libc::c_long)
1679 +                                             as libc::c_int
1680 +                                     }
1681 +                                 } else {
1682 +                                     ((0 as libc::c_int as idx_t
1683 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1684 +                                         as libc::c_int
1685 +                                 }
1686 +                             }
1687 +                         } else {
1688 +                             if 10 as libc::c_int == 0 as libc::c_int {
1689 +                                 0 as libc::c_int
1690 +                             } else {
1691 +                                 if skip_fields < 0 as libc::c_int as libc::c_long {
1692 +                                     if (if (if ((if 1 as libc::c_int != 0 {
1693 +                                         0 as libc::c_int as libc::c_long
1694 +                                     } else {
1695 +                                         (if 1 as libc::c_int != 0 {
1696 +                                             0 as libc::c_int as libc::c_long
1697 +                                         } else {
1698 +                                             skip_fields
1699 +                                         }) + 0 as libc::c_int as idx_t
1700 +                                     }) - 1 as libc::c_int as libc::c_long)
1701 +                                         < 0 as libc::c_int as libc::c_long
1702 +                                     {
1703 +                                         !(((((if 1 as libc::c_int != 0 {
1704 +                                             0 as libc::c_int as libc::c_long
1705 +                                         } else {
1706 +                                             (if 1 as libc::c_int != 0 {
1707 +                                                 0 as libc::c_int as libc::c_long
1708 +                                             } else {
1709 +                                                 skip_fields
1710 +                                             }) + 0 as libc::c_int as idx_t
1711 +                                         }) + 1 as libc::c_int as libc::c_long)
1712 +                                             << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1713 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1714 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1715 +                                             - 1 as libc::c_int as libc::c_long)
1716 +                                             * 2 as libc::c_int as libc::c_long
1717 +                                             + 1 as libc::c_int as libc::c_long)
1718 +                                     } else {
1719 +                                         (if 1 as libc::c_int != 0 {
1720 +                                             0 as libc::c_int as libc::c_long
1721 +                                         } else {
1722 +                                             (if 1 as libc::c_int != 0 {
1723 +                                                 0 as libc::c_int as libc::c_long
1724 +                                             } else {
1725 +                                                 skip_fields
1726 +                                             }) + 0 as libc::c_int as idx_t
1727 +                                         }) + 0 as libc::c_int as libc::c_long
1728 +                                     }) < 0 as libc::c_int as libc::c_long
1729 +                                     {
1730 +                                         (((if 1 as libc::c_int != 0 {
1731 +                                             0 as libc::c_int as libc::c_long
1732 +                                         } else {
1733 +                                             skip_fields
1734 +                                         }) + 0 as libc::c_int as idx_t)
1735 +                                             < -(if ((if 1 as libc::c_int != 0 {
1736 +                                                 0 as libc::c_int as libc::c_long
1737 +                                             } else {
1738 +                                                 (if 1 as libc::c_int != 0 {
1739 +                                                     0 as libc::c_int as libc::c_long
1740 +                                                 } else {
1741 +                                                     skip_fields
1742 +                                                 }) + 0 as libc::c_int as idx_t
1743 +                                             }) - 1 as libc::c_int as libc::c_long)
1744 +                                                 < 0 as libc::c_int as libc::c_long
1745 +                                             {
1746 +                                                 ((((if 1 as libc::c_int != 0 {
1747 +                                                     0 as libc::c_int as libc::c_long
1748 +                                                 } else {
1749 +                                                     (if 1 as libc::c_int != 0 {
1750 +                                                         0 as libc::c_int as libc::c_long
1751 +                                                     } else {
1752 +                                                         skip_fields
1753 +                                                     }) + 0 as libc::c_int as idx_t
1754 +                                                 }) + 1 as libc::c_int as libc::c_long)
1755 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1756 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1757 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1758 +                                                     - 1 as libc::c_int as libc::c_long)
1759 +                                                     * 2 as libc::c_int as libc::c_long
1760 +                                                     + 1 as libc::c_int as libc::c_long
1761 +                                             } else {
1762 +                                                 (if 1 as libc::c_int != 0 {
1763 +                                                     0 as libc::c_int as libc::c_long
1764 +                                                 } else {
1765 +                                                     (if 1 as libc::c_int != 0 {
1766 +                                                         0 as libc::c_int as libc::c_long
1767 +                                                     } else {
1768 +                                                         skip_fields
1769 +                                                     }) + 0 as libc::c_int as idx_t
1770 +                                                 }) - 1 as libc::c_int as libc::c_long
1771 +                                             })) as libc::c_int
1772 +                                     } else {
1773 +                                         ((0 as libc::c_int as libc::c_long)
1774 +                                             < (if 1 as libc::c_int != 0 {
1775 +                                                 0 as libc::c_int as libc::c_long
1776 +                                             } else {
1777 +                                                 skip_fields
1778 +                                             }) + 0 as libc::c_int as idx_t) as libc::c_int
1779 +                                     }) != 0
1780 +                                         && skip_fields == -(1 as libc::c_int) as libc::c_long
1781 +                                     {
1782 +                                         if ((if 1 as libc::c_int != 0 {
1783 +                                             0 as libc::c_int
1784 +                                         } else {
1785 +                                             10 as libc::c_int
1786 +                                         }) - 1 as libc::c_int) < 0 as libc::c_int
1787 +                                         {
1788 +                                             ((0 as libc::c_int as libc::c_long)
1789 +                                                 < 10 as libc::c_int as libc::c_long
1790 +                                                     + 0 as libc::c_int as idx_t) as libc::c_int
1791 +                                         } else {
1792 +                                             ((-(1 as libc::c_int) as libc::c_long
1793 +                                                 - 0 as libc::c_int as idx_t)
1794 +                                                 < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1795 +                                                 as libc::c_int
1796 +                                         }
1797 +                                     } else {
1798 +                                         (0 as libc::c_int as idx_t / skip_fields
1799 +                                             < 10 as libc::c_int as libc::c_long) as libc::c_int
1800 +                                     }
1801 +                                 } else {
1802 +                                     ((-(1 as libc::c_int) as idx_t
1803 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
1804 +                                         as libc::c_int
1805 +                                 }
1806 +                             }
1807 +                         }) != 0
1808 +                     {
1809 +                         let (fresh7, _fresh8) = skip_fields
1810 +                             .overflowing_mul((10 as libc::c_int).into());
1811 +                         *(&mut skip_fields as *mut idx_t) = fresh7;
1812 +                         1 as libc::c_int
1813 +                     } else {
1814 +                         let (fresh9, fresh10) = skip_fields
1815 +                             .overflowing_mul((10 as libc::c_int).into());
1816 +                         *(&mut skip_fields as *mut idx_t) = fresh9;
1817 +                         fresh10 as libc::c_int
1818 +                     }) == 0
     |

warning: the function has a cognitive complexity of (96/25)
    --> src/uniq.rs:1310:11
     |
1310 | unsafe fn main_0(
     |           ^^^^^^
     |
     = help: you could split it up into multiple smaller functions
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cognitive_complexity

warning: this function has too many lines (758/100)
    --> src/uniq.rs:1310:1
     |
1310 | / unsafe fn main_0(
1311 | |     mut argc: libc::c_int,
1312 | |     mut argv: *mut *mut libc::c_char,
1313 | | ) -> libc::c_int {
...    |
2081 | |     return 0 as libc::c_int;
2082 | | }
     | |_^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#too_many_lines

warning: unneeded `return` statement
    --> src/uniq.rs:2081:5
     |
2081 |     return 0 as libc::c_int;
     |     ^^^^^^^^^^^^^^^^^^^^^^^^ help: remove `return`: `0 as libc::c_int`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#needless_return

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1316:9
     |
1316 |         b"POSIXLY_CORRECT\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"POSIXLY_CORRECT\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *const _` detected
    --> src/uniq.rs:1321:47
     |
1321 |     let mut file: [*const libc::c_char; 2] = [0 as *const libc::c_char; 2];
     |                                               ^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null::<libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/uniq.rs:1322:39
     |
1322 |     let mut delimiter: libc::c_char = '\n' as i32 as libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1324:39
     |
1324 |     file[1 as libc::c_int as usize] = b"-\0" as *const u8 as *const libc::c_char;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1324:10
     |
1324 |     file[1 as libc::c_int as usize] = b"-\0" as *const u8 as *const libc::c_char;
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1325:44
     |
1325 |     file[0 as libc::c_int as usize] = file[1 as libc::c_int as usize];
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1325:10
     |
1325 |     file[0 as libc::c_int as usize] = file[1 as libc::c_int as usize];
     |          ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1327:33
     |
1327 |     setlocale(6 as libc::c_int, b"\0" as *const u8 as *const libc::c_char);
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1329:9
     |
1329 |         b"coreutils\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1330:9
     |
1330 |         b"/usr/local/share/locale\0" as *const u8 as *const libc::c_char,
     |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"/usr/local/share/locale\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1332:16
     |
1332 |     textdomain(b"coreutils\0" as *const u8 as *const libc::c_char);
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1336:16
     |
1336 |             || posixly_correct as libc::c_int != 0 && nfiles != 0 as libc::c_int
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(posixly_correct)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1341:21
     |
1341 |                     b"-0123456789Dcdf:is:uw:z\0" as *const u8 as *const libc::c_char,
     |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"-0123456789Dcdf:is:uw:z\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/uniq.rs:1343:21
     |
1343 |                     0 as *mut libc::c_int,
     |                     ^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_int>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1352:17
     |
1352 | /                 if 0 != 0 {
1353 | |                     error(
1354 | |                         0 as libc::c_int,
1355 | |                         0 as libc::c_int,
...    |
1394 | |                     });
1395 | |                 };
     | |_________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1352:20
     |
1352 |                 if 0 != 0 {
     |                    ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1357:29
     |
1357 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1361:21
     |
1361 | /                     if 0 as libc::c_int != 0 as libc::c_int {
1362 | |                         unreachable!();
1363 | |                     } else {};
     | |_____________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1361:24
     |
1361 |                     if 0 as libc::c_int != 0 as libc::c_int {
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1366:25
     |
1366 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1371:33
     |
1371 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1375:25
     |
1375 | /                         if __errstatus != 0 as libc::c_int {
1376 | |                             unreachable!();
1377 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1381:25
     |
1381 |                         let __errstatus: libc::c_int = 0 as libc::c_int;
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1386:33
     |
1386 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1390:25
     |
1390 | /                         if __errstatus != 0 as libc::c_int {
1391 | |                             unreachable!();
1392 | |                         } else {};
     | |_________________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: manual implementation of an assign operation
    --> src/uniq.rs:1399:13
     |
1399 |             optind = optind + 1;
     |             ^^^^^^^^^^^^^^^^^^^ help: replace it with: `optind += 1`
     |
     = note: `-W clippy::assign-op-pattern` implied by `-W clippy::all`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: manual implementation of an assign operation
    --> src/uniq.rs:1401:13
     |
1401 |             nfiles = nfiles + 1;
     |             ^^^^^^^^^^^^^^^^^^^ help: replace it with: `nfiles += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1402:18
     |
1402 |             file[fresh1 as usize] = *argv.offset(fresh0 as isize);
     |                  ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i8` to `i32` may become silently lossy if you later change the type
    --> src/uniq.rs:1407:24
     |
1407 |                     if *optarg.offset(0 as libc::c_int as isize) as libc::c_int
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(*optarg.offset(0 as libc::c_int as isize))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: `0 as *mut _` detected
    --> src/uniq.rs:1411:29
     |
1411 | ...                   0 as *mut *mut libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<*mut libc::c_char>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1414:29
     |
1414 | ...                   b"\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1416:32
     |
1416 | ...                   <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1416:32
     |
1416 | ...                   <= LONGINT_OVERFLOW as libc::c_int as libc::c_uint
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: unnecessary `!=` operation
    --> src/uniq.rs:1424:25
     |
1424 | /                         if 0 != 0 {
1425 | |                             error(
1426 | |                                 0 as libc::c_int,
1427 | |                                 0 as libc::c_int,
...    |
1466 | |                             });
1467 | |                         };
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1424:28
     |
1424 |                         if 0 != 0 {
     |                            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1429:37
     |
1429 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1433:29
     |
1433 | / ...                   if 0 as libc::c_int != 0 as libc::c_int {
1434 | | ...                       unreachable!();
1435 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1433:32
     |
1433 | ...                   if 0 as libc::c_int != 0 as libc::c_int {
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1438:33
     |
1438 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1443:41
     |
1443 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1447:33
     |
1447 | / ...                   if __errstatus != 0 as libc::c_int {
1448 | | ...                       unreachable!();
1449 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1453:33
     |
1453 | ...                   let __errstatus: libc::c_int = 0 as libc::c_int;
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1458:41
     |
1458 | ...                   b"extra operand %s\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"extra operand %s\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1462:33
     |
1462 | / ...                   if __errstatus != 0 as libc::c_int {
1463 | | ...                       unreachable!();
1464 | | ...                   } else {};
     | |_______________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: manual implementation of an assign operation
    --> src/uniq.rs:1471:25
     |
1471 |                         nfiles = nfiles + 1;
     |                         ^^^^^^^^^^^^^^^^^^^ help: replace it with: `nfiles += 1`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#assign_op_pattern

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:1472:30
     |
1472 |                         file[fresh2 as usize] = optarg;
     |                              ^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1477:28
     |
1477 |                         == SFO_NEW as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1477:28
     |
1477 |                         == SFO_NEW as libc::c_int as libc::c_uint
     |                            ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1479:39
     |
1479 |                         skip_fields = 0 as libc::c_int as idx_t;
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1481:32
     |
1481 |                     if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |                                ^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1481:62
     |
1481 |                     if !(!((if (0 as libc::c_int as idx_t) < -(1 as libc::c_int) as idx_t
     |                                                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1482:29
     |
1482 |                           && ((if 1 as libc::c_int != 0 {
     |  _____________________________^
1483 | |                             0 as libc::c_int as libc::c_long
1484 | |                         } else {
1485 | |                             skip_fields
1486 | |                         }) - 1 as libc::c_int as libc::c_long)
     | |__________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1483:29
     |
1483 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1486:30
     |
1486 |                         }) - 1 as libc::c_int as libc::c_long)
     |                              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1487:31
     |
1487 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1488:29
     |
1488 |                           && ((if 1 as libc::c_int != 0 {
     |  _____________________________^
1489 | |                             0 as libc::c_int
1490 | |                         } else {
1491 | |                             10 as libc::c_int
1492 | |                         }) - 1 as libc::c_int) < 0 as libc::c_int
     | |__________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1494:46
     |
1494 | ...                   if skip_fields < 0 as libc::c_int as libc::c_long {
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1495:37
     |
1495 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1496 | | ...                       0 as libc::c_int as libc::c_long
1497 | | ...                   } else {
1498 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1502 | | ...                       }) + 10 as libc::c_int as libc::c_long
1503 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1496:37
     |
1496 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1498:37
     |
1498 | / ...                   (if 1 as libc::c_int != 0 {
1499 | | ...                       0 as libc::c_int as libc::c_long
1500 | | ...                   } else {
1501 | | ...                       -(1 as libc::c_int) as idx_t
1502 | | ...                   }) + 10 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1499:41
     |
1499 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1501:41
     |
1501 | ...                   -(1 as libc::c_int) as idx_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1502:42
     |
1502 | ...                   }) + 10 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1503:38
     |
1503 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1504:39
     |
1504 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1506:37
     |
1506 | / ...                   (skip_fields
1507 | | ...                       < -(1 as libc::c_int) as idx_t
1508 | | ...                           / 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1506 ~                                     i32::from(skip_fields
1507 +                                         < -(1 as libc::c_int) as idx_t
1508 +                                             / 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1507:43
     |
1507 | ...                   < -(1 as libc::c_int) as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1508:47
     |
1508 | ...                   / 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1510:37
     |
1510 | / ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
1511 | | ...                       0 as libc::c_int
1512 | | ...                   } else {
1513 | | ...                       10 as libc::c_int
...    |
1571 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
1572 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1510 ~                                     i32::from((if (if (if ((if 1 as libc::c_int != 0 {
1511 +                                         0 as libc::c_int
1512 +                                     } else {
1513 +                                         10 as libc::c_int
1514 +                                     }) - 1 as libc::c_int) < 0 as libc::c_int
1515 +                                     {
1516 +                                         !(((((if 1 as libc::c_int != 0 {
1517 +                                             0 as libc::c_int
1518 +                                         } else {
1519 +                                             10 as libc::c_int
1520 +                                         }) + 1 as libc::c_int)
1521 +                                             << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1522 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1523 +                                                 .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1524 +                                             - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int)
1525 +                                     } else {
1526 +                                         (if 1 as libc::c_int != 0 {
1527 +                                             0 as libc::c_int
1528 +                                         } else {
1529 +                                             10 as libc::c_int
1530 +                                         }) + 0 as libc::c_int
1531 +                                     }) < 0 as libc::c_int
1532 +                                     {
1533 +                                         ((10 as libc::c_int)
1534 +                                             < -(if ((if 1 as libc::c_int != 0 {
1535 +                                                 0 as libc::c_int
1536 +                                             } else {
1537 +                                                 10 as libc::c_int
1538 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1539 +                                             {
1540 +                                                 ((((if 1 as libc::c_int != 0 {
1541 +                                                     0 as libc::c_int
1542 +                                                 } else {
1543 +                                                     10 as libc::c_int
1544 +                                                 }) + 1 as libc::c_int)
1545 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1546 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1547 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1548 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1549 +                                             } else {
1550 +                                                 (if 1 as libc::c_int != 0 {
1551 +                                                     0 as libc::c_int
1552 +                                                 } else {
1553 +                                                     10 as libc::c_int
1554 +                                                 }) - 1 as libc::c_int
1555 +                                             })) as libc::c_int
1556 +                                     } else {
1557 +                                         ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
1558 +                                     }) != 0
1559 +                                     {
1560 +                                         (if 1 as libc::c_int != 0 {
1561 +                                             0 as libc::c_int
1562 +                                         } else {
1563 +                                             10 as libc::c_int
1564 +                                         }) as libc::c_long + -(1 as libc::c_int) as idx_t
1565 +                                             >> (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1566 +                                                 .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1567 +                                                 .wrapping_sub(1 as libc::c_int as libc::c_ulong)
1568 +                                     } else {
1569 +                                         -(1 as libc::c_int) as idx_t
1570 +                                             / -(10 as libc::c_int) as libc::c_long
1571 +                                     }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1510:38
     |
1510 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  ________________________^
1511 | | ...                       0 as libc::c_int
1512 | | ...                   } else {
1513 | | ...                       10 as libc::c_int
...    |
1570 | | ...                           / -(10 as libc::c_int) as libc::c_long
1571 | | ...                   }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/uniq.rs:1510:51
     |
1510 |   ...                   ((if (if (if ((if 1 as libc::c_int != 0 {
     |  _____________________________________^
1511 | | ...                       0 as libc::c_int
1512 | | ...                   } else {
1513 | | ...                       10 as libc::c_int
1514 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/uniq.rs:1516:46
     |
1516 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1517 | | ...                       0 as libc::c_int
1518 | | ...                   } else {
1519 | | ...                       10 as libc::c_int
1520 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1522:63
     |
1522 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1523:63
     |
1523 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/uniq.rs:1526:41
     |
1526 | / ...                   (if 1 as libc::c_int != 0 {
1527 | | ...                       0 as libc::c_int
1528 | | ...                   } else {
1529 | | ...                       10 as libc::c_int
1530 | | ...                   }) + 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1533:41
     |
1533 | / ...                   ((10 as libc::c_int)
1534 | | ...                       < -(if ((if 1 as libc::c_int != 0 {
1535 | | ...                           0 as libc::c_int
1536 | | ...                       } else {
...    |
1554 | | ...                           }) - 1 as libc::c_int
1555 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1533 ~                                         i32::from((10 as libc::c_int)
1534 +                                             < -(if ((if 1 as libc::c_int != 0 {
1535 +                                                 0 as libc::c_int
1536 +                                             } else {
1537 +                                                 10 as libc::c_int
1538 +                                             }) - 1 as libc::c_int) < 0 as libc::c_int
1539 +                                             {
1540 +                                                 ((((if 1 as libc::c_int != 0 {
1541 +                                                     0 as libc::c_int
1542 +                                                 } else {
1543 +                                                     10 as libc::c_int
1544 +                                                 }) + 1 as libc::c_int)
1545 +                                                     << (::core::mem::size_of::<libc::c_int>() as libc::c_ulong)
1546 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1547 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1548 +                                                     - 1 as libc::c_int) * 2 as libc::c_int + 1 as libc::c_int
1549 +                                             } else {
1550 +                                                 (if 1 as libc::c_int != 0 {
1551 +                                                     0 as libc::c_int
1552 +                                                 } else {
1553 +                                                     10 as libc::c_int
1554 +                                                 }) - 1 as libc::c_int
1555 +                                             }))
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1534:53
     |
1534 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1535 | | ...                       0 as libc::c_int
1536 | | ...                   } else {
1537 | | ...                       10 as libc::c_int
1538 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: unnecessary `!=` operation
    --> src/uniq.rs:1540:52
     |
1540 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1541 | | ...                       0 as libc::c_int
1542 | | ...                   } else {
1543 | | ...                       10 as libc::c_int
1544 | | ...                   }) + 1 as libc::c_int)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1546:71
     |
1546 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1547:71
     |
1547 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: unnecessary `!=` operation
    --> src/uniq.rs:1550:49
     |
1550 | / ...                   (if 1 as libc::c_int != 0 {
1551 | | ...                       0 as libc::c_int
1552 | | ...                   } else {
1553 | | ...                       10 as libc::c_int
1554 | | ...                   }) - 1 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1557:41
     |
1557 | ...                   ((0 as libc::c_int) < 10 as libc::c_int) as libc::c_int
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from((0 as libc::c_int) < 10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1560:41
     |
1560 | / ...                   (if 1 as libc::c_int != 0 {
1561 | | ...                       0 as libc::c_int
1562 | | ...                   } else {
1563 | | ...                       10 as libc::c_int
1564 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1560 ~                                         i64::from((if 1 as libc::c_int != 0 {
1561 +                                             0 as libc::c_int
1562 +                                         } else {
1563 +                                             10 as libc::c_int
1564 ~                                         })) + -(1 as libc::c_int) as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1560:41
     |
1560 | / ...                   (if 1 as libc::c_int != 0 {
1561 | | ...                       0 as libc::c_int
1562 | | ...                   } else {
1563 | | ...                       10 as libc::c_int
1564 | | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1564:62
     |
1564 | ...                   }) as libc::c_long + -(1 as libc::c_int) as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1566:63
     |
1566 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1567:63
     |
1567 | ...                   .wrapping_sub(1 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1569:41
     |
1569 | ...                   -(1 as libc::c_int) as idx_t
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1570:47
     |
1570 | ...                   / -(10 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(10 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1571:43
     |
1571 | ...                   }) <= -(1 as libc::c_int) as libc::c_long - skip_fields)
     |                             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1575:45
     |
1575 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
1576 | | ...                       0 as libc::c_int as libc::c_long
1577 | | ...                   } else {
1578 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1582 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1583 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1576:37
     |
1576 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1578:37
     |
1578 | / ...                   (if 1 as libc::c_int != 0 {
1579 | | ...                       0 as libc::c_int
1580 | | ...                   } else {
1581 | | ...                       10 as libc::c_int
1582 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1578 ~                                     i64::from((if 1 as libc::c_int != 0 {
1579 +                                         0 as libc::c_int
1580 +                                     } else {
1581 +                                         10 as libc::c_int
1582 ~                                     })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1578:37
     |
1578 | / ...                   (if 1 as libc::c_int != 0 {
1579 | | ...                       0 as libc::c_int
1580 | | ...                   } else {
1581 | | ...                       10 as libc::c_int
1582 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1582:58
     |
1582 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1583:38
     |
1583 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1584:39
     |
1584 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1586:42
     |
1586 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1587 | | ...                       0 as libc::c_int as libc::c_long
1588 | | ...                   } else {
1589 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1593 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1594 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1587:41
     |
1587 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1589:41
     |
1589 | / ...                   (if 1 as libc::c_int != 0 {
1590 | | ...                       0 as libc::c_int
1591 | | ...                   } else {
1592 | | ...                       10 as libc::c_int
1593 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1589 ~                                         i64::from((if 1 as libc::c_int != 0 {
1590 +                                             0 as libc::c_int
1591 +                                         } else {
1592 +                                             10 as libc::c_int
1593 ~                                         })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1589:41
     |
1589 | / ...                   (if 1 as libc::c_int != 0 {
1590 | | ...                       0 as libc::c_int
1591 | | ...                   } else {
1592 | | ...                       10 as libc::c_int
1593 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1593:62
     |
1593 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1594:42
     |
1594 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1596:59
     |
1596 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1597:59
     |
1597 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1598:43
     |
1598 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1599:43
     |
1599 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1600:43
     |
1600 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1602:37
     |
1602 | / ...                   (if 1 as libc::c_int != 0 {
1603 | | ...                       0 as libc::c_int as libc::c_long
1604 | | ...                   } else {
1605 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1609 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1610 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1603:41
     |
1603 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1605:41
     |
1605 | / ...                   (if 1 as libc::c_int != 0 {
1606 | | ...                       0 as libc::c_int
1607 | | ...                   } else {
1608 | | ...                       10 as libc::c_int
1609 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1605 ~                                         i64::from((if 1 as libc::c_int != 0 {
1606 +                                             0 as libc::c_int
1607 +                                         } else {
1608 +                                             10 as libc::c_int
1609 ~                                         })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1605:41
     |
1605 | / ...                   (if 1 as libc::c_int != 0 {
1606 | | ...                       0 as libc::c_int
1607 | | ...                   } else {
1608 | | ...                       10 as libc::c_int
1609 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1609:62
     |
1609 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1610:42
     |
1610 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1611:38
     |
1611 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1613:37
     |
1613 | / ...                   (((if 1 as libc::c_int != 0 {
1614 | | ...                       0 as libc::c_int
1615 | | ...                   } else {
1616 | | ...                       10 as libc::c_int
...    |
1653 | | ...                           }) - 1 as libc::c_int as libc::c_long
1654 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1613 ~                                     i32::from(((if 1 as libc::c_int != 0 {
1614 +                                         0 as libc::c_int
1615 +                                     } else {
1616 +                                         10 as libc::c_int
1617 +                                     }) as libc::c_long + 0 as libc::c_int as idx_t)
1618 +                                         < -(if ((if 1 as libc::c_int != 0 {
1619 +                                             0 as libc::c_int as libc::c_long
1620 +                                         } else {
1621 +                                             (if 1 as libc::c_int != 0 {
1622 +                                                 0 as libc::c_int
1623 +                                             } else {
1624 +                                                 10 as libc::c_int
1625 +                                             }) as libc::c_long + 0 as libc::c_int as idx_t
1626 +                                         }) - 1 as libc::c_int as libc::c_long)
1627 +                                             < 0 as libc::c_int as libc::c_long
1628 +                                         {
1629 +                                             ((((if 1 as libc::c_int != 0 {
1630 +                                                 0 as libc::c_int as libc::c_long
1631 +                                             } else {
1632 +                                                 (if 1 as libc::c_int != 0 {
1633 +                                                     0 as libc::c_int
1634 +                                                 } else {
1635 +                                                     10 as libc::c_int
1636 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1637 +                                             }) + 1 as libc::c_int as libc::c_long)
1638 +                                                 << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1639 +                                                     .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1640 +                                                     .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1641 +                                                 - 1 as libc::c_int as libc::c_long)
1642 +                                                 * 2 as libc::c_int as libc::c_long
1643 +                                                 + 1 as libc::c_int as libc::c_long
1644 +                                         } else {
1645 +                                             (if 1 as libc::c_int != 0 {
1646 +                                                 0 as libc::c_int as libc::c_long
1647 +                                             } else {
1648 +                                                 (if 1 as libc::c_int != 0 {
1649 +                                                     0 as libc::c_int
1650 +                                                 } else {
1651 +                                                     10 as libc::c_int
1652 +                                                 }) as libc::c_long + 0 as libc::c_int as idx_t
1653 +                                             }) - 1 as libc::c_int as libc::c_long
1654 +                                         }))
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1613:39
     |
1613 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1614 | | ...                       0 as libc::c_int
1615 | | ...                   } else {
1616 | | ...                       10 as libc::c_int
1617 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1613 ~                                     ((i64::from((if 1 as libc::c_int != 0 {
1614 +                                         0 as libc::c_int
1615 +                                     } else {
1616 +                                         10 as libc::c_int
1617 ~                                     })) + 0 as libc::c_int as idx_t)
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1613:39
     |
1613 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1614 | | ...                       0 as libc::c_int
1615 | | ...                   } else {
1616 | | ...                       10 as libc::c_int
1617 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1617:58
     |
1617 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1618:49
     |
1618 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1619 | | ...                       0 as libc::c_int as libc::c_long
1620 | | ...                   } else {
1621 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1625 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1626 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1619:45
     |
1619 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1621:45
     |
1621 | / ...                   (if 1 as libc::c_int != 0 {
1622 | | ...                       0 as libc::c_int
1623 | | ...                   } else {
1624 | | ...                       10 as libc::c_int
1625 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1621 ~                                             i64::from((if 1 as libc::c_int != 0 {
1622 +                                                 0 as libc::c_int
1623 +                                             } else {
1624 +                                                 10 as libc::c_int
1625 ~                                             })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1621:45
     |
1621 | / ...                   (if 1 as libc::c_int != 0 {
1622 | | ...                       0 as libc::c_int
1623 | | ...                   } else {
1624 | | ...                       10 as libc::c_int
1625 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1625:66
     |
1625 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1626:46
     |
1626 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1627:47
     |
1627 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1629:48
     |
1629 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1630 | | ...                       0 as libc::c_int as libc::c_long
1631 | | ...                   } else {
1632 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1636 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1637 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1630:49
     |
1630 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1632:49
     |
1632 | / ...                   (if 1 as libc::c_int != 0 {
1633 | | ...                       0 as libc::c_int
1634 | | ...                   } else {
1635 | | ...                       10 as libc::c_int
1636 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1632 ~                                                 i64::from((if 1 as libc::c_int != 0 {
1633 +                                                     0 as libc::c_int
1634 +                                                 } else {
1635 +                                                     10 as libc::c_int
1636 ~                                                 })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1632:49
     |
1632 | / ...                   (if 1 as libc::c_int != 0 {
1633 | | ...                       0 as libc::c_int
1634 | | ...                   } else {
1635 | | ...                       10 as libc::c_int
1636 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1636:70
     |
1636 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1637:50
     |
1637 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1639:67
     |
1639 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1640:67
     |
1640 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1641:51
     |
1641 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1642:51
     |
1642 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1643:51
     |
1643 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1645:45
     |
1645 | / ...                   (if 1 as libc::c_int != 0 {
1646 | | ...                       0 as libc::c_int as libc::c_long
1647 | | ...                   } else {
1648 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1652 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t
1653 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1646:49
     |
1646 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1648:49
     |
1648 | / ...                   (if 1 as libc::c_int != 0 {
1649 | | ...                       0 as libc::c_int
1650 | | ...                   } else {
1651 | | ...                       10 as libc::c_int
1652 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1648 ~                                                 i64::from((if 1 as libc::c_int != 0 {
1649 +                                                     0 as libc::c_int
1650 +                                                 } else {
1651 +                                                     10 as libc::c_int
1652 ~                                                 })) + 0 as libc::c_int as idx_t
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1648:49
     |
1648 | / ...                   (if 1 as libc::c_int != 0 {
1649 | | ...                       0 as libc::c_int
1650 | | ...                   } else {
1651 | | ...                       10 as libc::c_int
1652 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1652:70
     |
1652 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1653:50
     |
1653 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1656:37
     |
1656 | / ...                   ((0 as libc::c_int as libc::c_long)
1657 | | ...                       < (if 1 as libc::c_int != 0 {
1658 | | ...                           0 as libc::c_int
1659 | | ...                       } else {
1660 | | ...                           10 as libc::c_int
1661 | | ...                       }) as libc::c_long + 0 as libc::c_int as idx_t)
1662 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1656 ~                                     i32::from((0 as libc::c_int as libc::c_long)
1657 +                                         < (if 1 as libc::c_int != 0 {
1658 +                                             0 as libc::c_int
1659 +                                         } else {
1660 +                                             10 as libc::c_int
1661 +                                         }) as libc::c_long + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1656:38
     |
1656 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1657:43
     |
1657 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1658 | | ...                       0 as libc::c_int
1659 | | ...                   } else {
1660 | | ...                       10 as libc::c_int
1661 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1657 ~                                         < i64::from((if 1 as libc::c_int != 0 {
1658 +                                             0 as libc::c_int
1659 +                                         } else {
1660 +                                             10 as libc::c_int
1661 ~                                         })) + 0 as libc::c_int as idx_t)
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1657:43
     |
1657 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1658 | | ...                       0 as libc::c_int
1659 | | ...                   } else {
1660 | | ...                       10 as libc::c_int
1661 | | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1661:62
     |
1661 | ...                   }) as libc::c_long + 0 as libc::c_int as idx_t)
     |                                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1665:41
     |
1665 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1666 | | ...                       0 as libc::c_int as libc::c_long
1667 | | ...                   } else {
1668 | | ...                       skip_fields
1669 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1666:41
     |
1666 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1669:42
     |
1669 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1670:43
     |
1670 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1672:41
     |
1672 | / ...                   ((0 as libc::c_int as libc::c_long)
1673 | | ...                       < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
     | |___________________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1672 ~                                         i32::from((0 as libc::c_int as libc::c_long)
1673 +                                             < skip_fields + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1672:42
     |
1672 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1673:61
     |
1673 | ...                   < skip_fields + 0 as libc::c_int as idx_t) as libc::c_int
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1675:41
     |
1675 | / ...                   ((0 as libc::c_int as libc::c_long) < skip_fields
1676 | | ...                       && (-(1 as libc::c_int) as libc::c_long
1677 | | ...                           - 0 as libc::c_int as idx_t)
1678 | | ...                           < skip_fields - 1 as libc::c_int as libc::c_long)
1679 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1675 ~                                         i32::from((0 as libc::c_int as libc::c_long) < skip_fields
1676 +                                             && (-(1 as libc::c_int) as libc::c_long
1677 +                                                 - 0 as libc::c_int as idx_t)
1678 +                                                 < skip_fields - 1 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1675:42
     |
1675 | ...                   ((0 as libc::c_int as libc::c_long) < skip_fields
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1676:49
     |
1676 | ...                   && (-(1 as libc::c_int) as libc::c_long
     |                           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1677:51
     |
1677 | ...                   - 0 as libc::c_int as idx_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1678:65
     |
1678 | ...                   < skip_fields - 1 as libc::c_int as libc::c_long)
     |                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1682:37
     |
1682 | / ...                   ((0 as libc::c_int as idx_t
1683 | | ...                       / 10 as libc::c_int as libc::c_long) < skip_fields)
1684 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1682 ~                                     i32::from((0 as libc::c_int as idx_t
1683 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1682:39
     |
1682 | ...                   ((0 as libc::c_int as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1683:43
     |
1683 | ...                   / 10 as libc::c_int as libc::c_long) < skip_fields)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1691:50
     |
1691 | ...                   if skip_fields < 0 as libc::c_int as libc::c_long {
     |                                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1692:49
     |
1692 |   ...                   if (if (if ((if 1 as libc::c_int != 0 {
     |  ___________________________________^
1693 | | ...                       0 as libc::c_int as libc::c_long
1694 | | ...                   } else {
1695 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1699 | | ...                       }) + 0 as libc::c_int as idx_t
1700 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1693:41
     |
1693 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1695:41
     |
1695 | / ...                   (if 1 as libc::c_int != 0 {
1696 | | ...                       0 as libc::c_int as libc::c_long
1697 | | ...                   } else {
1698 | | ...                       skip_fields
1699 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1696:45
     |
1696 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1699:46
     |
1699 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1700:42
     |
1700 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1701:43
     |
1701 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1703:46
     |
1703 |   ...                   !(((((if 1 as libc::c_int != 0 {
     |  ____________________________^
1704 | | ...                       0 as libc::c_int as libc::c_long
1705 | | ...                   } else {
1706 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1710 | | ...                       }) + 0 as libc::c_int as idx_t
1711 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1704:45
     |
1704 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1706:45
     |
1706 | / ...                   (if 1 as libc::c_int != 0 {
1707 | | ...                       0 as libc::c_int as libc::c_long
1708 | | ...                   } else {
1709 | | ...                       skip_fields
1710 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1707:49
     |
1707 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1710:50
     |
1710 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1711:46
     |
1711 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1713:63
     |
1713 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1714:63
     |
1714 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1715:47
     |
1715 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1716:47
     |
1716 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1717:47
     |
1717 | ...                   + 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1719:41
     |
1719 | / ...                   (if 1 as libc::c_int != 0 {
1720 | | ...                       0 as libc::c_int as libc::c_long
1721 | | ...                   } else {
1722 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1726 | | ...                       }) + 0 as libc::c_int as idx_t
1727 | | ...                   }) + 0 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1720:45
     |
1720 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1722:45
     |
1722 | / ...                   (if 1 as libc::c_int != 0 {
1723 | | ...                       0 as libc::c_int as libc::c_long
1724 | | ...                   } else {
1725 | | ...                       skip_fields
1726 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1723:49
     |
1723 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1726:50
     |
1726 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1727:46
     |
1727 | ...                   }) + 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1728:42
     |
1728 | ...                   }) < 0 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1730:41
     |
1730 | / ...                   (((if 1 as libc::c_int != 0 {
1731 | | ...                       0 as libc::c_int as libc::c_long
1732 | | ...                   } else {
1733 | | ...                       skip_fields
...    |
1770 | | ...                           }) - 1 as libc::c_int as libc::c_long
1771 | | ...                       })) as libc::c_int
     | |____________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1730 ~                                         i32::from(((if 1 as libc::c_int != 0 {
1731 +                                             0 as libc::c_int as libc::c_long
1732 +                                         } else {
1733 +                                             skip_fields
1734 +                                         }) + 0 as libc::c_int as idx_t)
1735 +                                             < -(if ((if 1 as libc::c_int != 0 {
1736 +                                                 0 as libc::c_int as libc::c_long
1737 +                                             } else {
1738 +                                                 (if 1 as libc::c_int != 0 {
1739 +                                                     0 as libc::c_int as libc::c_long
1740 +                                                 } else {
1741 +                                                     skip_fields
1742 +                                                 }) + 0 as libc::c_int as idx_t
1743 +                                             }) - 1 as libc::c_int as libc::c_long)
1744 +                                                 < 0 as libc::c_int as libc::c_long
1745 +                                             {
1746 +                                                 ((((if 1 as libc::c_int != 0 {
1747 +                                                     0 as libc::c_int as libc::c_long
1748 +                                                 } else {
1749 +                                                     (if 1 as libc::c_int != 0 {
1750 +                                                         0 as libc::c_int as libc::c_long
1751 +                                                     } else {
1752 +                                                         skip_fields
1753 +                                                     }) + 0 as libc::c_int as idx_t
1754 +                                                 }) + 1 as libc::c_int as libc::c_long)
1755 +                                                     << (::core::mem::size_of::<libc::c_long>() as libc::c_ulong)
1756 +                                                         .wrapping_mul(8 as libc::c_int as libc::c_ulong)
1757 +                                                         .wrapping_sub(2 as libc::c_int as libc::c_ulong))
1758 +                                                     - 1 as libc::c_int as libc::c_long)
1759 +                                                     * 2 as libc::c_int as libc::c_long
1760 +                                                     + 1 as libc::c_int as libc::c_long
1761 +                                             } else {
1762 +                                                 (if 1 as libc::c_int != 0 {
1763 +                                                     0 as libc::c_int as libc::c_long
1764 +                                                 } else {
1765 +                                                     (if 1 as libc::c_int != 0 {
1766 +                                                         0 as libc::c_int as libc::c_long
1767 +                                                     } else {
1768 +                                                         skip_fields
1769 +                                                     }) + 0 as libc::c_int as idx_t
1770 +                                                 }) - 1 as libc::c_int as libc::c_long
1771 +                                             }))
     |

warning: unnecessary `!=` operation
    --> src/uniq.rs:1730:43
     |
1730 |   ...                   (((if 1 as libc::c_int != 0 {
     |  _________________________^
1731 | | ...                       0 as libc::c_int as libc::c_long
1732 | | ...                   } else {
1733 | | ...                       skip_fields
1734 | | ...                   }) + 0 as libc::c_int as idx_t)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1731:45
     |
1731 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1734:46
     |
1734 | ...                   }) + 0 as libc::c_int as idx_t)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1735:53
     |
1735 |   ...                   < -(if ((if 1 as libc::c_int != 0 {
     |  _______________________________^
1736 | | ...                       0 as libc::c_int as libc::c_long
1737 | | ...                   } else {
1738 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1742 | | ...                       }) + 0 as libc::c_int as idx_t
1743 | | ...                   }) - 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1736:49
     |
1736 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1738:49
     |
1738 | / ...                   (if 1 as libc::c_int != 0 {
1739 | | ...                       0 as libc::c_int as libc::c_long
1740 | | ...                   } else {
1741 | | ...                       skip_fields
1742 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1739:53
     |
1739 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1742:54
     |
1742 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1743:50
     |
1743 | ...                   }) - 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1744:51
     |
1744 | ...                   < 0 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1746:52
     |
1746 |   ...                   ((((if 1 as libc::c_int != 0 {
     |  __________________________^
1747 | | ...                       0 as libc::c_int as libc::c_long
1748 | | ...                   } else {
1749 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1753 | | ...                       }) + 0 as libc::c_int as idx_t
1754 | | ...                   }) + 1 as libc::c_int as libc::c_long)
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1747:53
     |
1747 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1749:53
     |
1749 | / ...                   (if 1 as libc::c_int != 0 {
1750 | | ...                       0 as libc::c_int as libc::c_long
1751 | | ...                   } else {
1752 | | ...                       skip_fields
1753 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1750:57
     |
1750 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1753:58
     |
1753 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1754:54
     |
1754 | ...                   }) + 1 as libc::c_int as libc::c_long)
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1756:71
     |
1756 | ...                   .wrapping_mul(8 as libc::c_int as libc::c_ulong)
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `u64` may lose the sign of the value
    --> src/uniq.rs:1757:71
     |
1757 | ...                   .wrapping_sub(2 as libc::c_int as libc::c_ulong))
     |                                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1758:55
     |
1758 | ...                   - 1 as libc::c_int as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1759:55
     |
1759 | ...                   * 2 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(2 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1760:55
     |
1760 | ...                   + 1 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1762:49
     |
1762 | / ...                   (if 1 as libc::c_int != 0 {
1763 | | ...                       0 as libc::c_int as libc::c_long
1764 | | ...                   } else {
1765 | | ...                       (if 1 as libc::c_int != 0 {
...    |
1769 | | ...                       }) + 0 as libc::c_int as idx_t
1770 | | ...                   }) - 1 as libc::c_int as libc::c_long
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1763:53
     |
1763 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1765:53
     |
1765 | / ...                   (if 1 as libc::c_int != 0 {
1766 | | ...                       0 as libc::c_int as libc::c_long
1767 | | ...                   } else {
1768 | | ...                       skip_fields
1769 | | ...                   }) + 0 as libc::c_int as idx_t
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1766:57
     |
1766 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1769:58
     |
1769 | ...                   }) + 0 as libc::c_int as idx_t
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1770:54
     |
1770 | ...                   }) - 1 as libc::c_int as libc::c_long
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1773:41
     |
1773 | / ...                   ((0 as libc::c_int as libc::c_long)
1774 | | ...                       < (if 1 as libc::c_int != 0 {
1775 | | ...                           0 as libc::c_int as libc::c_long
1776 | | ...                       } else {
1777 | | ...                           skip_fields
1778 | | ...                       }) + 0 as libc::c_int as idx_t) as libc::c_int
     | |________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1773 ~                                         i32::from((0 as libc::c_int as libc::c_long)
1774 +                                             < (if 1 as libc::c_int != 0 {
1775 +                                                 0 as libc::c_int as libc::c_long
1776 +                                             } else {
1777 +                                                 skip_fields
1778 +                                             }) + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1773:42
     |
1773 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1774:47
     |
1774 |   ...                   < (if 1 as libc::c_int != 0 {
     |  _________________________^
1775 | | ...                       0 as libc::c_int as libc::c_long
1776 | | ...                   } else {
1777 | | ...                       skip_fields
1778 | | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1775:49
     |
1775 | ...                   0 as libc::c_int as libc::c_long
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1778:50
     |
1778 | ...                   }) + 0 as libc::c_int as idx_t) as libc::c_int
     |                            ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1780:59
     |
1780 | ...                   && skip_fields == -(1 as libc::c_int) as libc::c_long
     |                                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1782:45
     |
1782 |   ...                   if ((if 1 as libc::c_int != 0 {
     |  ___________________________^
1783 | | ...                       0 as libc::c_int
1784 | | ...                   } else {
1785 | | ...                       10 as libc::c_int
1786 | | ...                   }) - 1 as libc::c_int) < 0 as libc::c_int
     | |________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1788:45
     |
1788 | / ...                   ((0 as libc::c_int as libc::c_long)
1789 | | ...                       < 10 as libc::c_int as libc::c_long
1790 | | ...                           + 0 as libc::c_int as idx_t) as libc::c_int
     | |_________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1788 ~                                             i32::from((0 as libc::c_int as libc::c_long)
1789 +                                                 < 10 as libc::c_int as libc::c_long
1790 +                                                     + 0 as libc::c_int as idx_t)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1788:46
     |
1788 | ...                   ((0 as libc::c_int as libc::c_long)
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1789:51
     |
1789 | ...                   < 10 as libc::c_int as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1790:55
     |
1790 | ...                   + 0 as libc::c_int as idx_t) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1792:45
     |
1792 | / ...                   ((-(1 as libc::c_int) as libc::c_long
1793 | | ...                       - 0 as libc::c_int as idx_t)
1794 | | ...                       < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
1795 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1792 ~                                             i32::from((-(1 as libc::c_int) as libc::c_long
1793 +                                                 - 0 as libc::c_int as idx_t)
1794 +                                                 < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1792:47
     |
1792 | ...                   ((-(1 as libc::c_int) as libc::c_long
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1793:51
     |
1793 | ...                   - 0 as libc::c_int as idx_t)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1794:51
     |
1794 | ...                   < (10 as libc::c_int - 1 as libc::c_int) as libc::c_long)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int - 1 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1798:41
     |
1798 | / ...                   (0 as libc::c_int as idx_t / skip_fields
1799 | | ...                       < 10 as libc::c_int as libc::c_long) as libc::c_int
     | |_____________________________________________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1798 ~                                         i32::from(0 as libc::c_int as idx_t / skip_fields
1799 +                                             < 10 as libc::c_int as libc::c_long)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1798:42
     |
1798 | ...                   (0 as libc::c_int as idx_t / skip_fields
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(0 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1799:47
     |
1799 | ...                   < 10 as libc::c_int as libc::c_long) as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1802:37
     |
1802 | / ...                   ((-(1 as libc::c_int) as idx_t
1803 | | ...                       / 10 as libc::c_int as libc::c_long) < skip_fields)
1804 | | ...                       as libc::c_int
     | |________________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless
help: try
     |
1802 ~                                     i32::from((-(1 as libc::c_int) as idx_t
1803 +                                         / 10 as libc::c_int as libc::c_long) < skip_fields)
     |

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1802:39
     |
1802 | ...                   ((-(1 as libc::c_int) as idx_t
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(-(1 as libc::c_int))`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `i32` to `i64` may become silently lossy if you later change the type
    --> src/uniq.rs:1803:43
     |
1803 | ...                   / 10 as libc::c_int as libc::c_long) < skip_fields)
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i64::from(10 as libc::c_int)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/uniq.rs:1811:26
     |
1811 |                         *(&mut skip_fields as *mut idx_t) = fresh7;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(skip_fields)`
     |
     = note: `-W clippy::borrow-as-ptr` implied by `-W clippy::pedantic`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: borrow as raw pointer
    --> src/uniq.rs:1816:26
     |
1816 |                         *(&mut skip_fields as *mut idx_t) = fresh9;
     |                          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(skip_fields)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1817:25
     |
1817 |                         fresh10 as libc::c_int
     |                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(fresh10)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: borrow as raw pointer
    --> src/uniq.rs:1822:30
     |
1822 | ...                   *(&mut skip_fields as *mut idx_t) = fresh11;
     |                        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::addr_of_mut!(skip_fields)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#borrow_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/uniq.rs:1844:61
     |
1844 |                           delimit_groups = delimit_method_map[__xargmatch_internal(
     |  _____________________________________________________________^
1845 | |                             b"--all-repeated\0" as *const u8 as *const libc::c_char,
1846 | |                             optarg,
1847 | |                             delimit_method_string.as_ptr(),
...    |
1851 | |                             1 as libc::c_int != 0,
1852 | |                         ) as usize];
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/uniq.rs:1844:61
     |
1844 |                           delimit_groups = delimit_method_map[__xargmatch_internal(
     |  _____________________________________________________________^
1845 | |                             b"--all-repeated\0" as *const u8 as *const libc::c_char,
1846 | |                             optarg,
1847 | |                             delimit_method_string.as_ptr(),
...    |
1851 | |                             1 as libc::c_int != 0,
1852 | |                         ) as usize];
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1845:29
     |
1845 | ...                   b"--all-repeated\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"--all-repeated\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1848:29
     |
1848 | ...                   delimit_method_map.as_ptr() as *const libc::c_void,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `delimit_method_map.as_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i64` to `usize` may truncate the value on targets with 32-bit wide pointers
    --> src/uniq.rs:1860:56
     |
1860 |                           grouping = grouping_method_map[__xargmatch_internal(
     |  ________________________________________________________^
1861 | |                             b"--group\0" as *const u8 as *const libc::c_char,
1862 | |                             optarg,
1863 | |                             grouping_method_string.as_ptr(),
...    |
1867 | |                             1 as libc::c_int != 0,
1868 | |                         ) as usize];
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `i64` to `usize` may lose the sign of the value
    --> src/uniq.rs:1860:56
     |
1860 |                           grouping = grouping_method_map[__xargmatch_internal(
     |  ________________________________________________________^
1861 | |                             b"--group\0" as *const u8 as *const libc::c_char,
1862 | |                             optarg,
1863 | |                             grouping_method_string.as_ptr(),
...    |
1867 | |                             1 as libc::c_int != 0,
1868 | |                         ) as usize];
     | |__________________________________^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1861:29
     |
1861 | ...                   b"--group\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"--group\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1864:29
     |
1864 | ...                   grouping_method_map.as_ptr() as *const libc::c_void,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `grouping_method_map.as_ptr().cast::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1875:25
     |
1875 | /                         b"invalid number of fields to skip\0" as *const u8
1876 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of fields to skip\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1885:25
     |
1885 | /                         b"invalid number of bytes to skip\0" as *const u8
1886 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of bytes to skip\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1896:25
     |
1896 | /                         b"invalid number of bytes to compare\0" as *const u8
1897 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"invalid number of bytes to compare\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: casting `i32` to `i8` may truncate the value
    --> src/uniq.rs:1901:33
     |
1901 |                     delimiter = '\0' as i32 as libc::c_char;
     |                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1909:25
     |
1909 |                         b"uniq\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"uniq\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1910:25
     |
1910 |                         b"GNU coreutils\0" as *const u8 as *const libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"GNU coreutils\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1913:29
     |
1913 | ...                   b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1914:29
     |
1914 | ...                   b"Richard M. Stallman\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"Richard M. Stallman\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1917:29
     |
1917 | ...                   b"David MacKenzie\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"David MacKenzie\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1918:29
     |
1918 | ...                   b"David MacKenzie\0" as *const u8 as *const libc::c_char,
     |                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(b"David MacKenzie\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1920:25
     |
1920 |                         0 as *mut libc::c_void as *mut libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `(0 as *mut libc::c_void).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: `0 as *mut _` detected
    --> src/uniq.rs:1920:25
     |
1920 |                         0 as *mut libc::c_void as *mut libc::c_char,
     |                         ^^^^^^^^^^^^^^^^^^^^^^ help: try: `std::ptr::null_mut::<libc::c_void>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#zero_ptr

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1930:36
     |
1930 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1930:36
     |
1930 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1931:12
     |
1931 |         && output_option_used as libc::c_int != 0
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_option_used)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1933:9
     |
1933 | /         if 0 != 0 {
1934 | |             error(
1935 | |                 0 as libc::c_int,
1936 | |                 0 as libc::c_int,
...    |
1975 | |             });
1976 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1933:12
     |
1933 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1938:21
     |
1938 | /                     b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8
1939 | |                         as *const libc::c_char,
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1942:13
     |
1942 | /             if 0 as libc::c_int != 0 as libc::c_int {
1943 | |                 unreachable!();
1944 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1942:16
     |
1942 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1947:17
     |
1947 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1952:25
     |
1952 | /                         b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8
1953 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1956:17
     |
1956 | /                 if __errstatus != 0 as libc::c_int {
1957 | |                     unreachable!();
1958 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1962:17
     |
1962 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1967:25
     |
1967 | /                         b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8
1968 | |                             as *const libc::c_char,
     | |__________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"--group is mutually exclusive with -c/-d/-D/-u\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1971:17
     |
1971 | /                 if __errstatus != 0 as libc::c_int {
1972 | |                     unreachable!();
1973 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `u32` may lose the sign of the value
    --> src/uniq.rs:1979:36
     |
1979 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `u32` to `i32` may wrap around the value
    --> src/uniq.rs:1979:36
     |
1979 |     if grouping as libc::c_uint != GM_NONE as libc::c_int as libc::c_uint
     |                                    ^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:1980:12
     |
1980 |         && count_occurrences as libc::c_int != 0
     |            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(count_occurrences)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:1982:9
     |
1982 | /         if 0 != 0 {
1983 | |             error(
1984 | |                 0 as libc::c_int,
1985 | |                 0 as libc::c_int,
...    |
2024 | |             });
2025 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1982:12
     |
1982 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:1987:21
     |
1987 | /                     b"grouping and printing repeat counts is meaningless\0" as *const u8
1988 | |                         as *const libc::c_char,
     | |______________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"grouping and printing repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:1991:13
     |
1991 | /             if 0 as libc::c_int != 0 as libc::c_int {
1992 | |                 unreachable!();
1993 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:1991:16
     |
1991 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:1996:17
     |
1996 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:2001:25
     |
2001 | /                         b"grouping and printing repeat counts is meaningless\0"
2002 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"grouping and printing repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:2005:17
     |
2005 | /                 if __errstatus != 0 as libc::c_int {
2006 | |                     unreachable!();
2007 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:2011:17
     |
2011 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:2016:25
     |
2016 | /                         b"grouping and printing repeat counts is meaningless\0"
2017 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"grouping and printing repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:2020:17
     |
2020 | /                 if __errstatus != 0 as libc::c_int {
2021 | |                     unreachable!();
2022 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:2028:8
     |
2028 |     if count_occurrences as libc::c_int != 0 && output_later_repeated as libc::c_int != 0
     |        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(count_occurrences)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: casting `bool` to `i32` is more cleanly stated with `i32::from(_)`
    --> src/uniq.rs:2028:49
     |
2028 |     if count_occurrences as libc::c_int != 0 && output_later_repeated as libc::c_int != 0
     |                                                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try: `i32::from(output_later_repeated)`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_lossless

warning: unnecessary `!=` operation
    --> src/uniq.rs:2030:9
     |
2030 | /         if 0 != 0 {
2031 | |             error(
2032 | |                 0 as libc::c_int,
2033 | |                 0 as libc::c_int,
...    |
2072 | |             });
2073 | |         };
     | |_________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:2030:12
     |
2030 |         if 0 != 0 {
     |            ^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:2035:21
     |
2035 | /                     b"printing all duplicated lines and repeat counts is meaningless\0"
2036 | |                         as *const u8 as *const libc::c_char,
     | |___________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"printing all duplicated lines and repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:2039:13
     |
2039 | /             if 0 as libc::c_int != 0 as libc::c_int {
2040 | |                 unreachable!();
2041 | |             } else {};
     | |_____________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: equal expressions as operands to `!=`
    --> src/uniq.rs:2039:16
     |
2039 |             if 0 as libc::c_int != 0 as libc::c_int {
     |                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#eq_op

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:2044:17
     |
2044 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:2049:25
     |
2049 | /                         b"printing all duplicated lines and repeat counts is meaningless\0"
2050 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"printing all duplicated lines and repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:2053:17
     |
2053 | /                 if __errstatus != 0 as libc::c_int {
2054 | |                     unreachable!();
2055 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: binding to `_` prefixed variable with no side-effect
    --> src/uniq.rs:2059:17
     |
2059 |                 let __errstatus: libc::c_int = 0 as libc::c_int;
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#no_effect_underscore_binding

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:2064:25
     |
2064 | /                         b"printing all duplicated lines and repeat counts is meaningless\0"
2065 | |                             as *const u8 as *const libc::c_char,
     | |_______________________________________________________________^ help: try `pointer::cast`, a safer alternative: `(b"printing all duplicated lines and repeat counts is meaningless\0" as *const u8).cast::<i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: unnecessary `!=` operation
    --> src/uniq.rs:2068:17
     |
2068 | /                 if __errstatus != 0 as libc::c_int {
2069 | |                     unreachable!();
2070 | |                 } else {};
     | |_________________________^
     |
     = help: change to `==` and swap the blocks of the `if`/`else`
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#if_not_else

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:2077:14
     |
2077 |         file[0 as libc::c_int as usize],
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `i32` to `usize` may lose the sign of the value
    --> src/uniq.rs:2078:14
     |
2078 |         file[1 as libc::c_int as usize],
     |              ^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_sign_loss

warning: casting `usize` to `i32` may truncate the value on targets with 64-bit wide pointers
    --> src/uniq.rs:2096:17
     |
2096 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_truncation

warning: casting `usize` to `i32` may wrap around the value on targets with 32-bit wide pointers
    --> src/uniq.rs:2096:17
     |
2096 |                 (args.len() - 1) as libc::c_int,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#cast_possible_wrap

warning: `as` casting between raw pointers without changing its mutability
    --> src/uniq.rs:2097:17
     |
2097 |                 args.as_mut_ptr() as *mut *mut libc::c_char,
     |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: try `pointer::cast`, a safer alternative: `args.as_mut_ptr().cast::<*mut i8>()`
     |
     = help: for further information visit https://rust-lang.github.io/rust-clippy/master/index.html#ptr_as_ptr

warning: path statement with no effect
   --> src/uniq.rs:341:9
    |
341 |         map_prog;
    |         ^^^^^^^^^
    |
    = note: `#[warn(path_statements)]` on by default

warning: path statement with no effect
   --> src/uniq.rs:889:9
    |
889 |         i;
    |         ^^

warning: path statement with no effect
   --> src/uniq.rs:895:9
    |
895 |         i_0;
    |         ^^^^

warning: path statement with no effect
   --> src/uniq.rs:908:13
    |
908 |             i_1;
    |             ^^^^

warning: path statement with no effect
    --> src/uniq.rs:1229:21
     |
1229 |                     match_count;
     |                     ^^^^^^^^^^^^

warning: `rust` (bin "uniq") generated 623 warnings
    Finished dev [unoptimized + debuginfo] target(s) in 10.97s
